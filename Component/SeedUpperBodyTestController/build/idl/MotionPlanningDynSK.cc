// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "MotionPlanning.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_Planning_mManipPos[] = {
  {"rotation", CORBA::TypeCode::PR_array_tc(9, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)},
  {"position", CORBA::TypeCode::PR_array_tc(3, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Planning_mManipPos
#  undef _0RL_tc_Planning_mManipPos
#endif
static CORBA::TypeCode_ptr _0RL_tc_Planning_mManipPos = CORBA::TypeCode::PR_struct_tc("IDL:Planning/ManipPos:1.0", "ManipPos", _0RL_structmember_Planning_mManipPos, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Planning { 
  const ::CORBA::TypeCode_ptr _tc_ManipPos = _0RL_tc_Planning_mManipPos;
} 
#else
const ::CORBA::TypeCode_ptr Planning::_tc_ManipPos = _0RL_tc_Planning_mManipPos;
#endif


static CORBA::TypeCode_ptr _0RL_tc_Planning_mtheta = CORBA::TypeCode::PR_alias_tc("IDL:Planning/theta:1.0", "theta", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Planning { 
  const ::CORBA::TypeCode_ptr _tc_theta = _0RL_tc_Planning_mtheta;
} 
#else
const ::CORBA::TypeCode_ptr Planning::_tc_theta = _0RL_tc_Planning_mtheta;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Planning { 
  const ::CORBA::TypeCode_ptr _tc_MotionPlanningInterface = CORBA::TypeCode::PR_interface_tc("IDL:Planning/MotionPlanningInterface:1.0", "MotionPlanningInterface", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr Planning::_tc_MotionPlanningInterface = CORBA::TypeCode::PR_interface_tc("IDL:Planning/MotionPlanningInterface:1.0", "MotionPlanningInterface", &_0RL_tcTrack);
#endif

static void _0RL_Planning_mManipPos_marshal_fn(cdrStream& _s, void* _v)
{
  Planning::ManipPos* _p = (Planning::ManipPos*)_v;
  *_p >>= _s;
}
static void _0RL_Planning_mManipPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Planning::ManipPos* _p = new Planning::ManipPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Planning_mManipPos_destructor_fn(void* _v)
{
  Planning::ManipPos* _p = (Planning::ManipPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Planning::ManipPos& _s)
{
  Planning::ManipPos* _p = new Planning::ManipPos(_s);
  _a.PR_insert(_0RL_tc_Planning_mManipPos,
               _0RL_Planning_mManipPos_marshal_fn,
               _0RL_Planning_mManipPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Planning::ManipPos* _sp)
{
  _a.PR_insert(_0RL_tc_Planning_mManipPos,
               _0RL_Planning_mManipPos_marshal_fn,
               _0RL_Planning_mManipPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Planning::ManipPos*& _sp)
{
  return _a >>= (const Planning::ManipPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Planning::ManipPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Planning_mManipPos,
                    _0RL_Planning_mManipPos_unmarshal_fn,
                    _0RL_Planning_mManipPos_marshal_fn,
                    _0RL_Planning_mManipPos_destructor_fn,
                    _v)) {
    _sp = (const Planning::ManipPos*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Planning_mtheta_marshal_fn(cdrStream& _s, void* _v)
{
  Planning::theta* _p = (Planning::theta*)_v;
  *_p >>= _s;
}
static void _0RL_Planning_mtheta_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Planning::theta* _p = new Planning::theta;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Planning_mtheta_destructor_fn(void* _v)
{
  Planning::theta* _p = (Planning::theta*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Planning::theta& _s)
{
  Planning::theta* _p = new Planning::theta(_s);
  _a.PR_insert(_0RL_tc_Planning_mtheta,
               _0RL_Planning_mtheta_marshal_fn,
               _0RL_Planning_mtheta_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Planning::theta* _sp)
{
  _a.PR_insert(_0RL_tc_Planning_mtheta,
               _0RL_Planning_mtheta_marshal_fn,
               _0RL_Planning_mtheta_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Planning::theta*& _sp)
{
  return _a >>= (const Planning::theta*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Planning::theta*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Planning_mtheta,
                    _0RL_Planning_mtheta_unmarshal_fn,
                    _0RL_Planning_mtheta_marshal_fn,
                    _0RL_Planning_mtheta_destructor_fn,
                    _v)) {
    _sp = (const Planning::theta*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Planning_mMotionPlanningInterface_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_Planning_mMotionPlanningInterface_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(Planning::MotionPlanningInterface::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_Planning_mMotionPlanningInterface_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, Planning::MotionPlanningInterface_ptr _o)
{
  Planning::MotionPlanningInterface_ptr _no = Planning::MotionPlanningInterface::_duplicate(_o);
  _a.PR_insert(Planning::_tc_MotionPlanningInterface,
               _0RL_Planning_mMotionPlanningInterface_marshal_fn,
               _0RL_Planning_mMotionPlanningInterface_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, Planning::MotionPlanningInterface_ptr* _op)
{
  _a.PR_insert(Planning::_tc_MotionPlanningInterface,
               _0RL_Planning_mMotionPlanningInterface_marshal_fn,
               _0RL_Planning_mMotionPlanningInterface_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = Planning::MotionPlanningInterface::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Planning::MotionPlanningInterface_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(Planning::_tc_MotionPlanningInterface,
                    _0RL_Planning_mMotionPlanningInterface_unmarshal_fn,
                    _0RL_Planning_mMotionPlanningInterface_marshal_fn,
                    _0RL_Planning_mMotionPlanningInterface_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (Planning::MotionPlanningInterface_ptr)_r->_ptrToObjRef(Planning::MotionPlanningInterface::_PD_repoId);
    else
      _o = Planning::MotionPlanningInterface::_nil();
    return 1;
  }
  return 0;
}

