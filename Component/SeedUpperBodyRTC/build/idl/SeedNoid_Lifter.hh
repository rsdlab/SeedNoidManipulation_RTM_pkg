// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __SeedNoid__Lifter_hh__
#define __SeedNoid__Lifter_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include "ExtendedDataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE SeedNoid_Lifter

_CORBA_MODULE_BEG

  struct LifterAngle {
    typedef _CORBA_ConstrType_Fix_Var<LifterAngle> _var_type;

    
    ::CORBA::Double top;

    ::CORBA::Double bottom;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LifterAngle::_var_type LifterAngle_var;

  typedef LifterAngle& LifterAngle_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LifterAngle;

  struct LimitValue {
    typedef _CORBA_ConstrType_Fix_Var<LimitValue> _var_type;

    
    ::CORBA::Double upper;

    ::CORBA::Double lower;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LimitValue::_var_type LimitValue_var;

  typedef LimitValue& LimitValue_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LimitValue;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LimitSeq;

  class LimitSeq_var;

  class LimitSeq : public _CORBA_Unbounded_Sequence< LimitValue >  {
  public:
    typedef LimitSeq_var _var_type;
    inline LimitSeq() {}
    inline LimitSeq(const LimitSeq& _s)
      : _CORBA_Unbounded_Sequence< LimitValue > (_s) {}

    inline LimitSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< LimitValue > (_max) {}
    inline LimitSeq(_CORBA_ULong _max, _CORBA_ULong _len, LimitValue* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< LimitValue > (_max, _len, _val, _rel) {}

  

    inline LimitSeq& operator = (const LimitSeq& _s) {
      _CORBA_Unbounded_Sequence< LimitValue > ::operator=(_s);
      return *this;
    }
  };

  class LimitSeq_out;

  class LimitSeq_var {
  public:
    inline LimitSeq_var() : _pd_seq(0) {}
    inline LimitSeq_var(LimitSeq* _s) : _pd_seq(_s) {}
    inline LimitSeq_var(const LimitSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new LimitSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~LimitSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline LimitSeq_var& operator = (LimitSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline LimitSeq_var& operator = (const LimitSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new LimitSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline LimitValue& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline LimitSeq* operator -> () { return _pd_seq; }
    inline const LimitSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator LimitSeq& () const { return *_pd_seq; }
#else
    inline operator const LimitSeq& () const { return *_pd_seq; }
    inline operator LimitSeq& () { return *_pd_seq; }
#endif
      
    inline const LimitSeq& in() const { return *_pd_seq; }
    inline LimitSeq&       inout()    { return *_pd_seq; }
    inline LimitSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline LimitSeq* _retn() { LimitSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class LimitSeq_out;
    
  private:
    LimitSeq* _pd_seq;
  };

  class LimitSeq_out {
  public:
    inline LimitSeq_out(LimitSeq*& _s) : _data(_s) { _data = 0; }
    inline LimitSeq_out(LimitSeq_var& _s)
      : _data(_s._pd_seq) { _s = (LimitSeq*) 0; }
    inline LimitSeq_out(const LimitSeq_out& _s) : _data(_s._data) {}
    inline LimitSeq_out& operator = (const LimitSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline LimitSeq_out& operator = (LimitSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator LimitSeq*&()  { return _data; }
    inline LimitSeq*& ptr()       { return _data; }
    inline LimitSeq* operator->() { return _data; }

    inline LimitValue& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    LimitSeq*& _data;

  private:
    LimitSeq_out();
    LimitSeq_out& operator=(const LimitSeq_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DoubleSeq;

  class DoubleSeq_var;

  class DoubleSeq : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef DoubleSeq_var _var_type;
    inline DoubleSeq() {}
    inline DoubleSeq(const DoubleSeq& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline DoubleSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline DoubleSeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline DoubleSeq& operator = (const DoubleSeq& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class DoubleSeq_out;

  class DoubleSeq_var {
  public:
    inline DoubleSeq_var() : _pd_seq(0) {}
    inline DoubleSeq_var(DoubleSeq* _s) : _pd_seq(_s) {}
    inline DoubleSeq_var(const DoubleSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new DoubleSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~DoubleSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline DoubleSeq_var& operator = (DoubleSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline DoubleSeq_var& operator = (const DoubleSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new DoubleSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline DoubleSeq* operator -> () { return _pd_seq; }
    inline const DoubleSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator DoubleSeq& () const { return *_pd_seq; }
#else
    inline operator const DoubleSeq& () const { return *_pd_seq; }
    inline operator DoubleSeq& () { return *_pd_seq; }
#endif
      
    inline const DoubleSeq& in() const { return *_pd_seq; }
    inline DoubleSeq&       inout()    { return *_pd_seq; }
    inline DoubleSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline DoubleSeq* _retn() { DoubleSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class DoubleSeq_out;
    
  private:
    DoubleSeq* _pd_seq;
  };

  class DoubleSeq_out {
  public:
    inline DoubleSeq_out(DoubleSeq*& _s) : _data(_s) { _data = 0; }
    inline DoubleSeq_out(DoubleSeq_var& _s)
      : _data(_s._pd_seq) { _s = (DoubleSeq*) 0; }
    inline DoubleSeq_out(const DoubleSeq_out& _s) : _data(_s._data) {}
    inline DoubleSeq_out& operator = (const DoubleSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline DoubleSeq_out& operator = (DoubleSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator DoubleSeq*&()  { return _data; }
    inline DoubleSeq*& ptr()       { return _data; }
    inline DoubleSeq* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    DoubleSeq*& _data;

  private:
    DoubleSeq_out();
    DoubleSeq_out& operator=(const DoubleSeq_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ULONG;

  typedef ::CORBA::ULong ULONG;
  typedef ::CORBA::ULong_out ULONG_out;

  enum RETURN_VALUE { RETURN_OK, RETURN_MOVE_OK, RETURN_INVALID_PARAMETER, RETURN_NOT_FOUND, RETURN_OUT_OF_RANGE, RETURN_ERROR, RETVAL_ARRIVAL_OK, RETVAL_EMERGENCY, RETVAL_SET_PARAM, RETVAL_MOVE_START, RETVAL_MOVE_STOP /*, __max_RETURN_VALUE=0xffffffff */ };
  typedef RETURN_VALUE& RETURN_VALUE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RETURN_VALUE;

#ifndef __SeedNoid__Lifter_mLifterPose__
#define __SeedNoid__Lifter_mLifterPose__

  class LifterPose;
  class _objref_LifterPose;
  class _impl_LifterPose;
  
  typedef _objref_LifterPose* LifterPose_ptr;
  typedef LifterPose_ptr LifterPoseRef;

  class LifterPose_Helper {
  public:
    typedef LifterPose_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_LifterPose, LifterPose_Helper> LifterPose_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_LifterPose,LifterPose_Helper > LifterPose_out;

#endif

  // interface LifterPose
  class LifterPose {
  public:
    // Declarations for this interface type.
    typedef LifterPose_ptr _ptr_type;
    typedef LifterPose_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_LifterPose :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    RETURN_VALUE sendLifterAngle(const ::SeedNoid_Lifter::LifterAngle& targetLifterAngle);
    RETURN_VALUE sendLifterPose(const ::RTC::Point3D& targetLifterPose);
    RETURN_VALUE getLifterAngle(::SeedNoid_Lifter::LifterAngle& currentLifterAngle);
    RETURN_VALUE getLifterPose(::RTC::Point3D& currentLifterPose);
    RETURN_VALUE getSoftLimitLifter(::SeedNoid_Lifter::LimitSeq_out softLimit);
    RETURN_VALUE setSoftLimitLifter(const ::SeedNoid_Lifter::LimitSeq& softLimit);
    RETURN_VALUE getMaxSpeedLifter(::SeedNoid_Lifter::DoubleSeq_out speed);
    RETURN_VALUE getMinAccelTimeLifter(::CORBA::Double& aclTime);
    RETURN_VALUE pause();
    RETURN_VALUE resume();
    RETURN_VALUE stop();
    RETURN_VALUE setAccelTimeLifter(::CORBA::Double aclTime);
    RETURN_VALUE setMaxSpeedLifter(const ::SeedNoid_Lifter::DoubleSeq& speed);
    RETURN_VALUE setMinAccelTimeLifter(::CORBA::Double aclTime);
    RETURN_VALUE setSpeedLifter(::SeedNoid_Lifter::ULONG spdRatio);
    RETURN_VALUE getSpeedLifter(::SeedNoid_Lifter::ULONG& spdRatio);

    inline _objref_LifterPose()  { _PR_setobj(0); }  // nil
    _objref_LifterPose(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_LifterPose();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_LifterPose(const _objref_LifterPose&);
    _objref_LifterPose& operator = (const _objref_LifterPose&);
    // not implemented

    friend class LifterPose;
  };

  class _pof_LifterPose : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_LifterPose() : _OMNI_NS(proxyObjectFactory)(LifterPose::_PD_repoId) {}
    virtual ~_pof_LifterPose();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_LifterPose :
    public virtual omniServant
  {
  public:
    virtual ~_impl_LifterPose();

    virtual RETURN_VALUE sendLifterAngle(const ::SeedNoid_Lifter::LifterAngle& targetLifterAngle) = 0;
    virtual RETURN_VALUE sendLifterPose(const ::RTC::Point3D& targetLifterPose) = 0;
    virtual RETURN_VALUE getLifterAngle(::SeedNoid_Lifter::LifterAngle& currentLifterAngle) = 0;
    virtual RETURN_VALUE getLifterPose(::RTC::Point3D& currentLifterPose) = 0;
    virtual RETURN_VALUE getSoftLimitLifter(::SeedNoid_Lifter::LimitSeq_out softLimit) = 0;
    virtual RETURN_VALUE setSoftLimitLifter(const ::SeedNoid_Lifter::LimitSeq& softLimit) = 0;
    virtual RETURN_VALUE getMaxSpeedLifter(::SeedNoid_Lifter::DoubleSeq_out speed) = 0;
    virtual RETURN_VALUE getMinAccelTimeLifter(::CORBA::Double& aclTime) = 0;
    virtual RETURN_VALUE pause() = 0;
    virtual RETURN_VALUE resume() = 0;
    virtual RETURN_VALUE stop() = 0;
    virtual RETURN_VALUE setAccelTimeLifter(::CORBA::Double aclTime) = 0;
    virtual RETURN_VALUE setMaxSpeedLifter(const ::SeedNoid_Lifter::DoubleSeq& speed) = 0;
    virtual RETURN_VALUE setMinAccelTimeLifter(::CORBA::Double aclTime) = 0;
    virtual RETURN_VALUE setSpeedLifter(::SeedNoid_Lifter::ULONG spdRatio) = 0;
    virtual RETURN_VALUE getSpeedLifter(::SeedNoid_Lifter::ULONG& spdRatio) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LifterPose;

_CORBA_MODULE_END



_CORBA_MODULE POA_SeedNoid_Lifter
_CORBA_MODULE_BEG

  class LifterPose :
    public virtual SeedNoid_Lifter::_impl_LifterPose,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~LifterPose();

    inline ::SeedNoid_Lifter::LifterPose_ptr _this() {
      return (::SeedNoid_Lifter::LifterPose_ptr) _do_this(::SeedNoid_Lifter::LifterPose::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_SeedNoid_Lifter
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const SeedNoid_Lifter::LifterAngle& _s);
extern void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::LifterAngle* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SeedNoid_Lifter::LifterAngle*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const SeedNoid_Lifter::LifterAngle*& _sp);

extern void operator<<=(::CORBA::Any& _a, const SeedNoid_Lifter::LimitValue& _s);
extern void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::LimitValue* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SeedNoid_Lifter::LimitValue*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const SeedNoid_Lifter::LimitValue*& _sp);

void operator<<=(::CORBA::Any& _a, const SeedNoid_Lifter::LimitSeq& _s);
void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::LimitSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SeedNoid_Lifter::LimitSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const SeedNoid_Lifter::LimitSeq*& _sp);

void operator<<=(::CORBA::Any& _a, const SeedNoid_Lifter::DoubleSeq& _s);
void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::DoubleSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SeedNoid_Lifter::DoubleSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const SeedNoid_Lifter::DoubleSeq*& _sp);

inline void operator >>=(SeedNoid_Lifter::RETURN_VALUE _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (SeedNoid_Lifter::RETURN_VALUE& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= SeedNoid_Lifter::RETVAL_MOVE_STOP) {
    _e = (SeedNoid_Lifter::RETURN_VALUE) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::RETURN_VALUE _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SeedNoid_Lifter::RETURN_VALUE& _s);

void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::LifterPose_ptr _s);
void operator<<=(::CORBA::Any& _a, SeedNoid_Lifter::LifterPose_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, SeedNoid_Lifter::LifterPose_ptr& _s);



inline void
SeedNoid_Lifter::LifterPose::_marshalObjRef(::SeedNoid_Lifter::LifterPose_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_SeedNoid__Lifter
#endif

#endif  // __SeedNoid__Lifter_hh__

