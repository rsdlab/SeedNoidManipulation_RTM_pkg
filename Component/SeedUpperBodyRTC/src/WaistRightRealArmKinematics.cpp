/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-08-15 21:29:11.467169
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_WR_REAL {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))))*(((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eerot[1]=((((((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eerot[2]=((((((((((((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0])))))))));
eetrans[0]=((((((((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.036)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((0.244642)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.240358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.036)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.240358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((0.07)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-0.07)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.07)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-0.07)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))))*(((((0.240358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((0.240358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))+(((-0.244642)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.07)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((-0.07)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((((((0.244642)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))))+(((-0.134)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))*(((((((((((((0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-0.028046)*(IKsin(j[4]))))+(((-0.054778)*(IKcos(j[4]))))+(((((((0.07)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((((((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-0.036)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.240358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.240358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((((((0.07)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))))+(((0.134)*(IKcos(j[2]))*(IKsin(j[0]))))+(((0.304)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.018)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.304)*(IKsin(j[0]))*(IKsin(j[2])))));
eerot[3]=((((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eerot[4]=((((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eerot[5]=((((((((((((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(IKcos(j[1]))*(IKsin(j[0])))));
eetrans[1]=((((((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))*(((((0.240358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((0.240358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))+(((-0.244642)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.07)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((-0.07)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((((((0.244642)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))))+(((-0.134)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.018)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.304)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.036)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((0.244642)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.240358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.036)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.240358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((0.07)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-0.07)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.07)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-0.07)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))))*(((((((((((((0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-0.028046)*(IKsin(j[4]))))+(((-0.054778)*(IKcos(j[4]))))+(((((((0.07)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((((((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-0.036)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.240358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.240358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((((((0.07)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))))+(((-0.304)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.134)*(IKcos(j[0]))*(IKcos(j[2])))));
eerot[6]=((((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))))*(((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((-1.0)*(((((((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((-1.0)*(((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((-1.0)*(((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))))*(IKcos(j[11]))))))*(IKsin(j[1]))))+(((((((((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eerot[7]=((((((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(IKsin(j[1])))));
eerot[8]=((((((((((((-1.0)*(((((-1.0)*(((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((-1.0)*(((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((-1.0)*(((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))))*(IKsin(j[11]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eetrans[2]=((0.1455)+(((((((-0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-0.244642)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((-0.07)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.07)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((0.244642)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.036)*(IKcos(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((-1.0)*(((((0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.036)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((0.240358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((0.240358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((((((0.07)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((-1.0)*(((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.036)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[1]))))+(((((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))*(((((0.240358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((0.240358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))+(((-0.244642)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.07)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((-0.07)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((((((0.244642)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))))+(((-0.134)*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))*(((((((((((((0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-0.028046)*(IKsin(j[4]))))+(((-0.054778)*(IKcos(j[4]))))+(((((((0.07)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((((((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-0.036)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.240358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.240358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((((((0.07)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))))+(((0.018)*(IKsin(j[1]))))+(((0.304)*(IKcos(j[1]))*(IKcos(j[2])))));
}

IKFAST_API int GetNumFreeParameters() { return 6; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 4, 6, 7}; return freeparams; }
IKFAST_API int GetNumJoints() { return 12; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j5,cj5,sj5,htj5,j5mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij5[2], _nj5,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij4[2], _nj4,_ij6[2], _nj6,_ij7[2], _nj7;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0;  _ij7[0] = -1; _ij7[1] = -1; _nj7 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]), htj2=tan(pfree[2]*0.5);
j4=pfree[3]; cj4=cos(pfree[3]); sj4=sin(pfree[3]), htj4=tan(pfree[3]*0.5);
j6=pfree[4]; cj6=cos(pfree[4]); sj6=sin(pfree[4]), htj6=tan(pfree[4]*0.5);
j7=pfree[5]; cj7=cos(pfree[5]); sj7=sin(pfree[5]), htj7=tan(pfree[5]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x0=IKcos(j1);
new_r00=(((r00*x0*(IKcos(j0))))+((r10*x0*(IKsin(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x1=IKcos(j1);
IkReal x2=((1.0)*x1);
new_r01=((((-1.0)*r02*x2*(IKcos(j0))))+(((-1.0)*r12*x2*(IKsin(j0))))+((r22*(IKsin(j1)))));
IkReal x3=IKcos(j1);
new_r02=((((-1.0)*r21*(IKsin(j1))))+((r01*x3*(IKcos(j0))))+((r11*x3*(IKsin(j0)))));
IkReal x4=IKcos(j0);
IkReal x5=IKcos(j1);
IkReal x6=IKsin(j0);
IkReal x7=IKsin(j1);
IkReal x8=(x5*x6);
IkReal x9=(x4*x5);
new_px=((0.018)+(((0.036)*r11*x8))+(((-1.0)*pz*x7))+(((0.1455)*x7))+(((0.036)*r01*x9))+((py*x8))+((px*x9))+(((-0.036)*r21*x7)));
IkReal x10=IKsin(j2);
IkReal x11=IKcos(j0);
IkReal x12=IKsin(j1);
IkReal x13=IKcos(j1);
IkReal x14=IKcos(j2);
IkReal x15=IKsin(j0);
IkReal x16=((0.173619753017279)*x10);
IkReal x17=(r20*x13);
IkReal x18=((0.984812764621894)*x12);
IkReal x19=((0.984812764621894)*x10);
IkReal x20=(x14*x15);
IkReal x21=(x11*x14);
new_r10=(((r00*x11*x12*x16))+(((-0.173619753017279)*r00*x20))+(((-0.984812764621894)*x14*x17))+((r10*x12*x15*x16))+(((-1.0)*r00*x15*x19))+(((-1.0)*r00*x18*x21))+((r10*x11*x19))+((x16*x17))+(((-1.0)*r10*x18*x20))+(((0.173619753017279)*r10*x21)));
IkReal x22=IKsin(j0);
IkReal x23=IKcos(j2);
IkReal x24=IKsin(j1);
IkReal x25=IKcos(j0);
IkReal x26=IKsin(j2);
IkReal x27=IKcos(j1);
IkReal x28=(r02*x25);
IkReal x29=(r12*x22);
IkReal x30=(r22*x27);
IkReal x31=(r02*x22);
IkReal x32=((0.173619753017279)*x23);
IkReal x33=((0.984812764621894)*x26);
IkReal x34=(r12*x25);
IkReal x35=((0.173619753017279)*x24*x26);
IkReal x36=((0.984812764621894)*x23*x24);
new_r11=((((-0.173619753017279)*x26*x30))+(((-1.0)*x29*x35))+((x29*x36))+(((-1.0)*x28*x35))+((x28*x36))+(((-1.0)*x32*x34))+(((-1.0)*x33*x34))+(((0.984812764621894)*x23*x30))+((x31*x33))+((x31*x32)));
IkReal x37=IKsin(j2);
IkReal x38=IKcos(j0);
IkReal x39=IKsin(j1);
IkReal x40=IKcos(j2);
IkReal x41=IKsin(j0);
IkReal x42=IKcos(j1);
IkReal x43=((0.984812764621894)*x41);
IkReal x44=(r01*x37);
IkReal x45=(r11*x39);
IkReal x46=((0.173619753017279)*x41);
IkReal x47=(r01*x40);
IkReal x48=(r11*x38);
IkReal x49=(r21*x42);
IkReal x50=(x38*x39);
new_r12=((((0.173619753017279)*x37*x49))+(((-1.0)*x40*x43*x45))+(((-1.0)*x43*x44))+(((0.984812764621894)*x37*x48))+(((0.173619753017279)*x40*x48))+(((0.173619753017279)*x44*x50))+(((-0.984812764621894)*x47*x50))+(((-0.984812764621894)*x40*x49))+(((-1.0)*x46*x47))+((x37*x45*x46)));
IkReal x51=IKsin(j2);
IkReal x52=IKcos(j1);
IkReal x53=IKcos(j0);
IkReal x54=IKsin(j1);
IkReal x55=IKsin(j0);
IkReal x56=IKcos(j2);
IkReal x57=((0.984812764621894)*py);
IkReal x58=(r21*x52);
IkReal x59=((0.00625031110862206)*x51);
IkReal x60=((0.0354532595263882)*x56);
IkReal x61=((0.173619753017279)*x51);
IkReal x62=((0.0354532595263882)*x51);
IkReal x63=(r01*x55);
IkReal x64=(px*x56);
IkReal x65=(x54*x55);
IkReal x66=(x52*x56);
IkReal x67=(x53*x54);
IkReal x68=(x53*x56);
new_py=((0.322648127349371)+((r01*x59*x67))+(((-1.0)*r01*x60*x67))+(((-0.173619753017279)*x55*x64))+((x58*x59))+(((-0.984812764621894)*pz*x66))+(((-1.0)*r11*x60*x65))+(((-0.00625031110862206)*x56*x63))+((px*x61*x67))+(((-0.0252616740640142)*x51*x52))+((x51*x53*x57))+((pz*x52*x61))+(((-1.0)*x58*x60))+(((-1.0)*x56*x57*x65))+((r11*x59*x65))+(((-0.984812764621894)*x64*x67))+(((0.173619753017279)*py*x68))+(((-0.984812764621894)*px*x51*x55))+((r11*x53*x62))+(((0.00625031110862206)*r11*x68))+((py*x61*x65))+(((0.143290257252486)*x66))+(((-1.0)*x62*x63)));
IkReal x69=IKcos(j2);
IkReal x70=IKsin(j0);
IkReal x71=IKcos(j0);
IkReal x72=IKsin(j1);
IkReal x73=IKsin(j2);
IkReal x74=IKcos(j1);
IkReal x75=((0.984812764621894)*x73);
IkReal x76=(r20*x74);
IkReal x77=(r00*x69);
IkReal x78=((0.173619753017279)*x72);
IkReal x79=(r10*x69);
IkReal x80=((0.173619753017279)*x73);
new_r20=((((0.173619753017279)*x69*x76))+((x71*x77*x78))+((r10*x70*x72*x75))+((x70*x78*x79))+((x75*x76))+((r00*x70*x80))+(((-0.984812764621894)*x70*x77))+(((0.984812764621894)*x71*x79))+((r00*x71*x72*x75))+(((-1.0)*r10*x71*x80)));
IkReal x81=IKcos(j2);
IkReal x82=IKsin(j0);
IkReal x83=IKcos(j0);
IkReal x84=IKsin(j1);
IkReal x85=IKsin(j2);
IkReal x86=IKcos(j1);
IkReal x87=(r02*x83);
IkReal x88=(r12*x82);
IkReal x89=(r22*x86);
IkReal x90=(r02*x82);
IkReal x91=((0.984812764621894)*x81);
IkReal x92=((0.173619753017279)*x85);
IkReal x93=(r12*x83);
IkReal x94=((0.984812764621894)*x84*x85);
IkReal x95=((0.173619753017279)*x81*x84);
new_r21=(((x92*x93))+(((-0.173619753017279)*x81*x89))+(((-1.0)*x90*x92))+(((-1.0)*x91*x93))+(((-0.984812764621894)*x85*x89))+(((-1.0)*x87*x95))+(((-1.0)*x87*x94))+((x90*x91))+(((-1.0)*x88*x94))+(((-1.0)*x88*x95)));
IkReal x96=IKcos(j0);
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j2);
IkReal x99=IKsin(j0);
IkReal x100=IKsin(j2);
IkReal x101=IKcos(j1);
IkReal x102=((0.173619753017279)*x99);
IkReal x103=(r01*x100);
IkReal x104=((0.984812764621894)*x96);
IkReal x105=((0.984812764621894)*x99);
IkReal x106=((0.173619753017279)*x96);
IkReal x107=(r11*x100);
IkReal x108=(r21*x101);
IkReal x109=(x97*x98);
new_r22=(((x103*x104*x97))+(((0.173619753017279)*x108*x98))+((r11*x104*x98))+((r01*x106*x109))+(((-1.0)*x106*x107))+((x102*x103))+(((0.984812764621894)*x100*x108))+((x105*x107*x97))+((r11*x102*x109))+(((-1.0)*r01*x105*x98)));
IkReal x110=IKsin(j0);
IkReal x111=IKsin(j2);
IkReal x112=IKcos(j0);
IkReal x113=IKcos(j2);
IkReal x114=IKsin(j1);
IkReal x115=IKcos(j1);
IkReal x116=((0.0354532595263882)*r11);
IkReal x117=((0.00625031110862206)*r11);
IkReal x118=((0.0354532595263882)*r01);
IkReal x119=((0.00625031110862206)*r01);
IkReal x120=((0.984812764621894)*x112);
IkReal x121=(py*x113);
IkReal x122=((0.173619753017279)*x113);
IkReal x123=(pz*x115);
IkReal x124=((0.984812764621894)*x110);
IkReal x125=(x111*x114);
IkReal x126=(x111*x112);
IkReal x127=(x112*x113);
IkReal x128=(x113*x115);
IkReal x129=(x110*x114);
IkReal x130=(x111*x115);
IkReal x131=(x110*x111);
new_pz=((0.0791845055420809)+(((0.0354532595263882)*r21*x130))+(((-1.0)*x110*x113*x118))+(((-1.0)*px*x113*x124))+(((-0.173619753017279)*py*x126))+((py*x124*x125))+(((0.173619753017279)*px*x131))+((px*x112*x114*x122))+(((0.984812764621894)*x111*x123))+((x122*x123))+(((-1.0)*x117*x126))+(((0.173619753017279)*x121*x129))+((x114*x119*x127))+((x120*x121))+((x113*x117*x129))+(((0.00625031110862206)*r21*x128))+((px*x120*x125))+((x116*x127))+((x110*x116*x125))+(((-0.0252616740640142)*x128))+((x112*x118*x125))+(((-0.143290257252486)*x130))+((x119*x131)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x132=((1.0)*px);
IkReal x133=((1.0)*pz);
IkReal x134=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x134)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x133)));
rxp0_2=((((-1.0)*r10*x132))+((py*r00)));
rxp1_0=((((-1.0)*r21*x134))+((pz*r11)));
rxp1_1=((((-1.0)*r01*x133))+((px*r21)));
rxp1_2=((((-1.0)*r11*x132))+((py*r01)));
rxp2_0=((((-1.0)*r22*x134))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x133)));
rxp2_2=((((-1.0)*r12*x132))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x135=((1.0)*px);
IkReal x136=((1.0)*pp);
IkReal x137=((0.151253443672)*cj7);
IkReal x138=((0.083953203672)*cj7);
IkReal x139=(sj6*sj7);
IkReal x140=(cj6*sj7);
IkReal x141=((0.109556)*py*sj4);
IkReal x142=((0.109556)*cj4*pz);
IkReal x143=((0.056092)*pz*sj4);
IkReal x144=((0.056092)*cj4*py);
IkReal x145=((0.314642)*x140);
IkReal x146=((0.174642)*x140);
IkReal x147=((0.00629284)*x139);
IkReal x148=((0.00349284)*x139);
IkReal x149=((((-1.0)*x146))+px);
IkReal x150=(x145+(((-1.0)*x135)));
IkReal x151=((((0.00978568)*cj7*sj6))+(((-0.235206647344)*sj7)));
IkReal x152=(x145+px);
IkReal x153=((((-1.0)*x146))+(((-1.0)*x135)));
IkReal x154=((((0.112184)*cj4*px))+(((-0.219112)*px*sj4)));
IkReal x155=(x148+x138);
IkReal x156=((0.153084348928)+x147+x137);
IkReal x157=(x142+x143+x136);
IkReal x158=((((-1.0)*x144))+(((-1.0)*x157))+x156+x141);
IkReal x159=((0.084584588928)+(((-1.0)*x144))+(((-1.0)*x157))+(((-1.0)*x155))+x141);
IkReal x160=((((-1.0)*x141))+(((-1.0)*x157))+x156+x144);
IkReal x161=((0.084584588928)+(((-1.0)*x141))+(((-1.0)*x157))+(((-1.0)*x155))+x144);
IkReal gconst0=x150;
IkReal gconst1=x153;
IkReal gconst2=x158;
IkReal gconst3=x151;
IkReal gconst4=x159;
IkReal gconst5=x150;
IkReal gconst6=x153;
IkReal gconst7=x158;
IkReal gconst8=x151;
IkReal gconst9=x159;
IkReal gconst10=x154;
IkReal gconst11=x154;
IkReal gconst12=x154;
IkReal gconst13=x154;
IkReal gconst14=x152;
IkReal gconst15=x149;
IkReal gconst16=x160;
IkReal gconst17=x151;
IkReal gconst18=x161;
IkReal gconst19=x152;
IkReal gconst20=x149;
IkReal gconst21=x160;
IkReal gconst22=x151;
IkReal gconst23=x161;
IkReal x162=cj6*cj6;
IkReal x163=cj7*cj7;
IkReal x164=((1.0)*gconst13);
IkReal x165=(gconst0*gconst4);
IkReal x166=((0.489284)*gconst19);
IkReal x167=((0.978568)*py);
IkReal x168=(gconst5*gconst9);
IkReal x169=(gconst1*gconst10);
IkReal x170=(gconst14*gconst18);
IkReal x171=(gconst15*gconst16);
IkReal x172=((2.0)*py);
IkReal x173=(gconst1*gconst2);
IkReal x174=(cj6*cj7);
IkReal x175=(gconst17*gconst21);
IkReal x176=(gconst20*gconst21);
IkReal x177=(gconst17*gconst22);
IkReal x178=(gconst12*gconst20);
IkReal x179=((0.489284)*gconst15);
IkReal x180=(gconst12*gconst6);
IkReal x181=(gconst19*gconst23);
IkReal x182=(gconst6*gconst7);
IkReal x183=(gconst0*gconst11);
IkReal x184=((1.0)*gconst15);
IkReal x185=(gconst3*gconst8);
IkReal x186=(gconst11*gconst14);
IkReal x187=((1.0)*x182);
IkReal x188=((0.489284)*gconst5*gconst8);
IkReal x189=((0.489284)*gconst1*gconst3);
IkReal x190=(gconst18*gconst22*x174);
IkReal x191=((0.239398832656)*x162*x163);
IkReal x192=(gconst7*x191);
op[0]=((((-1.0)*x170*x181))+(((-1.0)*gconst19*x177*x184))+(((-1.0)*gconst18*gconst21*x191))+((x166*x190))+((x171*x181))+((x170*x176))+((x174*x175*x179))+(((-1.0)*x171*x176)));
op[1]=((((-1.0)*gconst10*x176*x184))+(((-1.0)*gconst21*x170*x172))+((x176*x186))+((gconst11*gconst22*x166*x174))+((gconst15*x172*x177))+(((-1.0)*gconst12*gconst18*x191))+(((-1.0)*x167*x174*x175))+((gconst21*x171*x172))+((gconst16*x172*x176))+((gconst13*gconst19*x171))+(((-1.0)*gconst23*x171*x172))+((gconst10*gconst15*x181))+((gconst23*x170*x172))+((gconst18*x172*x181))+((gconst12*gconst17*x174*x179))+(((-1.0)*gconst18*x172*x176))+(((-1.0)*gconst16*x172*x181))+((gconst19*x172*x177))+((x170*x178))+(((-1.0)*x181*x186))+(((-1.0)*gconst19*x164*x170))+(((-1.0)*x167*x190))+(((-1.0)*gconst11*gconst21*x191))+(((-1.0)*x171*x178)));
op[2]=((((4.0)*gconst18*gconst21*(py*py)))+((gconst11*gconst12*gconst14*gconst20))+(((-0.239398832656)*gconst18*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst17*gconst19*gconst22))+(((-0.239398832656)*gconst21*gconst4*(cj6*cj6)*(cj7*cj7)))+(((4.0)*gconst16*gconst23*(py*py)))+(((2.0)*gconst13*gconst14*gconst18*py))+((gconst15*gconst16*gconst23*gconst5))+(((0.489284)*cj6*cj7*gconst18*gconst19*gconst8))+((gconst10*gconst13*gconst15*gconst19))+(((2.0)*gconst13*gconst18*gconst19*py))+(((-2.0)*gconst10*gconst15*gconst23*py))+(((-2.0)*gconst13*gconst16*gconst19*py))+(((2.0)*gconst12*gconst15*gconst16*py))+(((-1.0)*gconst15*gconst16*gconst21*gconst6))+(((-1.0)*gconst11*gconst13*gconst14*gconst19))+(((-1.0)*gconst1*gconst16*gconst20*gconst21))+(((-1.0)*gconst14*gconst19*gconst23*gconst4))+(((-2.0)*gconst11*gconst14*gconst21*py))+(((-1.0)*gconst15*gconst17*gconst19*gconst8))+(((-4.0)*gconst18*gconst23*(py*py)))+(((-2.0)*gconst11*gconst20*gconst21*py))+((gconst15*gconst19*gconst2*gconst23))+(((-2.0)*gconst13*gconst15*gconst16*py))+((gconst14*gconst20*gconst21*gconst4))+(((-1.0)*gconst14*gconst18*gconst23*gconst5))+(((-0.978568)*cj6*cj7*gconst11*gconst22*py))+(((-4.0)*gconst17*gconst22*(py*py)))+(((-4.0)*gconst16*gconst21*(py*py)))+(((2.0)*gconst12*gconst16*gconst20*py))+((gconst1*gconst16*gconst19*gconst23))+(((-2.0)*gconst12*gconst18*gconst20*py))+(((0.489284)*cj6*cj7*gconst15*gconst17*gconst21))+(((2.0)*gconst11*gconst14*gconst23*py))+(((-2.0)*gconst12*gconst14*gconst18*py))+(((-2.0)*gconst10*gconst19*gconst23*py))+(((-1.0)*gconst10*gconst12*gconst15*gconst20))+(((0.489284)*cj6*cj7*gconst18*gconst22*gconst5))+(((-1.0)*gconst0*gconst18*gconst19*gconst23))+(((0.489284)*cj6*cj7*gconst18*gconst19*gconst22))+(((2.0)*gconst10*gconst15*gconst21*py))+(((2.0)*gconst10*gconst20*gconst21*py))+(((2.0)*gconst11*gconst19*gconst23*py))+((gconst14*gconst18*gconst20*gconst7))+((gconst15*gconst16*gconst19*gconst9))+(((0.489284)*cj6*cj7*gconst15*gconst21*gconst3))+((gconst14*gconst18*gconst21*gconst6))+((gconst0*gconst18*gconst20*gconst21))+(((0.489284)*cj6*cj7*gconst1*gconst17*gconst21))+(((-1.0)*gconst15*gconst2*gconst20*gconst21))+(((0.489284)*cj6*cj7*gconst15*gconst17*gconst7))+(((-1.0)*gconst15*gconst19*gconst22*gconst3))+(((-0.478797665312)*gconst18*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst15*gconst17*gconst22*gconst5))+(((-0.978568)*cj6*cj7*gconst12*gconst17*py))+(((-0.239398832656)*gconst11*gconst12*(cj6*cj6)*(cj7*cj7)))+(((0.489284)*cj6*cj7*gconst19*gconst22*gconst4))+(((-1.0)*gconst14*gconst18*gconst19*gconst9))+(((-1.0)*gconst15*gconst16*gconst20*gconst7)));
op[3]=((((-2.0)*gconst16*gconst23*gconst5*py))+(((2.0)*gconst17*gconst19*gconst8*py))+(((2.0)*gconst16*gconst21*gconst6*py))+(((2.0)*gconst1*gconst17*gconst22*py))+(((2.0)*gconst14*gconst23*gconst4*py))+(((2.0)*gconst19*gconst22*gconst3*py))+(((2.0)*gconst15*gconst22*gconst3*py))+(((0.489284)*cj6*cj7*gconst12*gconst15*gconst17))+((gconst11*gconst14*gconst20*gconst7))+(((2.0)*gconst11*gconst13*gconst14*py))+((gconst10*gconst15*gconst19*gconst9))+(((2.0)*gconst18*gconst23*gconst5*py))+(((-2.0)*gconst18*gconst20*gconst7*py))+(((-1.0)*gconst12*gconst15*gconst2*gconst20))+(((0.489284)*cj6*cj7*gconst11*gconst19*gconst8))+((gconst1*gconst13*gconst16*gconst19))+(((2.0)*gconst14*gconst18*gconst9*py))+(((0.489284)*cj6*cj7*gconst1*gconst12*gconst17))+((gconst13*gconst15*gconst19*gconst2))+(((-1.0)*gconst0*gconst11*gconst19*gconst23))+(((2.0)*gconst2*gconst20*gconst21*py))+(((-4.0)*gconst11*gconst23*(py*py)))+(((-1.0)*gconst1*gconst12*gconst16*gconst20))+(((-0.478797665312)*gconst11*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst13*gconst14*gconst18*gconst5))+(((2.0)*gconst0*gconst18*gconst23*py))+(((-2.0)*gconst15*gconst2*gconst23*py))+(((-1.0)*gconst13*gconst14*gconst19*gconst4))+(((2.0)*gconst10*gconst12*gconst15*py))+((gconst10*gconst15*gconst23*gconst5))+(((-2.0)*gconst10*gconst13*gconst19*py))+(((-2.0)*gconst10*gconst13*gconst15*py))+(((-0.978568)*cj6*cj7*gconst17*gconst7*py))+(((-4.0)*gconst10*gconst21*(py*py)))+(((-0.978568)*cj6*cj7*gconst18*gconst22*py))+(((-2.0)*gconst1*gconst16*gconst23*py))+(((4.0)*gconst13*gconst16*(py*py)))+(((-2.0)*gconst18*gconst21*gconst6*py))+(((-1.0)*gconst0*gconst13*gconst18*gconst19))+(((2.0)*gconst15*gconst17*gconst8*py))+(((2.0)*gconst18*gconst19*gconst9*py))+(((0.489284)*cj6*cj7*gconst11*gconst19*gconst22))+(((2.0)*gconst19*gconst23*gconst4*py))+(((-2.0)*gconst15*gconst16*gconst9*py))+((gconst0*gconst12*gconst18*gconst20))+((gconst12*gconst14*gconst18*gconst6))+(((-1.0)*gconst10*gconst15*gconst21*gconst6))+(((2.0)*gconst15*gconst16*gconst7*py))+(((-0.978568)*cj6*cj7*gconst22*gconst4*py))+(((-2.0)*gconst0*gconst18*gconst21*py))+(((2.0)*gconst10*gconst12*gconst20*py))+(((4.0)*gconst12*gconst18*(py*py)))+(((-2.0)*gconst19*gconst2*gconst23*py))+(((2.0)*gconst1*gconst16*gconst21*py))+(((2.0)*gconst17*gconst22*gconst5*py))+(((-0.978568)*cj6*cj7*gconst18*gconst8*py))+((gconst12*gconst14*gconst20*gconst4))+(((-2.0)*gconst11*gconst12*gconst20*py))+(((2.0)*gconst11*gconst13*gconst19*py))+(((-1.0)*gconst12*gconst15*gconst16*gconst6))+(((-2.0)*gconst20*gconst21*gconst4*py))+(((-4.0)*gconst13*gconst18*(py*py)))+(((-0.239398832656)*gconst11*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst11*gconst14*gconst23*gconst5))+(((-1.0)*gconst11*gconst14*gconst19*gconst9))+(((-2.0)*gconst11*gconst12*gconst14*py))+(((-2.0)*gconst14*gconst18*gconst7*py))+(((-0.239398832656)*gconst12*gconst4*(cj6*cj6)*(cj7*cj7)))+(((-0.478797665312)*gconst12*gconst18*(cj6*cj6)*(cj7*cj7)))+(((-0.978568)*cj6*cj7*gconst17*gconst21*py))+((gconst13*gconst15*gconst16*gconst5))+(((4.0)*gconst10*gconst23*(py*py)))+((gconst11*gconst14*gconst21*gconst6))+(((0.489284)*cj6*cj7*gconst11*gconst22*gconst5))+(((-4.0)*gconst12*gconst16*(py*py)))+(((-0.978568)*cj6*cj7*gconst21*gconst3*py))+(((-2.0)*gconst14*gconst21*gconst4*py))+(((-2.0)*gconst16*gconst19*gconst9*py))+((gconst0*gconst11*gconst20*gconst21))+(((4.0)*gconst11*gconst21*(py*py)))+(((-1.0)*gconst1*gconst10*gconst20*gconst21))+(((2.0)*gconst16*gconst20*gconst7*py))+(((-1.0)*gconst10*gconst15*gconst20*gconst7))+(((0.489284)*cj6*cj7*gconst12*gconst15*gconst3))+((gconst1*gconst10*gconst19*gconst23))+(((2.0)*gconst15*gconst2*gconst21*py)));
op[4]=((((-1.0)*gconst0*gconst19*gconst23*gconst4))+(((-1.0)*gconst15*gconst19*gconst3*gconst8))+(((-4.0)*gconst11*gconst13*(py*py)))+(((-1.0)*gconst1*gconst10*gconst12*gconst20))+(((-1.0)*gconst10*gconst12*gconst15*gconst6))+((gconst14*gconst21*gconst4*gconst6))+(((-4.0)*gconst18*gconst9*(py*py)))+(((-2.0)*gconst13*gconst16*gconst5*py))+(((-4.0)*gconst16*gconst7*(py*py)))+(((-1.0)*gconst14*gconst19*gconst4*gconst9))+(((4.0)*gconst16*gconst9*(py*py)))+(((-1.0)*gconst1*gconst17*gconst19*gconst8))+(((-4.0)*gconst10*gconst12*(py*py)))+(((-1.0)*gconst14*gconst18*gconst5*gconst9))+(((-0.239398832656)*gconst18*gconst21*(cj6*cj6)*(cj7*cj7)))+(((0.489284)*cj6*cj7*gconst19*gconst4*gconst8))+(((-1.0)*gconst1*gconst16*gconst21*gconst6))+(((-0.978568)*cj6*cj7*gconst11*gconst8*py))+(((0.489284)*cj6*cj7*gconst18*gconst19*gconst8))+(((0.489284)*cj6*cj7*gconst22*gconst4*gconst5))+(((4.0)*gconst21*gconst4*(py*py)))+((gconst15*gconst16*gconst5*gconst9))+((gconst0*gconst18*gconst21*gconst6))+(((0.489284)*cj6*cj7*gconst1*gconst21*gconst3))+(((-1.0)*gconst15*gconst2*gconst21*gconst6))+(((-2.0)*gconst0*gconst12*gconst18*py))+((gconst0*gconst20*gconst21*gconst4))+(((-0.478797665312)*gconst21*gconst4*(cj6*cj6)*(cj7*cj7)))+((gconst15*gconst2*gconst23*gconst5))+(((-2.0)*gconst11*gconst14*gconst7*py))+((gconst15*gconst19*gconst2*gconst9))+(((-0.478797665312)*gconst11*gconst12*(cj6*cj6)*(cj7*cj7)))+(((4.0)*gconst18*gconst7*(py*py)))+(((2.0)*gconst1*gconst10*gconst21*py))+(((4.0)*gconst2*gconst23*(py*py)))+(((2.0)*gconst12*gconst2*gconst20*py))+((gconst14*gconst20*gconst4*gconst7))+(((2.0)*gconst13*gconst19*gconst4*py))+(((-0.978568)*cj6*cj7*gconst12*gconst3*py))+(((4.0)*gconst11*gconst12*(py*py)))+(((-2.0)*gconst13*gconst19*gconst2*py))+(((-2.0)*gconst0*gconst11*gconst21*py))+(((-2.0)*gconst12*gconst14*gconst4*py))+(((-1.0)*gconst15*gconst22*gconst3*gconst5))+(((-2.0)*gconst10*gconst23*gconst5*py))+(((-2.0)*gconst10*gconst15*gconst9*py))+((gconst1*gconst16*gconst23*gconst5))+(((-0.239398832656)*gconst4*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-0.978568)*cj6*cj7*gconst11*gconst22*py))+(((-4.0)*gconst22*gconst3*(py*py)))+(((-1.0)*gconst15*gconst17*gconst5*gconst8))+((gconst1*gconst16*gconst19*gconst9))+(((0.489284)*cj6*cj7*gconst15*gconst3*gconst7))+(((-2.0)*gconst11*gconst21*gconst6*py))+(((2.0)*gconst0*gconst13*gconst18*py))+(((-1.0)*gconst15*gconst2*gconst20*gconst7))+(((2.0)*gconst11*gconst14*gconst9*py))+(((-2.0)*gconst12*gconst18*gconst6*py))+(((-4.0)*gconst17*gconst8*(py*py)))+(((-2.0)*gconst1*gconst13*gconst16*py))+(((-1.0)*gconst1*gconst17*gconst22*gconst5))+(((-1.0)*gconst1*gconst19*gconst22*gconst3))+((gconst1*gconst10*gconst13*gconst19))+(((2.0)*gconst11*gconst19*gconst9*py))+(((2.0)*gconst10*gconst21*gconst6*py))+((gconst0*gconst11*gconst12*gconst20))+(((2.0)*gconst10*gconst20*gconst7*py))+(((0.489284)*cj6*cj7*gconst18*gconst22*gconst5))+((gconst14*gconst18*gconst6*gconst7))+(((-4.0)*gconst2*gconst21*(py*py)))+(((2.0)*gconst11*gconst23*gconst5*py))+(((-1.0)*gconst14*gconst23*gconst4*gconst5))+(((2.0)*gconst12*gconst16*gconst6*py))+((gconst11*gconst12*gconst14*gconst6))+(((-1.0)*gconst11*gconst13*gconst14*gconst5))+(((0.489284)*cj6*cj7*gconst15*gconst21*gconst3))+(((0.489284)*cj6*cj7*gconst18*gconst5*gconst8))+((gconst10*gconst13*gconst15*gconst5))+(((-2.0)*gconst1*gconst10*gconst23*py))+(((-2.0)*gconst13*gconst15*gconst2*py))+(((2.0)*gconst1*gconst12*gconst16*py))+(((0.489284)*cj6*cj7*gconst1*gconst17*gconst21))+(((0.489284)*cj6*cj7*gconst1*gconst17*gconst7))+(((2.0)*gconst0*gconst11*gconst23*py))+(((0.489284)*cj6*cj7*gconst15*gconst17*gconst7))+(((2.0)*gconst12*gconst15*gconst2*py))+(((-0.478797665312)*gconst18*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+(((-4.0)*gconst23*gconst4*(py*py)))+(((-2.0)*gconst10*gconst19*gconst9*py))+(((-1.0)*gconst0*gconst18*gconst19*gconst9))+(((-1.0)*gconst15*gconst16*gconst6*gconst7))+(((-1.0)*gconst1*gconst2*gconst20*gconst21))+(((-1.0)*gconst1*gconst16*gconst20*gconst7))+(((-2.0)*gconst11*gconst20*gconst7*py))+(((2.0)*gconst10*gconst15*gconst7*py))+(((-1.0)*gconst0*gconst11*gconst13*gconst19))+((gconst1*gconst19*gconst2*gconst23))+(((-0.978568)*cj6*cj7*gconst12*gconst17*py))+(((0.489284)*cj6*cj7*gconst19*gconst22*gconst4))+((gconst0*gconst18*gconst20*gconst7))+(((2.0)*gconst13*gconst14*gconst4*py))+(((2.0)*gconst13*gconst18*gconst5*py))+(((4.0)*gconst10*gconst13*(py*py)))+(((-2.0)*gconst12*gconst20*gconst4*py)));
op[5]=((((4.0)*gconst10*gconst9*(py*py)))+(((2.0)*gconst18*gconst5*gconst9*py))+(((2.0)*gconst15*gconst3*gconst8*py))+(((4.0)*gconst12*gconst4*(py*py)))+(((-1.0)*gconst1*gconst12*gconst2*gconst20))+(((-1.0)*gconst12*gconst15*gconst2*gconst6))+(((2.0)*gconst16*gconst6*gconst7*py))+(((-4.0)*gconst11*gconst9*(py*py)))+(((-2.0)*gconst1*gconst16*gconst9*py))+(((-1.0)*gconst13*gconst14*gconst4*gconst5))+(((0.489284)*cj6*cj7*gconst11*gconst19*gconst8))+((gconst1*gconst13*gconst16*gconst5))+(((-1.0)*gconst11*gconst14*gconst5*gconst9))+(((0.489284)*cj6*cj7*gconst1*gconst12*gconst17))+(((-0.239398832656)*gconst12*gconst18*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst10*gconst20*gconst7))+(((-2.0)*gconst1*gconst2*gconst23*py))+(((2.0)*gconst19*gconst3*gconst8*py))+(((0.489284)*cj6*cj7*gconst1*gconst12*gconst3))+(((-1.0)*gconst1*gconst10*gconst21*gconst6))+(((2.0)*gconst1*gconst17*gconst8*py))+(((-2.0)*gconst15*gconst2*gconst9*py))+(((-0.478797665312)*gconst12*gconst4*(cj6*cj6)*(cj7*cj7)))+(((2.0)*gconst10*gconst12*gconst6*py))+(((-1.0)*gconst10*gconst15*gconst6*gconst7))+(((2.0)*gconst19*gconst4*gconst9*py))+(((2.0)*gconst0*gconst11*gconst13*py))+(((4.0)*gconst13*gconst2*(py*py)))+(((-2.0)*gconst2*gconst23*gconst5*py))+(((-0.978568)*cj6*cj7*gconst17*gconst7*py))+(((-0.978568)*cj6*cj7*gconst3*gconst7*py))+(((-2.0)*gconst0*gconst11*gconst12*py))+((gconst1*gconst10*gconst23*gconst5))+(((-2.0)*gconst21*gconst4*gconst6*py))+(((0.489284)*cj6*cj7*gconst11*gconst5*gconst8))+(((2.0)*gconst17*gconst5*gconst8*py))+((gconst0*gconst11*gconst20*gconst7))+((gconst1*gconst13*gconst19*gconst2))+((gconst0*gconst12*gconst18*gconst6))+(((-2.0)*gconst0*gconst18*gconst7*py))+((gconst0*gconst12*gconst20*gconst4))+(((-0.978568)*cj6*cj7*gconst22*gconst4*py))+((gconst1*gconst10*gconst19*gconst9))+(((2.0)*gconst1*gconst16*gconst7*py))+(((-1.0)*gconst1*gconst12*gconst16*gconst6))+(((2.0)*gconst2*gconst20*gconst7*py))+(((-2.0)*gconst0*gconst21*gconst4*py))+((gconst11*gconst14*gconst6*gconst7))+(((2.0)*gconst11*gconst13*gconst5*py))+((gconst10*gconst15*gconst5*gconst9))+(((-0.478797665312)*gconst11*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-2.0)*gconst19*gconst2*gconst9*py))+(((-0.978568)*cj6*cj7*gconst18*gconst8*py))+(((-4.0)*gconst10*gconst7*(py*py)))+(((2.0)*gconst22*gconst3*gconst5*py))+(((4.0)*gconst11*gconst7*(py*py)))+(((2.0)*gconst0*gconst23*gconst4*py))+(((-2.0)*gconst11*gconst12*gconst6*py))+(((-0.239398832656)*gconst11*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst0*gconst11*gconst19*gconst9))+((gconst0*gconst11*gconst21*gconst6))+(((-4.0)*gconst12*gconst2*(py*py)))+(((-2.0)*gconst18*gconst6*gconst7*py))+(((-2.0)*gconst16*gconst5*gconst9*py))+(((2.0)*gconst14*gconst4*gconst9*py))+(((2.0)*gconst1*gconst2*gconst21*py))+(((2.0)*gconst15*gconst2*gconst7*py))+(((-1.0)*gconst0*gconst13*gconst18*gconst5))+(((-2.0)*gconst14*gconst4*gconst7*py))+(((-2.0)*gconst10*gconst13*gconst5*py))+(((2.0)*gconst0*gconst18*gconst9*py))+(((-1.0)*gconst0*gconst11*gconst23*gconst5))+(((-4.0)*gconst13*gconst4*(py*py)))+(((-0.978568)*cj6*cj7*gconst4*gconst8*py))+(((-2.0)*gconst1*gconst10*gconst13*py))+(((0.489284)*cj6*cj7*gconst11*gconst22*gconst5))+(((-1.0)*gconst0*gconst13*gconst19*gconst4))+(((-0.978568)*cj6*cj7*gconst21*gconst3*py))+((gconst12*gconst14*gconst4*gconst6))+((gconst13*gconst15*gconst2*gconst5))+(((2.0)*gconst23*gconst4*gconst5*py))+(((2.0)*gconst1*gconst10*gconst12*py))+(((2.0)*gconst2*gconst21*gconst6*py))+(((-2.0)*gconst20*gconst4*gconst7*py))+(((2.0)*gconst1*gconst22*gconst3*py))+(((0.489284)*cj6*cj7*gconst12*gconst15*gconst3)));
op[6]=(((gconst14*gconst4*gconst6*gconst7))+(((-4.0)*gconst2*gconst7*(py*py)))+(((-1.0)*gconst15*gconst3*gconst5*gconst8))+(((2.0)*gconst13*gconst4*gconst5*py))+(((2.0)*gconst11*gconst5*gconst9*py))+(((2.0)*gconst10*gconst6*gconst7*py))+(((2.0)*gconst1*gconst10*gconst7*py))+(((-1.0)*gconst1*gconst10*gconst12*gconst6))+(((-0.239398832656)*gconst18*gconst7*(cj6*cj6)*(cj7*cj7)))+(((2.0)*gconst1*gconst12*gconst2*py))+(((-0.239398832656)*gconst21*gconst4*(cj6*cj6)*(cj7*cj7)))+(((0.489284)*cj6*cj7*gconst19*gconst4*gconst8))+(((-0.978568)*cj6*cj7*gconst11*gconst8*py))+(((2.0)*gconst0*gconst11*gconst9*py))+(((0.489284)*cj6*cj7*gconst22*gconst4*gconst5))+(((-2.0)*gconst0*gconst11*gconst7*py))+((gconst0*gconst20*gconst4*gconst7))+(((0.489284)*cj6*cj7*gconst1*gconst21*gconst3))+(((-4.0)*gconst3*gconst8*(py*py)))+(((-1.0)*gconst1*gconst19*gconst3*gconst8))+((gconst0*gconst11*gconst12*gconst6))+(((2.0)*gconst0*gconst13*gconst4*py))+((gconst0*gconst18*gconst6*gconst7))+(((-2.0)*gconst10*gconst5*gconst9*py))+(((-0.978568)*cj6*cj7*gconst12*gconst3*py))+((gconst1*gconst2*gconst23*gconst5))+(((-0.478797665312)*gconst4*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst22*gconst3*gconst5))+(((-1.0)*gconst0*gconst19*gconst4*gconst9))+(((-1.0)*gconst14*gconst4*gconst5*gconst9))+(((-1.0)*gconst1*gconst2*gconst21*gconst6))+(((-1.0)*gconst0*gconst18*gconst5*gconst9))+(((4.0)*gconst4*gconst7*(py*py)))+(((-1.0)*gconst1*gconst16*gconst6*gconst7))+(((0.489284)*cj6*cj7*gconst15*gconst3*gconst7))+((gconst1*gconst19*gconst2*gconst9))+(((0.489284)*cj6*cj7*gconst4*gconst5*gconst8))+(((4.0)*gconst2*gconst9*(py*py)))+((gconst15*gconst2*gconst5*gconst9))+(((-1.0)*gconst1*gconst17*gconst5*gconst8))+(((2.0)*gconst12*gconst2*gconst6*py))+(((-2.0)*gconst13*gconst2*gconst5*py))+(((-2.0)*gconst1*gconst13*gconst2*py))+((gconst0*gconst21*gconst4*gconst6))+(((-2.0)*gconst0*gconst12*gconst4*py))+(((0.489284)*cj6*cj7*gconst18*gconst5*gconst8))+(((-4.0)*gconst4*gconst9*(py*py)))+(((0.489284)*cj6*cj7*gconst1*gconst17*gconst7))+(((-1.0)*gconst1*gconst2*gconst20*gconst7))+(((-1.0)*gconst15*gconst2*gconst6*gconst7))+(((0.489284)*cj6*cj7*gconst1*gconst3*gconst7))+((gconst1*gconst16*gconst5*gconst9))+(((-0.239398832656)*gconst11*gconst12*(cj6*cj6)*(cj7*cj7)))+((gconst1*gconst10*gconst13*gconst5))+(((-1.0)*gconst0*gconst11*gconst13*gconst5))+(((-2.0)*gconst1*gconst10*gconst9*py))+(((-2.0)*gconst12*gconst4*gconst6*py))+(((-1.0)*gconst0*gconst23*gconst4*gconst5))+(((-2.0)*gconst11*gconst6*gconst7*py)));
op[7]=(((gconst4*x168*x172))+((gconst5*x172*x185))+(((-1.0)*gconst5*x164*x165))+(((-1.0)*x168*x183))+((x168*x169))+(((-1.0)*gconst4*x172*x182))+((gconst2*x172*x182))+(((-1.0)*gconst2*x168*x172))+(((-1.0)*gconst9*x172*x173))+((gconst11*x174*x188))+((gconst1*x172*x185))+((gconst9*x165*x172))+((gconst12*x174*x189))+(((-1.0)*gconst12*gconst4*x191))+((x165*x180))+(((-1.0)*x173*x180))+(((-1.0)*gconst3*gconst7*x167*x174))+(((-1.0)*x169*x187))+((gconst13*gconst5*x173))+((gconst7*x172*x173))+(((-1.0)*gconst7*x165*x172))+((x182*x183))+(((-1.0)*gconst11*x192))+(((-1.0)*gconst4*gconst8*x167*x174)));
op[8]=(((x168*x173))+((gconst7*x174*x189))+(((-1.0)*gconst4*x192))+(((-1.0)*gconst1*gconst5*x185))+((x165*x182))+(((-1.0)*x173*x187))+((gconst4*x174*x188))+(((-1.0)*x165*x168)));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j8eval[2];
IkReal x193=(cj6*cj7);
j8eval[0]=(x193+(((3.43368571428571)*cj6)));
j8eval[1]=IKsign(((((14385.3561548827)*cj6))+(((4189.47957148)*x193))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x194=cj3*cj3;
IkReal x195=py*py;
IkReal x196=px*px;
IkReal x197=pz*pz;
IkReal x198=(cj6*sj4);
IkReal x199=(cj6*cj7);
IkReal x200=(px*sj3);
IkReal x201=((14.8109131810421)*cj4);
IkReal x202=((0.01533784)*cj7);
IkReal x203=(cj4*pz);
IkReal x204=((0.026964321872)*cj6);
IkReal x205=(cj3*py);
IkReal x206=((28.9279113681495)*cj7);
IkReal x207=((50.8560210052701)*cj6);
IkReal x208=(cj7*pz);
IkReal x209=(cj6*x197);
IkReal x210=((264.04680134497)*x196);
IkReal x211=(cj4*x205);
IkReal x212=(cj6*x194);
IkReal x213=((0.480716)*x196);
IkReal x214=((0.14)*x194);
IkReal x215=((906.653729681061)*x196);
j5eval[0]=((((264.04680134497)*x194*x195*x199))+(((-1.0)*x194*x199*x210))+((x199*x210))+(((-1.0)*cj4*x200*x207))+(((-528.09360268994)*x199*x200*x205))+(((99.3293560089383)*cj6*x203))+(((99.3293560089383)*x198*x200))+((x207*x211))+(((906.653729681061)*x195*x212))+((cj6*x215))+x199+(((28.9279113681495)*x199*x203))+(((906.653729681061)*x209))+(((-1.0)*x198*x205*x206))+(((3.43368571428571)*cj6))+(((-99.3293560089383)*x198*x205))+(((-1813.30745936212)*cj6*x200*x205))+((x199*x201*x205))+(((-1.0)*x212*x215))+((x198*x200*x206))+(((264.04680134497)*x197*x199))+(((14.8109131810421)*x198*x208))+(((50.8560210052701)*pz*x198))+(((-1.0)*x199*x200*x201)));
j5eval[1]=IKsign(((((0.052665322096)*cj6*x203))+((x204*x211))+(((-0.28)*x199*x200*x205))+(((-0.961432)*cj6*x200*x205))+(((0.14)*x197*x199))+(((-1.0)*cj4*x200*x204))+(((0.052665322096)*x198*x200))+(((0.480716)*x209))+(((0.14)*x196*x199))+(((0.026964321872)*pz*x198))+(((-1.0)*x196*x199*x214))+((cj6*x213))+(((0.01533784)*x199*x203))+(((0.000530209036)*x199))+(((0.00785288)*x199*x211))+(((0.480716)*x195*x212))+(((0.00785288)*x198*x208))+(((-0.00785288)*cj4*x199*x200))+(((-0.052665322096)*x198*x205))+(((-1.0)*x212*x213))+(((0.0018205711924984)*cj6))+((x198*x200*x202))+((x195*x199*x214))+(((-1.0)*x198*x202*x205))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=((3.5)+(((41.3371201171429)*(sj7*sj7)))+sj7+(((41.3371201171429)*(cj7*cj7)))+(((24.0358)*cj7)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x216=(pz*sj4);
IkReal x217=(px*sj3);
IkReal x218=(cj3*py);
IkReal x219=((0.02)*sj4);
IkReal x220=((0.056092)*cj4);
IkReal x221=(cj4*pz);
IkReal x222=((0.02)*cj4);
IkReal x223=((0.480716)*cj4);
IkReal x224=((0.109556)*sj4);
IkReal x225=((0.480716)*sj4);
IkReal x226=((0.14)*cj4*sj7);
IkReal x227=((0.14)*cj4*cj7);
IkReal x228=((0.14)*sj4*sj7);
IkReal x229=((0.14)*cj7*sj4);
IkReal x230=((-0.025771741048)+(((-0.480716)*x221))+(((-0.00766892)*cj7))+(((0.00392644)*sj7))+((x218*x229))+((x218*x222))+((x218*x225))+((x218*x226))+(((-1.0)*x217*x226))+(((-1.0)*x217*x225))+(((-1.0)*x217*x222))+(((-1.0)*x217*x229))+(((0.14)*sj7*x216))+(((0.02)*x216))+(((-0.14)*cj7*x221)));
IkReal x231=((0.014577720936)+(((0.00766892)*sj7))+(((0.14)*cj7*x216))+(((0.02)*x221))+(((-1.0)*x218*x219))+(((0.14)*sj7*x221))+(((-1.0)*x218*x228))+((x218*x223))+((x218*x227))+((x217*x228))+(((-1.0)*x217*x227))+(((-1.0)*x217*x223))+(((0.00392644)*cj7))+((x217*x219))+(((0.480716)*x216)));
CheckValue<IkReal> x234 = IKatan2WithCheck(IkReal(x230),IkReal(x231),IKFAST_ATAN2_MAGTHRESH);
if(!x234.valid){
continue;
}
IkReal x232=((1.0)*(x234.value));
if((((x230*x230)+(x231*x231))) < -0.00001)
continue;
CheckValue<IkReal> x235=IKPowWithIntegerCheck(IKabs(IKsqrt(((x230*x230)+(x231*x231)))),-1);
if(!x235.valid){
continue;
}
if( (((x235.value)*(((-0.0067094674)+(((-1.0)*(px*px)))+(((-0.109556)*x221))+(((-0.0014)*sj7))+(((-1.0)*x218*x220))+((x218*x224))+(((-1.0)*(pz*pz)))+((x217*x220))+(((-1.0)*x217*x224))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.056092)*x216)))))) < -1-IKFAST_SINCOS_THRESH || (((x235.value)*(((-0.0067094674)+(((-1.0)*(px*px)))+(((-0.109556)*x221))+(((-0.0014)*sj7))+(((-1.0)*x218*x220))+((x218*x224))+(((-1.0)*(pz*pz)))+((x217*x220))+(((-1.0)*x217*x224))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.056092)*x216)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x233=IKasin(((x235.value)*(((-0.0067094674)+(((-1.0)*(px*px)))+(((-0.109556)*x221))+(((-0.0014)*sj7))+(((-1.0)*x218*x220))+((x218*x224))+(((-1.0)*(pz*pz)))+((x217*x220))+(((-1.0)*x217*x224))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.056092)*x216))))));
j5array[0]=((((-1.0)*x232))+(((-1.0)*x233)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x232))+x233);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x236=(cj7*sj4);
IkReal x237=(cj4*sj7);
IkReal x238=(cj5*sj7);
IkReal x239=(cj3*py);
IkReal x240=(cj5*pz);
IkReal x241=(sj5*sj7);
IkReal x242=((4.08760556241365)*sj4);
IkReal x243=((0.223910857497895)*cj7);
IkReal x244=((4.08760556241365)*sj5);
IkReal x245=(px*sj3);
IkReal x246=((4.08760556241365)*cj5);
IkReal x247=((0.114640985603453)*cj7);
IkReal x248=(pz*x244);
IkReal x249=((4.08760556241365)*cj4*cj7);
IkReal x250=((4.08760556241365)*x245);
if( IKabs(((((-1.0)*cj4*cj7*x245*x246))+((cj4*cj7*x239*x246))+((sj5*x243))+(((-1.0)*x237*x239*x244))+((cj4*cj7*x248))+((x236*x244*x245))+((x237*x244*x245))+((x238*x242*x245))+((cj5*x247))+(((0.98248869777062)*sj7))+(((4.08760556241365)*x237*x240))+(((0.223910857497895)*x238))+(((-1.0)*x238*x239*x242))+(((-0.0408760556241365)*cj7))+(((-1.0)*pz*x241*x242))+(((-1.0)*x236*x239*x244))+(((-0.114640985603453)*x241))+(((4.08760556241365)*x236*x240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((cj4*cj7*x239*x244))+(((0.223910857497895)*x241))+(((-0.0408760556241365)*sj7))+((sj5*x247))+(((-1.0)*cj5*x243))+(((-1.0)*cj4*cj7*x244*x245))+((x237*x239*x246))+((x237*x248))+(((-1.0)*x237*x245*x246))+(((-1.0)*x236*x245*x246))+((x236*x248))+(((0.114640985603453)*x238))+((x236*x239*x246))+(((-1.0)*x239*x241*x242))+((pz*x238*x242))+(((-0.98248869777062)*cj7))+(((-1.0)*x240*x249))+((x241*x242*x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj7*x245*x246))+((cj4*cj7*x239*x246))+((sj5*x243))+(((-1.0)*x237*x239*x244))+((cj4*cj7*x248))+((x236*x244*x245))+((x237*x244*x245))+((x238*x242*x245))+((cj5*x247))+(((0.98248869777062)*sj7))+(((4.08760556241365)*x237*x240))+(((0.223910857497895)*x238))+(((-1.0)*x238*x239*x242))+(((-0.0408760556241365)*cj7))+(((-1.0)*pz*x241*x242))+(((-1.0)*x236*x239*x244))+(((-0.114640985603453)*x241))+(((4.08760556241365)*x236*x240))))+IKsqr(((-0.286132389368955)+((cj4*cj7*x239*x244))+(((0.223910857497895)*x241))+(((-0.0408760556241365)*sj7))+((sj5*x247))+(((-1.0)*cj5*x243))+(((-1.0)*cj4*cj7*x244*x245))+((x237*x239*x246))+((x237*x248))+(((-1.0)*x237*x245*x246))+(((-1.0)*x236*x245*x246))+((x236*x248))+(((0.114640985603453)*x238))+((x236*x239*x246))+(((-1.0)*x239*x241*x242))+((pz*x238*x242))+(((-0.98248869777062)*cj7))+(((-1.0)*x240*x249))+((x241*x242*x245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj4*cj7*x245*x246))+((cj4*cj7*x239*x246))+((sj5*x243))+(((-1.0)*x237*x239*x244))+((cj4*cj7*x248))+((x236*x244*x245))+((x237*x244*x245))+((x238*x242*x245))+((cj5*x247))+(((0.98248869777062)*sj7))+(((4.08760556241365)*x237*x240))+(((0.223910857497895)*x238))+(((-1.0)*x238*x239*x242))+(((-0.0408760556241365)*cj7))+(((-1.0)*pz*x241*x242))+(((-1.0)*x236*x239*x244))+(((-0.114640985603453)*x241))+(((4.08760556241365)*x236*x240))), ((-0.286132389368955)+((cj4*cj7*x239*x244))+(((0.223910857497895)*x241))+(((-0.0408760556241365)*sj7))+((sj5*x247))+(((-1.0)*cj5*x243))+(((-1.0)*cj4*cj7*x244*x245))+((x237*x239*x246))+((x237*x248))+(((-1.0)*x237*x245*x246))+(((-1.0)*x236*x245*x246))+((x236*x248))+(((0.114640985603453)*x238))+((x236*x239*x246))+(((-1.0)*x239*x241*x242))+((pz*x238*x242))+(((-0.98248869777062)*cj7))+(((-1.0)*x240*x249))+((x241*x242*x245))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x251=IKcos(j8);
IkReal x252=IKsin(j8);
IkReal x253=(pz*sj4);
IkReal x254=(cj3*py);
IkReal x255=(cj4*pz);
IkReal x256=(sj5*sj7);
IkReal x257=((1.0)*cj5);
IkReal x258=(cj4*cj7);
IkReal x259=(cj5*cj7);
IkReal x260=(cj5*sj7);
IkReal x261=(cj7*sj5);
IkReal x262=(cj4*px*sj3);
IkReal x263=(cj7*x251);
IkReal x264=((0.244642)*x252);
IkReal x265=(px*sj3*sj4);
IkReal x266=((0.244642)*x251);
evalcond[0]=((-0.028046)+(((0.07)*x261))+(((0.07)*x260))+(((-1.0)*cj4*x254))+((x259*x264))+((x260*x266))+(((0.01)*cj5))+(((0.240358)*sj5))+x262+((x261*x266))+(((-1.0)*x256*x264))+(((-1.0)*x253)));
evalcond[1]=((-0.054778)+((sj4*x254))+(((-1.0)*x265))+(((-0.240358)*cj5))+((x260*x264))+(((-1.0)*x259*x266))+(((0.07)*x256))+((x256*x266))+((x261*x264))+(((0.01)*sj5))+(((-0.07)*x259))+(((-1.0)*x255)));
evalcond[2]=((0.118834468928)+(((0.056092)*x262))+(((-0.109556)*x255))+(((0.03365012)*cj7))+(((-0.056092)*cj4*x254))+(((-0.117603323672)*sj7*x252))+(((0.0014)*sj7))+(((-0.056092)*x253))+(((0.109556)*sj4*x254))+(((-1.0)*pp))+(((0.00489284)*cj7*x252))+(((0.03424988)*x251))+(((-0.109556)*x265))+(((0.117603323672)*x263))+(((0.00489284)*sj7*x251)));
evalcond[3]=((-0.07)+((sj4*x254*x259))+(((0.054778)*x256))+(((-1.0)*px*sj3*sj5*x258))+(((-0.240358)*cj7))+((x253*x261))+((x253*x260))+(((-1.0)*sj4*x254*x256))+(((0.028046)*x260))+(((0.028046)*x261))+(((-1.0)*cj7*x257*x265))+(((-0.01)*sj7))+(((-1.0)*sj7*x257*x262))+(((-1.0)*cj7*x255*x257))+((x256*x265))+(((-1.0)*x266))+((x255*x256))+(((-0.054778)*x259))+((sj5*x254*x258))+((cj4*x254*x260)));
evalcond[4]=((((-1.0)*cj7*x253*x257))+(((-0.028046)*x259))+((cj4*x254*x256))+(((-1.0)*x254*x257*x258))+(((-1.0)*sj7*x255*x257))+(((0.01)*cj7))+x264+((x253*x256))+(((-0.240358)*sj7))+(((0.028046)*x256))+(((-0.054778)*x260))+(((-0.054778)*x261))+(((-1.0)*x256*x262))+(((-1.0)*sj7*x257*x265))+((sj4*x254*x261))+((sj4*x254*x260))+(((-1.0)*x261*x265))+(((-1.0)*x255*x261))+((cj5*px*sj3*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1041=(px*sj3);
IkReal x1042=((0.109556)*sj4);
IkReal x1043=((0.056092)*cj4);
IkReal x1044=(cj3*py);
IkReal x1045=((((-0.117603323672)*sj7))+(((0.00489284)*cj7)));
IkReal x1046=((0.03424988)+(((0.00489284)*sj7))+(((0.117603323672)*cj7)));
CheckValue<IkReal> x1049 = IKatan2WithCheck(IkReal(x1046),IkReal(x1045),IKFAST_ATAN2_MAGTHRESH);
if(!x1049.valid){
continue;
}
IkReal x1047=((1.0)*(x1049.value));
if((((x1045*x1045)+(x1046*x1046))) < -0.00001)
continue;
CheckValue<IkReal> x1050=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1045*x1045)+(x1046*x1046)))),-1);
if(!x1050.valid){
continue;
}
if( (((x1050.value)*(((0.118834468928)+((x1042*x1044))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((0.0014)*sj7))+((x1041*x1043))+(((-1.0)*x1043*x1044))+(((-1.0)*x1041*x1042))+(((-1.0)*pp))+(((-0.109556)*cj4*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1050.value)*(((0.118834468928)+((x1042*x1044))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((0.0014)*sj7))+((x1041*x1043))+(((-1.0)*x1043*x1044))+(((-1.0)*x1041*x1042))+(((-1.0)*pp))+(((-0.109556)*cj4*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1048=IKasin(((x1050.value)*(((0.118834468928)+((x1042*x1044))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((0.0014)*sj7))+((x1041*x1043))+(((-1.0)*x1043*x1044))+(((-1.0)*x1041*x1042))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))))));
j8array[0]=((((-1.0)*x1048))+(((-1.0)*x1047)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+x1048+(((-1.0)*x1047)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1051=(cj8*sj7);
IkReal x1052=(sj7*sj8);
IkReal x1053=(cj7*sj8);
IkReal x1054=(cj7*cj8);
j5eval[0]=((87.5869116628571)+(((-84.0023740514286)*x1052))+sj7+(((24.4642)*cj8))+(((84.0023740514286)*x1054))+(((24.0358)*cj7))+(((3.49488571428571)*x1053))+(((3.49488571428571)*x1051)));
j5eval[1]=IKsign(((0.122621676328)+(((0.03365012)*cj7))+(((0.117603323672)*x1054))+(((0.0014)*sj7))+(((0.00489284)*x1051))+(((0.00489284)*x1053))+(((0.03424988)*cj8))+(((-0.117603323672)*x1052))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1055=(cj3*py);
IkReal x1056=((124.61262619574)*sj4);
IkReal x1057=((0.01)*sj7);
IkReal x1058=(cj8*pz);
IkReal x1059=(cj4*cj8);
IkReal x1060=(pz*sj4);
IkReal x1061=(cj4*cj7);
IkReal x1062=(px*sj3);
IkReal x1063=((0.07)*cj4);
IkReal x1064=((122.430496836829)*sj7);
IkReal x1065=(cj4*pz);
IkReal x1066=((0.244642)*sj8);
IkReal x1067=((5.09367263984678)*sj7);
IkReal x1068=((35.6557084789275)*cj4);
IkReal x1069=((0.240358)*sj7);
IkReal x1070=((5.09367263984678)*cj7*sj4);
IkReal x1071=((0.01)*cj7*sj4);
j5eval[0]=((1.0)+((x1055*x1070))+(((-1.0)*sj8*x1056*x1062))+((cj4*x1055*x1067))+(((3.15466451442019)*cj7))+((x1055*x1068))+((x1060*x1067))+(((-5.09367263984678)*pz*x1061))+((x1056*x1058))+(((3.49488571428571)*cj8))+(((122.430496836829)*cj7*x1060))+((sj4*x1062*x1064))+(((-1.0)*x1062*x1070))+(((-1.0)*x1062*x1068))+(((124.61262619574)*x1055*x1059))+(((-124.61262619574)*sj8*x1065))+((sj8*x1055*x1056))+(((35.6557084789275)*x1060))+(((-122.430496836829)*x1061*x1062))+(((122.430496836829)*x1055*x1061))+(((-6.82603043775023)*sj8))+(((6.84935489858498)*sj7))+(((-1.0)*cj4*x1062*x1067))+((x1064*x1065))+(((-124.61262619574)*x1059*x1062))+(((-1.0)*sj4*x1055*x1064)));
j5eval[1]=IKsign(((0.00196322)+((x1055*x1071))+((cj4*x1055*x1057))+(((0.006861229532)*cj8))+((x1055*x1063))+(((0.244642)*sj4*x1058))+(((-0.013400999476)*sj8))+((sj4*x1062*x1069))+(((0.013446790524)*sj7))+(((-1.0)*x1062*x1071))+(((-1.0)*x1062*x1063))+((x1057*x1060))+(((-0.244642)*x1059*x1062))+(((-1.0)*cj4*x1057*x1062))+(((0.244642)*x1055*x1059))+(((0.240358)*cj7*x1060))+(((-0.01)*pz*x1061))+(((0.006193300468)*cj7))+(((0.07)*x1060))+((sj4*x1055*x1066))+(((-0.240358)*x1061*x1062))+(((-1.0)*x1065*x1066))+(((0.240358)*x1055*x1061))+((x1065*x1069))+(((-1.0)*sj4*x1055*x1069))+(((-1.0)*sj4*x1062*x1066))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1072=(cj4*pz);
IkReal x1073=((0.01)*sj7);
IkReal x1074=((62.6836634102325)*cj7);
IkReal x1075=((0.01)*cj7);
IkReal x1076=((62.6836634102325)*sj7);
IkReal x1077=((0.240358)*sj7);
IkReal x1078=(pz*sj4);
IkReal x1079=((63.8009002571418)*sj8);
IkReal x1080=((0.240358)*cj7);
IkReal x1081=((0.244642)*sj8);
IkReal x1082=((2.60792914778091)*cj7);
IkReal x1083=((2.60792914778091)*sj7);
IkReal x1084=((63.8009002571418)*cj8);
IkReal x1085=((0.244642)*cj8);
IkReal x1086=(cj4*px*sj3);
IkReal x1087=(px*sj3*sj4);
IkReal x1088=(cj3*cj4*py);
IkReal x1089=(cj3*py*sj4);
j5eval[0]=((1.0)+((x1079*x1088))+(((3.50682769516438)*cj7))+(((-1.0)*x1074*x1089))+(((-18.2555040344664)*x1089))+((x1082*x1088))+((x1076*x1086))+(((18.2555040344664)*x1087))+((x1078*x1082))+(((-1.0)*x1076*x1078))+((x1078*x1079))+(((3.49488571428571)*cj8))+(((-1.0)*x1079*x1086))+(((-1.0)*x1076*x1088))+(((18.2555040344664)*x1072))+(((-1.0)*x1082*x1086))+(((-1.0)*x1084*x1089))+((x1072*x1074))+((x1074*x1087))+(((-1.0)*x1083*x1089))+(((-1.61516888114624)*sj7))+((x1072*x1083))+((x1072*x1084))+((x1084*x1087))+(((1.7893600486118)*sj8))+((x1083*x1087)));
j5eval[1]=IKsign(((0.00383446)+((x1073*x1087))+(((-1.0)*x1077*x1078))+((x1081*x1088))+((x1078*x1081))+((x1075*x1088))+(((-1.0)*x1081*x1086))+((x1075*x1078))+(((-1.0)*x1080*x1089))+(((-0.07)*x1089))+(((-1.0)*x1073*x1089))+(((0.013446790524)*cj7))+(((0.006861229532)*sj8))+(((-1.0)*x1085*x1089))+((x1080*x1087))+((x1077*x1086))+(((-1.0)*x1077*x1088))+((x1072*x1073))+(((0.07)*x1072))+((x1085*x1087))+(((-0.006193300468)*sj7))+((x1072*x1085))+((x1072*x1080))+(((0.07)*x1087))+(((-1.0)*x1075*x1086))+(((0.013400999476)*cj8))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(IKsign(((0.00383446)+(((-0.244642)*cj3*cj8*py*sj4))+(((-0.240358)*cj3*cj4*py*sj7))+(((0.01)*px*sj3*sj4*sj7))+(((0.240358)*cj7*px*sj3*sj4))+(((-0.07)*cj3*py*sj4))+(((0.01)*cj7*pz*sj4))+(((0.01)*cj4*pz*sj7))+(((-0.01)*cj4*cj7*px*sj3))+(((0.244642)*cj3*cj4*py*sj8))+(((0.240358)*cj4*px*sj3*sj7))+(((0.01)*cj3*cj4*cj7*py))+(((-0.240358)*cj3*cj7*py*sj4))+(((0.244642)*cj8*px*sj3*sj4))+(((0.013446790524)*cj7))+(((0.240358)*cj4*cj7*pz))+(((0.07)*cj4*pz))+(((0.006861229532)*sj8))+(((0.07)*px*sj3*sj4))+(((0.244642)*cj4*cj8*pz))+(((-0.01)*cj3*py*sj4*sj7))+(((0.244642)*pz*sj4*sj8))+(((-0.244642)*cj4*px*sj3*sj8))+(((-0.006193300468)*sj7))+(((0.013400999476)*cj8))+(((-0.240358)*pz*sj4*sj7)))),-1);
if(!x1090.valid){
continue;
}
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal(((0.0014)+(((0.056092)*cj4*px*sj3*sj7))+((cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((0.01712494)*cj7*sj8))+(((0.054778)*cj3*cj4*cj7*py))+(((0.054778)*cj7*pz*sj4))+(((2.0)*cj4*px*pz*sj3*sj4*sj7))+(((0.059849708164)*cj7*cj8*sj8))+(((-1.0)*sj7*(cj4*cj4)*(px*px)))+(((-2.0)*cj7*px*pz*sj3*(cj4*cj4)))+((cj7*px*pz*sj3))+((sj7*(cj4*cj4)*(pz*pz)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.004213421884)*sj7))+((cj4*cj7*sj4*(pz*pz)))+(((0.058801661836)*cj7*cj8*sj7))+(((2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((-0.054778)*cj4*cj7*px*sj3))+(((-0.0007)*(cj7*cj7)))+(((-1.0)*sj7*(pz*pz)))+(((0.03424988)*cj8*sj7))+(((0.00244642)*cj7*sj7*sj8))+(((2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.01682506)*cj7*sj7))+(((-0.00244642)*cj8*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(px*px)))+(((-0.028046)*cj3*cj7*py*sj4))+(((0.058801661836)*sj8*(cj7*cj7)))+(((-2.0)*cj3*cj4*py*pz*sj4*sj7))+(((2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((0.003939883788)*cj7))+(((0.028046)*cj4*cj7*pz))+(((0.028046)*cj7*px*sj3*sj4))+(((-0.056092)*pz*sj4*sj7))+(((0.059849708164)*sj7*(cj8*cj8)))+((sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.056092)*cj3*cj4*py*sj7))+(((-1.0)*cj3*cj7*py*pz))+(((0.00489284)*cj8)))),IkReal(((-0.01682506)+(((0.056092)*cj3*cj4*cj7*py))+(((2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-2.0)*cj4*cj7*px*pz*sj3*sj4))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj7*(cj4*cj4)*(px*px)))+(((-0.000867276212)*sj7))+(((-0.028046)*cj3*py*sj4*sj7))+(((-0.00244642)*cj7*cj8*sj7))+((cj4*sj4*sj7*(pz*pz)))+(((2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((-0.03424988)*cj7*cj8))+(((0.054778)*cj3*cj4*py*sj7))+(((-1.0)*cj3*py*pz*sj7))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.056092)*cj7*pz*sj4))+(((-0.00244642)*sj8*(cj7*cj7)))+(((2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+(((-1.0)*cj4*sj4*sj7*(px*px)))+(((-0.01682506)*(cj7*cj7)))+(((0.054778)*pz*sj4*sj7))+(((-0.059849708164)*cj7*(cj8*cj8)))+(((0.00244642)*sj8))+(((-0.058801661836)*cj8*(cj7*cj7)))+(((0.028046)*cj4*pz*sj7))+((cj7*(pz*pz)))+(((0.059849708164)*cj8*sj7*sj8))+(((-0.061885390048)*cj7))+(((0.058801661836)*cj7*sj7*sj8))+(((-0.058801661836)*cj8))+(((-2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+((px*pz*sj3*sj7))+(((-2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-0.054778)*cj4*px*sj3*sj7))+(((-0.056092)*cj4*cj7*px*sj3))+(((-1.0)*cj7*(cj4*cj4)*(pz*pz)))+((cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.0007)*cj7*sj7))+(((0.01712494)*sj7*sj8))+(((0.028046)*px*sj3*sj4*sj7))+((cj4*sj4*sj7*(cj3*cj3)*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1090.value)))+(x1091.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1092=IKcos(j5);
IkReal x1093=IKsin(j5);
IkReal x1094=(pz*sj4);
IkReal x1095=((0.244642)*sj8);
IkReal x1096=(cj4*pz);
IkReal x1097=((0.14)*sj7);
IkReal x1098=((0.244642)*cj8);
IkReal x1099=(cj7*x1093);
IkReal x1100=((0.480716)*x1093);
IkReal x1101=(cj3*py*sj4);
IkReal x1102=((0.02)*x1093);
IkReal x1103=(cj3*cj4*py);
IkReal x1104=(sj7*x1093);
IkReal x1105=(px*sj3*sj4);
IkReal x1106=(cj7*x1092);
IkReal x1107=(sj7*x1092);
IkReal x1108=(cj4*px*sj3);
IkReal x1109=((0.02)*x1092);
IkReal x1110=((0.480716)*x1092);
IkReal x1111=(x1092*x1108);
evalcond[0]=((-0.028046)+x1108+((x1098*x1107))+(((0.07)*x1099))+(((0.01)*x1092))+(((-1.0)*x1103))+(((-1.0)*x1094))+(((0.07)*x1107))+((x1098*x1099))+(((0.240358)*x1093))+(((-1.0)*x1095*x1104))+((x1095*x1106)));
evalcond[1]=((-0.054778)+x1101+(((-1.0)*x1098*x1106))+((x1098*x1104))+((x1095*x1099))+(((0.01)*x1093))+(((-1.0)*x1105))+(((-1.0)*x1096))+(((-0.07)*x1106))+(((0.07)*x1104))+(((-0.240358)*x1092))+((x1095*x1107)));
evalcond[2]=((-0.07)+(((-1.0)*x1096*x1106))+((x1094*x1107))+(((-0.240358)*cj7))+(((0.054778)*x1104))+(((-1.0)*x1098))+((x1094*x1099))+(((-0.054778)*x1106))+((x1101*x1106))+(((0.028046)*x1107))+((x1104*x1105))+((x1099*x1103))+(((-0.01)*sj7))+(((0.028046)*x1099))+(((-1.0)*x1105*x1106))+((x1096*x1104))+(((-1.0)*x1099*x1108))+(((-1.0)*x1101*x1104))+((x1103*x1107))+(((-1.0)*x1107*x1108)));
evalcond[3]=((((-1.0)*x1096*x1107))+((x1094*x1104))+(((-0.054778)*x1099))+(((-1.0)*x1096*x1099))+x1095+(((-1.0)*x1104*x1108))+(((-1.0)*x1094*x1106))+(((-0.054778)*x1107))+(((0.01)*cj7))+((x1101*x1107))+(((0.028046)*x1104))+((x1099*x1101))+(((-1.0)*x1103*x1106))+(((-0.240358)*sj7))+(((-1.0)*x1105*x1107))+(((-0.028046)*x1106))+(((-1.0)*x1099*x1105))+((x1103*x1104))+((x1106*x1108)));
evalcond[4]=((-0.0067094674)+(((0.14)*x1094*x1099))+(((-0.109556)*x1105))+((x1094*x1100))+((x1094*x1109))+(((-1.0)*(px*px)))+((x1102*x1105))+(((-0.14)*x1096*x1106))+(((0.014577720936)*x1093))+(((0.14)*x1101*x1106))+(((0.14)*x1099*x1103))+(((0.00392644)*x1107))+(((0.056092)*x1108))+(((-0.0014)*sj7))+(((0.00392644)*x1099))+((x1093*x1096*x1097))+((x1101*x1110))+(((-1.0)*x1093*x1097*x1101))+((x1092*x1094*x1097))+(((0.00766892)*x1104))+(((-1.0)*x1108*x1109))+((x1092*x1097*x1103))+(((-1.0)*x1100*x1108))+(((-1.0)*(pz*pz)))+((x1096*x1102))+((x1100*x1103))+(((-0.025771741048)*x1092))+(((-0.109556)*x1096))+(((0.109556)*x1101))+((x1103*x1109))+(((-1.0)*(py*py)))+(((-1.0)*x1097*x1111))+(((-0.14)*x1099*x1108))+(((-0.056092)*x1103))+((x1093*x1097*x1105))+(((-0.03365012)*cj7))+(((-0.14)*x1105*x1106))+(((-1.0)*x1105*x1110))+(((-1.0)*x1096*x1110))+(((-1.0)*x1101*x1102))+(((-0.00766892)*x1106))+(((-0.056092)*x1094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal(((0.01682506)+(((0.056092)*cj3*cj4*cj7*py))+(((2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-2.0)*cj4*cj7*px*pz*sj3*sj4))+(((0.058801661836)*cj8))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj7*(cj4*cj4)*(px*px)))+(((-0.028046)*cj3*py*sj4*sj7))+(((-0.00244642)*cj7*cj8*sj7))+((cj4*sj4*sj7*(pz*pz)))+(((2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((0.054778)*cj3*cj4*py*sj7))+(((-1.0)*cj3*py*pz*sj7))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.056092)*cj7*pz*sj4))+(((-0.00244642)*sj8*(cj7*cj7)))+(((2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+(((0.003939883788)*sj7))+(((-0.01712494)*sj7*sj8))+(((-0.00244642)*sj8))+(((-0.059849708164)*cj8*sj7*sj8))+(((-1.0)*cj4*sj4*sj7*(px*px)))+(((-0.01682506)*(cj7*cj7)))+(((0.054778)*pz*sj4*sj7))+(((-0.058801661836)*cj8*(cj7*cj7)))+(((0.028046)*cj4*pz*sj7))+((cj7*(pz*pz)))+(((0.059849708164)*cj7*(cj8*cj8)))+(((0.058801661836)*cj7*sj7*sj8))+(((-0.059163130048)*cj7))+(((-2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+((px*pz*sj3*sj7))+(((-2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-0.054778)*cj4*px*sj3*sj7))+(((-0.056092)*cj4*cj7*px*sj3))+(((-1.0)*cj7*(cj4*cj4)*(pz*pz)))+((cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.0007)*cj7*sj7))+(((0.028046)*px*sj3*sj4*sj7))+((cj4*sj4*sj7*(cj3*cj3)*(px*px))))),IkReal(((((0.0007)*(cj7*cj7)))+(((0.01712494)*cj7*sj8))+((cj3*cj7*py*pz))+(((0.000867276212)*cj7))+(((-2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((2.0)*cj7*px*pz*sj3*(cj4*cj4)))+(((0.00244642)*cj8*(cj7*cj7)))+(((0.059849708164)*cj7*cj8*sj8))+(((-2.0)*cj4*px*pz*sj3*sj4*sj7))+(((-0.028046)*cj4*cj7*pz))+(((-1.0)*sj7*(cj4*cj4)*(pz*pz)))+(((-0.054778)*cj7*pz*sj4))+(((-0.00244642)*cj7*sj7*sj8))+(((-1.0)*cj7*px*pz*sj3))+(((-2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((0.117603323672)*sj8))+(((-2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((-1.0)*cj4*cj7*sj4*(pz*pz)))+(((-0.116835098212)*sj7))+(((2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.058801661836)*sj8*(cj7*cj7)))+((cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj3*cj4*py*sj7))+(((0.056092)*pz*sj4*sj7))+(((-0.028046)*cj7*px*sj3*sj4))+(((-0.01682506)*cj7*sj7))+((sj7*(cj4*cj4)*(px*px)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((-0.054778)*cj3*cj4*cj7*py))+(((-0.056092)*cj4*px*sj3*sj7))+((sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.058801661836)*cj7*cj8*sj7))+((sj7*(pz*pz)))+(((0.028046)*cj3*cj7*py*sj4))+(((0.054778)*cj4*cj7*px*sj3))+(((0.059849708164)*sj7*(cj8*cj8)))+((cj4*cj7*sj4*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(IKsign(((0.00196322)+(((-0.01)*cj4*cj7*pz))+(((0.01)*cj3*cj7*py*sj4))+(((0.006861229532)*cj8))+(((0.240358)*cj3*cj4*cj7*py))+(((-0.244642)*cj4*cj8*px*sj3))+(((-0.013400999476)*sj8))+(((0.244642)*cj3*py*sj4*sj8))+(((0.240358)*cj7*pz*sj4))+(((-0.240358)*cj4*cj7*px*sj3))+(((0.013446790524)*sj7))+(((0.240358)*cj4*pz*sj7))+(((0.07)*cj3*cj4*py))+(((0.07)*pz*sj4))+(((0.244642)*cj8*pz*sj4))+(((-0.01)*cj4*px*sj3*sj7))+(((0.240358)*px*sj3*sj4*sj7))+(((-0.244642)*cj4*pz*sj8))+(((-0.240358)*cj3*py*sj4*sj7))+(((0.244642)*cj3*cj4*cj8*py))+(((0.006193300468)*cj7))+(((-0.244642)*px*sj3*sj4*sj8))+(((0.01)*pz*sj4*sj7))+(((-0.07)*cj4*px*sj3))+(((-0.01)*cj7*px*sj3*sj4))+(((0.01)*cj3*cj4*py*sj7)))),-1);
if(!x1113.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1112.value)+(((1.5707963267949)*(x1113.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1114=IKcos(j5);
IkReal x1115=IKsin(j5);
IkReal x1116=(pz*sj4);
IkReal x1117=((0.244642)*sj8);
IkReal x1118=(cj4*pz);
IkReal x1119=((0.14)*sj7);
IkReal x1120=((0.244642)*cj8);
IkReal x1121=(cj7*x1115);
IkReal x1122=((0.480716)*x1115);
IkReal x1123=(cj3*py*sj4);
IkReal x1124=((0.02)*x1115);
IkReal x1125=(cj3*cj4*py);
IkReal x1126=(sj7*x1115);
IkReal x1127=(px*sj3*sj4);
IkReal x1128=(cj7*x1114);
IkReal x1129=(sj7*x1114);
IkReal x1130=(cj4*px*sj3);
IkReal x1131=((0.02)*x1114);
IkReal x1132=((0.480716)*x1114);
IkReal x1133=(x1114*x1130);
evalcond[0]=((-0.028046)+x1130+((x1120*x1129))+((x1120*x1121))+(((-1.0)*x1117*x1126))+(((0.07)*x1121))+(((0.07)*x1129))+(((-1.0)*x1116))+(((-1.0)*x1125))+((x1117*x1128))+(((0.240358)*x1115))+(((0.01)*x1114)));
evalcond[1]=((-0.054778)+x1123+((x1120*x1126))+(((0.07)*x1126))+(((-1.0)*x1118))+(((-0.240358)*x1114))+(((-1.0)*x1127))+((x1117*x1121))+((x1117*x1129))+(((-1.0)*x1120*x1128))+(((0.01)*x1115))+(((-0.07)*x1128)));
evalcond[2]=((-0.07)+(((-1.0)*x1129*x1130))+(((0.054778)*x1126))+(((-0.240358)*cj7))+(((-0.054778)*x1128))+((x1121*x1125))+((x1125*x1129))+(((-0.01)*sj7))+(((-1.0)*x1121*x1130))+(((-1.0)*x1127*x1128))+(((-1.0)*x1118*x1128))+(((-1.0)*x1120))+(((0.028046)*x1129))+(((0.028046)*x1121))+(((-1.0)*x1123*x1126))+((x1116*x1121))+((x1116*x1129))+((x1123*x1128))+((x1118*x1126))+((x1126*x1127)));
evalcond[3]=(x1117+(((-0.054778)*x1121))+(((-0.054778)*x1129))+(((-1.0)*x1125*x1128))+((x1121*x1123))+(((0.01)*cj7))+((x1125*x1126))+(((-1.0)*x1121*x1127))+(((-0.240358)*sj7))+(((-1.0)*x1126*x1130))+(((-1.0)*x1127*x1129))+(((-1.0)*x1118*x1129))+(((-1.0)*x1118*x1121))+(((0.028046)*x1126))+((x1128*x1130))+(((-1.0)*x1116*x1128))+((x1116*x1126))+((x1123*x1129))+(((-0.028046)*x1128)));
evalcond[4]=((-0.0067094674)+(((0.14)*x1121*x1125))+(((-1.0)*(px*px)))+(((-0.109556)*x1118))+(((-0.109556)*x1127))+((x1115*x1119*x1127))+(((-0.14)*x1127*x1128))+(((-1.0)*x1122*x1130))+(((-0.00766892)*x1128))+(((-0.14)*x1118*x1128))+((x1114*x1116*x1119))+(((-1.0)*x1127*x1132))+(((0.056092)*x1130))+(((-1.0)*x1130*x1131))+(((-0.0014)*sj7))+(((-1.0)*x1123*x1124))+(((-0.025771741048)*x1114))+(((0.00766892)*x1126))+(((0.014577720936)*x1115))+(((0.14)*x1123*x1128))+((x1124*x1127))+((x1125*x1131))+(((-0.056092)*x1125))+(((0.00392644)*x1129))+(((0.00392644)*x1121))+(((-1.0)*(pz*pz)))+(((-0.14)*x1121*x1130))+((x1116*x1131))+((x1115*x1118*x1119))+(((-1.0)*x1118*x1132))+((x1122*x1125))+((x1123*x1132))+((x1116*x1122))+(((-1.0)*x1119*x1133))+(((-1.0)*(py*py)))+((x1114*x1119*x1125))+(((0.14)*x1116*x1121))+((x1118*x1124))+(((0.109556)*x1123))+(((-0.03365012)*cj7))+(((-0.056092)*x1116))+(((-1.0)*x1115*x1119*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1134=(px*sj3);
IkReal x1135=((0.244642)*cj7);
IkReal x1136=(cj8*sj4);
IkReal x1137=(cj8*sj7);
IkReal x1138=((0.01)*cj4);
IkReal x1139=(pz*sj8);
IkReal x1140=(sj4*sj7);
IkReal x1141=((0.240358)*sj4);
IkReal x1142=(cj3*py);
IkReal x1143=((0.244642)*sj8);
IkReal x1144=(sj4*sj8);
IkReal x1145=(cj4*pz);
IkReal x1146=((0.07)*cj4);
IkReal x1147=(sj7*sj8);
IkReal x1148=((0.01)*sj4);
IkReal x1149=(cj4*cj8);
IkReal x1150=(cj7*cj8);
IkReal x1151=(cj4*sj8);
IkReal x1152=(cj4*sj7);
IkReal x1153=((0.244642)*cj4);
IkReal x1154=(cj7*sj8);
IkReal x1155=((0.244642)*sj7);
IkReal x1156=((0.240358)*x1142);
IkReal x1157=((0.07)*cj7*sj4);
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(IKsign(((0.122621676328)+(((0.00489284)*x1137))+(((0.03365012)*cj7))+(((0.0014)*sj7))+(((0.117603323672)*x1150))+(((0.00489284)*x1154))+(((-0.117603323672)*x1147))+(((0.03424988)*cj8)))),-1);
if(!x1158.valid){
continue;
}
CheckValue<IkReal> x1159 = IKatan2WithCheck(IkReal(((0.007288860468)+(((-0.07)*x1140*x1142))+((pz*x1157))+(((0.07)*sj7*x1145))+((x1134*x1148))+((x1135*x1142*x1149))+((pz*x1141))+(((-0.244642)*x1139*x1140))+((x1134*x1135*x1144))+((pz*x1135*x1136))+(((0.07)*x1134*x1140))+((cj7*x1142*x1146))+(((0.244642)*x1137*x1145))+((pz*x1138))+((x1134*x1143*x1152))+(((0.013400999476)*x1154))+(((0.00196322)*cj7))+(((0.006861229532)*x1150))+(((-1.0)*x1134*x1135*x1149))+(((-1.0)*cj7*x1134*x1146))+(((-0.006861229532)*x1147))+((cj4*x1156))+(((-1.0)*x1135*x1142*x1144))+(((-1.0)*x1136*x1142*x1155))+(((0.00383446)*sj7))+((cj4*x1135*x1139))+(((-1.0)*x1142*x1148))+(((-0.240358)*cj4*x1134))+(((-1.0)*x1142*x1143*x1152))+(((0.013400999476)*x1137))+((x1134*x1136*x1155)))),IkReal(((-0.012885870524)+(((0.006861229532)*x1137))+((x1142*x1157))+((sj4*x1135*x1139))+(((-0.00383446)*cj7))+((pz*x1148))+(((-1.0)*x1134*x1141))+((x1141*x1142))+(((-1.0)*cj8*x1135*x1145))+(((-1.0)*x1134*x1135*x1136))+((x1134*x1140*x1143))+((x1135*x1142*x1151))+(((-1.0)*x1134*x1157))+((pz*x1136*x1155))+(((0.07)*pz*x1140))+(((0.00196322)*sj7))+(((-1.0)*x1134*x1135*x1151))+((x1137*x1142*x1153))+(((-1.0)*x1134*x1138))+(((0.006861229532)*x1154))+(((-0.07)*cj7*x1145))+(((0.013400999476)*x1147))+(((-0.013400999476)*x1150))+(((-1.0)*sj7*x1134*x1146))+((sj7*x1142*x1146))+(((-1.0)*x1134*x1137*x1153))+((x1135*x1136*x1142))+(((-1.0)*x1140*x1142*x1143))+(((-0.240358)*x1145))+(((0.244642)*x1139*x1152))+((x1138*x1142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1159.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1158.value)))+(x1159.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1160=IKcos(j5);
IkReal x1161=IKsin(j5);
IkReal x1162=(pz*sj4);
IkReal x1163=((0.244642)*sj8);
IkReal x1164=(cj4*pz);
IkReal x1165=((0.14)*sj7);
IkReal x1166=((0.244642)*cj8);
IkReal x1167=(cj7*x1161);
IkReal x1168=((0.480716)*x1161);
IkReal x1169=(cj3*py*sj4);
IkReal x1170=((0.02)*x1161);
IkReal x1171=(cj3*cj4*py);
IkReal x1172=(sj7*x1161);
IkReal x1173=(px*sj3*sj4);
IkReal x1174=(cj7*x1160);
IkReal x1175=(sj7*x1160);
IkReal x1176=(cj4*px*sj3);
IkReal x1177=((0.02)*x1160);
IkReal x1178=((0.480716)*x1160);
IkReal x1179=(x1160*x1176);
evalcond[0]=((-0.028046)+(((0.07)*x1175))+x1176+(((0.07)*x1167))+((x1166*x1175))+((x1166*x1167))+(((0.01)*x1160))+((x1163*x1174))+(((-1.0)*x1163*x1172))+(((0.240358)*x1161))+(((-1.0)*x1162))+(((-1.0)*x1171)));
evalcond[1]=((-0.054778)+(((0.07)*x1172))+(((-0.07)*x1174))+x1169+((x1166*x1172))+((x1163*x1167))+(((0.01)*x1161))+((x1163*x1175))+(((-0.240358)*x1160))+(((-1.0)*x1166*x1174))+(((-1.0)*x1164))+(((-1.0)*x1173)));
evalcond[2]=((-0.07)+((x1164*x1172))+(((-0.240358)*cj7))+(((-0.054778)*x1174))+(((0.054778)*x1172))+((x1162*x1167))+(((-1.0)*x1175*x1176))+((x1162*x1175))+(((0.028046)*x1167))+(((0.028046)*x1175))+(((-1.0)*x1173*x1174))+(((-0.01)*sj7))+((x1172*x1173))+((x1167*x1171))+(((-1.0)*x1164*x1174))+(((-1.0)*x1167*x1176))+(((-1.0)*x1166))+(((-1.0)*x1169*x1172))+((x1169*x1174))+((x1171*x1175)));
evalcond[3]=(x1163+(((-1.0)*x1172*x1176))+(((-0.028046)*x1174))+(((-1.0)*x1162*x1174))+(((-0.054778)*x1175))+((x1174*x1176))+(((-0.054778)*x1167))+((x1162*x1172))+(((0.01)*cj7))+(((0.028046)*x1172))+(((-1.0)*x1173*x1175))+(((-0.240358)*sj7))+(((-1.0)*x1164*x1167))+((x1167*x1169))+(((-1.0)*x1164*x1175))+(((-1.0)*x1171*x1174))+(((-1.0)*x1167*x1173))+((x1169*x1175))+((x1171*x1172)));
evalcond[4]=((-0.0067094674)+((x1164*x1170))+(((-1.0)*x1165*x1179))+(((-1.0)*(px*px)))+(((-1.0)*x1173*x1178))+(((-1.0)*x1161*x1165*x1169))+(((-1.0)*x1168*x1176))+(((0.014577720936)*x1161))+((x1168*x1171))+((x1162*x1168))+(((-0.14)*x1173*x1174))+((x1162*x1177))+(((-0.14)*x1164*x1174))+(((-0.00766892)*x1174))+(((-0.0014)*sj7))+((x1161*x1165*x1173))+(((-0.14)*x1167*x1176))+(((-0.025771741048)*x1160))+(((0.14)*x1169*x1174))+((x1160*x1162*x1165))+((x1161*x1164*x1165))+(((0.056092)*x1176))+(((-1.0)*(pz*pz)))+(((0.00392644)*x1175))+(((-1.0)*x1169*x1170))+(((0.109556)*x1169))+(((-1.0)*x1176*x1177))+(((-0.056092)*x1171))+(((-1.0)*x1164*x1178))+(((0.00392644)*x1167))+((x1160*x1165*x1171))+(((-0.109556)*x1173))+(((0.00766892)*x1172))+(((-0.056092)*x1162))+(((0.14)*x1167*x1171))+(((-0.109556)*x1164))+(((-1.0)*(py*py)))+((x1170*x1173))+(((-0.03365012)*cj7))+(((0.14)*x1162*x1167))+((x1169*x1178))+((x1171*x1177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=((3.5)+(((41.3371201171429)*(sj7*sj7)))+(((-1.0)*sj7))+(((41.3371201171429)*(cj7*cj7)))+(((24.0358)*cj7)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1180=(pz*sj4);
IkReal x1181=(px*sj3);
IkReal x1182=(cj3*py);
IkReal x1183=((0.02)*sj4);
IkReal x1184=((0.02)*cj4);
IkReal x1185=((0.056092)*cj4);
IkReal x1186=(cj4*pz);
IkReal x1187=((0.480716)*cj4);
IkReal x1188=((0.109556)*sj4);
IkReal x1189=((0.480716)*sj4);
IkReal x1190=((0.14)*cj4*sj7);
IkReal x1191=((0.14)*cj4*cj7);
IkReal x1192=((0.14)*sj4*sj7);
IkReal x1193=((0.14)*cj7*sj4);
IkReal x1194=((-0.025771741048)+(((-1.0)*x1181*x1189))+(((-1.0)*x1181*x1184))+(((0.02)*x1180))+(((-1.0)*x1181*x1193))+((x1182*x1184))+((x1182*x1189))+(((-0.00766892)*cj7))+((x1182*x1193))+(((-0.14)*sj7*x1180))+(((-0.480716)*x1186))+(((-0.00392644)*sj7))+(((-1.0)*x1182*x1190))+((x1181*x1190))+(((-0.14)*cj7*x1186)));
IkReal x1195=((0.014577720936)+(((-1.0)*x1181*x1187))+(((-1.0)*x1181*x1191))+(((-1.0)*x1181*x1192))+((x1182*x1187))+((x1182*x1191))+((x1182*x1192))+(((-0.00766892)*sj7))+((pz*x1184))+(((-0.14)*sj7*x1186))+(((0.480716)*x1180))+(((0.14)*cj7*x1180))+((x1181*x1183))+(((0.00392644)*cj7))+(((-1.0)*x1182*x1183)));
CheckValue<IkReal> x1198 = IKatan2WithCheck(IkReal(x1194),IkReal(x1195),IKFAST_ATAN2_MAGTHRESH);
if(!x1198.valid){
continue;
}
IkReal x1196=((1.0)*(x1198.value));
if((((x1194*x1194)+(x1195*x1195))) < -0.00001)
continue;
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1194*x1194)+(x1195*x1195)))),-1);
if(!x1199.valid){
continue;
}
if( (((x1199.value)*(((-0.0067094674)+(((-1.0)*x1181*x1188))+(((-1.0)*(px*px)))+((x1182*x1188))+(((0.0014)*sj7))+((x1181*x1185))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1180))+(((-1.0)*x1182*x1185))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.109556)*x1186)))))) < -1-IKFAST_SINCOS_THRESH || (((x1199.value)*(((-0.0067094674)+(((-1.0)*x1181*x1188))+(((-1.0)*(px*px)))+((x1182*x1188))+(((0.0014)*sj7))+((x1181*x1185))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1180))+(((-1.0)*x1182*x1185))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.109556)*x1186)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1197=IKasin(((x1199.value)*(((-0.0067094674)+(((-1.0)*x1181*x1188))+(((-1.0)*(px*px)))+((x1182*x1188))+(((0.0014)*sj7))+((x1181*x1185))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1180))+(((-1.0)*x1182*x1185))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.109556)*x1186))))));
j5array[0]=((((-1.0)*x1196))+(((-1.0)*x1197)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1197+(((-1.0)*x1196)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1200=(pz*sj4);
IkReal x1201=(cj3*py);
IkReal x1202=(cj5*sj7);
IkReal x1203=(sj5*sj7);
IkReal x1204=(cj5*cj7);
IkReal x1205=(px*sj3);
IkReal x1206=((4.08760556241365)*cj4);
IkReal x1207=((4.08760556241365)*sj4);
IkReal x1208=(cj7*sj5);
IkReal x1209=((4.08760556241365)*x1208);
IkReal x1210=(pz*x1206);
if( IKabs(((((-1.0)*x1201*x1204*x1206))+((x1203*x1205*x1206))+(((-1.0)*x1208*x1210))+(((-0.114640985603453)*x1203))+(((-0.114640985603453)*x1204))+((x1202*x1205*x1207))+(((0.98248869777062)*sj7))+(((-1.0)*x1205*x1207*x1208))+(((0.0408760556241365)*cj7))+(((-1.0)*x1201*x1202*x1207))+(((-0.223910857497895)*x1208))+(((-1.0)*x1201*x1203*x1206))+((x1202*x1210))+((x1201*x1207*x1208))+(((-4.08760556241365)*x1200*x1203))+(((-4.08760556241365)*x1200*x1204))+(((0.223910857497895)*x1202))+((x1204*x1205*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((0.0408760556241365)*sj7))+((x1201*x1206*x1208))+(((-1.0)*x1204*x1210))+(((-0.114640985603453)*x1202))+(((-1.0)*x1205*x1206*x1208))+(((-1.0)*x1203*x1210))+((x1202*x1205*x1206))+(((-1.0)*x1203*x1205*x1207))+((x1201*x1203*x1207))+((x1200*x1209))+(((-0.98248869777062)*cj7))+(((0.114640985603453)*x1208))+(((-1.0)*x1201*x1202*x1206))+(((-0.223910857497895)*x1204))+(((-0.223910857497895)*x1203))+((x1201*x1204*x1207))+(((-1.0)*x1204*x1205*x1207))+(((-4.08760556241365)*x1200*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1201*x1204*x1206))+((x1203*x1205*x1206))+(((-1.0)*x1208*x1210))+(((-0.114640985603453)*x1203))+(((-0.114640985603453)*x1204))+((x1202*x1205*x1207))+(((0.98248869777062)*sj7))+(((-1.0)*x1205*x1207*x1208))+(((0.0408760556241365)*cj7))+(((-1.0)*x1201*x1202*x1207))+(((-0.223910857497895)*x1208))+(((-1.0)*x1201*x1203*x1206))+((x1202*x1210))+((x1201*x1207*x1208))+(((-4.08760556241365)*x1200*x1203))+(((-4.08760556241365)*x1200*x1204))+(((0.223910857497895)*x1202))+((x1204*x1205*x1206))))+IKsqr(((-0.286132389368955)+(((0.0408760556241365)*sj7))+((x1201*x1206*x1208))+(((-1.0)*x1204*x1210))+(((-0.114640985603453)*x1202))+(((-1.0)*x1205*x1206*x1208))+(((-1.0)*x1203*x1210))+((x1202*x1205*x1206))+(((-1.0)*x1203*x1205*x1207))+((x1201*x1203*x1207))+((x1200*x1209))+(((-0.98248869777062)*cj7))+(((0.114640985603453)*x1208))+(((-1.0)*x1201*x1202*x1206))+(((-0.223910857497895)*x1204))+(((-0.223910857497895)*x1203))+((x1201*x1204*x1207))+(((-1.0)*x1204*x1205*x1207))+(((-4.08760556241365)*x1200*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1201*x1204*x1206))+((x1203*x1205*x1206))+(((-1.0)*x1208*x1210))+(((-0.114640985603453)*x1203))+(((-0.114640985603453)*x1204))+((x1202*x1205*x1207))+(((0.98248869777062)*sj7))+(((-1.0)*x1205*x1207*x1208))+(((0.0408760556241365)*cj7))+(((-1.0)*x1201*x1202*x1207))+(((-0.223910857497895)*x1208))+(((-1.0)*x1201*x1203*x1206))+((x1202*x1210))+((x1201*x1207*x1208))+(((-4.08760556241365)*x1200*x1203))+(((-4.08760556241365)*x1200*x1204))+(((0.223910857497895)*x1202))+((x1204*x1205*x1206))), ((-0.286132389368955)+(((0.0408760556241365)*sj7))+((x1201*x1206*x1208))+(((-1.0)*x1204*x1210))+(((-0.114640985603453)*x1202))+(((-1.0)*x1205*x1206*x1208))+(((-1.0)*x1203*x1210))+((x1202*x1205*x1206))+(((-1.0)*x1203*x1205*x1207))+((x1201*x1203*x1207))+((x1200*x1209))+(((-0.98248869777062)*cj7))+(((0.114640985603453)*x1208))+(((-1.0)*x1201*x1202*x1206))+(((-0.223910857497895)*x1204))+(((-0.223910857497895)*x1203))+((x1201*x1204*x1207))+(((-1.0)*x1204*x1205*x1207))+(((-4.08760556241365)*x1200*x1202))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1211=IKsin(j8);
IkReal x1212=IKcos(j8);
IkReal x1213=(pz*sj4);
IkReal x1214=((1.0)*cj5);
IkReal x1215=(cj3*py);
IkReal x1216=(cj5*cj7);
IkReal x1217=(sj5*sj7);
IkReal x1218=(cj7*sj5);
IkReal x1219=(cj4*sj7);
IkReal x1220=(cj4*pz);
IkReal x1221=(cj5*sj7);
IkReal x1222=(cj4*px*sj3);
IkReal x1223=(cj7*x1212);
IkReal x1224=((1.0)*x1220);
IkReal x1225=(px*sj3*sj4);
IkReal x1226=((0.244642)*x1212);
IkReal x1227=((0.244642)*x1211);
evalcond[0]=((-0.028046)+(((-1.0)*cj4*x1215))+x1222+(((0.01)*cj5))+(((-1.0)*x1221*x1226))+(((0.07)*x1218))+(((0.240358)*sj5))+(((-1.0)*x1217*x1227))+((x1218*x1226))+(((-1.0)*x1216*x1227))+(((-0.07)*x1221))+(((-1.0)*x1213)));
evalcond[1]=((-0.054778)+(((-0.240358)*cj5))+((sj4*x1215))+(((-1.0)*x1225))+(((-1.0)*x1224))+(((-1.0)*x1218*x1227))+((x1221*x1227))+(((-1.0)*x1217*x1226))+(((-1.0)*x1216*x1226))+(((0.01)*sj5))+(((-0.07)*x1216))+(((-0.07)*x1217)));
evalcond[2]=((0.118834468928)+(((0.056092)*x1222))+(((0.03365012)*cj7))+(((-0.056092)*cj4*x1215))+(((-0.0014)*sj7))+(((0.117603323672)*x1223))+(((-0.109556)*x1225))+(((-0.109556)*x1220))+(((-1.0)*pp))+(((-0.00489284)*cj7*x1211))+(((-0.00489284)*sj7*x1212))+(((-0.117603323672)*sj7*x1211))+(((-0.056092)*x1213))+(((0.03424988)*x1212))+(((0.109556)*sj4*x1215)));
evalcond[3]=((((-1.0)*sj7*x1214*x1225))+((cj4*x1215*x1216))+((cj4*x1215*x1217))+x1227+((x1213*x1217))+((x1213*x1216))+(((-1.0)*x1217*x1222))+(((-0.01)*cj7))+((sj4*x1215*x1221))+(((-1.0)*cj7*x1214*x1222))+(((-0.054778)*x1221))+(((-1.0)*pz*x1214*x1219))+(((-0.240358)*sj7))+(((0.028046)*x1216))+(((0.028046)*x1217))+(((0.054778)*x1218))+(((-1.0)*sj4*x1215*x1218))+((x1218*x1225))+((x1218*x1220)));
evalcond[4]=((-0.07)+((cj4*x1215*x1218))+(((-1.0)*x1218*x1222))+(((-0.240358)*cj7))+((x1213*x1218))+(((-1.0)*x1226))+(((-1.0)*x1217*x1225))+(((-1.0)*sj7*x1213*x1214))+(((-1.0)*x1214*x1215*x1219))+(((-1.0)*cj7*x1214*x1220))+(((-1.0)*cj7*x1214*x1225))+(((-0.028046)*x1221))+(((0.028046)*x1218))+(((-1.0)*x1217*x1224))+(((0.01)*sj7))+((sj4*x1215*x1216))+((sj4*x1215*x1217))+(((-0.054778)*x1216))+(((-0.054778)*x1217))+((cj5*px*sj3*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1228=((0.056092)*cj4);
IkReal x1229=(px*sj3);
IkReal x1230=(cj3*py);
IkReal x1231=((0.109556)*sj4);
IkReal x1232=((0.03424988)+(((0.117603323672)*cj7))+(((-0.00489284)*sj7)));
IkReal x1233=((((-0.117603323672)*sj7))+(((-0.00489284)*cj7)));
CheckValue<IkReal> x1236 = IKatan2WithCheck(IkReal(x1232),IkReal(x1233),IKFAST_ATAN2_MAGTHRESH);
if(!x1236.valid){
continue;
}
IkReal x1234=((1.0)*(x1236.value));
if((((x1233*x1233)+(x1232*x1232))) < -0.00001)
continue;
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1233*x1233)+(x1232*x1232)))),-1);
if(!x1237.valid){
continue;
}
if( (((x1237.value)*(((0.118834468928)+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj7))+(((-1.0)*pp))+(((-1.0)*x1228*x1230))+(((-0.109556)*cj4*pz))+(((-1.0)*x1229*x1231))+((x1228*x1229))+((x1230*x1231)))))) < -1-IKFAST_SINCOS_THRESH || (((x1237.value)*(((0.118834468928)+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj7))+(((-1.0)*pp))+(((-1.0)*x1228*x1230))+(((-0.109556)*cj4*pz))+(((-1.0)*x1229*x1231))+((x1228*x1229))+((x1230*x1231)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1235=IKasin(((x1237.value)*(((0.118834468928)+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj7))+(((-1.0)*pp))+(((-1.0)*x1228*x1230))+(((-0.109556)*cj4*pz))+(((-1.0)*x1229*x1231))+((x1228*x1229))+((x1230*x1231))))));
j8array[0]=((((-1.0)*x1235))+(((-1.0)*x1234)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+x1235+(((-1.0)*x1234)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1238=(cj8*sj7);
IkReal x1239=(sj7*sj8);
IkReal x1240=(cj7*sj8);
IkReal x1241=(cj7*cj8);
j5eval[0]=((87.5869116628571)+(((-1.0)*sj7))+(((-3.49488571428571)*x1240))+(((84.0023740514286)*x1241))+(((24.4642)*cj8))+(((24.0358)*cj7))+(((-84.0023740514286)*x1239))+(((-3.49488571428571)*x1238)));
j5eval[1]=IKsign(((0.122621676328)+(((-0.00489284)*x1238))+(((-0.117603323672)*x1239))+(((0.03365012)*cj7))+(((0.117603323672)*x1241))+(((-0.0014)*sj7))+(((-0.00489284)*x1240))+(((0.03424988)*cj8))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1242=((124.61262619574)*sj4);
IkReal x1243=(cj3*py);
IkReal x1244=(cj8*pz);
IkReal x1245=(pz*sj4);
IkReal x1246=((35.6557084789275)*cj4);
IkReal x1247=((0.01)*sj7);
IkReal x1248=(cj4*cj7);
IkReal x1249=(cj4*cj8);
IkReal x1250=(px*sj3);
IkReal x1251=((0.07)*cj4);
IkReal x1252=((122.430496836829)*sj7);
IkReal x1253=(cj4*pz);
IkReal x1254=((0.244642)*sj8);
IkReal x1255=((5.09367263984678)*sj7);
IkReal x1256=((0.240358)*sj7);
IkReal x1257=((5.09367263984678)*cj7*sj4);
IkReal x1258=((0.01)*cj7*sj4);
j5eval[0]=((-1.0)+(((124.61262619574)*x1249*x1250))+((x1246*x1250))+((cj4*x1243*x1255))+(((-124.61262619574)*sj8*x1253))+(((-122.430496836829)*cj7*x1245))+((x1245*x1255))+(((5.09367263984678)*pz*x1248))+(((-1.0)*x1243*x1246))+((sj4*x1250*x1252))+(((-1.0)*x1242*x1244))+((x1250*x1257))+((x1252*x1253))+(((-3.15466451442019)*cj7))+(((-3.49488571428571)*cj8))+((sj8*x1242*x1243))+(((-1.0)*sj4*x1243*x1252))+(((-6.82603043775023)*sj8))+(((-124.61262619574)*x1243*x1249))+(((6.84935489858498)*sj7))+(((122.430496836829)*x1248*x1250))+(((-1.0)*sj8*x1242*x1250))+(((-1.0)*cj4*x1250*x1255))+(((-35.6557084789275)*x1245))+(((-1.0)*x1243*x1257))+(((-122.430496836829)*x1243*x1248)));
j5eval[1]=IKsign(((-0.00196322)+(((-1.0)*sj4*x1250*x1254))+(((-0.07)*x1245))+(((-1.0)*x1253*x1254))+((sj4*x1243*x1254))+(((0.244642)*x1249*x1250))+(((-0.006193300468)*cj7))+(((-0.013400999476)*sj8))+(((-0.240358)*cj7*x1245))+(((0.240358)*x1248*x1250))+(((0.013446790524)*sj7))+(((-0.244642)*x1243*x1249))+((sj4*x1250*x1256))+((x1253*x1256))+((x1250*x1258))+((x1250*x1251))+((cj4*x1243*x1247))+((x1245*x1247))+(((0.01)*pz*x1248))+(((-1.0)*sj4*x1243*x1256))+(((-0.006861229532)*cj8))+(((-1.0)*cj4*x1247*x1250))+(((-0.244642)*sj4*x1244))+(((-1.0)*x1243*x1258))+(((-1.0)*x1243*x1251))+(((-0.240358)*x1243*x1248))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1259=(cj4*pz);
IkReal x1260=((0.01)*sj7);
IkReal x1261=((62.6836634102325)*cj7);
IkReal x1262=(cj4*sj7);
IkReal x1263=(px*sj3);
IkReal x1264=(cj3*py);
IkReal x1265=(pz*sj4);
IkReal x1266=(cj4*sj8);
IkReal x1267=((0.240358)*cj7);
IkReal x1268=(cj4*cj7);
IkReal x1269=((2.60792914778091)*sj7);
IkReal x1270=((18.2555040344664)*sj4);
IkReal x1271=((63.8009002571418)*cj8);
IkReal x1272=((0.07)*sj4);
IkReal x1273=((0.244642)*cj8);
j5eval[0]=((1.0)+(((3.50682769516438)*cj7))+(((62.6836634102325)*x1262*x1264))+((sj4*x1263*x1271))+(((-1.0)*sj4*x1263*x1269))+(((1.61516888114624)*sj7))+(((2.60792914778091)*x1264*x1268))+(((18.2555040344664)*x1259))+((x1259*x1271))+(((63.8009002571418)*x1263*x1266))+(((3.49488571428571)*cj8))+(((2.60792914778091)*cj7*x1265))+(((-2.60792914778091)*x1263*x1268))+((x1259*x1261))+(((-63.8009002571418)*sj8*x1265))+((sj4*x1264*x1269))+(((62.6836634102325)*sj7*x1265))+(((-63.8009002571418)*x1264*x1266))+((x1263*x1270))+((sj4*x1261*x1263))+(((-1.0)*sj4*x1261*x1264))+(((-62.6836634102325)*x1262*x1263))+(((-1.0)*sj4*x1264*x1271))+(((-1.0)*x1259*x1269))+(((-1.7893600486118)*sj8))+(((-1.0)*x1264*x1270)));
j5eval[1]=IKsign(((0.00383446)+(((0.240358)*x1262*x1264))+((sj4*x1263*x1273))+(((-0.244642)*x1264*x1266))+(((-0.240358)*x1262*x1263))+(((-1.0)*sj4*x1260*x1263))+(((0.01)*cj7*x1265))+(((0.240358)*sj7*x1265))+((x1259*x1273))+(((-0.01)*x1263*x1268))+((x1259*x1267))+(((0.013446790524)*cj7))+((sj4*x1260*x1264))+(((0.006193300468)*sj7))+((x1263*x1272))+(((0.244642)*x1263*x1266))+(((-1.0)*sj4*x1264*x1273))+(((0.01)*x1264*x1268))+(((-1.0)*x1259*x1260))+(((-0.006861229532)*sj8))+(((-0.244642)*sj8*x1265))+(((-1.0)*x1264*x1272))+(((-1.0)*sj4*x1264*x1267))+((sj4*x1263*x1267))+(((0.013400999476)*cj8))+(((0.07)*x1259))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1274 = IKatan2WithCheck(IkReal(((0.0014)+((cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((0.054778)*cj3*cj4*cj7*py))+(((0.054778)*cj7*pz*sj4))+(((-0.03424988)*cj8*sj7))+(((-2.0)*cj7*px*pz*sj3*(cj4*cj4)))+(((-2.0)*cj4*px*pz*sj3*sj4*sj7))+((cj7*px*pz*sj3))+(((-1.0)*sj7*(cj4*cj4)*(pz*pz)))+((cj4*cj7*sj4*(pz*pz)))+(((-2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((-0.004213421884)*sj7))+(((2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((-0.054778)*cj4*cj7*px*sj3))+(((-0.0007)*(cj7*cj7)))+(((-0.059849708164)*sj7*(cj8*cj8)))+(((0.00244642)*cj7*sj7*sj8))+(((2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.058801661836)*sj8*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj3*cj4*py*sj7))+(((0.056092)*pz*sj4*sj7))+(((-0.01682506)*cj7*sj7))+((sj7*(cj4*cj4)*(px*px)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.00244642)*cj8*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(px*px)))+(((-0.056092)*cj4*px*sj3*sj7))+(((-0.028046)*cj3*cj7*py*sj4))+((sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.058801661836)*cj7*cj8*sj7))+((sj7*(pz*pz)))+(((-0.01712494)*cj7*sj8))+(((0.003939883788)*cj7))+(((0.028046)*cj4*cj7*pz))+(((0.028046)*cj7*px*sj3*sj4))+(((-1.0)*cj3*cj7*py*pz))+(((-0.059849708164)*cj7*cj8*sj8))+(((0.00489284)*cj8)))),IkReal(((-0.01682506)+(((0.00244642)*sj8*(cj7*cj7)))+(((0.056092)*cj3*cj4*cj7*py))+(((-2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+((cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.0007)*cj7*sj7))+(((0.028046)*cj3*py*sj4*sj7))+(((2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-2.0)*cj4*cj7*px*pz*sj3*sj4))+(((-0.054778)*cj3*cj4*py*sj7))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj7*(cj4*cj4)*(px*px)))+((cj4*sj4*sj7*(px*px)))+(((-0.03424988)*cj7*cj8))+(((0.056092)*cj7*pz*sj4))+(((-0.054778)*pz*sj4*sj7))+(((-1.0)*cj4*sj4*sj7*(pz*pz)))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(px*px)))+(((2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-0.00244642)*sj8))+(((-1.0)*px*pz*sj3*sj7))+(((-0.01682506)*(cj7*cj7)))+(((-0.059849708164)*cj7*(cj8*cj8)))+(((-0.058801661836)*cj8*(cj7*cj7)))+((cj7*(pz*pz)))+(((0.059849708164)*cj8*sj7*sj8))+(((-0.061885390048)*cj7))+(((-0.028046)*cj4*pz*sj7))+((cj3*py*pz*sj7))+(((-0.028046)*px*sj3*sj4*sj7))+(((-2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((0.058801661836)*cj7*sj7*sj8))+(((-0.058801661836)*cj8))+(((0.054778)*cj4*px*sj3*sj7))+(((-2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+(((-0.056092)*cj4*cj7*px*sj3))+(((-1.0)*cj7*(cj4*cj4)*(pz*pz)))+((cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.01712494)*sj7*sj8))+(((0.000867276212)*sj7))+(((0.00244642)*cj7*cj8*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1274.valid){
continue;
}
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(IKsign(((0.00383446)+(((-0.244642)*cj3*cj8*py*sj4))+(((-0.240358)*cj4*px*sj3*sj7))+(((0.240358)*cj7*px*sj3*sj4))+(((-0.07)*cj3*py*sj4))+(((0.01)*cj7*pz*sj4))+(((-0.01)*cj4*cj7*px*sj3))+(((0.01)*cj3*cj4*cj7*py))+(((0.240358)*cj3*cj4*py*sj7))+(((-0.240358)*cj3*cj7*py*sj4))+(((0.244642)*cj4*px*sj3*sj8))+(((0.244642)*cj8*px*sj3*sj4))+(((0.013446790524)*cj7))+(((0.240358)*cj4*cj7*pz))+(((0.07)*cj4*pz))+(((0.006193300468)*sj7))+(((0.07)*px*sj3*sj4))+(((-0.01)*px*sj3*sj4*sj7))+(((-0.244642)*cj3*cj4*py*sj8))+(((0.01)*cj3*py*sj4*sj7))+(((0.244642)*cj4*cj8*pz))+(((0.240358)*pz*sj4*sj7))+(((-0.006861229532)*sj8))+(((-0.01)*cj4*pz*sj7))+(((0.013400999476)*cj8))+(((-0.244642)*pz*sj4*sj8)))),-1);
if(!x1275.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1274.value)+(((1.5707963267949)*(x1275.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1276=IKsin(j5);
IkReal x1277=IKcos(j5);
IkReal x1278=(pz*sj4);
IkReal x1279=((0.244642)*sj8);
IkReal x1280=(cj4*pz);
IkReal x1281=(px*sj3);
IkReal x1282=((0.14)*sj7);
IkReal x1283=((0.14)*sj4);
IkReal x1284=((1.0)*sj4);
IkReal x1285=((0.244642)*cj8);
IkReal x1286=((1.0)*cj4);
IkReal x1287=(cj7*x1276);
IkReal x1288=((0.480716)*x1276);
IkReal x1289=(cj3*py*sj4);
IkReal x1290=((0.02)*x1276);
IkReal x1291=(cj3*cj4*py);
IkReal x1292=(sj7*x1276);
IkReal x1293=(cj4*x1277);
IkReal x1294=(cj7*x1277);
IkReal x1295=(sj7*x1277);
IkReal x1296=((0.02)*x1277);
IkReal x1297=((0.480716)*x1277);
evalcond[0]=((-0.028046)+((x1285*x1287))+(((-1.0)*cj3*py*x1286))+(((0.240358)*x1276))+((cj4*x1281))+(((-0.07)*x1295))+(((-1.0)*x1279*x1292))+(((-1.0)*x1279*x1294))+(((0.07)*x1287))+(((0.01)*x1277))+(((-1.0)*x1278))+(((-1.0)*x1285*x1295)));
evalcond[1]=((-0.054778)+(((-1.0)*x1280))+x1289+(((-0.07)*x1292))+(((-0.07)*x1294))+((x1279*x1295))+(((0.01)*x1276))+(((-1.0)*x1285*x1294))+(((-1.0)*x1285*x1292))+(((-1.0)*x1279*x1287))+(((-0.240358)*x1277))+(((-1.0)*x1281*x1284)));
evalcond[2]=(x1279+(((-1.0)*x1281*x1286*x1292))+(((-1.0)*x1281*x1286*x1294))+(((0.028046)*x1292))+(((0.028046)*x1294))+(((-0.01)*cj7))+(((-0.054778)*x1295))+((sj4*x1281*x1287))+((x1291*x1294))+((x1291*x1292))+((x1278*x1292))+((x1278*x1294))+(((-0.240358)*sj7))+(((0.054778)*x1287))+(((-1.0)*x1281*x1284*x1295))+(((-1.0)*cj3*py*x1284*x1287))+((x1280*x1287))+(((-1.0)*x1280*x1295))+((x1289*x1295)));
evalcond[3]=((-0.07)+(((-0.240358)*cj7))+((x1278*x1287))+((x1287*x1291))+(((-0.054778)*x1292))+(((-0.054778)*x1294))+((sj7*x1281*x1293))+(((-1.0)*x1278*x1295))+(((-1.0)*x1281*x1284*x1294))+(((-1.0)*x1281*x1284*x1292))+(((-1.0)*cj3*py*x1286*x1295))+(((-1.0)*x1285))+(((-1.0)*x1281*x1286*x1287))+(((0.028046)*x1287))+(((-0.028046)*x1295))+(((0.01)*sj7))+(((-1.0)*x1280*x1292))+(((-1.0)*x1280*x1294))+((x1289*x1294))+((x1289*x1292)));
evalcond[4]=((-0.0067094674)+(((-0.056092)*x1278))+(((-0.00766892)*x1294))+(((-0.00766892)*x1292))+(((-0.14)*x1280*x1294))+(((-1.0)*(px*px)))+(((0.14)*x1287*x1291))+(((0.014577720936)*x1276))+((x1278*x1288))+(((0.056092)*cj4*x1281))+((cj3*py*x1283*x1294))+((x1276*x1282*x1289))+(((-1.0)*x1277*x1278*x1282))+(((-1.0)*x1289*x1290))+(((0.0014)*sj7))+(((-1.0)*x1280*x1297))+(((0.00392644)*x1287))+(((-0.025771741048)*x1277))+((x1280*x1290))+((x1291*x1296))+(((-0.00392644)*x1295))+(((-0.02)*x1281*x1293))+(((-0.14)*cj4*x1281*x1287))+((x1281*x1282*x1293))+((x1278*x1296))+((x1288*x1291))+(((-1.0)*(pz*pz)))+(((-1.0)*sj4*x1281*x1297))+((sj4*x1281*x1290))+(((-0.109556)*sj4*x1281))+(((-1.0)*x1277*x1282*x1291))+(((-0.109556)*x1280))+(((0.109556)*x1289))+(((-1.0)*(py*py)))+(((-1.0)*cj4*x1281*x1288))+(((-1.0)*x1281*x1283*x1294))+(((-0.03365012)*cj7))+(((-1.0)*sj4*x1276*x1281*x1282))+(((0.14)*x1278*x1287))+(((-1.0)*x1276*x1280*x1282))+((x1289*x1297))+(((-0.056092)*x1291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal(((-0.01682506)+(((-0.056092)*cj7*pz*sj4))+(((0.01682506)*(cj7*cj7)))+(((2.0)*cj4*cj7*px*pz*sj3*sj4))+(((-2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-1.0)*cj7*(pz*pz)))+(((0.059163130048)*cj7))+(((-0.028046)*cj3*py*sj4*sj7))+(((-0.00244642)*cj7*cj8*sj7))+((cj4*sj4*sj7*(pz*pz)))+(((2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((0.054778)*cj3*cj4*py*sj7))+(((-1.0)*cj3*py*pz*sj7))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.056092)*cj4*cj7*px*sj3))+(((-0.00244642)*sj8*(cj7*cj7)))+((cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+(((0.003939883788)*sj7))+(((-0.056092)*cj3*cj4*cj7*py))+(((-0.00244642)*sj8))+(((-1.0)*cj4*sj4*sj7*(px*px)))+((cj7*(cj4*cj4)*(pz*pz)))+(((-1.0)*cj7*(cj4*cj4)*(px*px)))+(((0.054778)*pz*sj4*sj7))+(((-0.059849708164)*cj7*(cj8*cj8)))+(((0.028046)*cj4*pz*sj7))+(((2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+(((0.059849708164)*cj8*sj7*sj8))+(((-0.058801661836)*cj7*sj7*sj8))+(((-0.058801661836)*cj8))+((px*pz*sj3*sj7))+(((-2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-0.054778)*cj4*px*sj3*sj7))+(((0.058801661836)*cj8*(cj7*cj7)))+(((-0.0007)*cj7*sj7))+(((0.01712494)*sj7*sj8))+(((0.028046)*px*sj3*sj4*sj7))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+((cj4*sj4*sj7*(cj3*cj3)*(px*px))))),IkReal((((cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((0.01712494)*cj7*sj8))+(((0.054778)*cj3*cj4*cj7*py))+(((0.054778)*cj7*pz*sj4))+(((0.059849708164)*cj7*cj8*sj8))+(((-2.0)*cj7*px*pz*sj3*(cj4*cj4)))+(((-2.0)*cj4*px*pz*sj3*sj4*sj7))+((cj7*px*pz*sj3))+(((-1.0)*sj7*(cj4*cj4)*(pz*pz)))+((cj4*cj7*sj4*(pz*pz)))+(((-0.000867276212)*cj7))+(((0.117603323672)*sj8))+(((-2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((-0.054778)*cj4*cj7*px*sj3))+(((-0.0007)*(cj7*cj7)))+(((0.00244642)*cj7*sj7*sj8))+(((-0.116835098212)*sj7))+(((2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.058801661836)*sj8*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj3*cj4*py*sj7))+(((0.056092)*pz*sj4*sj7))+(((-0.01682506)*cj7*sj7))+((sj7*(cj4*cj4)*(px*px)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.00244642)*cj8*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(px*px)))+(((-0.056092)*cj4*px*sj3*sj7))+(((-0.028046)*cj3*cj7*py*sj4))+((sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.058801661836)*cj7*cj8*sj7))+((sj7*(pz*pz)))+(((0.028046)*cj4*cj7*pz))+(((0.028046)*cj7*px*sj3*sj4))+(((0.059849708164)*sj7*(cj8*cj8)))+(((-1.0)*cj3*cj7*py*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign(((-0.00196322)+(((-0.07)*cj3*cj4*py))+(((0.01)*cj4*cj7*pz))+(((-0.240358)*cj7*pz*sj4))+(((-0.244642)*cj3*cj4*cj8*py))+(((-0.006193300468)*cj7))+(((-0.013400999476)*sj8))+(((0.244642)*cj3*py*sj4*sj8))+(((-0.07)*pz*sj4))+(((-0.244642)*cj8*pz*sj4))+(((0.013446790524)*sj7))+(((0.240358)*cj4*pz*sj7))+(((0.240358)*cj4*cj7*px*sj3))+(((-0.01)*cj3*cj7*py*sj4))+(((0.07)*cj4*px*sj3))+(((0.01)*cj7*px*sj3*sj4))+(((-0.01)*cj4*px*sj3*sj7))+(((0.240358)*px*sj3*sj4*sj7))+(((-0.244642)*cj4*pz*sj8))+(((-0.240358)*cj3*py*sj4*sj7))+(((-0.244642)*px*sj3*sj4*sj8))+(((0.01)*pz*sj4*sj7))+(((-0.006861229532)*cj8))+(((0.244642)*cj4*cj8*px*sj3))+(((-0.240358)*cj3*cj4*cj7*py))+(((0.01)*cj3*cj4*py*sj7)))),-1);
if(!x1299.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1298.value)+(((1.5707963267949)*(x1299.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1300=IKsin(j5);
IkReal x1301=IKcos(j5);
IkReal x1302=(pz*sj4);
IkReal x1303=((0.244642)*sj8);
IkReal x1304=(cj4*pz);
IkReal x1305=(px*sj3);
IkReal x1306=((0.14)*sj7);
IkReal x1307=((0.14)*sj4);
IkReal x1308=((1.0)*sj4);
IkReal x1309=((0.244642)*cj8);
IkReal x1310=((1.0)*cj4);
IkReal x1311=(cj7*x1300);
IkReal x1312=((0.480716)*x1300);
IkReal x1313=(cj3*py*sj4);
IkReal x1314=((0.02)*x1300);
IkReal x1315=(cj3*cj4*py);
IkReal x1316=(sj7*x1300);
IkReal x1317=(cj4*x1301);
IkReal x1318=(cj7*x1301);
IkReal x1319=(sj7*x1301);
IkReal x1320=((0.02)*x1301);
IkReal x1321=((0.480716)*x1301);
evalcond[0]=((-0.028046)+(((-1.0)*cj3*py*x1310))+(((0.240358)*x1300))+(((-1.0)*x1302))+((cj4*x1305))+((x1309*x1311))+(((0.07)*x1311))+(((0.01)*x1301))+(((-0.07)*x1319))+(((-1.0)*x1303*x1316))+(((-1.0)*x1303*x1318))+(((-1.0)*x1309*x1319)));
evalcond[1]=((-0.054778)+x1313+(((-0.240358)*x1301))+(((-1.0)*x1304))+(((0.01)*x1300))+(((-0.07)*x1318))+(((-0.07)*x1316))+(((-1.0)*x1303*x1311))+(((-1.0)*x1305*x1308))+((x1303*x1319))+(((-1.0)*x1309*x1318))+(((-1.0)*x1309*x1316)));
evalcond[2]=((((-1.0)*cj3*py*x1308*x1311))+x1303+(((-1.0)*x1304*x1319))+((x1313*x1319))+(((0.054778)*x1311))+(((-0.01)*cj7))+(((-1.0)*x1305*x1310*x1318))+(((-1.0)*x1305*x1310*x1316))+(((-1.0)*x1305*x1308*x1319))+(((0.028046)*x1318))+(((0.028046)*x1316))+(((-0.240358)*sj7))+((x1302*x1318))+((x1302*x1316))+(((-0.054778)*x1319))+((x1304*x1311))+((sj4*x1305*x1311))+((x1315*x1316))+((x1315*x1318)));
evalcond[3]=((-0.07)+(((-1.0)*x1302*x1319))+((x1311*x1315))+(((-0.240358)*cj7))+(((-1.0)*x1304*x1318))+(((-1.0)*x1304*x1316))+((x1313*x1318))+((x1313*x1316))+(((-1.0)*x1305*x1310*x1311))+(((-1.0)*x1309))+(((-1.0)*x1305*x1308*x1318))+(((-1.0)*x1305*x1308*x1316))+(((-1.0)*cj3*py*x1310*x1319))+(((0.028046)*x1311))+((sj7*x1305*x1317))+((x1302*x1311))+(((-0.054778)*x1318))+(((-0.054778)*x1316))+(((-0.028046)*x1319))+(((0.01)*sj7)));
evalcond[4]=((-0.0067094674)+(((-1.0)*x1301*x1302*x1306))+(((0.109556)*x1313))+(((0.14)*x1311*x1315))+(((-1.0)*(px*px)))+((x1313*x1321))+(((-1.0)*x1304*x1321))+(((-1.0)*x1313*x1314))+((x1305*x1306*x1317))+(((-0.109556)*x1304))+(((-0.025771741048)*x1301))+(((-0.14)*cj4*x1305*x1311))+((cj3*py*x1307*x1318))+(((-0.056092)*x1302))+(((0.0014)*sj7))+(((0.014577720936)*x1300))+(((-1.0)*sj4*x1300*x1305*x1306))+(((-0.109556)*sj4*x1305))+(((-0.056092)*x1315))+(((-1.0)*sj4*x1305*x1321))+(((-1.0)*x1305*x1307*x1318))+(((-1.0)*x1300*x1304*x1306))+((x1302*x1312))+(((-1.0)*x1301*x1306*x1315))+(((-1.0)*(pz*pz)))+((x1304*x1314))+(((-0.00392644)*x1319))+((x1302*x1320))+(((0.056092)*cj4*x1305))+((sj4*x1305*x1314))+(((0.14)*x1302*x1311))+(((-1.0)*cj4*x1305*x1312))+(((0.00392644)*x1311))+(((-0.02)*x1305*x1317))+(((-0.00766892)*x1316))+(((-0.00766892)*x1318))+(((-1.0)*(py*py)))+((x1300*x1306*x1313))+(((-0.14)*x1304*x1318))+(((-0.03365012)*cj7))+((x1312*x1315))+((x1315*x1320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1322=(cj8*sj7);
IkReal x1323=(px*sj3);
IkReal x1324=((0.01)*cj4);
IkReal x1325=(pz*sj4);
IkReal x1326=((0.07)*sj4);
IkReal x1327=((0.244642)*cj4);
IkReal x1328=(cj3*py);
IkReal x1329=(sj7*sj8);
IkReal x1330=((0.01)*sj4);
IkReal x1331=(cj7*cj8);
IkReal x1332=((0.07)*cj4);
IkReal x1333=((0.240358)*cj4);
IkReal x1334=((0.244642)*sj4);
IkReal x1335=(cj7*sj8);
IkReal x1336=((0.240358)*x1328);
IkReal x1337=((0.244642)*x1329);
IkReal x1338=(cj7*x1328);
IkReal x1339=(sj8*x1334);
IkReal x1340=(sj7*x1332);
IkReal x1341=((0.244642)*pz*x1335);
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(IKsign(((0.122621676328)+(((0.117603323672)*x1331))+(((-0.00489284)*x1335))+(((0.03365012)*cj7))+(((-0.0014)*sj7))+(((-0.117603323672)*x1329))+(((-0.00489284)*x1322))+(((0.03424988)*cj8)))),-1);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal(((0.007288860468)+(((-1.0)*x1327*x1328*x1329))+(((-1.0)*x1325*x1337))+(((0.244642)*x1325*x1331))+(((-1.0)*pz*x1322*x1327))+(((-1.0)*pz*x1340))+((pz*x1324))+(((0.240358)*x1325))+((x1327*x1328*x1331))+(((-1.0)*x1323*x1334*x1335))+((x1323*x1327*x1329))+(((-1.0)*x1322*x1323*x1334))+(((-1.0)*x1328*x1330))+(((-1.0)*x1323*x1333))+((x1328*x1334*x1335))+(((0.006861229532)*x1331))+((x1322*x1328*x1334))+(((-1.0)*x1323*x1327*x1331))+(((-1.0)*sj7*x1323*x1326))+((x1328*x1333))+(((0.00196322)*cj7))+(((-1.0)*pz*x1327*x1335))+(((-0.00383446)*sj7))+(((-0.013400999476)*x1322))+(((0.07)*cj7*x1325))+((sj7*x1326*x1328))+(((-0.013400999476)*x1335))+(((-0.006861229532)*x1329))+(((-1.0)*cj7*x1323*x1332))+((x1323*x1330))+((x1332*x1338)))),IkReal(((-0.012885870524)+((sj4*x1336))+(((-1.0)*cj7*pz*x1332))+(((0.013400999476)*x1329))+(((-1.0)*x1323*x1324))+((x1323*x1329*x1334))+((x1328*x1331*x1334))+(((-0.00383446)*cj7))+(((-1.0)*x1327*x1328*x1335))+(((-0.244642)*x1325*x1335))+(((-1.0)*x1323*x1331*x1334))+(((-1.0)*pz*x1333))+(((0.01)*x1325))+((x1323*x1340))+(((-1.0)*cj7*x1323*x1326))+((x1324*x1328))+(((-0.00196322)*sj7))+(((-0.244642)*x1322*x1325))+(((-0.006861229532)*x1335))+((x1326*x1338))+(((-1.0)*pz*x1327*x1331))+(((-1.0)*x1328*x1329*x1334))+(((-1.0)*x1328*x1340))+((x1323*x1327*x1335))+((pz*x1327*x1329))+((x1322*x1323*x1327))+(((-0.013400999476)*x1331))+(((-0.006861229532)*x1322))+(((-0.240358)*sj4*x1323))+(((-1.0)*x1322*x1327*x1328))+(((-0.07)*sj7*x1325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1342.value)))+(x1343.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1344=IKsin(j5);
IkReal x1345=IKcos(j5);
IkReal x1346=(pz*sj4);
IkReal x1347=((0.244642)*sj8);
IkReal x1348=(cj4*pz);
IkReal x1349=(px*sj3);
IkReal x1350=((0.14)*sj7);
IkReal x1351=((0.14)*sj4);
IkReal x1352=((1.0)*sj4);
IkReal x1353=((0.244642)*cj8);
IkReal x1354=((1.0)*cj4);
IkReal x1355=(cj7*x1344);
IkReal x1356=((0.480716)*x1344);
IkReal x1357=(cj3*py*sj4);
IkReal x1358=((0.02)*x1344);
IkReal x1359=(cj3*cj4*py);
IkReal x1360=(sj7*x1344);
IkReal x1361=(cj4*x1345);
IkReal x1362=(cj7*x1345);
IkReal x1363=(sj7*x1345);
IkReal x1364=((0.02)*x1345);
IkReal x1365=((0.480716)*x1345);
evalcond[0]=((-0.028046)+(((-1.0)*x1353*x1363))+(((0.01)*x1345))+(((-0.07)*x1363))+(((-1.0)*x1347*x1362))+(((-1.0)*x1347*x1360))+(((-1.0)*cj3*py*x1354))+((cj4*x1349))+(((0.240358)*x1344))+(((0.07)*x1355))+((x1353*x1355))+(((-1.0)*x1346)));
evalcond[1]=((-0.054778)+x1357+(((-1.0)*x1353*x1360))+(((-1.0)*x1353*x1362))+(((0.01)*x1344))+(((-0.07)*x1360))+(((-0.07)*x1362))+(((-1.0)*x1347*x1355))+((x1347*x1363))+(((-1.0)*x1349*x1352))+(((-0.240358)*x1345))+(((-1.0)*x1348)));
evalcond[2]=(((x1357*x1363))+x1347+(((-1.0)*cj3*py*x1352*x1355))+((sj4*x1349*x1355))+(((-0.01)*cj7))+(((-0.054778)*x1363))+((x1359*x1360))+((x1359*x1362))+((x1348*x1355))+(((-0.240358)*sj7))+(((-1.0)*x1348*x1363))+((x1346*x1362))+((x1346*x1360))+(((-1.0)*x1349*x1354*x1362))+(((-1.0)*x1349*x1354*x1360))+(((0.028046)*x1360))+(((0.028046)*x1362))+(((-1.0)*x1349*x1352*x1363))+(((0.054778)*x1355)));
evalcond[3]=((-0.07)+((x1357*x1360))+((x1357*x1362))+(((-1.0)*x1353))+((x1355*x1359))+(((-0.240358)*cj7))+(((-0.054778)*x1360))+(((-0.054778)*x1362))+((sj7*x1349*x1361))+(((-0.028046)*x1363))+((x1346*x1355))+(((-1.0)*x1348*x1362))+(((-1.0)*x1348*x1360))+(((-1.0)*x1349*x1354*x1355))+(((-1.0)*cj3*py*x1354*x1363))+(((0.028046)*x1355))+(((0.01)*sj7))+(((-1.0)*x1349*x1352*x1362))+(((-1.0)*x1349*x1352*x1360))+(((-1.0)*x1346*x1363)));
evalcond[4]=((-0.0067094674)+((x1357*x1365))+(((0.014577720936)*x1344))+(((-0.14)*x1348*x1362))+(((-1.0)*(px*px)))+(((-0.056092)*x1346))+(((0.056092)*cj4*x1349))+((sj4*x1349*x1358))+(((-0.056092)*x1359))+(((0.0014)*sj7))+(((0.109556)*x1357))+(((-0.00392644)*x1363))+(((-1.0)*sj4*x1349*x1365))+((x1359*x1364))+(((-1.0)*sj4*x1344*x1349*x1350))+(((-1.0)*x1349*x1351*x1362))+(((-1.0)*cj4*x1349*x1356))+(((0.14)*x1346*x1355))+(((-0.00766892)*x1362))+(((-0.00766892)*x1360))+(((-0.02)*x1349*x1361))+(((0.14)*x1355*x1359))+((x1348*x1358))+(((0.00392644)*x1355))+((x1346*x1356))+((cj3*py*x1351*x1362))+(((-0.109556)*x1348))+((x1346*x1364))+(((-0.109556)*sj4*x1349))+(((-0.025771741048)*x1345))+((x1344*x1350*x1357))+(((-1.0)*(pz*pz)))+(((-1.0)*x1345*x1350*x1359))+(((-1.0)*x1344*x1348*x1350))+(((-1.0)*x1348*x1365))+(((-1.0)*(py*py)))+(((-1.0)*x1357*x1358))+(((-0.03365012)*cj7))+((x1356*x1359))+(((-1.0)*x1345*x1346*x1350))+(((-0.14)*cj4*x1349*x1355))+((x1349*x1350*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1366 = IKatan2WithCheck(IkReal(((((0.112184)*cj3*cj4*cj6*py*pz*sj4))+(((-0.00392644)*cj3*px*sj7))+(((0.14)*cj7*px*py*sj4*sj6))+(((0.109556)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.109556)*cj4*cj6*sj4*(pz*pz)))+(((-0.056092)*cj6*(cj4*cj4)*(pz*pz)))+(((0.14)*cj4*cj7*py*pz*sj3*sj6))+(((-0.28)*cj7*px*py*sj4*sj6*(cj3*cj3)))+(((0.025771741048)*py*sj3*sj6))+(((-0.02)*py*pz*sj3*sj4*sj6))+(((-0.109556)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj6*(cj4*cj4)*(px*px)))+(((-1.0)*cj4*cj6*sj3*(px*px*px)))+(((-0.112184)*cj4*cj6*px*pz*sj3*sj4))+(((-0.0014)*cj3*cj6*cj7*py*sj4))+(((0.480716)*cj3*sj3*sj4*sj6*(px*px)))+(((0.14)*cj3*cj7*sj3*sj4*sj6*(px*px)))+(((-0.28)*cj4*px*py*sj7*(cj3*cj3)))+(((-0.14)*cj3*cj7*sj3*sj4*sj6*(py*py)))+(((0.14)*cj3*cj4*cj7*px*pz*sj6))+(((0.0014)*cj6*cj7*px*sj3*sj4))+(((-1.0)*cj4*cj6*px*sj3*(py*py)))+(((0.0004458911331804)*cj6))+(((-0.007879767576)*cj3*cj6*py*sj4))+(((-0.03365012)*cj4*cj6*cj7*px*sj3))+(((0.025771741048)*cj3*px*sj6))+(((-0.02)*cj3*cj4*sj3*sj6*(py*py)))+(((0.14)*cj4*px*py*sj7))+(((0.219112)*cj3*cj6*py*pz*(cj4*cj4)))+(((-0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.04)*cj4*px*py*sj6*(cj3*cj3)))+(((-0.112184)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.008082623632)*cj6*pz*sj4))+(((0.084138)*cj6*(pz*pz)))+((cj6*sj4*(pz*pz*pz)))+(((0.02)*cj3*cj4*sj3*sj6*(px*px)))+(((-0.109556)*cj4*cj6*sj4*(px*px)))+(((0.109556)*cj6*px*pz*sj3))+((cj6*pz*sj4*(py*py)))+(((-0.109556)*cj3*cj6*py*pz))+(((0.00766892)*cj7*py*sj3*sj6))+((cj3*cj4*cj6*py*(px*px)))+((cj3*cj4*cj6*py*(pz*pz)))+(((0.00766892)*cj3*cj7*px*sj6))+(((-0.00392644)*py*sj3*sj7))+(((0.028046)*cj6*(px*px)))+(((-0.14)*cj3*cj4*sj3*sj7*(py*py)))+(((0.00102044046552)*cj6*cj7))+(((0.14)*cj3*cj4*sj3*sj7*(px*px)))+(((0.03365012)*cj3*cj4*cj6*cj7*py))+(((-0.219112)*cj6*px*pz*sj3*(cj4*cj4)))+(((0.008082623632)*cj3*cj4*cj6*py))+(((0.028046)*cj6*(py*py)))+(((0.007879767576)*cj6*px*sj3*sj4))+(((0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.961432)*px*py*sj4*sj6*(cj3*cj3)))+(((-0.14)*cj3*px*pz*sj4*sj7))+(((0.0014)*cj4*cj6*cj7*pz))+(((-0.480716)*cj3*sj3*sj4*sj6*(py*py)))+(((0.219112)*cj3*cj4*cj6*px*py*sj3*sj4))+(((-0.008082623632)*cj4*cj6*px*sj3))+((cj6*pz*sj4*(px*px)))+(((-0.14)*py*pz*sj3*sj4*sj7))+(((0.02)*cj4*px*py*sj6))+(((0.480716)*cj4*py*pz*sj3*sj6))+(((-1.0)*cj4*cj6*px*sj3*(pz*pz)))+(((0.480716)*px*py*sj4*sj6))+(((0.007879767576)*cj4*cj6*pz))+(((0.03365012)*cj6*cj7*pz*sj4))+((cj3*cj4*cj6*(py*py*py)))+(((0.480716)*cj3*cj4*px*pz*sj6))+(((-0.02)*cj3*px*pz*sj4*sj6)))),IkReal(((((0.0014)*cj6*cj7*pz*sj4))+(((0.14)*cj4*py*pz*sj3*sj7))+(((0.0014)*cj3*cj4*cj6*cj7*py))+(((0.14)*cj3*cj4*px*pz*sj7))+(((-0.056092)*cj6*px*pz*sj3))+(((0.02)*cj4*py*pz*sj3*sj6))+(((0.109556)*cj6*(cj4*cj4)*(px*px)))+(((0.28)*cj4*cj7*px*py*sj6*(cj3*cj3)))+(((-0.054778)*cj6*(pz*pz)))+(((-0.012510725968)*cj4*cj6*pz))+(((-1.0)*cj4*cj6*pz*(px*px)))+(((-0.109556)*cj6*(cj4*cj4)*(pz*pz)))+(((0.14)*cj3*cj7*px*pz*sj4*sj6))+(((-0.056092)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.014577720936)*cj3*px*sj6))+(((0.056092)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.02)*cj3*cj4*px*pz*sj6))+(((0.00392644)*cj7*py*sj3*sj6))+((cj3*cj6*py*sj4*(px*px)))+(((-0.28)*px*py*sj4*sj7*(cj3*cj3)))+(((-0.14)*cj3*cj4*cj7*sj3*sj6*(px*px)))+(((-0.14)*cj4*cj7*px*py*sj6))+(((-0.112184)*cj3*cj6*py*pz*(cj4*cj4)))+(((-0.0014)*cj4*cj6*cj7*px*sj3))+(((-0.012510725968)*cj6*px*sj3*sj4))+(((-1.0)*cj6*sj3*sj4*(px*px*px)))+(((-0.14)*cj3*sj3*sj4*sj7*(py*py)))+(((0.219112)*cj3*cj4*cj6*py*pz*sj4))+(((-0.054778)*cj6*(py*py)))+(((0.056092)*cj4*cj6*sj4*(px*px)))+(((-0.00180402187336)*cj6*cj7))+(((-0.0002217539958772)*cj6))+(((-0.001734552424)*cj4*cj6*px*sj3))+(((0.14)*cj3*sj3*sj4*sj7*(px*px)))+(((-0.04)*px*py*sj4*sj6*(cj3*cj3)))+((cj3*cj6*py*sj4*(pz*pz)))+(((-0.480716)*cj3*cj4*sj3*sj6*(px*px)))+(((0.480716)*cj3*cj4*sj3*sj6*(py*py)))+(((-0.109556)*cj6*(cj3*cj3)*(py*py)))+(((0.14)*cj3*cj4*cj7*sj3*sj6*(py*py)))+(((0.112184)*cj6*px*pz*sj3*(cj4*cj4)))+(((-1.0)*cj4*cj6*pz*(py*py)))+(((0.02)*cj3*sj3*sj4*sj6*(px*px)))+(((0.00766892)*py*sj3*sj7))+(((-1.0)*cj4*cj6*(pz*pz*pz)))+(((0.14)*px*py*sj4*sj7))+(((0.056092)*cj3*cj6*py*pz))+(((-0.03365012)*cj4*cj6*cj7*pz))+(((-0.056092)*cj4*cj6*sj4*(pz*pz)))+(((0.961432)*cj4*px*py*sj6*(cj3*cj3)))+((cj3*cj6*sj4*(py*py*py)))+(((0.001734552424)*cj6*pz*sj4))+(((0.014577720936)*py*sj3*sj6))+(((0.00392644)*cj3*cj7*px*sj6))+(((0.480716)*cj3*px*pz*sj4*sj6))+(((0.03365012)*cj3*cj6*cj7*py*sj4))+(((-0.164334)*cj6*(px*px)))+(((0.109556)*cj6*(cj3*cj3)*(px*px)))+(((0.02)*px*py*sj4*sj6))+(((-1.0)*cj6*px*sj3*sj4*(py*py)))+(((-1.0)*cj6*px*sj3*sj4*(pz*pz)))+(((-0.219112)*cj4*cj6*px*pz*sj3*sj4))+(((-0.480716)*cj4*px*py*sj6))+(((0.480716)*py*pz*sj3*sj4*sj6))+(((0.219112)*cj3*cj6*px*py*sj3))+(((-0.02)*cj3*sj3*sj4*sj6*(py*py)))+(((-0.03365012)*cj6*cj7*px*sj3*sj4))+(((-0.112184)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.00766892)*cj3*px*sj7))+(((-0.219112)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.012510725968)*cj3*cj6*py*sj4))+(((-0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((0.001734552424)*cj3*cj4*cj6*py))+(((0.14)*cj7*py*pz*sj3*sj4*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(IKsign(((((-0.01533784)*cj3*cj6*cj7*py*sj4))+(((0.00785288)*cj6*cj7*pz*sj4))+(((0.480716)*cj6*(pz*pz)))+(((0.00785288)*cj3*cj4*cj6*cj7*py))+(((-0.28)*cj3*cj6*cj7*px*py*sj3))+(((0.480716)*cj6*(cj3*cj3)*(py*py)))+(((0.14)*cj6*cj7*(cj3*cj3)*(py*py)))+(((0.052665322096)*cj6*px*sj3*sj4))+(((-0.480716)*cj6*(cj3*cj3)*(px*px)))+(((0.01533784)*cj4*cj6*cj7*pz))+(((0.052665322096)*cj4*cj6*pz))+(((0.01533784)*cj6*cj7*px*sj3*sj4))+(((-0.14)*cj6*cj7*(cj3*cj3)*(px*px)))+(((0.000530209036)*cj6*cj7))+(((-0.026964321872)*cj4*cj6*px*sj3))+(((-0.961432)*cj3*cj6*px*py*sj3))+(((-0.052665322096)*cj3*cj6*py*sj4))+(((0.026964321872)*cj3*cj4*cj6*py))+(((0.480716)*cj6*(px*px)))+(((0.026964321872)*cj6*pz*sj4))+(((0.14)*cj6*cj7*(px*px)))+(((0.0018205711924984)*cj6))+(((0.14)*cj6*cj7*(pz*pz)))+(((-0.00785288)*cj4*cj6*cj7*px*sj3)))),-1);
if(!x1367.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1366.value)+(((1.5707963267949)*(x1367.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1368=IKsin(j5);
IkReal x1369=IKcos(j5);
IkReal x1370=(cj3*py);
IkReal x1371=((0.14)*cj7);
IkReal x1372=(cj6*pz);
IkReal x1373=(sj3*sj6);
IkReal x1374=((0.02)*pz);
IkReal x1375=(sj6*sj7);
IkReal x1376=(px*sj3);
IkReal x1377=((0.056092)*cj4);
IkReal x1378=((0.109556)*sj4);
IkReal x1379=((0.480716)*pz);
IkReal x1380=(sj4*x1369);
IkReal x1381=(cj6*x1376);
IkReal x1382=(cj4*x1369);
IkReal x1383=(sj4*x1368);
IkReal x1384=(cj4*x1368);
IkReal x1385=((0.14)*px*sj7);
IkReal x1386=((0.14)*pz*x1375);
evalcond[0]=(((x1381*x1383))+(((-0.01)*cj6))+(((-1.0)*py*x1373))+(((0.028046)*cj6*x1369))+((x1372*x1384))+((x1372*x1380))+((cj6*x1370*x1382))+(((-1.0)*cj3*px*sj6))+(((-1.0)*cj6*x1370*x1383))+(((0.054778)*cj6*x1368))+(((-1.0)*x1381*x1382)));
evalcond[1]=((-0.0067094674)+((x1380*x1386))+((x1376*x1377))+(((-0.00766892)*cj7*x1369))+(((0.14)*x1370*x1375*x1382))+(((-1.0)*(px*px)))+(((0.02)*x1370*x1382))+(((-1.0)*x1371*x1376*x1380))+(((-1.0)*x1371*x1376*x1384))+(((0.00392644)*cj7*x1368))+(((0.480716)*x1370*x1384))+(((0.480716)*x1370*x1380))+(((-1.0)*x1370*x1377))+(((-0.056092)*pz*sj4))+(((-0.02)*x1370*x1383))+(((0.14)*cj6*py*sj3*sj7))+(((-0.0014)*x1375))+(((0.00766892)*x1368*x1375))+((x1370*x1371*x1380))+((x1370*x1371*x1384))+(((-0.025771741048)*x1369))+((pz*x1371*x1383))+(((-0.14)*x1370*x1375*x1383))+(((0.00392644)*x1369*x1375))+(((-0.109556)*cj4*pz))+((x1370*x1378))+(((-1.0)*(pz*pz)))+(((-1.0)*x1376*x1378))+((x1379*x1383))+((x1384*x1386))+(((-1.0)*pz*x1371*x1382))+(((-1.0)*x1373*x1382*x1385))+(((0.02)*x1376*x1383))+((x1374*x1384))+((x1374*x1380))+(((-1.0)*(py*py)))+((cj3*cj6*x1385))+(((-0.480716)*x1376*x1380))+(((-0.480716)*x1376*x1384))+((x1373*x1383*x1385))+(((-0.03365012)*cj7))+(((0.014577720936)*x1368))+(((-1.0)*x1379*x1382))+(((-0.02)*x1376*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[2];
IkReal x1387=(cj6*sj5);
j8eval[0]=x1387;
j8eval[1]=IKsign(x1387);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1388=(cj5*cj6);
j8eval[0]=x1388;
j8eval[1]=IKsign(x1388);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1389=(cj6*cj7);
j8eval[0]=(x1389+(((3.43368571428571)*cj6)));
j8eval[1]=IKsign(((((4189.47957148)*x1389))+(((14385.3561548827)*cj6))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1390=(cj7*sj4);
IkReal x1391=(cj4*sj7);
IkReal x1392=(cj5*sj7);
IkReal x1393=(cj3*py);
IkReal x1394=(cj5*pz);
IkReal x1395=(sj5*sj7);
IkReal x1396=((4.08760556241365)*sj4);
IkReal x1397=((0.223910857497895)*cj7);
IkReal x1398=((4.08760556241365)*sj5);
IkReal x1399=(px*sj3);
IkReal x1400=((4.08760556241365)*cj5);
IkReal x1401=((0.114640985603453)*cj7);
IkReal x1402=(pz*x1398);
IkReal x1403=((4.08760556241365)*cj4*cj7);
IkReal x1404=((4.08760556241365)*x1399);
if( IKabs((((cj4*cj7*x1402))+((x1392*x1396*x1399))+(((-1.0)*x1390*x1393*x1398))+(((-1.0)*x1392*x1393*x1396))+((cj5*x1401))+((cj4*cj7*x1393*x1400))+(((4.08760556241365)*x1391*x1394))+((x1391*x1398*x1399))+(((-0.114640985603453)*x1395))+(((-1.0)*x1391*x1393*x1398))+(((0.98248869777062)*sj7))+(((-1.0)*cj4*cj7*x1399*x1400))+(((-0.0408760556241365)*cj7))+(((4.08760556241365)*x1390*x1394))+((x1390*x1398*x1399))+((sj5*x1397))+(((-1.0)*pz*x1395*x1396))+(((0.223910857497895)*x1392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((cj4*cj7*x1393*x1398))+(((-0.0408760556241365)*sj7))+(((-1.0)*cj5*x1397))+((sj5*x1401))+((x1391*x1402))+((x1390*x1393*x1400))+(((-1.0)*cj4*cj7*x1398*x1399))+((x1391*x1393*x1400))+(((-0.98248869777062)*cj7))+(((-1.0)*x1391*x1399*x1400))+((pz*x1392*x1396))+(((0.114640985603453)*x1392))+(((0.223910857497895)*x1395))+(((-1.0)*x1393*x1395*x1396))+(((-1.0)*x1390*x1399*x1400))+((x1390*x1402))+(((-1.0)*x1394*x1403))+((x1395*x1396*x1399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*cj7*x1402))+((x1392*x1396*x1399))+(((-1.0)*x1390*x1393*x1398))+(((-1.0)*x1392*x1393*x1396))+((cj5*x1401))+((cj4*cj7*x1393*x1400))+(((4.08760556241365)*x1391*x1394))+((x1391*x1398*x1399))+(((-0.114640985603453)*x1395))+(((-1.0)*x1391*x1393*x1398))+(((0.98248869777062)*sj7))+(((-1.0)*cj4*cj7*x1399*x1400))+(((-0.0408760556241365)*cj7))+(((4.08760556241365)*x1390*x1394))+((x1390*x1398*x1399))+((sj5*x1397))+(((-1.0)*pz*x1395*x1396))+(((0.223910857497895)*x1392))))+IKsqr(((-0.286132389368955)+((cj4*cj7*x1393*x1398))+(((-0.0408760556241365)*sj7))+(((-1.0)*cj5*x1397))+((sj5*x1401))+((x1391*x1402))+((x1390*x1393*x1400))+(((-1.0)*cj4*cj7*x1398*x1399))+((x1391*x1393*x1400))+(((-0.98248869777062)*cj7))+(((-1.0)*x1391*x1399*x1400))+((pz*x1392*x1396))+(((0.114640985603453)*x1392))+(((0.223910857497895)*x1395))+(((-1.0)*x1393*x1395*x1396))+(((-1.0)*x1390*x1399*x1400))+((x1390*x1402))+(((-1.0)*x1394*x1403))+((x1395*x1396*x1399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj4*cj7*x1402))+((x1392*x1396*x1399))+(((-1.0)*x1390*x1393*x1398))+(((-1.0)*x1392*x1393*x1396))+((cj5*x1401))+((cj4*cj7*x1393*x1400))+(((4.08760556241365)*x1391*x1394))+((x1391*x1398*x1399))+(((-0.114640985603453)*x1395))+(((-1.0)*x1391*x1393*x1398))+(((0.98248869777062)*sj7))+(((-1.0)*cj4*cj7*x1399*x1400))+(((-0.0408760556241365)*cj7))+(((4.08760556241365)*x1390*x1394))+((x1390*x1398*x1399))+((sj5*x1397))+(((-1.0)*pz*x1395*x1396))+(((0.223910857497895)*x1392))), ((-0.286132389368955)+((cj4*cj7*x1393*x1398))+(((-0.0408760556241365)*sj7))+(((-1.0)*cj5*x1397))+((sj5*x1401))+((x1391*x1402))+((x1390*x1393*x1400))+(((-1.0)*cj4*cj7*x1398*x1399))+((x1391*x1393*x1400))+(((-0.98248869777062)*cj7))+(((-1.0)*x1391*x1399*x1400))+((pz*x1392*x1396))+(((0.114640985603453)*x1392))+(((0.223910857497895)*x1395))+(((-1.0)*x1393*x1395*x1396))+(((-1.0)*x1390*x1399*x1400))+((x1390*x1402))+(((-1.0)*x1394*x1403))+((x1395*x1396*x1399))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1405=IKcos(j8);
IkReal x1406=IKsin(j8);
IkReal x1407=(pz*sj4);
IkReal x1408=(cj3*py);
IkReal x1409=(cj4*pz);
IkReal x1410=(sj5*sj7);
IkReal x1411=((1.0)*cj5);
IkReal x1412=(cj4*cj7);
IkReal x1413=(cj5*cj7);
IkReal x1414=(cj5*sj7);
IkReal x1415=(cj7*sj5);
IkReal x1416=(cj4*px*sj3);
IkReal x1417=(cj7*x1405);
IkReal x1418=((0.244642)*x1406);
IkReal x1419=(px*sj3*sj4);
IkReal x1420=((0.244642)*x1405);
evalcond[0]=((-0.028046)+(((-1.0)*cj4*x1408))+(((0.07)*x1414))+(((0.07)*x1415))+(((-1.0)*x1407))+((x1415*x1420))+((x1413*x1418))+((x1414*x1420))+(((0.01)*cj5))+(((0.240358)*sj5))+(((-1.0)*x1410*x1418))+x1416);
evalcond[1]=((-0.054778)+((x1415*x1418))+(((0.07)*x1410))+(((-1.0)*x1409))+(((-0.240358)*cj5))+((x1410*x1420))+(((-1.0)*x1413*x1420))+(((0.01)*sj5))+((sj4*x1408))+(((-0.07)*x1413))+((x1414*x1418))+(((-1.0)*x1419)));
evalcond[2]=((0.118834468928)+(((0.056092)*x1416))+(((0.109556)*sj4*x1408))+(((0.00489284)*sj7*x1405))+(((0.03424988)*x1405))+(((0.03365012)*cj7))+(((-0.109556)*x1409))+(((0.0014)*sj7))+(((-0.109556)*x1419))+(((-1.0)*pp))+(((-0.056092)*x1407))+(((0.117603323672)*x1417))+(((-0.056092)*cj4*x1408))+(((0.00489284)*cj7*x1406))+(((-0.117603323672)*sj7*x1406)));
evalcond[3]=((-0.07)+(((-0.240358)*cj7))+((x1407*x1415))+((x1407*x1414))+(((-0.054778)*x1413))+(((0.054778)*x1410))+((cj4*x1408*x1414))+(((-1.0)*sj4*x1408*x1410))+(((-0.01)*sj7))+((sj4*x1408*x1413))+((x1410*x1419))+((x1409*x1410))+(((-1.0)*cj7*x1411*x1419))+(((0.028046)*x1414))+(((0.028046)*x1415))+(((-1.0)*sj7*x1411*x1416))+((sj5*x1408*x1412))+(((-1.0)*px*sj3*sj5*x1412))+(((-1.0)*cj7*x1409*x1411))+(((-1.0)*x1420)));
evalcond[4]=(((x1407*x1410))+(((-0.054778)*x1414))+(((-0.054778)*x1415))+(((-1.0)*x1415*x1419))+(((-1.0)*sj7*x1409*x1411))+(((-1.0)*x1410*x1416))+(((-0.028046)*x1413))+(((0.01)*cj7))+((cj4*x1408*x1410))+(((-0.240358)*sj7))+(((-1.0)*x1408*x1411*x1412))+((sj4*x1408*x1414))+((sj4*x1408*x1415))+((cj5*px*sj3*x1412))+x1418+(((0.028046)*x1410))+(((-1.0)*x1409*x1415))+(((-1.0)*sj7*x1411*x1419))+(((-1.0)*cj7*x1407*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1421=(pz*sj4);
IkReal x1422=(cj3*py);
IkReal x1423=(cj5*sj7);
IkReal x1424=(sj5*sj7);
IkReal x1425=(cj5*cj7);
IkReal x1426=(px*sj3);
IkReal x1427=((4.08760556241365)*cj4);
IkReal x1428=((4.08760556241365)*sj4);
IkReal x1429=(cj7*sj5);
IkReal x1430=((4.08760556241365)*x1429);
IkReal x1431=(pz*x1427);
if( IKabs(((((-1.0)*x1426*x1428*x1429))+(((-1.0)*x1429*x1431))+(((0.98248869777062)*sj7))+(((-4.08760556241365)*x1421*x1424))+(((-4.08760556241365)*x1421*x1425))+((x1425*x1426*x1427))+((x1424*x1426*x1427))+(((0.0408760556241365)*cj7))+(((-1.0)*x1422*x1423*x1428))+(((-1.0)*x1422*x1424*x1427))+((x1423*x1426*x1428))+((x1422*x1428*x1429))+(((-0.114640985603453)*x1424))+(((-0.114640985603453)*x1425))+(((-1.0)*x1422*x1425*x1427))+((x1423*x1431))+(((-0.223910857497895)*x1429))+(((0.223910857497895)*x1423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((0.0408760556241365)*sj7))+(((-1.0)*x1425*x1426*x1428))+(((-1.0)*x1424*x1426*x1428))+((x1421*x1430))+(((-4.08760556241365)*x1421*x1423))+(((-1.0)*x1426*x1427*x1429))+((x1422*x1427*x1429))+(((-1.0)*x1422*x1423*x1427))+((x1422*x1424*x1428))+((x1423*x1426*x1427))+(((-1.0)*x1424*x1431))+(((-0.98248869777062)*cj7))+(((-1.0)*x1425*x1431))+(((0.114640985603453)*x1429))+(((-0.114640985603453)*x1423))+((x1422*x1425*x1428))+(((-0.223910857497895)*x1424))+(((-0.223910857497895)*x1425)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1426*x1428*x1429))+(((-1.0)*x1429*x1431))+(((0.98248869777062)*sj7))+(((-4.08760556241365)*x1421*x1424))+(((-4.08760556241365)*x1421*x1425))+((x1425*x1426*x1427))+((x1424*x1426*x1427))+(((0.0408760556241365)*cj7))+(((-1.0)*x1422*x1423*x1428))+(((-1.0)*x1422*x1424*x1427))+((x1423*x1426*x1428))+((x1422*x1428*x1429))+(((-0.114640985603453)*x1424))+(((-0.114640985603453)*x1425))+(((-1.0)*x1422*x1425*x1427))+((x1423*x1431))+(((-0.223910857497895)*x1429))+(((0.223910857497895)*x1423))))+IKsqr(((-0.286132389368955)+(((0.0408760556241365)*sj7))+(((-1.0)*x1425*x1426*x1428))+(((-1.0)*x1424*x1426*x1428))+((x1421*x1430))+(((-4.08760556241365)*x1421*x1423))+(((-1.0)*x1426*x1427*x1429))+((x1422*x1427*x1429))+(((-1.0)*x1422*x1423*x1427))+((x1422*x1424*x1428))+((x1423*x1426*x1427))+(((-1.0)*x1424*x1431))+(((-0.98248869777062)*cj7))+(((-1.0)*x1425*x1431))+(((0.114640985603453)*x1429))+(((-0.114640985603453)*x1423))+((x1422*x1425*x1428))+(((-0.223910857497895)*x1424))+(((-0.223910857497895)*x1425))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1426*x1428*x1429))+(((-1.0)*x1429*x1431))+(((0.98248869777062)*sj7))+(((-4.08760556241365)*x1421*x1424))+(((-4.08760556241365)*x1421*x1425))+((x1425*x1426*x1427))+((x1424*x1426*x1427))+(((0.0408760556241365)*cj7))+(((-1.0)*x1422*x1423*x1428))+(((-1.0)*x1422*x1424*x1427))+((x1423*x1426*x1428))+((x1422*x1428*x1429))+(((-0.114640985603453)*x1424))+(((-0.114640985603453)*x1425))+(((-1.0)*x1422*x1425*x1427))+((x1423*x1431))+(((-0.223910857497895)*x1429))+(((0.223910857497895)*x1423))), ((-0.286132389368955)+(((0.0408760556241365)*sj7))+(((-1.0)*x1425*x1426*x1428))+(((-1.0)*x1424*x1426*x1428))+((x1421*x1430))+(((-4.08760556241365)*x1421*x1423))+(((-1.0)*x1426*x1427*x1429))+((x1422*x1427*x1429))+(((-1.0)*x1422*x1423*x1427))+((x1422*x1424*x1428))+((x1423*x1426*x1427))+(((-1.0)*x1424*x1431))+(((-0.98248869777062)*cj7))+(((-1.0)*x1425*x1431))+(((0.114640985603453)*x1429))+(((-0.114640985603453)*x1423))+((x1422*x1425*x1428))+(((-0.223910857497895)*x1424))+(((-0.223910857497895)*x1425))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1432=IKsin(j8);
IkReal x1433=IKcos(j8);
IkReal x1434=(pz*sj4);
IkReal x1435=((1.0)*cj5);
IkReal x1436=(cj3*py);
IkReal x1437=(cj5*cj7);
IkReal x1438=(sj5*sj7);
IkReal x1439=(cj7*sj5);
IkReal x1440=(cj4*sj7);
IkReal x1441=(cj4*pz);
IkReal x1442=(cj5*sj7);
IkReal x1443=(cj4*px*sj3);
IkReal x1444=(cj7*x1433);
IkReal x1445=((1.0)*x1441);
IkReal x1446=(px*sj3*sj4);
IkReal x1447=((0.244642)*x1433);
IkReal x1448=((0.244642)*x1432);
evalcond[0]=((-0.028046)+((x1439*x1447))+(((-1.0)*x1434))+(((-0.07)*x1442))+(((-1.0)*x1438*x1448))+(((-1.0)*x1437*x1448))+(((0.01)*cj5))+(((0.240358)*sj5))+(((0.07)*x1439))+x1443+(((-1.0)*x1442*x1447))+(((-1.0)*cj4*x1436)));
evalcond[1]=((-0.054778)+(((-0.240358)*cj5))+((x1442*x1448))+(((-1.0)*x1438*x1447))+(((-1.0)*x1446))+(((-1.0)*x1437*x1447))+(((-1.0)*x1439*x1448))+(((-1.0)*x1445))+(((-0.07)*x1438))+(((-0.07)*x1437))+(((0.01)*sj5))+((sj4*x1436)));
evalcond[2]=((0.118834468928)+(((-0.109556)*x1446))+(((-0.109556)*x1441))+(((0.117603323672)*x1444))+(((0.109556)*sj4*x1436))+(((-0.00489284)*cj7*x1432))+(((0.03365012)*cj7))+(((0.03424988)*x1433))+(((-0.00489284)*sj7*x1433))+(((-0.0014)*sj7))+(((-0.056092)*x1434))+(((-1.0)*pp))+(((-0.056092)*cj4*x1436))+(((0.056092)*x1443))+(((-0.117603323672)*sj7*x1432)));
evalcond[3]=((((-1.0)*cj7*x1435*x1443))+((x1439*x1441))+((x1439*x1446))+(((-1.0)*x1438*x1443))+(((-0.01)*cj7))+(((-1.0)*pz*x1435*x1440))+((cj4*x1436*x1437))+((cj4*x1436*x1438))+((x1434*x1438))+((x1434*x1437))+(((0.054778)*x1439))+(((-0.240358)*sj7))+x1448+(((-0.054778)*x1442))+(((-1.0)*sj7*x1435*x1446))+(((0.028046)*x1438))+(((0.028046)*x1437))+(((-1.0)*sj4*x1436*x1439))+((sj4*x1436*x1442)));
evalcond[4]=((-0.07)+(((-1.0)*cj7*x1435*x1441))+(((-1.0)*cj7*x1435*x1446))+((sj4*x1436*x1437))+((sj4*x1436*x1438))+(((-1.0)*sj7*x1434*x1435))+(((-0.240358)*cj7))+(((-1.0)*x1438*x1446))+((cj5*px*sj3*x1440))+(((-1.0)*x1438*x1445))+(((-0.054778)*x1438))+(((-0.054778)*x1437))+((cj4*x1436*x1439))+((x1434*x1439))+(((-0.028046)*x1442))+(((-1.0)*x1439*x1443))+(((-1.0)*x1447))+(((0.028046)*x1439))+(((-1.0)*x1435*x1436*x1440))+(((0.01)*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1449=((4.08760556241365)*cj4);
IkReal x1450=(px*sj3);
IkReal x1451=(cj7*pz);
IkReal x1452=(pz*sj7);
IkReal x1453=((4.08760556241365)*sj4);
IkReal x1454=(cj3*py*sj7);
IkReal x1455=(cj3*cj7*py);
if( IKabs((((cj7*x1450*x1453))+((sj7*x1449*x1450))+(((0.867847712167167)*sj7))+(((-1.0)*x1453*x1455))+(((-1.0)*x1452*x1453))+((x1449*x1451))+(((-1.0)*x1449*x1454))+(((0.183034801873758)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-0.867847712167167)*cj7))+(((-1.0)*x1453*x1454))+((sj7*x1450*x1453))+((x1449*x1455))+((x1449*x1452))+(((0.183034801873758)*sj7))+(((-1.0)*cj7*x1449*x1450))+((x1451*x1453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj7*x1450*x1453))+((sj7*x1449*x1450))+(((0.867847712167167)*sj7))+(((-1.0)*x1453*x1455))+(((-1.0)*x1452*x1453))+((x1449*x1451))+(((-1.0)*x1449*x1454))+(((0.183034801873758)*cj7))))+IKsqr(((-0.286132389368955)+(((-0.867847712167167)*cj7))+(((-1.0)*x1453*x1454))+((sj7*x1450*x1453))+((x1449*x1455))+((x1449*x1452))+(((0.183034801873758)*sj7))+(((-1.0)*cj7*x1449*x1450))+((x1451*x1453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj7*x1450*x1453))+((sj7*x1449*x1450))+(((0.867847712167167)*sj7))+(((-1.0)*x1453*x1455))+(((-1.0)*x1452*x1453))+((x1449*x1451))+(((-1.0)*x1449*x1454))+(((0.183034801873758)*cj7))), ((-0.286132389368955)+(((-0.867847712167167)*cj7))+(((-1.0)*x1453*x1454))+((sj7*x1450*x1453))+((x1449*x1455))+((x1449*x1452))+(((0.183034801873758)*sj7))+(((-1.0)*cj7*x1449*x1450))+((x1451*x1453))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1456=IKcos(j8);
IkReal x1457=IKsin(j8);
IkReal x1458=(pz*sj4);
IkReal x1459=(px*sj3);
IkReal x1460=(cj3*py);
IkReal x1461=((1.0)*sj4);
IkReal x1462=(cj4*pz);
IkReal x1463=((0.056092)*cj4);
IkReal x1464=(cj4*cj7);
IkReal x1465=((0.109556)*sj4);
IkReal x1466=(cj4*sj7);
IkReal x1467=(cj7*x1456);
IkReal x1468=(cj7*x1457);
IkReal x1469=((0.244642)*x1456);
IkReal x1470=((0.244642)*x1457);
evalcond[0]=((0.212312)+(((0.07)*cj7))+((cj4*x1459))+(((-1.0)*x1458))+(((-1.0)*cj4*x1460))+(((-1.0)*sj7*x1470))+(((0.244642)*x1467)));
evalcond[1]=((-0.044778)+(((-1.0)*x1459*x1461))+(((0.07)*sj7))+((sj7*x1469))+(((0.244642)*x1468))+((sj4*x1460))+(((-1.0)*x1462)));
evalcond[2]=((-0.07)+(((-1.0)*x1469))+(((-0.212312)*cj7))+((cj7*x1458))+(((0.044778)*sj7))+((x1460*x1464))+(((-1.0)*sj7*x1460*x1461))+((sj7*x1462))+((sj4*sj7*x1459))+(((-1.0)*x1459*x1464)));
evalcond[3]=(((sj7*x1458))+(((-0.044778)*cj7))+((cj7*sj4*x1460))+((x1460*x1466))+(((-1.0)*cj7*x1459*x1461))+(((-1.0)*cj7*x1462))+x1470+(((-1.0)*x1459*x1466))+(((-0.212312)*sj7)));
evalcond[4]=((0.118834468928)+(((0.03365012)*cj7))+(((-1.0)*x1459*x1465))+(((0.0014)*sj7))+((x1459*x1463))+(((0.03424988)*x1456))+(((0.117603323672)*x1467))+(((-1.0)*pp))+(((-0.109556)*x1462))+(((-0.056092)*x1458))+((x1460*x1465))+(((-1.0)*x1460*x1463))+(((-0.117603323672)*sj7*x1457))+(((0.00489284)*sj7*x1456))+(((0.00489284)*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1471=((4.08760556241365)*cj4);
IkReal x1472=(px*sj3);
IkReal x1473=(cj7*pz);
IkReal x1474=(pz*sj7);
IkReal x1475=((4.08760556241365)*sj4);
IkReal x1476=(cj3*py*sj7);
IkReal x1477=(cj3*cj7*py);
if( IKabs(((((-1.0)*x1471*x1476))+(((-1.0)*x1471*x1473))+(((0.867847712167167)*sj7))+(((-1.0)*x1474*x1475))+(((-1.0)*cj7*x1472*x1475))+(((-0.183034801873758)*cj7))+((sj7*x1471*x1472))+((x1475*x1477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((x1471*x1477))+(((-1.0)*x1471*x1474))+(((-1.0)*sj7*x1472*x1475))+(((-0.183034801873758)*sj7))+((x1473*x1475))+(((-0.867847712167167)*cj7))+(((-1.0)*cj7*x1471*x1472))+((x1475*x1476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1471*x1476))+(((-1.0)*x1471*x1473))+(((0.867847712167167)*sj7))+(((-1.0)*x1474*x1475))+(((-1.0)*cj7*x1472*x1475))+(((-0.183034801873758)*cj7))+((sj7*x1471*x1472))+((x1475*x1477))))+IKsqr(((-0.286132389368955)+((x1471*x1477))+(((-1.0)*x1471*x1474))+(((-1.0)*sj7*x1472*x1475))+(((-0.183034801873758)*sj7))+((x1473*x1475))+(((-0.867847712167167)*cj7))+(((-1.0)*cj7*x1471*x1472))+((x1475*x1476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1471*x1476))+(((-1.0)*x1471*x1473))+(((0.867847712167167)*sj7))+(((-1.0)*x1474*x1475))+(((-1.0)*cj7*x1472*x1475))+(((-0.183034801873758)*cj7))+((sj7*x1471*x1472))+((x1475*x1477))), ((-0.286132389368955)+((x1471*x1477))+(((-1.0)*x1471*x1474))+(((-1.0)*sj7*x1472*x1475))+(((-0.183034801873758)*sj7))+((x1473*x1475))+(((-0.867847712167167)*cj7))+(((-1.0)*cj7*x1471*x1472))+((x1475*x1476))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1478=IKcos(j8);
IkReal x1479=IKsin(j8);
IkReal x1480=(pz*sj4);
IkReal x1481=(cj4*pz);
IkReal x1482=(px*sj3);
IkReal x1483=(cj7*sj4);
IkReal x1484=(cj3*py);
IkReal x1485=((0.056092)*cj4);
IkReal x1486=((1.0)*sj4);
IkReal x1487=(cj4*cj7);
IkReal x1488=((0.109556)*sj4);
IkReal x1489=((1.0)*sj7);
IkReal x1490=(cj7*x1478);
IkReal x1491=(sj7*x1479);
IkReal x1492=(cj7*x1479);
IkReal x1493=((0.244642)*x1478);
evalcond[0]=((0.212312)+(((0.07)*cj7))+(((0.244642)*x1490))+(((-0.244642)*x1491))+(((-1.0)*x1480))+((cj4*x1482))+(((-1.0)*cj4*x1484)));
evalcond[1]=((-0.044778)+(((-1.0)*x1482*x1486))+(((-1.0)*sj7*x1493))+(((-0.244642)*x1492))+(((-0.07)*sj7))+(((-1.0)*x1481))+((sj4*x1484)));
evalcond[2]=((((0.244642)*x1479))+(((-1.0)*x1483*x1484))+((x1482*x1483))+((sj7*x1480))+(((0.044778)*cj7))+((cj7*x1481))+((cj4*sj7*x1484))+(((-0.212312)*sj7))+(((-1.0)*cj4*x1482*x1489)));
evalcond[3]=((-0.07)+(((-1.0)*x1481*x1489))+(((-1.0)*x1493))+(((-0.044778)*sj7))+(((-0.212312)*cj7))+((sj4*sj7*x1484))+(((-1.0)*x1482*x1487))+((x1484*x1487))+(((-1.0)*sj7*x1482*x1486))+((cj7*x1480)));
evalcond[4]=((0.118834468928)+(((-0.00489284)*sj7*x1478))+(((-1.0)*x1482*x1488))+(((-0.056092)*x1480))+(((0.03365012)*cj7))+((x1482*x1485))+(((0.117603323672)*x1490))+(((-0.109556)*x1481))+(((-1.0)*x1484*x1485))+(((-0.0014)*sj7))+(((-1.0)*pp))+((x1484*x1488))+(((-0.117603323672)*x1491))+(((-0.00489284)*x1492))+(((0.03424988)*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1494=((4.08760556241365)*pz);
IkReal x1495=((4.08760556241365)*cj3);
IkReal x1496=((4.08760556241365)*sj3);
IkReal x1497=(sj4*sj6);
if( IKabs((((px*x1496*x1497))+((cj6*px*x1495))+(((-1.0)*py*x1495*x1497))+(((0.183034801873758)*sj6))+((cj4*sj6*x1494))+((cj6*py*x1496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.15398010153612)+((cj4*py*x1495))+((sj4*x1494))+(((-1.0)*cj4*px*x1496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1496*x1497))+((cj6*px*x1495))+(((-1.0)*py*x1495*x1497))+(((0.183034801873758)*sj6))+((cj4*sj6*x1494))+((cj6*py*x1496))))+IKsqr(((-1.15398010153612)+((cj4*py*x1495))+((sj4*x1494))+(((-1.0)*cj4*px*x1496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((px*x1496*x1497))+((cj6*px*x1495))+(((-1.0)*py*x1495*x1497))+(((0.183034801873758)*sj6))+((cj4*sj6*x1494))+((cj6*py*x1496))), ((-1.15398010153612)+((cj4*py*x1495))+((sj4*x1494))+(((-1.0)*cj4*px*x1496))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1498=IKsin(j8);
IkReal x1499=IKcos(j8);
IkReal x1500=(pz*sj4);
IkReal x1501=((1.0)*cj4);
IkReal x1502=((1.0)*px);
IkReal x1503=(sj3*sj4);
IkReal x1504=(cj3*py);
IkReal x1505=(cj4*px*sj3);
IkReal x1506=(sj4*x1504);
IkReal x1507=((0.244642)*x1498);
IkReal x1508=((1.0)*py*sj3);
evalcond[0]=((((-1.0)*x1508))+((cj6*x1507))+(((-1.0)*cj3*x1502)));
evalcond[1]=((0.282312)+(((-1.0)*x1500))+(((0.244642)*x1499))+(((-1.0)*x1501*x1504))+x1505);
evalcond[2]=((-0.044778)+((sj6*x1507))+x1506+(((-1.0)*pz*x1501))+(((-1.0)*x1502*x1503)));
evalcond[3]=((((-1.0)*sj6*x1502*x1503))+(((-1.0)*cj3*cj6*x1502))+(((-0.044778)*sj6))+((sj6*x1506))+x1507+(((-1.0)*cj6*x1508))+(((-1.0)*pz*sj6*x1501)));
evalcond[4]=((0.152484588928)+(((-0.056092)*cj4*x1504))+(((0.056092)*x1505))+(((-0.109556)*px*x1503))+(((0.109556)*x1506))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))+(((-0.056092)*x1500))+(((0.00489284)*sj6*x1498))+(((0.151853203672)*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1509=((4.08760556241365)*pz);
IkReal x1510=((4.08760556241365)*cj3);
IkReal x1511=((4.08760556241365)*sj3);
IkReal x1512=(sj4*sj6);
if( IKabs(((((-0.183034801873758)*sj6))+((py*x1510*x1512))+(((-1.0)*cj4*sj6*x1509))+(((-1.0)*cj6*px*x1510))+(((-1.0)*cj6*py*x1511))+(((-1.0)*px*x1511*x1512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.581715322798211)+(((-1.0)*cj4*py*x1510))+(((-1.0)*sj4*x1509))+((cj4*px*x1511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.183034801873758)*sj6))+((py*x1510*x1512))+(((-1.0)*cj4*sj6*x1509))+(((-1.0)*cj6*px*x1510))+(((-1.0)*cj6*py*x1511))+(((-1.0)*px*x1511*x1512))))+IKsqr(((0.581715322798211)+(((-1.0)*cj4*py*x1510))+(((-1.0)*sj4*x1509))+((cj4*px*x1511))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-0.183034801873758)*sj6))+((py*x1510*x1512))+(((-1.0)*cj4*sj6*x1509))+(((-1.0)*cj6*px*x1510))+(((-1.0)*cj6*py*x1511))+(((-1.0)*px*x1511*x1512))), ((0.581715322798211)+(((-1.0)*cj4*py*x1510))+(((-1.0)*sj4*x1509))+((cj4*px*x1511))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1513=IKsin(j8);
IkReal x1514=IKcos(j8);
IkReal x1515=(pz*sj4);
IkReal x1516=(px*sj3);
IkReal x1517=(cj4*pz);
IkReal x1518=(py*sj3);
IkReal x1519=(cj3*px);
IkReal x1520=((0.056092)*cj4);
IkReal x1521=(cj3*py);
IkReal x1522=(sj4*x1521);
IkReal x1523=((0.244642)*x1513);
evalcond[0]=((((-1.0)*x1519))+(((-1.0)*x1518))+(((-1.0)*cj6*x1523)));
evalcond[1]=((0.142312)+(((-1.0)*cj4*x1521))+(((-0.244642)*x1514))+(((-1.0)*x1515))+((cj4*x1516)));
evalcond[2]=((-0.044778)+(((-1.0)*x1517))+x1522+(((-1.0)*sj6*x1523))+(((-1.0)*sj4*x1516)));
evalcond[3]=(((cj6*x1519))+((cj6*x1518))+(((0.044778)*sj6))+((sj6*x1517))+x1523+(((-1.0)*sj6*x1522))+((sj4*sj6*x1516)));
evalcond[4]=((0.085184348928)+(((0.109556)*x1522))+(((-0.109556)*sj4*x1516))+(((-1.0)*pp))+((x1516*x1520))+(((-0.056092)*x1515))+(((-1.0)*x1520*x1521))+(((-0.083353443672)*x1514))+(((-0.109556)*x1517))+(((-0.00489284)*sj6*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1524=(cj4*px);
IkReal x1525=((4.08760556241365)*py);
IkReal x1526=(cj3*sj7);
IkReal x1527=(cj7*sj3);
IkReal x1528=((4.08760556241365)*px);
IkReal x1529=(cj3*cj7);
IkReal x1530=((4.08760556241365)*sj3*sj7);
IkReal x1531=((4.08760556241365)*pz*sj4);
if( IKabs((((x1525*x1527))+((x1528*x1529))+((x1524*x1530))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x1525*x1526))+(((-1.0)*sj7*x1531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((cj7*x1531))+((x1526*x1528))+(((-0.867847712167167)*cj7))+(((-4.08760556241365)*x1524*x1527))+((cj4*x1525*x1529))+((sj3*sj7*x1525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1525*x1527))+((x1528*x1529))+((x1524*x1530))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x1525*x1526))+(((-1.0)*sj7*x1531))))+IKsqr(((-0.286132389368955)+((cj7*x1531))+((x1526*x1528))+(((-0.867847712167167)*cj7))+(((-4.08760556241365)*x1524*x1527))+((cj4*x1525*x1529))+((sj3*sj7*x1525))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1525*x1527))+((x1528*x1529))+((x1524*x1530))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x1525*x1526))+(((-1.0)*sj7*x1531))), ((-0.286132389368955)+((cj7*x1531))+((x1526*x1528))+(((-0.867847712167167)*cj7))+(((-4.08760556241365)*x1524*x1527))+((cj4*x1525*x1529))+((sj3*sj7*x1525))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1532=IKcos(j8);
IkReal x1533=IKsin(j8);
IkReal x1534=(pz*sj4);
IkReal x1535=((1.0)*cj7);
IkReal x1536=(cj3*px);
IkReal x1537=(py*sj3);
IkReal x1538=(cj3*py);
IkReal x1539=((0.109556)*sj4);
IkReal x1540=(cj4*px*sj3);
IkReal x1541=((0.244642)*x1532);
IkReal x1542=((0.244642)*x1533);
evalcond[0]=(((sj7*x1541))+(((-1.0)*x1537))+(((-1.0)*x1536))+(((0.07)*sj7))+((cj7*x1542)));
evalcond[1]=((0.212312)+(((-1.0)*x1534))+(((0.07)*cj7))+(((-1.0)*sj7*x1542))+x1540+((cj7*x1541))+(((-1.0)*cj4*x1538)));
evalcond[2]=((-0.07)+((cj7*x1534))+(((-1.0)*x1535*x1540))+((cj4*cj7*x1538))+(((-0.212312)*cj7))+((sj7*x1536))+((sj7*x1537))+(((-1.0)*x1541)));
evalcond[3]=((((-1.0)*x1535*x1536))+(((-1.0)*x1535*x1537))+(((-1.0)*sj7*x1540))+x1542+((sj7*x1534))+(((-0.212312)*sj7))+((cj4*sj7*x1538)));
evalcond[4]=((0.118834468928)+((x1538*x1539))+(((-1.0)*px*sj3*x1539))+(((0.03365012)*cj7))+(((0.056092)*x1540))+(((-0.056092)*cj4*x1538))+(((-1.0)*pp))+(((-0.056092)*x1534))+(((-0.109556)*cj4*pz))+(((0.03424988)*x1532))+(((0.117603323672)*cj7*x1532))+(((-0.117603323672)*sj7*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1543=(cj4*px);
IkReal x1544=((4.08760556241365)*py);
IkReal x1545=(cj3*sj7);
IkReal x1546=(cj7*sj3);
IkReal x1547=((4.08760556241365)*px);
IkReal x1548=(cj3*cj7);
IkReal x1549=((4.08760556241365)*sj3*sj7);
IkReal x1550=((4.08760556241365)*pz*sj4);
if( IKabs(((((-1.0)*sj7*x1550))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x1544*x1545))+(((-1.0)*x1547*x1548))+((x1543*x1549))+(((-1.0)*x1544*x1546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-4.08760556241365)*x1543*x1546))+(((-0.867847712167167)*cj7))+((cj7*x1550))+(((-1.0)*sj3*sj7*x1544))+(((-1.0)*x1545*x1547))+((cj4*x1544*x1548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj7*x1550))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x1544*x1545))+(((-1.0)*x1547*x1548))+((x1543*x1549))+(((-1.0)*x1544*x1546))))+IKsqr(((-0.286132389368955)+(((-4.08760556241365)*x1543*x1546))+(((-0.867847712167167)*cj7))+((cj7*x1550))+(((-1.0)*sj3*sj7*x1544))+(((-1.0)*x1545*x1547))+((cj4*x1544*x1548))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj7*x1550))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x1544*x1545))+(((-1.0)*x1547*x1548))+((x1543*x1549))+(((-1.0)*x1544*x1546))), ((-0.286132389368955)+(((-4.08760556241365)*x1543*x1546))+(((-0.867847712167167)*cj7))+((cj7*x1550))+(((-1.0)*sj3*sj7*x1544))+(((-1.0)*x1545*x1547))+((cj4*x1544*x1548))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1551=IKcos(j8);
IkReal x1552=IKsin(j8);
IkReal x1553=(pz*sj4);
IkReal x1554=((1.0)*sj7);
IkReal x1555=(py*sj3);
IkReal x1556=(cj3*px);
IkReal x1557=(cj3*py);
IkReal x1558=((0.109556)*sj4);
IkReal x1559=(cj4*px*sj3);
IkReal x1560=((0.244642)*x1551);
IkReal x1561=((0.244642)*x1552);
evalcond[0]=((((-1.0)*x1556))+(((-1.0)*x1555))+(((-1.0)*cj7*x1561))+(((-1.0)*sj7*x1560))+(((-0.07)*sj7)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+(((-1.0)*x1553))+(((-1.0)*sj7*x1561))+x1559+((cj7*x1560))+(((-1.0)*cj4*x1557)));
evalcond[2]=(x1561+((cj4*sj7*x1557))+((cj7*x1556))+((cj7*x1555))+((sj7*x1553))+(((-1.0)*x1554*x1559))+(((-0.212312)*sj7)));
evalcond[3]=((-0.07)+(((-1.0)*cj7*x1559))+(((-0.212312)*cj7))+((cj4*cj7*x1557))+((cj7*x1553))+(((-1.0)*x1560))+(((-1.0)*x1554*x1556))+(((-1.0)*x1554*x1555)));
evalcond[4]=((0.118834468928)+(((0.03365012)*cj7))+(((0.03424988)*x1551))+(((-0.056092)*cj4*x1557))+(((-0.056092)*x1553))+(((0.117603323672)*cj7*x1551))+((x1557*x1558))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))+(((-1.0)*px*sj3*x1558))+(((-0.117603323672)*sj7*x1552))+(((0.056092)*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1562=cj7*cj7;
IkReal x1563=cj6*cj6;
IkReal x1564=(px*sj3);
IkReal x1565=(cj3*py);
IkReal x1566=(cj6*sj7);
IkReal x1567=(cj7*sj6);
IkReal x1568=((4.08760556241365)*cj4);
IkReal x1569=((500000.0)*sj4);
IkReal x1570=(cj3*px);
IkReal x1571=((4.08760556241365)*sj4);
IkReal x1572=((4.08760556241365)*cj6*cj7);
IkReal x1573=((500000.0)*py*sj3);
IkReal x1574=(cj6*sj6*x1562);
IkReal x1575=(x1562*x1563);
IkReal x1576=((500000.0)*cj4*cj7*x1566);
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(cj6,-1);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(sj7,-1);
if(!x1578.valid){
continue;
}
if( IKabs(((((0.183034801873758)*x1567))+((x1564*x1567*x1571))+((x1570*x1572))+((py*sj3*x1572))+(((0.867847712167167)*sj7))+((pz*x1567*x1568))+((sj7*x1564*x1568))+(((-1.0)*pz*sj7*x1571))+(((-1.0)*sj7*x1565*x1568))+(((-1.0)*x1565*x1567*x1571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x1577.value)*(x1578.value)*((((cj7*pz*x1566*x1569))+(((-22389.0)*x1574))+(((-500000.0)*x1570*x1575))+(((-35000.0)*x1566))+(((-1.0)*x1573*x1575))+((x1565*x1569*x1574))+(((-500000.0)*cj4*pz*x1574))+(((-1.0)*x1564*x1576))+x1573+(((-106156.0)*cj7*x1566))+((x1565*x1576))+(((500000.0)*x1570))+(((-1.0)*x1564*x1569*x1574)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.183034801873758)*x1567))+((x1564*x1567*x1571))+((x1570*x1572))+((py*sj3*x1572))+(((0.867847712167167)*sj7))+((pz*x1567*x1568))+((sj7*x1564*x1568))+(((-1.0)*pz*sj7*x1571))+(((-1.0)*sj7*x1565*x1568))+(((-1.0)*x1565*x1567*x1571))))+IKsqr(((8.1752111248273e-6)*(x1577.value)*(x1578.value)*((((cj7*pz*x1566*x1569))+(((-22389.0)*x1574))+(((-500000.0)*x1570*x1575))+(((-35000.0)*x1566))+(((-1.0)*x1573*x1575))+((x1565*x1569*x1574))+(((-500000.0)*cj4*pz*x1574))+(((-1.0)*x1564*x1576))+x1573+(((-106156.0)*cj7*x1566))+((x1565*x1576))+(((500000.0)*x1570))+(((-1.0)*x1564*x1569*x1574))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((0.183034801873758)*x1567))+((x1564*x1567*x1571))+((x1570*x1572))+((py*sj3*x1572))+(((0.867847712167167)*sj7))+((pz*x1567*x1568))+((sj7*x1564*x1568))+(((-1.0)*pz*sj7*x1571))+(((-1.0)*sj7*x1565*x1568))+(((-1.0)*x1565*x1567*x1571))), ((8.1752111248273e-6)*(x1577.value)*(x1578.value)*((((cj7*pz*x1566*x1569))+(((-22389.0)*x1574))+(((-500000.0)*x1570*x1575))+(((-35000.0)*x1566))+(((-1.0)*x1573*x1575))+((x1565*x1569*x1574))+(((-500000.0)*cj4*pz*x1574))+(((-1.0)*x1564*x1576))+x1573+(((-106156.0)*cj7*x1566))+((x1565*x1576))+(((500000.0)*x1570))+(((-1.0)*x1564*x1569*x1574))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1579=IKcos(j8);
IkReal x1580=IKsin(j8);
IkReal x1581=(pz*sj4);
IkReal x1582=(px*sj3);
IkReal x1583=(cj7*sj6);
IkReal x1584=((1.0)*sj4);
IkReal x1585=(sj6*sj7);
IkReal x1586=((1.0)*cj4);
IkReal x1587=(cj6*cj7);
IkReal x1588=(cj6*sj7);
IkReal x1589=(py*sj3);
IkReal x1590=((0.056092)*cj4);
IkReal x1591=(cj3*py);
IkReal x1592=(cj4*pz);
IkReal x1593=(cj3*px);
IkReal x1594=(sj4*x1591);
IkReal x1595=((0.244642)*x1580);
IkReal x1596=((0.244642)*x1579);
evalcond[0]=(((x1587*x1595))+((x1588*x1596))+(((0.07)*x1588))+(((-1.0)*x1589))+(((-1.0)*x1593)));
evalcond[1]=((0.212312)+((cj4*x1582))+(((0.07)*cj7))+(((-1.0)*x1581))+(((-1.0)*x1586*x1591))+((cj7*x1596))+(((-1.0)*sj7*x1595)));
evalcond[2]=((-0.044778)+(((-1.0)*pz*x1586))+(((0.07)*x1585))+((x1583*x1595))+x1594+((x1585*x1596))+(((-1.0)*x1582*x1584)));
evalcond[3]=((-0.07)+(((-1.0)*x1596))+((x1588*x1593))+((x1588*x1589))+((sj4*x1582*x1585))+(((-0.212312)*cj7))+((cj4*cj7*x1591))+(((-1.0)*cj7*x1582*x1586))+((cj7*x1581))+((x1585*x1592))+(((0.044778)*x1585))+(((-1.0)*x1584*x1585*x1591)));
evalcond[4]=((((-1.0)*x1587*x1589))+(((-0.044778)*x1583))+(((-1.0)*x1587*x1593))+(((-1.0)*sj7*x1582*x1586))+(((-1.0)*x1582*x1583*x1584))+((x1583*x1594))+x1595+((cj4*sj7*x1591))+((sj7*x1581))+(((-0.212312)*sj7))+(((-1.0)*pz*x1583*x1586)));
evalcond[5]=((0.118834468928)+(((0.0014)*x1585))+(((0.117603323672)*cj7*x1579))+(((-0.117603323672)*sj7*x1580))+(((0.03365012)*cj7))+(((0.03424988)*x1579))+(((-0.056092)*x1581))+(((-0.109556)*x1592))+((x1582*x1590))+(((0.00489284)*x1580*x1583))+(((-0.109556)*sj4*x1582))+(((-1.0)*pp))+(((0.00489284)*x1579*x1585))+(((0.109556)*x1594))+(((-1.0)*x1590*x1591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1597=((500000.0)*cj4);
IkReal x1598=(px*sj3);
IkReal x1599=(cj7*sj6);
IkReal x1600=(sj6*sj7);
IkReal x1601=((500000.0)*sj4);
IkReal x1602=(cj3*py);
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1603.valid){
continue;
}
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((((x1597*x1598*x1600))+((cj7*x1598*x1601))+(((106156.0)*x1600))+(((-1.0)*cj7*x1601*x1602))+(((22389.0)*cj7))+(((-1.0)*x1597*x1600*x1602))+((cj7*pz*x1597))+(((-1.0)*pz*x1600*x1601)))),IkReal(((((-106156.0)*x1599))+(((-35000.0)*sj6))+(((-1.0)*x1597*x1598*x1599))+((x1597*x1599*x1602))+(((22389.0)*sj7))+((pz*sj7*x1597))+((sj7*x1598*x1601))+((pz*x1599*x1601))+(((-1.0)*sj7*x1601*x1602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1603.value)))+(x1604.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1605=IKcos(j8);
IkReal x1606=IKsin(j8);
IkReal x1607=(pz*sj4);
IkReal x1608=(px*sj3);
IkReal x1609=(cj7*sj6);
IkReal x1610=((1.0)*sj4);
IkReal x1611=(sj6*sj7);
IkReal x1612=((1.0)*cj4);
IkReal x1613=(cj6*cj7);
IkReal x1614=(cj6*sj7);
IkReal x1615=(py*sj3);
IkReal x1616=((0.056092)*cj4);
IkReal x1617=(cj3*py);
IkReal x1618=(cj4*pz);
IkReal x1619=(cj3*px);
IkReal x1620=(sj4*x1617);
IkReal x1621=((0.244642)*x1606);
IkReal x1622=((0.244642)*x1605);
evalcond[0]=((((-1.0)*x1615))+(((-1.0)*x1619))+(((0.07)*x1614))+((x1614*x1622))+((x1613*x1621)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+(((-1.0)*x1607))+((cj4*x1608))+((cj7*x1622))+(((-1.0)*sj7*x1621))+(((-1.0)*x1612*x1617)));
evalcond[2]=((-0.044778)+x1620+(((0.07)*x1611))+((x1609*x1621))+(((-1.0)*pz*x1612))+(((-1.0)*x1608*x1610))+((x1611*x1622)));
evalcond[3]=((-0.07)+((cj7*x1607))+(((-1.0)*x1622))+(((-0.212312)*cj7))+(((-1.0)*cj7*x1608*x1612))+((x1614*x1615))+((x1614*x1619))+((sj4*x1608*x1611))+((cj4*cj7*x1617))+((x1611*x1618))+(((-1.0)*x1610*x1611*x1617))+(((0.044778)*x1611)));
evalcond[4]=((((-1.0)*pz*x1609*x1612))+((sj7*x1607))+x1621+(((-1.0)*sj7*x1608*x1612))+((cj4*sj7*x1617))+((x1609*x1620))+(((-1.0)*x1613*x1619))+(((-1.0)*x1613*x1615))+(((-1.0)*x1608*x1609*x1610))+(((-0.044778)*x1609))+(((-0.212312)*sj7)));
evalcond[5]=((0.118834468928)+(((0.03365012)*cj7))+(((-1.0)*x1616*x1617))+(((-0.117603323672)*sj7*x1606))+(((-0.109556)*x1618))+(((0.00489284)*x1605*x1611))+((x1608*x1616))+(((0.00489284)*x1606*x1609))+(((-1.0)*pp))+(((0.117603323672)*cj7*x1605))+(((-0.109556)*sj4*x1608))+(((-0.056092)*x1607))+(((0.03424988)*x1605))+(((0.109556)*x1620))+(((0.0014)*x1611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1623=(cj6*cj7);
IkReal x1624=((500000.0)*cj3);
IkReal x1625=(cj4*py);
IkReal x1626=(cj6*sj7);
IkReal x1627=((500000.0)*sj3);
IkReal x1628=(cj4*px);
IkReal x1629=((500000.0)*pz*sj4);
CheckValue<IkReal> x1630=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1630.valid){
continue;
}
CheckValue<IkReal> x1631 = IKatan2WithCheck(IkReal(((((-1.0)*x1624*x1625*x1626))+((x1626*x1627*x1628))+(((106156.0)*x1626))+((cj7*py*x1627))+((cj7*px*x1624))+(((-1.0)*x1626*x1629)))),IkReal((((px*sj7*x1624))+((x1623*x1629))+(((-106156.0)*x1623))+(((-1.0)*x1623*x1627*x1628))+(((-35000.0)*cj6))+((py*sj7*x1627))+((x1623*x1624*x1625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1631.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1630.value)))+(x1631.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1632=IKcos(j8);
IkReal x1633=IKsin(j8);
IkReal x1634=(pz*sj4);
IkReal x1635=(px*sj3);
IkReal x1636=(cj7*sj6);
IkReal x1637=((1.0)*sj4);
IkReal x1638=(sj6*sj7);
IkReal x1639=((1.0)*cj4);
IkReal x1640=(cj6*cj7);
IkReal x1641=(cj6*sj7);
IkReal x1642=(py*sj3);
IkReal x1643=((0.056092)*cj4);
IkReal x1644=(cj3*py);
IkReal x1645=(cj4*pz);
IkReal x1646=(cj3*px);
IkReal x1647=(sj4*x1644);
IkReal x1648=((0.244642)*x1633);
IkReal x1649=((0.244642)*x1632);
evalcond[0]=(((x1640*x1648))+(((0.07)*x1641))+((x1641*x1649))+(((-1.0)*x1642))+(((-1.0)*x1646)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+(((-1.0)*x1639*x1644))+(((-1.0)*x1634))+(((-1.0)*sj7*x1648))+((cj7*x1649))+((cj4*x1635)));
evalcond[2]=((-0.044778)+(((-1.0)*pz*x1639))+((x1636*x1648))+(((-1.0)*x1635*x1637))+(((0.07)*x1638))+x1647+((x1638*x1649)));
evalcond[3]=((-0.07)+((cj4*cj7*x1644))+(((-0.212312)*cj7))+((x1641*x1646))+((x1641*x1642))+(((-1.0)*x1649))+((cj7*x1634))+(((-1.0)*x1637*x1638*x1644))+((sj4*x1635*x1638))+(((-1.0)*cj7*x1635*x1639))+(((0.044778)*x1638))+((x1638*x1645)));
evalcond[4]=((((-0.044778)*x1636))+((x1636*x1647))+x1648+(((-1.0)*sj7*x1635*x1639))+(((-1.0)*x1635*x1636*x1637))+((cj4*sj7*x1644))+(((-1.0)*pz*x1636*x1639))+((sj7*x1634))+(((-1.0)*x1640*x1646))+(((-1.0)*x1640*x1642))+(((-0.212312)*sj7)));
evalcond[5]=((0.118834468928)+(((-0.117603323672)*sj7*x1633))+(((0.117603323672)*cj7*x1632))+(((0.03365012)*cj7))+(((0.00489284)*x1633*x1636))+(((-0.109556)*sj4*x1635))+(((0.03424988)*x1632))+(((-1.0)*pp))+(((0.0014)*x1638))+(((-1.0)*x1643*x1644))+(((0.109556)*x1647))+((x1635*x1643))+(((0.00489284)*x1632*x1638))+(((-0.056092)*x1634))+(((-0.109556)*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1650=((4.08760556241365)*cj4);
IkReal x1651=(px*sj3);
IkReal x1652=(cj7*pz);
IkReal x1653=(cj3*py);
IkReal x1654=(pz*sj7);
IkReal x1655=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*cj7*x1651*x1655))+((sj7*x1650*x1653))+((x1654*x1655))+(((1.09712968337407)*sj7))+(((-1.0)*x1650*x1652))+((cj7*x1653*x1655))+(((-0.264786913122031)*cj7))+(((-1.0)*sj7*x1650*x1651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*sj7*x1651*x1655))+((sj7*x1653*x1655))+(((-1.0)*x1652*x1655))+(((-1.0)*x1650*x1654))+((cj7*x1650*x1651))+(((-1.0)*cj7*x1650*x1653))+(((-0.264786913122031)*sj7))+(((-1.09712968337407)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x1651*x1655))+((sj7*x1650*x1653))+((x1654*x1655))+(((1.09712968337407)*sj7))+(((-1.0)*x1650*x1652))+((cj7*x1653*x1655))+(((-0.264786913122031)*cj7))+(((-1.0)*sj7*x1650*x1651))))+IKsqr(((-0.286132389368955)+(((-1.0)*sj7*x1651*x1655))+((sj7*x1653*x1655))+(((-1.0)*x1652*x1655))+(((-1.0)*x1650*x1654))+((cj7*x1650*x1651))+(((-1.0)*cj7*x1650*x1653))+(((-0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj7*x1651*x1655))+((sj7*x1650*x1653))+((x1654*x1655))+(((1.09712968337407)*sj7))+(((-1.0)*x1650*x1652))+((cj7*x1653*x1655))+(((-0.264786913122031)*cj7))+(((-1.0)*sj7*x1650*x1651))), ((-0.286132389368955)+(((-1.0)*sj7*x1651*x1655))+((sj7*x1653*x1655))+(((-1.0)*x1652*x1655))+(((-1.0)*x1650*x1654))+((cj7*x1650*x1651))+(((-1.0)*cj7*x1650*x1653))+(((-0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1656=IKcos(j8);
IkReal x1657=IKsin(j8);
IkReal x1658=(pz*sj4);
IkReal x1659=(cj4*cj7);
IkReal x1660=(px*sj3);
IkReal x1661=(cj7*sj4);
IkReal x1662=(cj3*py);
IkReal x1663=(cj4*pz);
IkReal x1664=(cj4*sj7);
IkReal x1665=((0.056092)*cj4);
IkReal x1666=((1.0)*sj7);
IkReal x1667=((0.109556)*sj4);
IkReal x1668=(sj7*x1657);
IkReal x1669=(cj7*x1657);
IkReal x1670=((0.244642)*x1656);
evalcond[0]=((-0.268404)+(((-1.0)*cj7*x1670))+((cj4*x1660))+(((-1.0)*x1658))+(((0.244642)*x1668))+(((-0.07)*cj7))+(((-1.0)*cj4*x1662)));
evalcond[1]=((-0.064778)+(((-1.0)*x1663))+(((-0.07)*sj7))+(((-0.244642)*x1669))+((sj4*x1662))+(((-1.0)*sj4*x1660))+(((-1.0)*sj7*x1670)));
evalcond[2]=(((x1660*x1661))+((x1660*x1664))+(((-0.268404)*sj7))+(((0.244642)*x1657))+((pz*x1659))+(((0.064778)*cj7))+(((-1.0)*x1658*x1666))+(((-1.0)*x1662*x1664))+(((-1.0)*x1661*x1662)));
evalcond[3]=((-0.07)+(((-1.0)*sj4*x1660*x1666))+(((-0.268404)*cj7))+(((-1.0)*x1663*x1666))+((sj4*sj7*x1662))+(((-1.0)*cj7*x1658))+((x1659*x1660))+(((-0.064778)*sj7))+(((-1.0)*x1659*x1662))+(((-1.0)*x1670)));
evalcond[4]=((0.118834468928)+(((0.117603323672)*cj7*x1656))+((x1660*x1665))+(((-0.109556)*x1663))+(((-1.0)*x1662*x1665))+(((0.03365012)*cj7))+(((0.00489284)*x1669))+(((0.00489284)*sj7*x1656))+(((0.03424988)*x1656))+(((0.0014)*sj7))+((x1662*x1667))+(((-1.0)*pp))+(((-0.117603323672)*x1668))+(((-0.056092)*x1658))+(((-1.0)*x1660*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1671=((4.08760556241365)*cj4);
IkReal x1672=(px*sj3);
IkReal x1673=(cj7*pz);
IkReal x1674=(cj3*py);
IkReal x1675=(pz*sj7);
IkReal x1676=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*sj7*x1671*x1672))+((x1675*x1676))+(((1.09712968337407)*sj7))+(((0.264786913122031)*cj7))+((cj7*x1672*x1676))+((sj7*x1671*x1674))+(((-1.0)*cj7*x1674*x1676))+((x1671*x1673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*x1673*x1676))+((sj7*x1672*x1676))+((cj7*x1671*x1672))+(((-1.0)*sj7*x1674*x1676))+(((-1.0)*cj7*x1671*x1674))+(((0.264786913122031)*sj7))+((x1671*x1675))+(((-1.09712968337407)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj7*x1671*x1672))+((x1675*x1676))+(((1.09712968337407)*sj7))+(((0.264786913122031)*cj7))+((cj7*x1672*x1676))+((sj7*x1671*x1674))+(((-1.0)*cj7*x1674*x1676))+((x1671*x1673))))+IKsqr(((-0.286132389368955)+(((-1.0)*x1673*x1676))+((sj7*x1672*x1676))+((cj7*x1671*x1672))+(((-1.0)*sj7*x1674*x1676))+(((-1.0)*cj7*x1671*x1674))+(((0.264786913122031)*sj7))+((x1671*x1675))+(((-1.09712968337407)*cj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj7*x1671*x1672))+((x1675*x1676))+(((1.09712968337407)*sj7))+(((0.264786913122031)*cj7))+((cj7*x1672*x1676))+((sj7*x1671*x1674))+(((-1.0)*cj7*x1674*x1676))+((x1671*x1673))), ((-0.286132389368955)+(((-1.0)*x1673*x1676))+((sj7*x1672*x1676))+((cj7*x1671*x1672))+(((-1.0)*sj7*x1674*x1676))+(((-1.0)*cj7*x1671*x1674))+(((0.264786913122031)*sj7))+((x1671*x1675))+(((-1.09712968337407)*cj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1677=IKcos(j8);
IkReal x1678=IKsin(j8);
IkReal x1679=(pz*sj4);
IkReal x1680=(px*sj3);
IkReal x1681=(cj3*py);
IkReal x1682=((1.0)*cj7);
IkReal x1683=(cj4*pz);
IkReal x1684=(cj4*sj7);
IkReal x1685=((1.0)*sj7);
IkReal x1686=((0.056092)*cj4);
IkReal x1687=((0.109556)*sj4);
IkReal x1688=(cj7*x1678);
IkReal x1689=((0.244642)*x1677);
IkReal x1690=((0.244642)*x1678);
evalcond[0]=((-0.268404)+((cj4*x1680))+(((-1.0)*cj4*x1681))+(((-1.0)*cj7*x1689))+((sj7*x1690))+(((-0.07)*cj7))+(((-1.0)*x1679)));
evalcond[1]=((-0.064778)+(((0.244642)*x1688))+(((-1.0)*sj4*x1680))+((sj7*x1689))+(((-1.0)*x1683))+(((0.07)*sj7))+((sj4*x1681)));
evalcond[2]=((-0.07)+(((0.064778)*sj7))+(((-1.0)*x1689))+(((-0.268404)*cj7))+((sj4*sj7*x1680))+((sj7*x1683))+((cj4*cj7*x1680))+(((-1.0)*cj4*x1681*x1682))+(((-1.0)*x1679*x1682))+(((-1.0)*sj4*x1681*x1685)));
evalcond[3]=((((-0.268404)*sj7))+((x1680*x1684))+(((-1.0)*x1682*x1683))+x1690+(((-0.064778)*cj7))+((cj7*sj4*x1681))+(((-1.0)*sj4*x1680*x1682))+(((-1.0)*x1681*x1684))+(((-1.0)*x1679*x1685)));
evalcond[4]=((0.118834468928)+(((0.03424988)*x1677))+((x1681*x1687))+((x1680*x1686))+(((-1.0)*x1681*x1686))+(((0.03365012)*cj7))+(((-0.056092)*x1679))+(((-0.00489284)*sj7*x1677))+(((-0.0014)*sj7))+(((-1.0)*pp))+(((-1.0)*x1680*x1687))+(((-0.00489284)*x1688))+(((0.117603323672)*cj7*x1677))+(((-0.109556)*x1683))+(((-0.117603323672)*sj7*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1691=((4.08760556241365)*pz);
IkReal x1692=((4.08760556241365)*cj3);
IkReal x1693=((4.08760556241365)*sj3);
IkReal x1694=(sj4*sj6);
if( IKabs(((((-1.0)*cj4*sj6*x1691))+((cj6*px*x1692))+(((-1.0)*px*x1693*x1694))+((py*x1692*x1694))+(((-0.264786913122031)*sj6))+((cj6*py*x1693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.38326207274303)+((cj4*px*x1693))+(((-1.0)*cj4*py*x1692))+(((-1.0)*sj4*x1691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*sj6*x1691))+((cj6*px*x1692))+(((-1.0)*px*x1693*x1694))+((py*x1692*x1694))+(((-0.264786913122031)*sj6))+((cj6*py*x1693))))+IKsqr(((-1.38326207274303)+((cj4*px*x1693))+(((-1.0)*cj4*py*x1692))+(((-1.0)*sj4*x1691))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj4*sj6*x1691))+((cj6*px*x1692))+(((-1.0)*px*x1693*x1694))+((py*x1692*x1694))+(((-0.264786913122031)*sj6))+((cj6*py*x1693))), ((-1.38326207274303)+((cj4*px*x1693))+(((-1.0)*cj4*py*x1692))+(((-1.0)*sj4*x1691))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1695=IKsin(j8);
IkReal x1696=IKcos(j8);
IkReal x1697=(pz*sj4);
IkReal x1698=(px*sj3);
IkReal x1699=(cj4*pz);
IkReal x1700=(cj3*py*sj4);
IkReal x1701=((0.244642)*x1695);
IkReal x1702=((1.0)*py*sj3);
IkReal x1703=(cj3*cj4*py);
IkReal x1704=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*x1702))+(((-1.0)*x1704))+((cj6*x1701)));
evalcond[1]=((-0.338404)+(((-1.0)*x1703))+(((-1.0)*x1697))+((cj4*x1698))+(((-0.244642)*x1696)));
evalcond[2]=((-0.064778)+x1700+(((-1.0)*x1699))+(((-1.0)*sj6*x1701))+(((-1.0)*sj4*x1698)));
evalcond[3]=((((-1.0)*cj6*x1702))+(((-1.0)*cj6*x1704))+(((0.064778)*sj6))+x1701+((sj6*x1699))+(((-1.0)*sj6*x1700))+((sj4*sj6*x1698)));
evalcond[4]=((0.152484588928)+(((-0.109556)*sj4*x1698))+(((-0.056092)*x1697))+(((-0.056092)*x1703))+(((-1.0)*pp))+(((0.056092)*cj4*x1698))+(((0.00489284)*sj6*x1695))+(((0.151853203672)*x1696))+(((-0.109556)*x1699))+(((0.109556)*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1705=((4.08760556241365)*pz);
IkReal x1706=((4.08760556241365)*cj3);
IkReal x1707=((4.08760556241365)*sj3);
IkReal x1708=(sj4*sj6);
if( IKabs((((cj4*sj6*x1705))+((px*x1707*x1708))+(((-1.0)*cj6*px*x1706))+(((-1.0)*py*x1706*x1708))+(((0.264786913122031)*sj6))+(((-1.0)*cj6*py*x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.810997294005118)+((sj4*x1705))+((cj4*py*x1706))+(((-1.0)*cj4*px*x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*sj6*x1705))+((px*x1707*x1708))+(((-1.0)*cj6*px*x1706))+(((-1.0)*py*x1706*x1708))+(((0.264786913122031)*sj6))+(((-1.0)*cj6*py*x1707))))+IKsqr(((0.810997294005118)+((sj4*x1705))+((cj4*py*x1706))+(((-1.0)*cj4*px*x1707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj4*sj6*x1705))+((px*x1707*x1708))+(((-1.0)*cj6*px*x1706))+(((-1.0)*py*x1706*x1708))+(((0.264786913122031)*sj6))+(((-1.0)*cj6*py*x1707))), ((0.810997294005118)+((sj4*x1705))+((cj4*py*x1706))+(((-1.0)*cj4*px*x1707))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1709=IKsin(j8);
IkReal x1710=IKcos(j8);
IkReal x1711=(pz*sj4);
IkReal x1712=(cj4*pz);
IkReal x1713=(py*sj3);
IkReal x1714=(cj3*px);
IkReal x1715=(cj4*px*sj3);
IkReal x1716=(cj3*py*sj4);
IkReal x1717=((0.244642)*x1709);
IkReal x1718=(cj3*cj4*py);
IkReal x1719=((1.0)*px*sj3*sj4);
evalcond[0]=((((-1.0)*cj6*x1717))+(((-1.0)*x1713))+(((-1.0)*x1714)));
evalcond[1]=((-0.198404)+x1715+(((-1.0)*x1711))+(((-1.0)*x1718))+(((0.244642)*x1710)));
evalcond[2]=((-0.064778)+x1716+(((-1.0)*x1719))+(((-1.0)*x1712))+((sj6*x1717)));
evalcond[3]=(x1717+(((-1.0)*sj6*x1719))+((sj6*x1716))+(((-1.0)*sj6*x1712))+(((-0.064778)*sj6))+((cj6*x1713))+((cj6*x1714)));
evalcond[4]=((0.085184348928)+(((0.056092)*x1715))+(((0.109556)*x1716))+(((-0.109556)*px*sj3*sj4))+(((-0.00489284)*sj6*x1709))+(((-0.083353443672)*x1710))+(((-1.0)*pp))+(((-0.056092)*x1711))+(((-0.056092)*x1718))+(((-0.109556)*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1720=(cj4*px);
IkReal x1721=((4.08760556241365)*py);
IkReal x1722=(cj3*sj7);
IkReal x1723=(cj7*sj3);
IkReal x1724=((4.08760556241365)*px);
IkReal x1725=(cj3*cj7);
IkReal x1726=((4.08760556241365)*sj3*sj7);
IkReal x1727=((4.08760556241365)*pz*sj4);
if( IKabs((((x1724*x1725))+(((1.09712968337407)*sj7))+((sj7*x1727))+((x1721*x1723))+(((-1.0)*x1720*x1726))+((cj4*x1721*x1722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*cj7*x1727))+((x1722*x1724))+(((4.08760556241365)*x1720*x1723))+((sj3*sj7*x1721))+(((-1.0)*cj4*x1721*x1725))+(((-1.09712968337407)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1724*x1725))+(((1.09712968337407)*sj7))+((sj7*x1727))+((x1721*x1723))+(((-1.0)*x1720*x1726))+((cj4*x1721*x1722))))+IKsqr(((-0.286132389368955)+(((-1.0)*cj7*x1727))+((x1722*x1724))+(((4.08760556241365)*x1720*x1723))+((sj3*sj7*x1721))+(((-1.0)*cj4*x1721*x1725))+(((-1.09712968337407)*cj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1724*x1725))+(((1.09712968337407)*sj7))+((sj7*x1727))+((x1721*x1723))+(((-1.0)*x1720*x1726))+((cj4*x1721*x1722))), ((-0.286132389368955)+(((-1.0)*cj7*x1727))+((x1722*x1724))+(((4.08760556241365)*x1720*x1723))+((sj3*sj7*x1721))+(((-1.0)*cj4*x1721*x1725))+(((-1.09712968337407)*cj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1728=IKsin(j8);
IkReal x1729=IKcos(j8);
IkReal x1730=(pz*sj4);
IkReal x1731=(cj3*px);
IkReal x1732=((1.0)*cj7);
IkReal x1733=(cj3*py);
IkReal x1734=((1.0)*sj7);
IkReal x1735=(py*sj3);
IkReal x1736=((0.109556)*sj4);
IkReal x1737=(cj4*px*sj3);
IkReal x1738=((0.244642)*x1729);
IkReal x1739=((0.244642)*x1728);
evalcond[0]=(((sj7*x1738))+(((0.07)*sj7))+(((-1.0)*x1731))+(((-1.0)*x1735))+((cj7*x1739)));
evalcond[1]=((-0.268404)+(((-1.0)*cj7*x1738))+(((-1.0)*cj4*x1733))+x1737+((sj7*x1739))+(((-0.07)*cj7))+(((-1.0)*x1730)));
evalcond[2]=((-0.07)+(((-0.268404)*cj7))+((sj7*x1735))+((sj7*x1731))+(((-1.0)*x1730*x1732))+(((-1.0)*cj4*x1732*x1733))+(((-1.0)*x1738))+((cj7*x1737)));
evalcond[3]=((((-1.0)*x1731*x1732))+(((-0.268404)*sj7))+x1739+((sj7*x1737))+(((-1.0)*x1730*x1734))+(((-1.0)*cj4*x1733*x1734))+(((-1.0)*x1732*x1735)));
evalcond[4]=((0.118834468928)+(((-0.056092)*x1730))+(((0.03365012)*cj7))+(((-1.0)*px*sj3*x1736))+(((0.056092)*x1737))+(((0.03424988)*x1729))+(((-1.0)*pp))+(((-0.117603323672)*sj7*x1728))+(((-0.109556)*cj4*pz))+(((0.117603323672)*cj7*x1729))+(((-0.056092)*cj4*x1733))+((x1733*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1740=(cj4*px);
IkReal x1741=((4.08760556241365)*py);
IkReal x1742=(cj3*sj7);
IkReal x1743=(cj7*sj3);
IkReal x1744=((4.08760556241365)*px);
IkReal x1745=(cj3*cj7);
IkReal x1746=((4.08760556241365)*sj3*sj7);
IkReal x1747=((4.08760556241365)*pz*sj4);
if( IKabs(((((-1.0)*x1741*x1743))+(((1.09712968337407)*sj7))+(((-1.0)*x1740*x1746))+((sj7*x1747))+((cj4*x1741*x1742))+(((-1.0)*x1744*x1745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*cj7*x1747))+(((-1.0)*sj3*sj7*x1741))+(((-1.0)*x1742*x1744))+(((4.08760556241365)*x1740*x1743))+(((-1.09712968337407)*cj7))+(((-1.0)*cj4*x1741*x1745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1741*x1743))+(((1.09712968337407)*sj7))+(((-1.0)*x1740*x1746))+((sj7*x1747))+((cj4*x1741*x1742))+(((-1.0)*x1744*x1745))))+IKsqr(((-0.286132389368955)+(((-1.0)*cj7*x1747))+(((-1.0)*sj3*sj7*x1741))+(((-1.0)*x1742*x1744))+(((4.08760556241365)*x1740*x1743))+(((-1.09712968337407)*cj7))+(((-1.0)*cj4*x1741*x1745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1741*x1743))+(((1.09712968337407)*sj7))+(((-1.0)*x1740*x1746))+((sj7*x1747))+((cj4*x1741*x1742))+(((-1.0)*x1744*x1745))), ((-0.286132389368955)+(((-1.0)*cj7*x1747))+(((-1.0)*sj3*sj7*x1741))+(((-1.0)*x1742*x1744))+(((4.08760556241365)*x1740*x1743))+(((-1.09712968337407)*cj7))+(((-1.0)*cj4*x1741*x1745))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1748=IKsin(j8);
IkReal x1749=IKcos(j8);
IkReal x1750=(pz*sj4);
IkReal x1751=((1.0)*py);
IkReal x1752=(cj3*cj7);
IkReal x1753=((1.0)*sj7);
IkReal x1754=(cj3*px);
IkReal x1755=(cj3*py);
IkReal x1756=((0.109556)*sj4);
IkReal x1757=(cj3*cj4);
IkReal x1758=(cj4*px*sj3);
IkReal x1759=((0.244642)*x1749);
IkReal x1760=((0.244642)*x1748);
evalcond[0]=((((-0.07)*sj7))+(((-1.0)*cj7*x1760))+(((-1.0)*sj3*x1751))+(((-1.0)*x1754))+(((-1.0)*sj7*x1759)));
evalcond[1]=((-0.268404)+((sj7*x1760))+x1758+(((-1.0)*x1751*x1757))+(((-0.07)*cj7))+(((-1.0)*x1750))+(((-1.0)*cj7*x1759)));
evalcond[2]=((((-0.268404)*sj7))+x1760+((px*x1752))+((cj7*py*sj3))+((sj7*x1758))+(((-1.0)*sj7*x1751*x1757))+(((-1.0)*x1750*x1753)));
evalcond[3]=((-0.07)+(((-0.268404)*cj7))+(((-1.0)*x1759))+((cj7*x1758))+(((-1.0)*sj3*sj7*x1751))+(((-1.0)*x1753*x1754))+(((-1.0)*cj7*x1750))+(((-1.0)*cj4*x1751*x1752)));
evalcond[4]=((0.118834468928)+(((0.03365012)*cj7))+(((0.056092)*x1758))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))+(((0.03424988)*x1749))+(((-1.0)*px*sj3*x1756))+(((0.117603323672)*cj7*x1749))+(((-0.117603323672)*sj7*x1748))+(((-0.056092)*x1750))+(((-0.056092)*cj4*x1755))+((x1755*x1756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1761=cj7*cj7;
IkReal x1762=cj6*cj6;
IkReal x1763=(px*sj3);
IkReal x1764=(cj3*py);
IkReal x1765=(cj7*sj6);
IkReal x1766=((4.08760556241365)*cj4);
IkReal x1767=(cj6*sj7);
IkReal x1768=(pz*sj7);
IkReal x1769=(cj3*px);
IkReal x1770=((4.08760556241365)*sj4);
IkReal x1771=((500000.0)*cj6*sj4);
IkReal x1772=(sj6*x1761);
IkReal x1773=((4.08760556241365)*cj6*cj7);
IkReal x1774=((500000.0)*py*sj3);
IkReal x1775=(x1761*x1762);
IkReal x1776=((500000.0)*cj4*cj7*x1767);
CheckValue<IkReal> x1777=IKPowWithIntegerCheck(cj6,-1);
if(!x1777.valid){
continue;
}
CheckValue<IkReal> x1778=IKPowWithIntegerCheck(sj7,-1);
if(!x1778.valid){
continue;
}
if( IKabs(((((1.09712968337407)*sj7))+((sj7*x1764*x1766))+((x1764*x1765*x1770))+(((-1.0)*sj7*x1763*x1766))+((py*sj3*x1773))+(((-1.0)*x1763*x1765*x1770))+(((-1.0)*pz*x1765*x1766))+(((-0.264786913122031)*x1765))+((x1768*x1770))+((x1769*x1773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x1777.value)*(x1778.value)*(((((-134202.0)*cj7*x1767))+(((-35000.0)*x1767))+(((-1.0)*x1764*x1771*x1772))+x1774+((x1763*x1776))+(((32389.0)*cj6*x1772))+(((-1.0)*x1764*x1776))+(((500000.0)*cj4*cj6*pz*x1772))+(((-500000.0)*cj7*pz*sj4*x1767))+(((500000.0)*x1769))+(((-500000.0)*x1769*x1775))+(((-1.0)*x1774*x1775))+((x1763*x1771*x1772)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.09712968337407)*sj7))+((sj7*x1764*x1766))+((x1764*x1765*x1770))+(((-1.0)*sj7*x1763*x1766))+((py*sj3*x1773))+(((-1.0)*x1763*x1765*x1770))+(((-1.0)*pz*x1765*x1766))+(((-0.264786913122031)*x1765))+((x1768*x1770))+((x1769*x1773))))+IKsqr(((8.1752111248273e-6)*(x1777.value)*(x1778.value)*(((((-134202.0)*cj7*x1767))+(((-35000.0)*x1767))+(((-1.0)*x1764*x1771*x1772))+x1774+((x1763*x1776))+(((32389.0)*cj6*x1772))+(((-1.0)*x1764*x1776))+(((500000.0)*cj4*cj6*pz*x1772))+(((-500000.0)*cj7*pz*sj4*x1767))+(((500000.0)*x1769))+(((-500000.0)*x1769*x1775))+(((-1.0)*x1774*x1775))+((x1763*x1771*x1772))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((1.09712968337407)*sj7))+((sj7*x1764*x1766))+((x1764*x1765*x1770))+(((-1.0)*sj7*x1763*x1766))+((py*sj3*x1773))+(((-1.0)*x1763*x1765*x1770))+(((-1.0)*pz*x1765*x1766))+(((-0.264786913122031)*x1765))+((x1768*x1770))+((x1769*x1773))), ((8.1752111248273e-6)*(x1777.value)*(x1778.value)*(((((-134202.0)*cj7*x1767))+(((-35000.0)*x1767))+(((-1.0)*x1764*x1771*x1772))+x1774+((x1763*x1776))+(((32389.0)*cj6*x1772))+(((-1.0)*x1764*x1776))+(((500000.0)*cj4*cj6*pz*x1772))+(((-500000.0)*cj7*pz*sj4*x1767))+(((500000.0)*x1769))+(((-500000.0)*x1769*x1775))+(((-1.0)*x1774*x1775))+((x1763*x1771*x1772))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1779=IKsin(j8);
IkReal x1780=IKcos(j8);
IkReal x1781=(pz*sj4);
IkReal x1782=(cj3*py);
IkReal x1783=((1.0)*cj4);
IkReal x1784=(cj7*sj6);
IkReal x1785=(sj6*sj7);
IkReal x1786=(cj6*cj7);
IkReal x1787=(cj6*sj7);
IkReal x1788=(py*sj3);
IkReal x1789=(cj4*pz);
IkReal x1790=(cj3*px);
IkReal x1791=(cj4*px*sj3);
IkReal x1792=((0.244642)*x1779);
IkReal x1793=((0.244642)*x1780);
IkReal x1794=(px*sj3*sj4);
evalcond[0]=((((0.07)*x1787))+((x1787*x1793))+(((-1.0)*x1788))+(((-1.0)*x1790))+((x1786*x1792)));
evalcond[1]=((-0.268404)+x1791+(((-1.0)*cj7*x1793))+((sj7*x1792))+(((-0.07)*cj7))+(((-1.0)*x1781))+(((-1.0)*x1782*x1783)));
evalcond[2]=((-0.064778)+(((-1.0)*pz*x1783))+(((-1.0)*x1785*x1793))+((sj4*x1782))+(((-1.0)*x1784*x1792))+(((-1.0)*x1794))+(((-0.07)*x1785)));
evalcond[3]=((-0.07)+((cj7*x1791))+(((-1.0)*x1793))+(((-0.268404)*cj7))+(((-1.0)*pz*x1783*x1785))+((x1787*x1790))+(((-0.064778)*x1785))+((x1787*x1788))+(((-1.0)*cj7*x1782*x1783))+(((-1.0)*x1785*x1794))+(((-1.0)*cj7*x1781))+((sj4*x1782*x1785)));
evalcond[4]=((((0.064778)*x1784))+(((-0.268404)*sj7))+(((-1.0)*sj4*x1782*x1784))+x1792+(((-1.0)*sj7*x1781))+((sj7*x1791))+(((-1.0)*sj7*x1782*x1783))+((x1784*x1789))+((x1784*x1794))+(((-1.0)*x1786*x1788))+(((-1.0)*x1786*x1790)));
evalcond[5]=((0.118834468928)+(((0.00489284)*x1780*x1785))+(((-0.056092)*x1781))+(((0.03365012)*cj7))+(((0.03424988)*x1780))+(((-0.117603323672)*sj7*x1779))+(((-0.109556)*x1794))+(((-1.0)*pp))+(((-0.109556)*x1789))+(((0.0014)*x1785))+(((0.117603323672)*cj7*x1780))+(((0.056092)*x1791))+(((0.00489284)*x1779*x1784))+(((-0.056092)*cj4*x1782))+(((0.109556)*sj4*x1782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1795=(cj4*sj6);
IkReal x1796=(pz*sj6);
IkReal x1797=(px*sj3);
IkReal x1798=((134202.0)*sj6);
IkReal x1799=(cj7*sj4);
IkReal x1800=((500000.0)*cj4*pz);
IkReal x1801=((500000.0)*sj4*sj7);
IkReal x1802=((500000.0)*cj3*py);
IkReal x1803=((500000.0)*cj7*x1797);
CheckValue<IkReal> x1804=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1804.valid){
continue;
}
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal((((x1799*x1802))+((sj7*x1795*x1802))+((sj7*x1798))+(((-1.0)*cj7*x1800))+(((-500000.0)*sj7*x1795*x1797))+(((-500000.0)*x1797*x1799))+((x1796*x1801))+(((-32389.0)*cj7)))),IkReal(((((-32389.0)*sj7))+(((-35000.0)*sj6))+(((-1.0)*cj7*x1798))+((x1795*x1803))+(((-1.0)*x1797*x1801))+(((-1.0)*sj7*x1800))+(((-1.0)*cj7*x1795*x1802))+((cj3*py*x1801))+(((-500000.0)*x1796*x1799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1804.value)))+(x1805.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1806=IKsin(j8);
IkReal x1807=IKcos(j8);
IkReal x1808=(pz*sj4);
IkReal x1809=(cj3*py);
IkReal x1810=((1.0)*cj4);
IkReal x1811=(cj7*sj6);
IkReal x1812=(sj6*sj7);
IkReal x1813=(cj6*cj7);
IkReal x1814=(cj6*sj7);
IkReal x1815=(py*sj3);
IkReal x1816=(cj4*pz);
IkReal x1817=(cj3*px);
IkReal x1818=(cj4*px*sj3);
IkReal x1819=((0.244642)*x1806);
IkReal x1820=((0.244642)*x1807);
IkReal x1821=(px*sj3*sj4);
evalcond[0]=(((x1813*x1819))+(((0.07)*x1814))+(((-1.0)*x1817))+(((-1.0)*x1815))+((x1814*x1820)));
evalcond[1]=((-0.268404)+(((-1.0)*x1809*x1810))+(((-1.0)*cj7*x1820))+(((-0.07)*cj7))+x1818+((sj7*x1819))+(((-1.0)*x1808)));
evalcond[2]=((-0.064778)+((sj4*x1809))+(((-1.0)*x1821))+(((-1.0)*x1812*x1820))+(((-1.0)*x1811*x1819))+(((-1.0)*pz*x1810))+(((-0.07)*x1812)));
evalcond[3]=((-0.07)+(((-1.0)*x1820))+(((-1.0)*pz*x1810*x1812))+(((-0.268404)*cj7))+((sj4*x1809*x1812))+(((-1.0)*x1812*x1821))+((x1814*x1817))+((x1814*x1815))+(((-1.0)*cj7*x1808))+(((-1.0)*cj7*x1809*x1810))+(((-0.064778)*x1812))+((cj7*x1818)));
evalcond[4]=((((-0.268404)*sj7))+(((-1.0)*x1813*x1815))+(((-1.0)*x1813*x1817))+(((-1.0)*sj7*x1808))+((x1811*x1821))+x1819+(((-1.0)*sj4*x1809*x1811))+((x1811*x1816))+(((0.064778)*x1811))+((sj7*x1818))+(((-1.0)*sj7*x1809*x1810)));
evalcond[5]=((0.118834468928)+(((0.00489284)*x1806*x1811))+(((0.03365012)*cj7))+(((-0.056092)*cj4*x1809))+(((0.109556)*sj4*x1809))+(((-0.109556)*x1816))+(((0.00489284)*x1807*x1812))+(((0.0014)*x1812))+(((0.056092)*x1818))+(((-1.0)*pp))+(((-0.056092)*x1808))+(((0.117603323672)*cj7*x1807))+(((0.03424988)*x1807))+(((-0.117603323672)*sj7*x1806))+(((-0.109556)*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1822=(cj6*sj7);
IkReal x1823=((500000.0)*cj7);
IkReal x1824=(cj3*px);
IkReal x1825=(pz*sj4);
IkReal x1826=(py*sj3);
IkReal x1827=((500000.0)*sj7);
IkReal x1828=(cj3*cj4*py);
IkReal x1829=(cj4*px*sj3);
CheckValue<IkReal> x1830=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1830.valid){
continue;
}
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((((500000.0)*x1822*x1828))+(((500000.0)*x1822*x1825))+(((134202.0)*x1822))+((x1823*x1824))+((x1823*x1826))+(((-500000.0)*x1822*x1829)))),IkReal(((((-1.0)*cj6*x1823*x1828))+(((-1.0)*cj6*x1823*x1825))+((x1826*x1827))+((x1824*x1827))+(((-134202.0)*cj6*cj7))+(((-35000.0)*cj6))+((cj6*x1823*x1829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1830.value)))+(x1831.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1832=IKsin(j8);
IkReal x1833=IKcos(j8);
IkReal x1834=(pz*sj4);
IkReal x1835=(cj3*py);
IkReal x1836=((1.0)*cj4);
IkReal x1837=(cj7*sj6);
IkReal x1838=(sj6*sj7);
IkReal x1839=(cj6*cj7);
IkReal x1840=(cj6*sj7);
IkReal x1841=(py*sj3);
IkReal x1842=(cj4*pz);
IkReal x1843=(cj3*px);
IkReal x1844=(cj4*px*sj3);
IkReal x1845=((0.244642)*x1832);
IkReal x1846=((0.244642)*x1833);
IkReal x1847=(px*sj3*sj4);
evalcond[0]=((((0.07)*x1840))+((x1840*x1846))+((x1839*x1845))+(((-1.0)*x1843))+(((-1.0)*x1841)));
evalcond[1]=((-0.268404)+((sj7*x1845))+(((-1.0)*x1834))+(((-1.0)*cj7*x1846))+(((-1.0)*x1835*x1836))+(((-0.07)*cj7))+x1844);
evalcond[2]=((-0.064778)+(((-0.07)*x1838))+(((-1.0)*pz*x1836))+(((-1.0)*x1847))+(((-1.0)*x1837*x1845))+(((-1.0)*x1838*x1846))+((sj4*x1835)));
evalcond[3]=((-0.07)+((cj7*x1844))+(((-0.268404)*cj7))+(((-1.0)*x1846))+(((-1.0)*x1838*x1847))+(((-0.064778)*x1838))+((x1840*x1843))+((x1840*x1841))+(((-1.0)*pz*x1836*x1838))+(((-1.0)*cj7*x1835*x1836))+(((-1.0)*cj7*x1834))+((sj4*x1835*x1838)));
evalcond[4]=(((sj7*x1844))+(((-1.0)*sj4*x1835*x1837))+(((-0.268404)*sj7))+((x1837*x1842))+((x1837*x1847))+(((-1.0)*sj7*x1835*x1836))+(((-1.0)*sj7*x1834))+(((-1.0)*x1839*x1843))+(((-1.0)*x1839*x1841))+x1845+(((0.064778)*x1837)));
evalcond[5]=((0.118834468928)+(((0.00489284)*x1832*x1837))+(((-0.056092)*cj4*x1835))+(((0.109556)*sj4*x1835))+(((0.03365012)*cj7))+(((0.0014)*x1838))+(((-1.0)*pp))+(((-0.109556)*x1842))+(((-0.109556)*x1847))+(((0.056092)*x1844))+(((-0.056092)*x1834))+(((-0.117603323672)*sj7*x1832))+(((0.117603323672)*cj7*x1833))+(((0.03424988)*x1833))+(((0.00489284)*x1833*x1838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=0;
cj5=1.0;
j5=0;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=1.0;
j5=0;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=1.0;
j5=0;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1848=((4.08760556241365)*cj4);
IkReal x1849=(px*sj3);
IkReal x1850=(cj7*pz);
IkReal x1851=(pz*sj7);
IkReal x1852=((4.08760556241365)*sj4);
IkReal x1853=(cj3*py*sj7);
IkReal x1854=(cj3*cj7*py);
if( IKabs(((((0.0737649299793167)*cj7))+((x1848*x1851))+((x1848*x1854))+(((-1.0)*cj7*x1848*x1849))+((x1850*x1852))+(((1.20639955526851)*sj7))+(((-1.0)*x1852*x1853))+((sj7*x1849*x1852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1852*x1854))+(((-1.0)*x1848*x1850))+(((-1.0)*cj7*x1849*x1852))+((x1851*x1852))+((x1848*x1853))+(((0.0737649299793167)*sj7))+(((-1.0)*sj7*x1848*x1849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.0737649299793167)*cj7))+((x1848*x1851))+((x1848*x1854))+(((-1.0)*cj7*x1848*x1849))+((x1850*x1852))+(((1.20639955526851)*sj7))+(((-1.0)*x1852*x1853))+((sj7*x1849*x1852))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1852*x1854))+(((-1.0)*x1848*x1850))+(((-1.0)*cj7*x1849*x1852))+((x1851*x1852))+((x1848*x1853))+(((0.0737649299793167)*sj7))+(((-1.0)*sj7*x1848*x1849))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((0.0737649299793167)*cj7))+((x1848*x1851))+((x1848*x1854))+(((-1.0)*cj7*x1848*x1849))+((x1850*x1852))+(((1.20639955526851)*sj7))+(((-1.0)*x1852*x1853))+((sj7*x1849*x1852))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1852*x1854))+(((-1.0)*x1848*x1850))+(((-1.0)*cj7*x1849*x1852))+((x1851*x1852))+((x1848*x1853))+(((0.0737649299793167)*sj7))+(((-1.0)*sj7*x1848*x1849))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1855=IKsin(j8);
IkReal x1856=IKcos(j8);
IkReal x1857=(pz*sj4);
IkReal x1858=(px*sj3);
IkReal x1859=(cj3*py);
IkReal x1860=((1.0)*cj7);
IkReal x1861=(cj4*pz);
IkReal x1862=((0.056092)*cj4);
IkReal x1863=((1.0)*sj4);
IkReal x1864=((0.109556)*sj4);
IkReal x1865=((1.0)*sj7);
IkReal x1866=(sj7*x1855);
IkReal x1867=(cj7*x1855);
IkReal x1868=((0.244642)*x1856);
evalcond[0]=((-0.018046)+(((0.244642)*x1867))+(((-1.0)*x1857))+(((0.07)*sj7))+(((-1.0)*cj4*x1859))+((sj7*x1868))+((cj4*x1858)));
evalcond[1]=((-0.295136)+(((0.244642)*x1866))+((sj4*x1859))+(((-1.0)*cj7*x1868))+(((-0.07)*cj7))+(((-1.0)*x1858*x1863))+(((-1.0)*x1861)));
evalcond[2]=((-0.07)+(((0.018046)*sj7))+((sj7*x1857))+((cj7*sj4*x1859))+(((-1.0)*x1860*x1861))+((cj4*sj7*x1859))+(((-1.0)*sj4*x1858*x1860))+(((-0.295136)*cj7))+(((-1.0)*cj4*x1858*x1865))+(((-1.0)*x1868)));
evalcond[3]=((((-0.295136)*sj7))+(((0.244642)*x1855))+(((-1.0)*cj4*x1859*x1860))+(((-1.0)*sj7*x1858*x1863))+((sj4*sj7*x1859))+(((-0.018046)*cj7))+((cj4*cj7*x1858))+(((-1.0)*x1861*x1865))+(((-1.0)*x1857*x1860)));
evalcond[4]=((0.118834468928)+(((0.117603323672)*cj7*x1856))+(((0.03365012)*cj7))+(((-0.109556)*x1861))+(((0.0014)*sj7))+((x1859*x1864))+(((-0.117603323672)*x1866))+((x1858*x1862))+(((-1.0)*pp))+(((-0.056092)*x1857))+(((-1.0)*x1859*x1862))+(((0.00489284)*sj7*x1856))+(((0.00489284)*x1867))+(((-1.0)*x1858*x1864))+(((0.03424988)*x1856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1869=((4.08760556241365)*cj4);
IkReal x1870=(px*sj3);
IkReal x1871=(cj7*pz);
IkReal x1872=(cj3*py);
IkReal x1873=(pz*sj7);
IkReal x1874=((4.08760556241365)*sj4);
if( IKabs((((sj7*x1870*x1874))+((cj7*x1869*x1870))+(((1.20639955526851)*sj7))+(((-0.0737649299793167)*cj7))+(((-1.0)*cj7*x1869*x1872))+(((-1.0)*sj7*x1872*x1874))+(((-1.0)*x1871*x1874))+((x1869*x1873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+(((-0.0737649299793167)*sj7))+(((-1.0)*x1873*x1874))+(((-1.0)*x1869*x1871))+((sj7*x1869*x1870))+(((-1.0)*cj7*x1870*x1874))+(((-1.0)*sj7*x1869*x1872))+((cj7*x1872*x1874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj7*x1870*x1874))+((cj7*x1869*x1870))+(((1.20639955526851)*sj7))+(((-0.0737649299793167)*cj7))+(((-1.0)*cj7*x1869*x1872))+(((-1.0)*sj7*x1872*x1874))+(((-1.0)*x1871*x1874))+((x1869*x1873))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+(((-0.0737649299793167)*sj7))+(((-1.0)*x1873*x1874))+(((-1.0)*x1869*x1871))+((sj7*x1869*x1870))+(((-1.0)*cj7*x1870*x1874))+(((-1.0)*sj7*x1869*x1872))+((cj7*x1872*x1874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((sj7*x1870*x1874))+((cj7*x1869*x1870))+(((1.20639955526851)*sj7))+(((-0.0737649299793167)*cj7))+(((-1.0)*cj7*x1869*x1872))+(((-1.0)*sj7*x1872*x1874))+(((-1.0)*x1871*x1874))+((x1869*x1873))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+(((-0.0737649299793167)*sj7))+(((-1.0)*x1873*x1874))+(((-1.0)*x1869*x1871))+((sj7*x1869*x1870))+(((-1.0)*cj7*x1870*x1874))+(((-1.0)*sj7*x1869*x1872))+((cj7*x1872*x1874))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1875=IKsin(j8);
IkReal x1876=IKcos(j8);
IkReal x1877=(pz*sj4);
IkReal x1878=(px*sj3);
IkReal x1879=((1.0)*sj4);
IkReal x1880=(cj4*pz);
IkReal x1881=(cj4*sj7);
IkReal x1882=((1.0)*sj7);
IkReal x1883=((0.056092)*cj4);
IkReal x1884=(cj3*py);
IkReal x1885=(cj4*cj7);
IkReal x1886=(sj4*x1884);
IkReal x1887=(sj7*x1875);
IkReal x1888=(cj7*x1875);
IkReal x1889=((0.244642)*x1876);
evalcond[0]=((-0.018046)+(((-0.07)*sj7))+(((-1.0)*sj7*x1889))+(((-1.0)*cj4*x1884))+(((-1.0)*x1877))+(((-0.244642)*x1888))+((cj4*x1878)));
evalcond[1]=((-0.295136)+(((-1.0)*x1878*x1879))+(((-0.07)*cj7))+x1886+(((-1.0)*x1880))+(((0.244642)*x1887))+(((-1.0)*cj7*x1889)));
evalcond[2]=(((sj7*x1886))+((cj7*x1877))+(((-1.0)*x1880*x1882))+(((0.244642)*x1875))+(((-0.295136)*sj7))+(((0.018046)*cj7))+(((-1.0)*x1878*x1885))+(((-1.0)*sj7*x1878*x1879))+((x1884*x1885)));
evalcond[3]=((-0.07)+(((-1.0)*x1881*x1884))+(((-1.0)*cj7*x1880))+((x1878*x1881))+(((-1.0)*cj7*x1878*x1879))+(((-0.018046)*sj7))+(((-0.295136)*cj7))+((cj7*x1886))+(((-1.0)*x1889))+(((-1.0)*x1877*x1882)));
evalcond[4]=((0.118834468928)+(((0.03424988)*x1876))+(((-0.056092)*x1877))+(((0.03365012)*cj7))+(((-1.0)*x1883*x1884))+((x1878*x1883))+(((-0.00489284)*x1888))+(((-0.0014)*sj7))+(((0.109556)*x1886))+(((-1.0)*pp))+(((-0.109556)*x1880))+(((-0.109556)*sj4*x1878))+(((-0.117603323672)*x1887))+(((0.117603323672)*cj7*x1876))+(((-0.00489284)*sj7*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1890=((4.08760556241365)*cj4);
IkReal x1891=(cj3*py);
IkReal x1892=((4.08760556241365)*cj6);
IkReal x1893=(px*sj3);
IkReal x1894=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*sj6*x1890*x1893))+((py*sj3*x1892))+(((0.0737649299793167)*sj6))+((cj3*px*x1892))+((pz*sj6*x1894))+((sj6*x1890*x1891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.49253194463747)+(((-1.0)*x1893*x1894))+(((-1.0)*pz*x1890))+((x1891*x1894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x1890*x1893))+((py*sj3*x1892))+(((0.0737649299793167)*sj6))+((cj3*px*x1892))+((pz*sj6*x1894))+((sj6*x1890*x1891))))+IKsqr(((-1.49253194463747)+(((-1.0)*x1893*x1894))+(((-1.0)*pz*x1890))+((x1891*x1894))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj6*x1890*x1893))+((py*sj3*x1892))+(((0.0737649299793167)*sj6))+((cj3*px*x1892))+((pz*sj6*x1894))+((sj6*x1890*x1891))), ((-1.49253194463747)+(((-1.0)*x1893*x1894))+(((-1.0)*pz*x1890))+((x1891*x1894))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1895=IKsin(j8);
IkReal x1896=IKcos(j8);
IkReal x1897=(pz*sj4);
IkReal x1898=(cj3*py);
IkReal x1899=((1.0)*sj6);
IkReal x1900=((1.0)*cj4);
IkReal x1901=((1.0)*px);
IkReal x1902=(sj3*sj4);
IkReal x1903=((0.244642)*x1895);
IkReal x1904=(cj4*px*sj3);
IkReal x1905=((1.0)*py*sj3);
evalcond[0]=(((cj6*x1903))+(((-1.0)*cj3*x1901))+(((-1.0)*x1905)));
evalcond[1]=((-0.365136)+(((-0.244642)*x1896))+(((-1.0)*pz*x1900))+(((-1.0)*x1901*x1902))+((sj4*x1898)));
evalcond[2]=((-0.018046)+(((-1.0)*x1898*x1900))+x1904+(((-1.0)*x1897))+((sj6*x1903)));
evalcond[3]=((((-1.0)*x1897*x1899))+(((-1.0)*cj4*x1898*x1899))+(((-1.0)*cj3*cj6*x1901))+(((-0.018046)*sj6))+x1903+(((-1.0)*cj6*x1905))+((sj6*x1904)));
evalcond[4]=((0.152484588928)+(((-1.0)*pp))+(((0.056092)*x1904))+(((-0.109556)*cj4*pz))+(((0.00489284)*sj6*x1895))+(((0.151853203672)*x1896))+(((-0.109556)*px*x1902))+(((-0.056092)*x1897))+(((-0.056092)*cj4*x1898))+(((0.109556)*sj4*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1906=((4.08760556241365)*cj4);
IkReal x1907=(cj3*py);
IkReal x1908=((4.08760556241365)*cj6);
IkReal x1909=(px*sj3);
IkReal x1910=((4.08760556241365)*sj4);
if( IKabs(((((-0.0737649299793167)*sj6))+(((-1.0)*cj3*px*x1908))+(((-1.0)*py*sj3*x1908))+(((-1.0)*pz*sj6*x1910))+((sj6*x1906*x1909))+(((-1.0)*sj6*x1906*x1907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.920267165899559)+(((-1.0)*x1907*x1910))+((pz*x1906))+((x1909*x1910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0737649299793167)*sj6))+(((-1.0)*cj3*px*x1908))+(((-1.0)*py*sj3*x1908))+(((-1.0)*pz*sj6*x1910))+((sj6*x1906*x1909))+(((-1.0)*sj6*x1906*x1907))))+IKsqr(((0.920267165899559)+(((-1.0)*x1907*x1910))+((pz*x1906))+((x1909*x1910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-0.0737649299793167)*sj6))+(((-1.0)*cj3*px*x1908))+(((-1.0)*py*sj3*x1908))+(((-1.0)*pz*sj6*x1910))+((sj6*x1906*x1909))+(((-1.0)*sj6*x1906*x1907))), ((0.920267165899559)+(((-1.0)*x1907*x1910))+((pz*x1906))+((x1909*x1910))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1911=IKsin(j8);
IkReal x1912=IKcos(j8);
IkReal x1913=(pz*sj4);
IkReal x1914=(cj3*py);
IkReal x1915=(cj4*pz);
IkReal x1916=(py*sj3);
IkReal x1917=((1.0)*px);
IkReal x1918=(sj3*sj4);
IkReal x1919=((0.244642)*x1911);
IkReal x1920=(cj4*px*sj3);
evalcond[0]=((((-1.0)*x1916))+(((-1.0)*cj3*x1917))+(((-1.0)*cj6*x1919)));
evalcond[1]=((-0.225136)+(((-1.0)*x1917*x1918))+(((0.244642)*x1912))+((sj4*x1914))+(((-1.0)*x1915)));
evalcond[2]=((-0.018046)+(((-1.0)*cj4*x1914))+(((-1.0)*sj6*x1919))+(((-1.0)*x1913))+x1920);
evalcond[3]=((((0.018046)*sj6))+(((-1.0)*cj4*sj3*sj6*x1917))+((cj3*cj6*px))+((cj6*x1916))+x1919+((cj4*sj6*x1914))+((sj6*x1913)));
evalcond[4]=((0.085184348928)+(((-0.109556)*px*x1918))+(((-0.00489284)*sj6*x1911))+(((0.056092)*x1920))+(((-0.056092)*x1913))+(((-1.0)*pp))+(((-0.109556)*x1915))+(((-0.083353443672)*x1912))+(((0.109556)*sj4*x1914))+(((-0.056092)*cj4*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1921=((4.08760556241365)*cj7);
IkReal x1922=(cj4*pz);
IkReal x1923=((4.08760556241365)*sj7);
IkReal x1924=(cj3*px);
IkReal x1925=((4.08760556241365)*py*sj3);
IkReal x1926=(px*sj3*sj4);
IkReal x1927=(cj3*py*sj4);
if( IKabs((((x1921*x1924))+(((1.20639955526851)*sj7))+((py*sj3*x1921))+((x1923*x1926))+(((-1.0)*x1923*x1927))+((x1922*x1923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1921*x1927))+((py*sj3*x1923))+((x1923*x1924))+(((-1.0)*x1921*x1922))+(((-1.0)*x1921*x1926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1921*x1924))+(((1.20639955526851)*sj7))+((py*sj3*x1921))+((x1923*x1926))+(((-1.0)*x1923*x1927))+((x1922*x1923))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1921*x1927))+((py*sj3*x1923))+((x1923*x1924))+(((-1.0)*x1921*x1922))+(((-1.0)*x1921*x1926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1921*x1924))+(((1.20639955526851)*sj7))+((py*sj3*x1921))+((x1923*x1926))+(((-1.0)*x1923*x1927))+((x1922*x1923))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1921*x1927))+((py*sj3*x1923))+((x1923*x1924))+(((-1.0)*x1921*x1922))+(((-1.0)*x1921*x1926))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1928=IKsin(j8);
IkReal x1929=IKcos(j8);
IkReal x1930=(px*sj7);
IkReal x1931=(px*sj4);
IkReal x1932=(cj4*pz);
IkReal x1933=((0.056092)*cj4);
IkReal x1934=((1.0)*sj3);
IkReal x1935=((1.0)*cj7);
IkReal x1936=(cj3*px);
IkReal x1937=(cj3*py*sj4);
IkReal x1938=(cj7*x1934);
IkReal x1939=(sj7*x1928);
IkReal x1940=((0.244642)*x1929);
IkReal x1941=((0.244642)*x1928);
evalcond[0]=(((cj7*x1941))+(((-1.0)*py*x1934))+(((-1.0)*x1936))+(((0.07)*sj7))+((sj7*x1940)));
evalcond[1]=((-0.295136)+(((-1.0)*cj7*x1940))+(((0.244642)*x1939))+(((-1.0)*x1932))+x1937+(((-0.07)*cj7))+(((-1.0)*x1931*x1934)));
evalcond[2]=((-0.07)+(((-1.0)*x1940))+((cj3*x1930))+((py*sj3*sj7))+(((-1.0)*x1932*x1935))+(((-1.0)*x1931*x1938))+((cj7*x1937))+(((-0.295136)*cj7)));
evalcond[3]=((((-1.0)*sj7*x1932))+(((-1.0)*py*x1938))+(((-0.295136)*sj7))+x1941+(((-1.0)*sj4*x1930*x1934))+((sj7*x1937))+(((-1.0)*x1935*x1936)));
evalcond[4]=((0.118834468928)+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((0.109556)*x1937))+((px*sj3*x1933))+(((-1.0)*pp))+(((0.03424988)*x1929))+(((-0.109556)*sj3*x1931))+(((-0.109556)*x1932))+(((0.117603323672)*cj7*x1929))+(((-0.117603323672)*x1939))+(((-1.0)*cj3*py*x1933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1942=((4.08760556241365)*sj7);
IkReal x1943=(py*sj3);
IkReal x1944=(cj4*pz);
IkReal x1945=((4.08760556241365)*cj7);
IkReal x1946=(cj3*px);
IkReal x1947=(px*sj3*sj4);
IkReal x1948=(cj3*py*sj4);
if( IKabs(((((-1.0)*x1945*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1942*x1948))+(((1.20639955526851)*sj7))+((x1942*x1947))+((x1942*x1944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1945*x1948))+(((-1.0)*x1945*x1947))+(((-1.0)*x1942*x1946))+(((-1.0)*x1942*x1943))+(((-1.0)*x1944*x1945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1945*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1942*x1948))+(((1.20639955526851)*sj7))+((x1942*x1947))+((x1942*x1944))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1945*x1948))+(((-1.0)*x1945*x1947))+(((-1.0)*x1942*x1946))+(((-1.0)*x1942*x1943))+(((-1.0)*x1944*x1945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1945*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1942*x1948))+(((1.20639955526851)*sj7))+((x1942*x1947))+((x1942*x1944))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1945*x1948))+(((-1.0)*x1945*x1947))+(((-1.0)*x1942*x1946))+(((-1.0)*x1942*x1943))+(((-1.0)*x1944*x1945))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1949=IKsin(j8);
IkReal x1950=IKcos(j8);
IkReal x1951=((1.0)*sj3);
IkReal x1952=(cj7*px);
IkReal x1953=(cj4*pz);
IkReal x1954=((0.056092)*cj4);
IkReal x1955=(px*sj3);
IkReal x1956=(px*sj7);
IkReal x1957=((1.0)*cj3);
IkReal x1958=(cj3*py*sj4);
IkReal x1959=(sj7*x1949);
IkReal x1960=((0.244642)*x1950);
IkReal x1961=((0.244642)*x1949);
evalcond[0]=((((-1.0)*px*x1957))+(((-0.07)*sj7))+(((-1.0)*cj7*x1961))+(((-1.0)*py*x1951))+(((-1.0)*sj7*x1960)));
evalcond[1]=((-0.295136)+(((0.244642)*x1959))+(((-1.0)*cj7*x1960))+x1958+(((-0.07)*cj7))+(((-1.0)*x1953))+(((-1.0)*px*sj4*x1951)));
evalcond[2]=((((-0.295136)*sj7))+((cj3*x1952))+((cj7*py*sj3))+(((-1.0)*sj7*x1953))+(((-1.0)*sj4*x1951*x1956))+((sj7*x1958))+x1961);
evalcond[3]=((-0.07)+(((-1.0)*py*sj7*x1951))+(((-1.0)*x1960))+(((-1.0)*sj4*x1951*x1952))+(((-1.0)*cj7*x1953))+(((-0.295136)*cj7))+((cj7*x1958))+(((-1.0)*x1956*x1957)));
evalcond[4]=((0.118834468928)+(((0.117603323672)*cj7*x1950))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.109556)*x1953))+(((0.109556)*x1958))+(((-1.0)*cj3*py*x1954))+((x1954*x1955))+(((-1.0)*pp))+(((-0.117603323672)*x1959))+(((0.03424988)*x1950))+(((-0.109556)*sj4*x1955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1962=cj7*cj7;
IkReal x1963=cj6*cj6;
IkReal x1964=((4.08760556241365)*pz);
IkReal x1965=(cj4*sj7);
IkReal x1966=(cj6*sj7);
IkReal x1967=(cj6*px);
IkReal x1968=((500000.0)*sj3);
IkReal x1969=(cj3*cj7);
IkReal x1970=((500000.0)*py);
IkReal x1971=(cj7*sj6);
IkReal x1972=(sj4*sj7);
IkReal x1973=(cj6*cj7);
IkReal x1974=((500000.0)*pz);
IkReal x1975=((4.08760556241365)*py);
IkReal x1976=((4.08760556241365)*px*sj3);
IkReal x1977=((500000.0)*cj3*px);
IkReal x1978=(cj4*sj6*x1962);
IkReal x1979=(x1962*x1963);
IkReal x1980=(cj6*sj6*x1962);
CheckValue<IkReal> x1981=IKPowWithIntegerCheck(cj6,-1);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(sj7,-1);
if(!x1982.valid){
continue;
}
if( IKabs((((x1972*x1976))+((x1964*x1965))+(((1.20639955526851)*sj7))+(((0.0737649299793167)*x1971))+((sj3*x1973*x1975))+((cj4*sj6*x1969*x1975))+(((-1.0)*cj4*x1971*x1976))+(((4.08760556241365)*x1967*x1969))+(((-1.0)*cj3*x1972*x1975))+((sj4*x1964*x1971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x1981.value)*(x1982.value)*(((((-1.0)*cj3*cj6*x1970*x1978))+(((-1.0)*sj4*x1974*x1980))+(((-35000.0)*x1966))+((py*x1968))+x1977+(((-1.0)*x1977*x1979))+(((-1.0)*py*x1968*x1979))+((x1967*x1968*x1978))+(((-147568.0)*cj7*x1966))+(((-1.0)*x1965*x1973*x1974))+(((-9023.0)*x1980))+((sj4*x1966*x1969*x1970))+(((-1.0)*cj7*px*sj4*x1966*x1968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1972*x1976))+((x1964*x1965))+(((1.20639955526851)*sj7))+(((0.0737649299793167)*x1971))+((sj3*x1973*x1975))+((cj4*sj6*x1969*x1975))+(((-1.0)*cj4*x1971*x1976))+(((4.08760556241365)*x1967*x1969))+(((-1.0)*cj3*x1972*x1975))+((sj4*x1964*x1971))))+IKsqr(((8.1752111248273e-6)*(x1981.value)*(x1982.value)*(((((-1.0)*cj3*cj6*x1970*x1978))+(((-1.0)*sj4*x1974*x1980))+(((-35000.0)*x1966))+((py*x1968))+x1977+(((-1.0)*x1977*x1979))+(((-1.0)*py*x1968*x1979))+((x1967*x1968*x1978))+(((-147568.0)*cj7*x1966))+(((-1.0)*x1965*x1973*x1974))+(((-9023.0)*x1980))+((sj4*x1966*x1969*x1970))+(((-1.0)*cj7*px*sj4*x1966*x1968))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1972*x1976))+((x1964*x1965))+(((1.20639955526851)*sj7))+(((0.0737649299793167)*x1971))+((sj3*x1973*x1975))+((cj4*sj6*x1969*x1975))+(((-1.0)*cj4*x1971*x1976))+(((4.08760556241365)*x1967*x1969))+(((-1.0)*cj3*x1972*x1975))+((sj4*x1964*x1971))), ((8.1752111248273e-6)*(x1981.value)*(x1982.value)*(((((-1.0)*cj3*cj6*x1970*x1978))+(((-1.0)*sj4*x1974*x1980))+(((-35000.0)*x1966))+((py*x1968))+x1977+(((-1.0)*x1977*x1979))+(((-1.0)*py*x1968*x1979))+((x1967*x1968*x1978))+(((-147568.0)*cj7*x1966))+(((-1.0)*x1965*x1973*x1974))+(((-9023.0)*x1980))+((sj4*x1966*x1969*x1970))+(((-1.0)*cj7*px*sj4*x1966*x1968))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1983=IKsin(j8);
IkReal x1984=IKcos(j8);
IkReal x1985=(pz*sj4);
IkReal x1986=(px*sj3);
IkReal x1987=(cj3*py);
IkReal x1988=(cj6*sj7);
IkReal x1989=(py*sj3);
IkReal x1990=(sj6*sj7);
IkReal x1991=((1.0)*sj4);
IkReal x1992=(cj4*pz);
IkReal x1993=(cj7*sj6);
IkReal x1994=((0.109556)*sj4);
IkReal x1995=((0.056092)*cj4);
IkReal x1996=((1.0)*cj4);
IkReal x1997=((1.0)*cj7);
IkReal x1998=(cj3*px);
IkReal x1999=(sj7*x1983);
IkReal x2000=((0.244642)*x1984);
IkReal x2001=((0.244642)*cj7*x1983);
evalcond[0]=((((0.07)*x1988))+(((-1.0)*x1989))+(((-1.0)*x1998))+((cj6*x2001))+((x1988*x2000)));
evalcond[1]=((-0.295136)+(((-1.0)*x1986*x1991))+(((-0.07)*cj7))+((sj4*x1987))+(((-1.0)*cj7*x2000))+(((-1.0)*x1992))+(((0.244642)*x1999)));
evalcond[2]=((-0.018046)+((x1990*x2000))+(((0.07)*x1990))+(((-1.0)*x1987*x1996))+((cj4*x1986))+(((-1.0)*x1985))+(((0.244642)*x1983*x1993)));
evalcond[3]=((-0.07)+(((-1.0)*x1986*x1990*x1996))+(((0.018046)*x1990))+((x1988*x1998))+((cj7*sj4*x1987))+(((-1.0)*cj7*x1986*x1991))+(((-1.0)*x2000))+(((-1.0)*x1992*x1997))+((x1988*x1989))+((cj4*x1987*x1990))+(((-0.295136)*cj7))+((x1985*x1990)));
evalcond[4]=((((-0.295136)*sj7))+(((-0.018046)*x1993))+(((-1.0)*x1985*x1993))+(((-1.0)*cj6*x1997*x1998))+(((0.244642)*x1983))+((cj4*x1986*x1993))+(((-1.0)*x1987*x1993*x1996))+(((-1.0)*sj7*x1986*x1991))+(((-1.0)*cj6*x1989*x1997))+(((-1.0)*sj7*x1992))+((sj4*sj7*x1987)));
evalcond[5]=((0.118834468928)+(((-1.0)*x1986*x1994))+(((0.03365012)*cj7))+(((-0.109556)*x1992))+((x1986*x1995))+(((0.117603323672)*cj7*x1984))+(((-0.117603323672)*x1999))+(((-0.056092)*x1985))+(((-1.0)*pp))+(((-1.0)*x1987*x1995))+(((0.0014)*x1990))+(((0.00489284)*x1984*x1990))+((x1987*x1994))+(((0.00489284)*x1983*x1993))+(((0.03424988)*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2002=((500000.0)*cj7);
IkReal x2003=(sj4*sj6);
IkReal x2004=(px*sj3);
IkReal x2005=(cj3*py);
IkReal x2006=((500000.0)*sj7);
IkReal x2007=((147568.0)*sj6);
IkReal x2008=(pz*sj4);
IkReal x2009=(cj4*pz*sj6);
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x2010.valid){
continue;
}
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal((((x2002*x2008))+((x2003*x2004*x2006))+(((-1.0)*x2003*x2005*x2006))+((cj4*x2002*x2005))+((x2006*x2009))+((sj7*x2007))+(((-1.0)*cj4*x2002*x2004))+(((9023.0)*cj7)))),IkReal(((((-35000.0)*sj6))+(((-1.0)*x2002*x2003*x2004))+(((-1.0)*x2002*x2009))+(((9023.0)*sj7))+(((-1.0)*cj7*x2007))+((x2006*x2008))+(((-1.0)*cj4*x2004*x2006))+((cj4*x2005*x2006))+((x2002*x2003*x2005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2010.value)))+(x2011.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2012=IKsin(j8);
IkReal x2013=IKcos(j8);
IkReal x2014=(pz*sj4);
IkReal x2015=(px*sj3);
IkReal x2016=(cj3*py);
IkReal x2017=(cj6*sj7);
IkReal x2018=(py*sj3);
IkReal x2019=(sj6*sj7);
IkReal x2020=((1.0)*sj4);
IkReal x2021=(cj4*pz);
IkReal x2022=(cj7*sj6);
IkReal x2023=((0.109556)*sj4);
IkReal x2024=((0.056092)*cj4);
IkReal x2025=((1.0)*cj4);
IkReal x2026=((1.0)*cj7);
IkReal x2027=(cj3*px);
IkReal x2028=(sj7*x2012);
IkReal x2029=((0.244642)*x2013);
IkReal x2030=((0.244642)*cj7*x2012);
evalcond[0]=(((x2017*x2029))+(((0.07)*x2017))+(((-1.0)*x2027))+(((-1.0)*x2018))+((cj6*x2030)));
evalcond[1]=((-0.295136)+((sj4*x2016))+(((-1.0)*x2021))+(((-0.07)*cj7))+(((-1.0)*cj7*x2029))+(((-1.0)*x2015*x2020))+(((0.244642)*x2028)));
evalcond[2]=((-0.018046)+((x2019*x2029))+(((-1.0)*x2016*x2025))+(((0.07)*x2019))+(((0.244642)*x2012*x2022))+(((-1.0)*x2014))+((cj4*x2015)));
evalcond[3]=((-0.07)+(((-1.0)*x2021*x2026))+((x2017*x2027))+((x2014*x2019))+((cj7*sj4*x2016))+(((-1.0)*x2015*x2019*x2025))+(((-1.0)*cj7*x2015*x2020))+((cj4*x2016*x2019))+(((-1.0)*x2029))+(((-0.295136)*cj7))+((x2017*x2018))+(((0.018046)*x2019)));
evalcond[4]=(((cj4*x2015*x2022))+(((-1.0)*x2016*x2022*x2025))+(((0.244642)*x2012))+(((-0.295136)*sj7))+((sj4*sj7*x2016))+(((-1.0)*x2014*x2022))+(((-1.0)*cj6*x2018*x2026))+(((-1.0)*sj7*x2015*x2020))+(((-1.0)*sj7*x2021))+(((-1.0)*cj6*x2026*x2027))+(((-0.018046)*x2022)));
evalcond[5]=((0.118834468928)+(((0.00489284)*x2013*x2019))+(((0.117603323672)*cj7*x2013))+(((0.0014)*x2019))+(((0.03365012)*cj7))+(((-0.056092)*x2014))+(((-1.0)*x2016*x2024))+(((0.03424988)*x2013))+(((-0.109556)*x2021))+(((-1.0)*pp))+(((-0.117603323672)*x2028))+((x2016*x2023))+(((0.00489284)*x2012*x2022))+(((-1.0)*x2015*x2023))+((x2015*x2024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2031=((500000.0)*cj6);
IkReal x2032=(cj4*pz);
IkReal x2033=(cj3*cj7);
IkReal x2034=((500000.0)*px);
IkReal x2035=(py*sj4);
IkReal x2036=(cj3*sj7);
IkReal x2037=((147568.0)*cj6);
IkReal x2038=(cj7*sj3);
IkReal x2039=(px*sj4);
IkReal x2040=((500000.0)*py);
IkReal x2041=(sj3*sj7);
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal((((sj7*x2031*x2032))+((x2033*x2034))+((x2031*x2039*x2041))+((sj7*x2037))+(((-1.0)*x2031*x2035*x2036))+((x2038*x2040)))),IkReal((((x2040*x2041))+((x2034*x2036))+(((-1.0)*cj7*x2031*x2032))+(((-1.0)*x2031*x2038*x2039))+((x2031*x2033*x2035))+(((-1.0)*cj7*x2037))+(((-35000.0)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
CheckValue<IkReal> x2043=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x2043.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2042.value)+(((1.5707963267949)*(x2043.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2044=IKsin(j8);
IkReal x2045=IKcos(j8);
IkReal x2046=(pz*sj4);
IkReal x2047=(px*sj3);
IkReal x2048=(cj3*py);
IkReal x2049=(cj6*sj7);
IkReal x2050=(py*sj3);
IkReal x2051=(sj6*sj7);
IkReal x2052=((1.0)*sj4);
IkReal x2053=(cj4*pz);
IkReal x2054=(cj7*sj6);
IkReal x2055=((0.109556)*sj4);
IkReal x2056=((0.056092)*cj4);
IkReal x2057=((1.0)*cj4);
IkReal x2058=((1.0)*cj7);
IkReal x2059=(cj3*px);
IkReal x2060=(sj7*x2044);
IkReal x2061=((0.244642)*x2045);
IkReal x2062=((0.244642)*cj7*x2044);
evalcond[0]=(((x2049*x2061))+(((-1.0)*x2059))+(((-1.0)*x2050))+((cj6*x2062))+(((0.07)*x2049)));
evalcond[1]=((-0.295136)+((sj4*x2048))+(((-1.0)*x2053))+(((-0.07)*cj7))+(((-1.0)*cj7*x2061))+(((0.244642)*x2060))+(((-1.0)*x2047*x2052)));
evalcond[2]=((-0.018046)+((cj4*x2047))+(((-1.0)*x2048*x2057))+(((-1.0)*x2046))+(((0.244642)*x2044*x2054))+(((0.07)*x2051))+((x2051*x2061)));
evalcond[3]=((-0.07)+((cj4*x2048*x2051))+(((0.018046)*x2051))+(((-1.0)*x2047*x2051*x2057))+((x2049*x2059))+((x2049*x2050))+(((-1.0)*x2061))+(((-1.0)*cj7*x2047*x2052))+((x2046*x2051))+(((-0.295136)*cj7))+(((-1.0)*x2053*x2058))+((cj7*sj4*x2048)));
evalcond[4]=((((-1.0)*x2046*x2054))+((sj4*sj7*x2048))+(((-0.295136)*sj7))+(((-1.0)*sj7*x2047*x2052))+(((-1.0)*x2048*x2054*x2057))+(((0.244642)*x2044))+((cj4*x2047*x2054))+(((-1.0)*cj6*x2050*x2058))+(((-1.0)*sj7*x2053))+(((-1.0)*cj6*x2058*x2059))+(((-0.018046)*x2054)));
evalcond[5]=((0.118834468928)+(((0.00489284)*x2044*x2054))+(((0.00489284)*x2045*x2051))+(((0.03424988)*x2045))+(((0.03365012)*cj7))+((x2047*x2056))+(((0.0014)*x2051))+(((-0.109556)*x2053))+(((-1.0)*pp))+(((-1.0)*x2048*x2056))+(((-0.117603323672)*x2060))+((x2048*x2055))+(((-0.056092)*x2046))+(((0.117603323672)*cj7*x2045))+(((-1.0)*x2047*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2063=((4.08760556241365)*cj4);
IkReal x2064=(px*sj3);
IkReal x2065=(cj7*pz);
IkReal x2066=(cj3*py);
IkReal x2067=(pz*sj7);
IkReal x2068=((4.08760556241365)*sj4);
if( IKabs((((cj7*x2063*x2064))+(((-1.0)*x2063*x2067))+(((0.758577840272725)*sj7))+(((-1.0)*x2065*x2068))+(((-1.0)*sj7*x2064*x2068))+((sj7*x2066*x2068))+(((-0.15551704122759)*cj7))+(((-1.0)*cj7*x2063*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((cj7*x2064*x2068))+(((-1.0)*sj7*x2063*x2066))+((sj7*x2063*x2064))+(((-0.758577840272725)*cj7))+((x2063*x2065))+(((-1.0)*cj7*x2066*x2068))+(((-0.15551704122759)*sj7))+(((-1.0)*x2067*x2068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj7*x2063*x2064))+(((-1.0)*x2063*x2067))+(((0.758577840272725)*sj7))+(((-1.0)*x2065*x2068))+(((-1.0)*sj7*x2064*x2068))+((sj7*x2066*x2068))+(((-0.15551704122759)*cj7))+(((-1.0)*cj7*x2063*x2066))))+IKsqr(((-0.286132389368955)+((cj7*x2064*x2068))+(((-1.0)*sj7*x2063*x2066))+((sj7*x2063*x2064))+(((-0.758577840272725)*cj7))+((x2063*x2065))+(((-1.0)*cj7*x2066*x2068))+(((-0.15551704122759)*sj7))+(((-1.0)*x2067*x2068))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj7*x2063*x2064))+(((-1.0)*x2063*x2067))+(((0.758577840272725)*sj7))+(((-1.0)*x2065*x2068))+(((-1.0)*sj7*x2064*x2068))+((sj7*x2066*x2068))+(((-0.15551704122759)*cj7))+(((-1.0)*cj7*x2063*x2066))), ((-0.286132389368955)+((cj7*x2064*x2068))+(((-1.0)*sj7*x2063*x2066))+((sj7*x2063*x2064))+(((-0.758577840272725)*cj7))+((x2063*x2065))+(((-1.0)*cj7*x2066*x2068))+(((-0.15551704122759)*sj7))+(((-1.0)*x2067*x2068))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2069=IKcos(j8);
IkReal x2070=IKsin(j8);
IkReal x2071=(pz*sj4);
IkReal x2072=(cj4*pz);
IkReal x2073=(px*sj3);
IkReal x2074=(cj7*sj4);
IkReal x2075=(cj3*py);
IkReal x2076=(cj4*sj7);
IkReal x2077=((1.0)*sj7);
IkReal x2078=((0.056092)*cj4);
IkReal x2079=(cj4*cj7);
IkReal x2080=((0.109556)*sj4);
IkReal x2081=(cj7*x2070);
IkReal x2082=((0.244642)*x2069);
IkReal x2083=((0.244642)*x2070);
evalcond[0]=((-0.038046)+(((-0.07)*sj7))+((cj4*x2073))+(((-1.0)*x2071))+(((-1.0)*cj4*x2075))+(((-0.244642)*x2081))+(((-1.0)*sj7*x2082)));
evalcond[1]=((0.18558)+(((0.07)*cj7))+(((-1.0)*sj4*x2073))+((sj4*x2075))+(((-1.0)*x2072))+((cj7*x2082))+(((-1.0)*sj7*x2083)));
evalcond[2]=(((x2075*x2079))+(((-0.18558)*sj7))+((cj7*x2071))+((sj7*x2072))+x2083+(((-1.0)*x2073*x2079))+((sj4*sj7*x2073))+(((0.038046)*cj7))+(((-1.0)*sj4*x2075*x2077)));
evalcond[3]=((-0.07)+((cj7*x2072))+(((-1.0)*x2075*x2076))+(((-0.18558)*cj7))+(((-1.0)*x2071*x2077))+(((-1.0)*x2082))+(((-1.0)*x2074*x2075))+((x2073*x2074))+((x2073*x2076))+(((-0.038046)*sj7)));
evalcond[4]=((0.118834468928)+(((0.00489284)*x2081))+(((0.03365012)*cj7))+(((0.0014)*sj7))+(((-1.0)*x2073*x2080))+(((-0.117603323672)*sj7*x2070))+(((-1.0)*pp))+(((-0.056092)*x2071))+(((0.00489284)*sj7*x2069))+(((-0.109556)*x2072))+(((0.117603323672)*cj7*x2069))+((x2073*x2078))+((x2075*x2080))+(((0.03424988)*x2069))+(((-1.0)*x2075*x2078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2084=((4.08760556241365)*cj4);
IkReal x2085=(px*sj3);
IkReal x2086=(cj7*pz);
IkReal x2087=(cj3*py);
IkReal x2088=(pz*sj7);
IkReal x2089=((4.08760556241365)*sj4);
if( IKabs((((sj7*x2087*x2089))+((x2086*x2089))+(((-1.0)*x2084*x2088))+(((0.758577840272725)*sj7))+(((0.15551704122759)*cj7))+(((-1.0)*cj7*x2084*x2085))+(((-1.0)*sj7*x2085*x2089))+((cj7*x2084*x2087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((sj7*x2084*x2087))+((x2084*x2086))+(((-1.0)*sj7*x2084*x2085))+(((-0.758577840272725)*cj7))+((cj7*x2085*x2089))+((x2088*x2089))+(((-1.0)*cj7*x2087*x2089))+(((0.15551704122759)*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj7*x2087*x2089))+((x2086*x2089))+(((-1.0)*x2084*x2088))+(((0.758577840272725)*sj7))+(((0.15551704122759)*cj7))+(((-1.0)*cj7*x2084*x2085))+(((-1.0)*sj7*x2085*x2089))+((cj7*x2084*x2087))))+IKsqr(((-0.286132389368955)+((sj7*x2084*x2087))+((x2084*x2086))+(((-1.0)*sj7*x2084*x2085))+(((-0.758577840272725)*cj7))+((cj7*x2085*x2089))+((x2088*x2089))+(((-1.0)*cj7*x2087*x2089))+(((0.15551704122759)*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((sj7*x2087*x2089))+((x2086*x2089))+(((-1.0)*x2084*x2088))+(((0.758577840272725)*sj7))+(((0.15551704122759)*cj7))+(((-1.0)*cj7*x2084*x2085))+(((-1.0)*sj7*x2085*x2089))+((cj7*x2084*x2087))), ((-0.286132389368955)+((sj7*x2084*x2087))+((x2084*x2086))+(((-1.0)*sj7*x2084*x2085))+(((-0.758577840272725)*cj7))+((cj7*x2085*x2089))+((x2088*x2089))+(((-1.0)*cj7*x2087*x2089))+(((0.15551704122759)*sj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2090=IKcos(j8);
IkReal x2091=IKsin(j8);
IkReal x2092=(pz*sj4);
IkReal x2093=(cj4*cj7);
IkReal x2094=(px*sj3);
IkReal x2095=(cj7*sj4);
IkReal x2096=(cj3*py);
IkReal x2097=(cj4*pz);
IkReal x2098=((0.056092)*cj4);
IkReal x2099=((1.0)*sj4);
IkReal x2100=((0.109556)*sj4);
IkReal x2101=(cj4*sj7);
IkReal x2102=(cj7*x2091);
IkReal x2103=((0.244642)*x2090);
IkReal x2104=((0.244642)*x2091);
evalcond[0]=((-0.038046)+(((0.07)*sj7))+(((-1.0)*cj4*x2096))+(((0.244642)*x2102))+(((-1.0)*x2092))+((cj4*x2094))+((sj7*x2103)));
evalcond[1]=((0.18558)+(((0.07)*cj7))+((sj4*x2096))+(((-1.0)*x2094*x2099))+((cj7*x2103))+(((-1.0)*sj7*x2104))+(((-1.0)*x2097)));
evalcond[2]=((-0.07)+((x2094*x2095))+(((-0.18558)*cj7))+(((-1.0)*x2103))+(((0.038046)*sj7))+(((-1.0)*x2094*x2101))+((sj7*x2092))+((x2096*x2101))+(((-1.0)*x2095*x2096))+((pz*x2093)));
evalcond[3]=((((-1.0)*cj7*x2092))+(((-0.18558)*sj7))+(((-0.038046)*cj7))+(((-1.0)*sj7*x2096*x2099))+((sj4*sj7*x2094))+x2104+(((-1.0)*x2093*x2096))+((sj7*x2097))+((x2093*x2094)));
evalcond[4]=((0.118834468928)+(((-0.117603323672)*sj7*x2091))+(((0.117603323672)*cj7*x2090))+(((-1.0)*x2096*x2098))+(((-0.109556)*x2097))+((x2094*x2098))+(((0.03365012)*cj7))+(((-0.056092)*x2092))+(((-0.00489284)*sj7*x2090))+(((-0.00489284)*x2102))+(((-0.0014)*sj7))+(((0.03424988)*x2090))+(((-1.0)*pp))+(((-1.0)*x2094*x2100))+((x2096*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2105=((4.08760556241365)*cj4);
IkReal x2106=(cj3*py);
IkReal x2107=((4.08760556241365)*cj6);
IkReal x2108=(px*sj3);
IkReal x2109=((4.08760556241365)*sj4);
if( IKabs((((sj6*x2105*x2108))+(((-1.0)*sj6*x2105*x2106))+((cj3*px*x2107))+(((-0.15551704122759)*sj6))+((py*sj3*x2107))+(((-1.0)*pz*sj6*x2109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04471022964168)+((x2108*x2109))+(((-1.0)*x2106*x2109))+((pz*x2105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*x2105*x2108))+(((-1.0)*sj6*x2105*x2106))+((cj3*px*x2107))+(((-0.15551704122759)*sj6))+((py*sj3*x2107))+(((-1.0)*pz*sj6*x2109))))+IKsqr(((-1.04471022964168)+((x2108*x2109))+(((-1.0)*x2106*x2109))+((pz*x2105))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((sj6*x2105*x2108))+(((-1.0)*sj6*x2105*x2106))+((cj3*px*x2107))+(((-0.15551704122759)*sj6))+((py*sj3*x2107))+(((-1.0)*pz*sj6*x2109))), ((-1.04471022964168)+((x2108*x2109))+(((-1.0)*x2106*x2109))+((pz*x2105))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2110=IKsin(j8);
IkReal x2111=IKcos(j8);
IkReal x2112=(pz*sj4);
IkReal x2113=(cj3*py);
IkReal x2114=((1.0)*cj4);
IkReal x2115=((1.0)*px);
IkReal x2116=(sj3*sj4);
IkReal x2117=((0.244642)*x2110);
IkReal x2118=(cj4*px*sj3);
IkReal x2119=((1.0)*py*sj3);
evalcond[0]=(((cj6*x2117))+(((-1.0)*x2119))+(((-1.0)*cj3*x2115)));
evalcond[1]=((0.25558)+(((0.244642)*x2111))+(((-1.0)*pz*x2114))+((sj4*x2113))+(((-1.0)*x2115*x2116)));
evalcond[2]=((-0.038046)+x2118+(((-1.0)*sj6*x2117))+(((-1.0)*x2112))+(((-1.0)*x2113*x2114)));
evalcond[3]=(((sj6*x2112))+(((-1.0)*cj6*x2119))+(((0.038046)*sj6))+((cj4*sj6*x2113))+x2117+(((-1.0)*px*sj3*sj6*x2114))+(((-1.0)*cj3*cj6*x2115)));
evalcond[4]=((0.152484588928)+(((0.109556)*sj4*x2113))+(((0.00489284)*sj6*x2110))+(((-0.056092)*x2112))+(((-0.056092)*cj4*x2113))+(((0.151853203672)*x2111))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))+(((-0.109556)*px*x2116))+(((0.056092)*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2120=((4.08760556241365)*cj4);
IkReal x2121=(cj3*py);
IkReal x2122=((4.08760556241365)*cj6);
IkReal x2123=(px*sj3);
IkReal x2124=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*sj6*x2120*x2123))+(((-1.0)*cj3*px*x2122))+((sj6*x2120*x2121))+((pz*sj6*x2124))+(((-1.0)*py*sj3*x2122))+(((0.15551704122759)*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.47244545090377)+((x2121*x2124))+(((-1.0)*pz*x2120))+(((-1.0)*x2123*x2124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x2120*x2123))+(((-1.0)*cj3*px*x2122))+((sj6*x2120*x2121))+((pz*sj6*x2124))+(((-1.0)*py*sj3*x2122))+(((0.15551704122759)*sj6))))+IKsqr(((0.47244545090377)+((x2121*x2124))+(((-1.0)*pz*x2120))+(((-1.0)*x2123*x2124))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj6*x2120*x2123))+(((-1.0)*cj3*px*x2122))+((sj6*x2120*x2121))+((pz*sj6*x2124))+(((-1.0)*py*sj3*x2122))+(((0.15551704122759)*sj6))), ((0.47244545090377)+((x2121*x2124))+(((-1.0)*pz*x2120))+(((-1.0)*x2123*x2124))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2125=IKsin(j8);
IkReal x2126=IKcos(j8);
IkReal x2127=(pz*sj4);
IkReal x2128=(cj3*py);
IkReal x2129=((1.0)*sj6);
IkReal x2130=(cj4*pz);
IkReal x2131=(py*sj3);
IkReal x2132=(cj3*px);
IkReal x2133=((0.244642)*x2125);
IkReal x2134=(cj4*px*sj3);
IkReal x2135=(px*sj3*sj4);
evalcond[0]=((((-1.0)*cj6*x2133))+(((-1.0)*x2132))+(((-1.0)*x2131)));
evalcond[1]=((0.11558)+((sj4*x2128))+(((-1.0)*x2135))+(((-1.0)*x2130))+(((-0.244642)*x2126)));
evalcond[2]=((-0.038046)+x2134+(((-1.0)*x2127))+(((-1.0)*cj4*x2128))+((sj6*x2133)));
evalcond[3]=(x2133+((cj6*x2132))+((cj6*x2131))+(((-1.0)*cj4*x2128*x2129))+(((-1.0)*x2127*x2129))+(((-0.038046)*sj6))+((sj6*x2134)));
evalcond[4]=((0.085184348928)+(((-0.083353443672)*x2126))+(((0.109556)*sj4*x2128))+(((-1.0)*pp))+(((-0.00489284)*sj6*x2125))+(((-0.056092)*cj4*x2128))+(((-0.056092)*x2127))+(((0.056092)*x2134))+(((-0.109556)*x2135))+(((-0.109556)*x2130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2136=((4.08760556241365)*sj7);
IkReal x2137=(py*sj3);
IkReal x2138=(cj4*pz);
IkReal x2139=((4.08760556241365)*cj7);
IkReal x2140=(cj3*px);
IkReal x2141=(cj3*py*sj4);
IkReal x2142=(px*sj3*sj4);
if( IKabs(((((-1.0)*x2136*x2142))+(((0.758577840272725)*sj7))+(((-1.0)*x2136*x2138))+((x2136*x2141))+((x2137*x2139))+((x2139*x2140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((x2136*x2137))+(((-0.758577840272725)*cj7))+((x2138*x2139))+((x2136*x2140))+(((-1.0)*x2139*x2141))+((x2139*x2142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2136*x2142))+(((0.758577840272725)*sj7))+(((-1.0)*x2136*x2138))+((x2136*x2141))+((x2137*x2139))+((x2139*x2140))))+IKsqr(((-0.286132389368955)+((x2136*x2137))+(((-0.758577840272725)*cj7))+((x2138*x2139))+((x2136*x2140))+(((-1.0)*x2139*x2141))+((x2139*x2142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x2136*x2142))+(((0.758577840272725)*sj7))+(((-1.0)*x2136*x2138))+((x2136*x2141))+((x2137*x2139))+((x2139*x2140))), ((-0.286132389368955)+((x2136*x2137))+(((-0.758577840272725)*cj7))+((x2138*x2139))+((x2136*x2140))+(((-1.0)*x2139*x2141))+((x2139*x2142))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2143=IKcos(j8);
IkReal x2144=IKsin(j8);
IkReal x2145=(cj4*pz);
IkReal x2146=(cj7*sj4);
IkReal x2147=(cj3*py);
IkReal x2148=(px*sj3);
IkReal x2149=(cj3*px);
IkReal x2150=((1.0)*cj7);
IkReal x2151=(py*sj3);
IkReal x2152=((0.056092)*cj4);
IkReal x2153=((1.0)*sj4);
IkReal x2154=((0.109556)*sj4);
IkReal x2155=((0.244642)*x2143);
IkReal x2156=((0.244642)*x2144);
evalcond[0]=((((-1.0)*x2149))+(((0.07)*sj7))+((cj7*x2156))+((sj7*x2155))+(((-1.0)*x2151)));
evalcond[1]=((0.18558)+(((-1.0)*x2145))+(((0.07)*cj7))+(((-1.0)*x2148*x2153))+(((-1.0)*sj7*x2156))+((sj4*x2147))+((cj7*x2155)));
evalcond[2]=((-0.07)+((x2146*x2148))+(((-0.18558)*cj7))+((cj7*x2145))+(((-1.0)*x2155))+((sj7*x2151))+((sj7*x2149))+(((-1.0)*x2146*x2147)));
evalcond[3]=((((-1.0)*x2149*x2150))+(((-0.18558)*sj7))+((sj4*sj7*x2148))+x2156+(((-1.0)*sj7*x2147*x2153))+((sj7*x2145))+(((-1.0)*x2150*x2151)));
evalcond[4]=((0.118834468928)+((x2147*x2154))+(((0.03424988)*x2143))+(((-0.117603323672)*sj7*x2144))+(((0.03365012)*cj7))+(((-1.0)*x2148*x2154))+(((-0.056092)*pz*sj4))+(((0.117603323672)*cj7*x2143))+(((-1.0)*pp))+(((-0.109556)*x2145))+((x2148*x2152))+(((-1.0)*x2147*x2152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2157=((4.08760556241365)*sj7);
IkReal x2158=(py*sj3);
IkReal x2159=(cj4*pz);
IkReal x2160=((4.08760556241365)*cj7);
IkReal x2161=(cj3*px);
IkReal x2162=(cj3*py*sj4);
IkReal x2163=(px*sj3*sj4);
if( IKabs((((x2157*x2162))+(((-1.0)*x2160*x2161))+(((0.758577840272725)*sj7))+(((-1.0)*x2157*x2159))+(((-1.0)*x2157*x2163))+(((-1.0)*x2158*x2160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*x2160*x2162))+(((-1.0)*x2157*x2158))+(((-0.758577840272725)*cj7))+(((-1.0)*x2157*x2161))+((x2160*x2163))+((x2159*x2160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2157*x2162))+(((-1.0)*x2160*x2161))+(((0.758577840272725)*sj7))+(((-1.0)*x2157*x2159))+(((-1.0)*x2157*x2163))+(((-1.0)*x2158*x2160))))+IKsqr(((-0.286132389368955)+(((-1.0)*x2160*x2162))+(((-1.0)*x2157*x2158))+(((-0.758577840272725)*cj7))+(((-1.0)*x2157*x2161))+((x2160*x2163))+((x2159*x2160))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x2157*x2162))+(((-1.0)*x2160*x2161))+(((0.758577840272725)*sj7))+(((-1.0)*x2157*x2159))+(((-1.0)*x2157*x2163))+(((-1.0)*x2158*x2160))), ((-0.286132389368955)+(((-1.0)*x2160*x2162))+(((-1.0)*x2157*x2158))+(((-0.758577840272725)*cj7))+(((-1.0)*x2157*x2161))+((x2160*x2163))+((x2159*x2160))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2164=IKcos(j8);
IkReal x2165=IKsin(j8);
IkReal x2166=(cj4*pz);
IkReal x2167=(cj7*sj4);
IkReal x2168=(cj3*py);
IkReal x2169=(px*sj3);
IkReal x2170=((1.0)*sj7);
IkReal x2171=(py*sj3);
IkReal x2172=(cj3*px);
IkReal x2173=((0.056092)*cj4);
IkReal x2174=((0.109556)*sj4);
IkReal x2175=((0.244642)*x2164);
IkReal x2176=((0.244642)*x2165);
evalcond[0]=((((-1.0)*cj7*x2176))+(((-0.07)*sj7))+(((-1.0)*sj7*x2175))+(((-1.0)*x2171))+(((-1.0)*x2172)));
evalcond[1]=((0.18558)+(((0.07)*cj7))+(((-1.0)*sj4*x2169))+((cj7*x2175))+(((-1.0)*sj7*x2176))+((sj4*x2168))+(((-1.0)*x2166)));
evalcond[2]=((((-0.18558)*sj7))+((sj7*x2166))+(((-1.0)*sj4*x2168*x2170))+((cj7*x2171))+((cj7*x2172))+x2176+((sj4*sj7*x2169)));
evalcond[3]=((-0.07)+(((-1.0)*x2170*x2171))+(((-1.0)*x2170*x2172))+(((-0.18558)*cj7))+(((-1.0)*x2167*x2168))+((cj7*x2166))+((x2167*x2169))+(((-1.0)*x2175)));
evalcond[4]=((0.118834468928)+(((-1.0)*x2168*x2173))+(((-1.0)*x2169*x2174))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.117603323672)*sj7*x2165))+(((0.117603323672)*cj7*x2164))+(((-1.0)*pp))+(((-0.109556)*x2166))+(((0.03424988)*x2164))+((x2168*x2174))+((x2169*x2173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2177=cj7*cj7;
IkReal x2178=cj6*cj6;
IkReal x2179=((4.08760556241365)*pz);
IkReal x2180=(cj4*sj7);
IkReal x2181=(cj6*sj7);
IkReal x2182=(px*sj3);
IkReal x2183=((500000.0)*cj4);
IkReal x2184=(cj7*sj4);
IkReal x2185=((500000.0)*py);
IkReal x2186=(cj6*cj7);
IkReal x2187=(cj3*px);
IkReal x2188=(cj7*sj6);
IkReal x2189=((500000.0)*pz);
IkReal x2190=(cj3*py);
IkReal x2191=((4.08760556241365)*cj4);
IkReal x2192=((4.08760556241365)*sj4*sj7);
IkReal x2193=(cj6*sj6*x2177);
IkReal x2194=(x2177*x2178);
CheckValue<IkReal> x2195=IKPowWithIntegerCheck(cj6,-1);
if(!x2195.valid){
continue;
}
CheckValue<IkReal> x2196=IKPowWithIntegerCheck(sj7,-1);
if(!x2196.valid){
continue;
}
if( IKabs(((((-1.0)*x2188*x2190*x2191))+(((0.758577840272725)*sj7))+(((-0.15551704122759)*x2188))+(((4.08760556241365)*py*sj3*x2186))+((x2190*x2192))+(((-1.0)*sj6*x2179*x2184))+(((-1.0)*x2182*x2192))+(((-1.0)*x2179*x2180))+(((4.08760556241365)*x2186*x2187))+((x2182*x2188*x2191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x2195.value)*(x2196.value)*(((((19023.0)*x2193))+(((-92790.0)*cj7*x2181))+(((-35000.0)*x2181))+(((-500000.0)*x2187*x2194))+((sj4*x2189*x2193))+((x2183*x2190*x2193))+(((500000.0)*x2181*x2182*x2184))+((sj3*x2185))+((x2180*x2186*x2189))+(((-1.0)*cj3*x2181*x2184*x2185))+(((-1.0)*sj3*x2185*x2194))+(((-1.0)*x2182*x2183*x2193))+(((500000.0)*x2187)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2188*x2190*x2191))+(((0.758577840272725)*sj7))+(((-0.15551704122759)*x2188))+(((4.08760556241365)*py*sj3*x2186))+((x2190*x2192))+(((-1.0)*sj6*x2179*x2184))+(((-1.0)*x2182*x2192))+(((-1.0)*x2179*x2180))+(((4.08760556241365)*x2186*x2187))+((x2182*x2188*x2191))))+IKsqr(((8.1752111248273e-6)*(x2195.value)*(x2196.value)*(((((19023.0)*x2193))+(((-92790.0)*cj7*x2181))+(((-35000.0)*x2181))+(((-500000.0)*x2187*x2194))+((sj4*x2189*x2193))+((x2183*x2190*x2193))+(((500000.0)*x2181*x2182*x2184))+((sj3*x2185))+((x2180*x2186*x2189))+(((-1.0)*cj3*x2181*x2184*x2185))+(((-1.0)*sj3*x2185*x2194))+(((-1.0)*x2182*x2183*x2193))+(((500000.0)*x2187))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x2188*x2190*x2191))+(((0.758577840272725)*sj7))+(((-0.15551704122759)*x2188))+(((4.08760556241365)*py*sj3*x2186))+((x2190*x2192))+(((-1.0)*sj6*x2179*x2184))+(((-1.0)*x2182*x2192))+(((-1.0)*x2179*x2180))+(((4.08760556241365)*x2186*x2187))+((x2182*x2188*x2191))), ((8.1752111248273e-6)*(x2195.value)*(x2196.value)*(((((19023.0)*x2193))+(((-92790.0)*cj7*x2181))+(((-35000.0)*x2181))+(((-500000.0)*x2187*x2194))+((sj4*x2189*x2193))+((x2183*x2190*x2193))+(((500000.0)*x2181*x2182*x2184))+((sj3*x2185))+((x2180*x2186*x2189))+(((-1.0)*cj3*x2181*x2184*x2185))+(((-1.0)*sj3*x2185*x2194))+(((-1.0)*x2182*x2183*x2193))+(((500000.0)*x2187))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2197=IKcos(j8);
IkReal x2198=IKsin(j8);
IkReal x2199=(cj4*cj7);
IkReal x2200=(px*sj3);
IkReal x2201=(cj7*sj4);
IkReal x2202=(cj3*py);
IkReal x2203=(sj6*sj7);
IkReal x2204=((1.0)*cj4);
IkReal x2205=(cj6*sj7);
IkReal x2206=(py*sj3);
IkReal x2207=((0.056092)*cj4);
IkReal x2208=((1.0)*sj4);
IkReal x2209=(cj4*pz);
IkReal x2210=(cj7*sj6);
IkReal x2211=((0.109556)*sj4);
IkReal x2212=(cj3*px);
IkReal x2213=(pz*x2208);
IkReal x2214=((0.244642)*x2197);
IkReal x2215=((0.244642)*x2198);
IkReal x2216=((1.0)*cj6*cj7);
IkReal x2217=(cj7*x2215);
evalcond[0]=((((-1.0)*x2206))+(((-1.0)*x2212))+((cj6*x2217))+((x2205*x2214))+(((0.07)*x2205)));
evalcond[1]=((0.18558)+(((-1.0)*pz*x2204))+(((0.07)*cj7))+(((-1.0)*sj7*x2215))+((sj4*x2202))+(((-1.0)*x2200*x2208))+((cj7*x2214)));
evalcond[2]=((-0.038046)+(((-1.0)*x2210*x2215))+((cj4*x2200))+(((-1.0)*x2213))+(((-0.07)*x2203))+(((-1.0)*x2202*x2204))+(((-1.0)*x2203*x2214)));
evalcond[3]=((-0.07)+(((-0.038046)*x2203))+(((-1.0)*x2214))+(((-0.18558)*cj7))+((x2200*x2201))+((x2205*x2212))+((x2205*x2206))+(((-1.0)*x2202*x2203*x2204))+(((-1.0)*x2201*x2202))+((cj4*x2200*x2203))+(((-1.0)*x2203*x2213))+((pz*x2199)));
evalcond[4]=(((sj7*x2209))+(((-0.18558)*sj7))+x2215+(((-1.0)*sj7*x2202*x2208))+((pz*sj6*x2201))+((sj6*x2199*x2202))+((sj4*sj7*x2200))+(((-1.0)*x2206*x2216))+(((0.038046)*x2210))+(((-1.0)*x2212*x2216))+(((-1.0)*sj6*x2199*x2200)));
evalcond[5]=((0.118834468928)+((x2202*x2211))+(((0.117603323672)*cj7*x2197))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.109556)*x2209))+((x2200*x2207))+(((0.0014)*x2203))+(((-1.0)*x2202*x2207))+(((-1.0)*pp))+(((0.00489284)*x2197*x2203))+(((-1.0)*x2200*x2211))+(((0.03424988)*x2197))+(((-0.117603323672)*sj7*x2198))+(((0.00489284)*x2198*x2210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2218=(cj4*cj7);
IkReal x2219=(sj4*sj7);
IkReal x2220=((500000.0)*pz);
IkReal x2221=(cj4*sj7);
IkReal x2222=((92790.0)*sj6);
IkReal x2223=((500000.0)*cj3*py);
IkReal x2224=((500000.0)*px*sj3);
IkReal x2225=(cj7*sj4*sj6);
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal(((((-19023.0)*cj7))+((sj6*x2219*x2223))+(((-1.0)*cj7*sj4*x2220))+((sj7*x2222))+((x2218*x2224))+(((-1.0)*sj6*x2219*x2224))+(((-1.0)*sj6*x2220*x2221))+(((-1.0)*x2218*x2223)))),IkReal(((((-1.0)*x2219*x2220))+((sj6*x2218*x2220))+(((-35000.0)*sj6))+(((-1.0)*cj7*x2222))+(((-1.0)*x2221*x2223))+((x2224*x2225))+(((-1.0)*x2223*x2225))+(((-19023.0)*sj7))+((x2221*x2224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2226.value)))+(x2227.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2228=IKcos(j8);
IkReal x2229=IKsin(j8);
IkReal x2230=(cj4*cj7);
IkReal x2231=(px*sj3);
IkReal x2232=(cj7*sj4);
IkReal x2233=(cj3*py);
IkReal x2234=(sj6*sj7);
IkReal x2235=((1.0)*cj4);
IkReal x2236=(cj6*sj7);
IkReal x2237=(py*sj3);
IkReal x2238=((0.056092)*cj4);
IkReal x2239=((1.0)*sj4);
IkReal x2240=(cj4*pz);
IkReal x2241=(cj7*sj6);
IkReal x2242=((0.109556)*sj4);
IkReal x2243=(cj3*px);
IkReal x2244=(pz*x2239);
IkReal x2245=((0.244642)*x2228);
IkReal x2246=((0.244642)*x2229);
IkReal x2247=((1.0)*cj6*cj7);
IkReal x2248=(cj7*x2246);
evalcond[0]=(((x2236*x2245))+(((-1.0)*x2243))+((cj6*x2248))+(((0.07)*x2236))+(((-1.0)*x2237)));
evalcond[1]=((0.18558)+((sj4*x2233))+(((0.07)*cj7))+((cj7*x2245))+(((-1.0)*pz*x2235))+(((-1.0)*sj7*x2246))+(((-1.0)*x2231*x2239)));
evalcond[2]=((-0.038046)+(((-1.0)*x2234*x2245))+((cj4*x2231))+(((-1.0)*x2241*x2246))+(((-1.0)*x2244))+(((-1.0)*x2233*x2235))+(((-0.07)*x2234)));
evalcond[3]=((-0.07)+((pz*x2230))+((x2236*x2243))+(((-1.0)*x2234*x2244))+(((-1.0)*x2233*x2234*x2235))+(((-0.18558)*cj7))+((x2236*x2237))+((cj4*x2231*x2234))+(((-1.0)*x2245))+(((-0.038046)*x2234))+((x2231*x2232))+(((-1.0)*x2232*x2233)));
evalcond[4]=((((-1.0)*x2237*x2247))+(((-0.18558)*sj7))+x2246+(((-1.0)*sj7*x2233*x2239))+((sj4*sj7*x2231))+(((-1.0)*sj6*x2230*x2231))+((pz*sj6*x2232))+(((-1.0)*x2243*x2247))+(((0.038046)*x2241))+((sj7*x2240))+((sj6*x2230*x2233)));
evalcond[5]=((0.118834468928)+(((0.03424988)*x2228))+(((0.00489284)*x2229*x2241))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+((x2233*x2242))+(((-1.0)*x2231*x2242))+(((-1.0)*pp))+(((-0.117603323672)*sj7*x2229))+(((0.00489284)*x2228*x2234))+((x2231*x2238))+(((0.0014)*x2234))+(((-1.0)*x2233*x2238))+(((0.117603323672)*cj7*x2228))+(((-0.109556)*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2249=((92790.0)*cj6);
IkReal x2250=((500000.0)*cj3*cj7);
IkReal x2251=(cj6*py*sj4);
IkReal x2252=((500000.0)*cj3*sj7);
IkReal x2253=((500000.0)*cj7*sj3);
IkReal x2254=(cj6*px*sj4);
IkReal x2255=((500000.0)*sj3*sj7);
IkReal x2256=((500000.0)*cj4*cj6*pz);
CheckValue<IkReal> x2257=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x2257.valid){
continue;
}
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal((((px*x2250))+((py*x2253))+((x2251*x2252))+((sj7*x2249))+(((-1.0)*sj7*x2256))+(((-1.0)*x2254*x2255)))),IkReal((((cj7*x2256))+((x2253*x2254))+(((-1.0)*cj7*x2249))+((px*x2252))+((py*x2255))+(((-35000.0)*cj6))+(((-1.0)*x2250*x2251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2257.value)))+(x2258.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2259=IKcos(j8);
IkReal x2260=IKsin(j8);
IkReal x2261=(cj4*cj7);
IkReal x2262=(px*sj3);
IkReal x2263=(cj7*sj4);
IkReal x2264=(cj3*py);
IkReal x2265=(sj6*sj7);
IkReal x2266=((1.0)*cj4);
IkReal x2267=(cj6*sj7);
IkReal x2268=(py*sj3);
IkReal x2269=((0.056092)*cj4);
IkReal x2270=((1.0)*sj4);
IkReal x2271=(cj4*pz);
IkReal x2272=(cj7*sj6);
IkReal x2273=((0.109556)*sj4);
IkReal x2274=(cj3*px);
IkReal x2275=(pz*x2270);
IkReal x2276=((0.244642)*x2259);
IkReal x2277=((0.244642)*x2260);
IkReal x2278=((1.0)*cj6*cj7);
IkReal x2279=(cj7*x2277);
evalcond[0]=((((0.07)*x2267))+((x2267*x2276))+((cj6*x2279))+(((-1.0)*x2268))+(((-1.0)*x2274)));
evalcond[1]=((0.18558)+(((0.07)*cj7))+((sj4*x2264))+(((-1.0)*pz*x2266))+((cj7*x2276))+(((-1.0)*sj7*x2277))+(((-1.0)*x2262*x2270)));
evalcond[2]=((-0.038046)+(((-0.07)*x2265))+((cj4*x2262))+(((-1.0)*x2275))+(((-1.0)*x2272*x2277))+(((-1.0)*x2265*x2276))+(((-1.0)*x2264*x2266)));
evalcond[3]=((-0.07)+(((-1.0)*x2264*x2265*x2266))+(((-0.18558)*cj7))+((pz*x2261))+(((-0.038046)*x2265))+((x2262*x2263))+(((-1.0)*x2263*x2264))+(((-1.0)*x2276))+((x2267*x2274))+((x2267*x2268))+(((-1.0)*x2265*x2275))+((cj4*x2262*x2265)));
evalcond[4]=((((-0.18558)*sj7))+x2277+(((-1.0)*x2274*x2278))+((sj7*x2271))+(((-1.0)*sj6*x2261*x2262))+((sj4*sj7*x2262))+((sj6*x2261*x2264))+(((0.038046)*x2272))+(((-1.0)*x2268*x2278))+(((-1.0)*sj7*x2264*x2270))+((pz*sj6*x2263)));
evalcond[5]=((0.118834468928)+(((0.00489284)*x2260*x2272))+(((0.00489284)*x2259*x2265))+(((0.03365012)*cj7))+(((0.03424988)*x2259))+(((-0.056092)*pz*sj4))+(((-0.109556)*x2271))+(((0.0014)*x2265))+(((-1.0)*pp))+(((-0.117603323672)*sj7*x2260))+((x2262*x2269))+((x2264*x2273))+(((-1.0)*x2264*x2269))+(((-1.0)*x2262*x2273))+(((0.117603323672)*cj7*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2280=(cj6*sj7);
IkReal x2281=((2446.42)*sj6);
IkReal x2282=(py*sj3);
IkReal x2283=((13400.999476)*sj4);
IkReal x2284=(px*sj3);
IkReal x2285=(cj6*cj7);
IkReal x2286=(cj3*py);
IkReal x2287=((122321.0)*pp);
IkReal x2288=((6861.229532)*cj4);
IkReal x2289=(cj3*px);
IkReal x2290=((58801.661836)*cj7);
IkReal x2291=((13400.999476)*cj4*pz);
IkReal x2292=(sj7*x2289);
IkReal x2293=((6861.229532)*pz*sj4);
CheckValue<IkReal> x2294 = IKatan2WithCheck(IkReal(((((-1.0)*x2280*x2287))+(((-1.0)*x2280*x2286*x2288))+((x2280*x2284*x2288))+((sj7*x2281*x2282))+((x2281*x2292))+((x2282*x2290))+((x2289*x2290))+(((13337.2052737419)*x2280))+(((-1.0)*x2280*x2291))+(((-1.0)*x2280*x2293))+(((17124.94)*x2282))+(((17124.94)*x2289))+(((-1.0)*x2280*x2283*x2284))+((x2280*x2283*x2286)))),IkReal(((((-1.0)*x2284*x2285*x2288))+(((-4116.11632852)*cj6))+(((58801.661836)*sj7*x2282))+((x2285*x2286*x2288))+(((-14535.9510737419)*x2285))+(((-1.0)*cj7*x2281*x2289))+(((-1.0)*cj7*x2281*x2282))+(((58801.661836)*x2292))+(((-1.0)*x2283*x2285*x2286))+((x2283*x2284*x2285))+((x2285*x2291))+((x2285*x2293))+((x2285*x2287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2294.valid){
continue;
}
CheckValue<IkReal> x2295=IKPowWithIntegerCheck(IKsign(((((14385.3561548827)*cj6))+(((4189.47957148)*x2285)))),-1);
if(!x2295.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2294.value)+(((1.5707963267949)*(x2295.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2296=IKsin(j8);
IkReal x2297=IKcos(j8);
IkReal x2298=(cj5*sj7);
IkReal x2299=((0.07)*sj6);
IkReal x2300=((1.0)*pz);
IkReal x2301=(px*sj3);
IkReal x2302=(pz*sj4);
IkReal x2303=(cj3*py);
IkReal x2304=(sj6*sj7);
IkReal x2305=(cj6*sj7);
IkReal x2306=(py*sj3);
IkReal x2307=((0.054778)*sj5);
IkReal x2308=((0.244642)*cj7);
IkReal x2309=((1.0)*sj4);
IkReal x2310=(cj7*sj6);
IkReal x2311=(sj5*sj7);
IkReal x2312=(cj5*cj7);
IkReal x2313=(cj4*sj6);
IkReal x2314=((0.056092)*cj4);
IkReal x2315=(cj3*px);
IkReal x2316=((1.0)*cj4);
IkReal x2317=(cj7*sj5);
IkReal x2318=(sj4*sj5);
IkReal x2319=(cj4*pz);
IkReal x2320=((0.109556)*sj4);
IkReal x2321=(cj5*x2310);
IkReal x2322=(sj7*x2296);
IkReal x2323=((0.244642)*x2297);
IkReal x2324=((0.244642)*x2296);
IkReal x2325=((1.0)*cj6*cj7);
evalcond[0]=((((-1.0)*x2315))+((cj6*x2296*x2308))+(((-1.0)*x2306))+((x2305*x2323))+(((0.07)*x2305)));
evalcond[1]=((-0.028046)+((sj6*x2298*x2323))+(((-1.0)*x2311*x2324))+(((0.01)*cj5))+((cj4*x2301))+(((0.240358)*sj5))+(((-1.0)*sj4*x2300))+((sj5*x2297*x2308))+(((-1.0)*x2303*x2316))+(((0.07)*x2317))+((x2298*x2299))+((cj5*sj6*x2296*x2308)));
evalcond[2]=((-0.054778)+(((-1.0)*x2301*x2309))+(((-0.240358)*cj5))+(((-0.07)*x2312))+((x2299*x2311))+(((-1.0)*cj5*x2297*x2308))+(((-1.0)*cj4*x2300))+(((0.01)*sj5))+((sj5*x2304*x2323))+((sj4*x2303))+((x2298*x2324))+((sj5*sj6*x2296*x2308)));
evalcond[3]=((0.118834468928)+((x2303*x2320))+(((0.03365012)*cj7))+(((-0.109556)*x2319))+(((-0.056092)*x2302))+(((-0.117603323672)*x2322))+(((-1.0)*pp))+(((0.0014)*x2304))+(((0.00489284)*x2296*x2310))+(((0.117603323672)*cj7*x2297))+(((-1.0)*x2303*x2314))+((x2301*x2314))+(((-1.0)*x2301*x2320))+(((0.03424988)*x2297))+(((0.00489284)*x2297*x2304)));
evalcond[4]=((-0.07)+((sj6*x2298*x2302))+((cj4*x2303*x2317))+(((-0.240358)*cj7))+((x2305*x2306))+(((0.028046)*x2317))+((x2304*x2307))+((x2305*x2315))+(((-1.0)*x2301*x2309*x2312))+(((-1.0)*cj4*x2300*x2312))+(((-0.01)*x2304))+((x2302*x2317))+(((-1.0)*x2301*x2316*x2317))+(((-1.0)*x2298*x2301*x2313))+(((-0.054778)*x2312))+((x2301*x2304*x2318))+(((0.028046)*sj6*x2298))+(((-1.0)*sj5*x2303*x2304*x2309))+((x2298*x2303*x2313))+((sj4*x2303*x2312))+((sj5*x2304*x2319))+(((-1.0)*x2323)));
evalcond[5]=(((cj4*x2303*x2311))+(((-0.054778)*x2298))+(((0.028046)*x2311))+(((-0.028046)*x2321))+(((0.01)*x2310))+x2324+(((-1.0)*sj4*x2300*x2321))+(((-1.0)*sj5*x2301*x2309*x2310))+(((-1.0)*x2315*x2325))+(((-1.0)*x2301*x2311*x2316))+(((-1.0)*cj4*sj5*x2300*x2310))+(((-1.0)*x2303*x2316*x2321))+((x2303*x2310*x2318))+((x2302*x2311))+(((-0.240358)*sj7))+((sj4*x2298*x2303))+(((-1.0)*x2307*x2310))+(((-1.0)*x2306*x2325))+(((-1.0)*x2298*x2301*x2309))+((cj4*x2301*x2321))+(((-1.0)*cj4*x2298*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2326=(cj6*sj7);
IkReal x2327=((1223.21)*sj5);
IkReal x2328=(cj5*px);
IkReal x2329=(cj6*sj4);
IkReal x2330=((122321.0)*cj7);
IkReal x2331=(cj4*pz);
IkReal x2332=((122321.0)*cj3);
IkReal x2333=(py*sj3);
IkReal x2334=(px*sj3);
IkReal x2335=(cj6*cj7);
IkReal x2336=((29400.830918)*cj5);
IkReal x2337=(sj5*sj6);
IkReal x2338=((122321.0)*sj7);
IkReal x2339=(cj5*cj6);
IkReal x2340=(cj3*x2330);
IkReal x2341=(px*x2337);
CheckValue<IkReal> x2342 = IKatan2WithCheck(IkReal((((x2333*x2337*x2338))+(((-1.0)*cj5*x2330*x2333))+((sj7*x2332*x2341))+((py*sj4*x2326*x2332))+(((-122321.0)*sj4*x2326*x2334))+((x2326*x2327))+(((-1.0)*x2326*x2336))+(((-1.0)*x2328*x2340))+(((-122321.0)*x2326*x2331))+(((-6700.499738)*x2326)))),IkReal(((((8562.47)*x2339))+(((-1.0)*sj7*x2328*x2332))+(((-1.0)*x2340*x2341))+((x2329*x2330*x2334))+((cj6*x2330*x2331))+(((-1.0)*py*x2329*x2340))+((x2335*x2336))+(((6700.499738)*x2335))+(((-1.0)*x2330*x2333*x2337))+(((-1.0)*x2327*x2335))+(((-1.0)*cj5*x2333*x2338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2342.valid){
continue;
}
CheckValue<IkReal> x2343=IKPowWithIntegerCheck(IKsign(x2339),-1);
if(!x2343.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2342.value)+(((-1.5707963267949)*(x2343.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2344=IKsin(j8);
IkReal x2345=IKcos(j8);
IkReal x2346=(cj5*sj7);
IkReal x2347=((0.07)*sj6);
IkReal x2348=((1.0)*pz);
IkReal x2349=(px*sj3);
IkReal x2350=(pz*sj4);
IkReal x2351=(cj3*py);
IkReal x2352=(sj6*sj7);
IkReal x2353=(cj6*sj7);
IkReal x2354=(py*sj3);
IkReal x2355=((0.054778)*sj5);
IkReal x2356=((0.244642)*cj7);
IkReal x2357=((1.0)*sj4);
IkReal x2358=(cj7*sj6);
IkReal x2359=(sj5*sj7);
IkReal x2360=(cj5*cj7);
IkReal x2361=(cj4*sj6);
IkReal x2362=((0.056092)*cj4);
IkReal x2363=(cj3*px);
IkReal x2364=((1.0)*cj4);
IkReal x2365=(cj7*sj5);
IkReal x2366=(sj4*sj5);
IkReal x2367=(cj4*pz);
IkReal x2368=((0.109556)*sj4);
IkReal x2369=(cj5*x2358);
IkReal x2370=(sj7*x2344);
IkReal x2371=((0.244642)*x2345);
IkReal x2372=((0.244642)*x2344);
IkReal x2373=((1.0)*cj6*cj7);
evalcond[0]=((((-1.0)*x2354))+(((-1.0)*x2363))+(((0.07)*x2353))+((x2353*x2371))+((cj6*x2344*x2356)));
evalcond[1]=((-0.028046)+(((-1.0)*sj4*x2348))+((x2346*x2347))+((cj5*sj6*x2344*x2356))+(((0.01)*cj5))+(((0.240358)*sj5))+(((0.07)*x2365))+(((-1.0)*x2359*x2372))+((sj5*x2345*x2356))+(((-1.0)*x2351*x2364))+((sj6*x2346*x2371))+((cj4*x2349)));
evalcond[2]=((-0.054778)+((sj5*sj6*x2344*x2356))+(((-0.240358)*cj5))+(((-1.0)*cj5*x2345*x2356))+((sj4*x2351))+(((-0.07)*x2360))+((sj5*x2352*x2371))+((x2346*x2372))+(((0.01)*sj5))+(((-1.0)*cj4*x2348))+((x2347*x2359))+(((-1.0)*x2349*x2357)));
evalcond[3]=((0.118834468928)+(((-0.117603323672)*x2370))+(((0.0014)*x2352))+(((0.117603323672)*cj7*x2345))+(((0.03365012)*cj7))+(((-1.0)*x2349*x2368))+(((0.00489284)*x2344*x2358))+(((0.03424988)*x2345))+(((0.00489284)*x2345*x2352))+((x2351*x2368))+(((-1.0)*pp))+(((-1.0)*x2351*x2362))+(((-0.056092)*x2350))+((x2349*x2362))+(((-0.109556)*x2367)));
evalcond[4]=((-0.07)+(((0.028046)*sj6*x2346))+(((-0.240358)*cj7))+(((-1.0)*sj5*x2351*x2352*x2357))+(((-1.0)*cj4*x2348*x2360))+((x2352*x2355))+(((-1.0)*x2371))+(((-1.0)*x2349*x2357*x2360))+((x2353*x2354))+(((-1.0)*x2346*x2349*x2361))+(((-1.0)*x2349*x2364*x2365))+((sj5*x2352*x2367))+((x2350*x2365))+((cj4*x2351*x2365))+((sj4*x2351*x2360))+((x2346*x2351*x2361))+((x2353*x2363))+(((-0.01)*x2352))+(((0.028046)*x2365))+(((-0.054778)*x2360))+((sj6*x2346*x2350))+((x2349*x2352*x2366)));
evalcond[5]=(x2372+(((-1.0)*x2355*x2358))+((x2351*x2358*x2366))+(((-1.0)*x2349*x2359*x2364))+(((-1.0)*sj5*x2349*x2357*x2358))+(((-1.0)*x2351*x2364*x2369))+(((0.028046)*x2359))+(((-1.0)*x2354*x2373))+(((-0.054778)*x2346))+(((0.01)*x2358))+((x2350*x2359))+(((-0.028046)*x2369))+(((-1.0)*cj4*sj5*x2348*x2358))+(((-0.240358)*sj7))+(((-1.0)*x2346*x2349*x2357))+((cj4*x2351*x2359))+(((-1.0)*x2363*x2373))+(((-1.0)*sj4*x2348*x2369))+((sj4*x2346*x2351))+(((-1.0)*cj4*x2346*x2348))+((cj4*x2349*x2369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2374=((122321.0)*sj5);
IkReal x2375=(py*sj3);
IkReal x2376=(cj6*sj5);
IkReal x2377=(cj3*sj7);
IkReal x2378=(cj4*py);
IkReal x2379=(pz*sj4);
IkReal x2380=(cj6*cj7);
IkReal x2381=((1223.21)*cj5);
IkReal x2382=(cj6*sj7);
IkReal x2383=(cj3*cj7*px);
IkReal x2384=((122321.0)*cj5*sj6);
IkReal x2385=((122321.0)*x2380);
IkReal x2386=((122321.0)*cj4*cj6*px*sj3);
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(IKsign(x2376),-1);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388 = IKatan2WithCheck(IkReal(((((-3430.614766)*x2382))+((x2381*x2382))+((cj7*x2374*x2375))+(((122321.0)*cj4*px*sj3*x2382))+(((-122321.0)*x2379*x2382))+((px*x2377*x2384))+(((29400.830918)*sj7*x2376))+((x2374*x2383))+(((-122321.0)*cj6*x2377*x2378))+((sj7*x2375*x2384)))),IkReal(((((-1.0)*x2380*x2381))+(((-8562.47)*x2376))+(((-1.0)*cj4*px*sj3*x2385))+((cj3*x2378*x2385))+((px*x2374*x2377))+((sj7*x2374*x2375))+(((-29400.830918)*cj7*x2376))+(((3430.614766)*x2380))+(((-1.0)*x2383*x2384))+((x2379*x2385))+(((-1.0)*cj7*x2375*x2384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2388.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2387.value)))+(x2388.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2389=IKsin(j8);
IkReal x2390=IKcos(j8);
IkReal x2391=(cj5*sj7);
IkReal x2392=((0.07)*sj6);
IkReal x2393=((1.0)*pz);
IkReal x2394=(px*sj3);
IkReal x2395=(pz*sj4);
IkReal x2396=(cj3*py);
IkReal x2397=(sj6*sj7);
IkReal x2398=(cj6*sj7);
IkReal x2399=(py*sj3);
IkReal x2400=((0.054778)*sj5);
IkReal x2401=((0.244642)*cj7);
IkReal x2402=((1.0)*sj4);
IkReal x2403=(cj7*sj6);
IkReal x2404=(sj5*sj7);
IkReal x2405=(cj5*cj7);
IkReal x2406=(cj4*sj6);
IkReal x2407=((0.056092)*cj4);
IkReal x2408=(cj3*px);
IkReal x2409=((1.0)*cj4);
IkReal x2410=(cj7*sj5);
IkReal x2411=(sj4*sj5);
IkReal x2412=(cj4*pz);
IkReal x2413=((0.109556)*sj4);
IkReal x2414=(cj5*x2403);
IkReal x2415=(sj7*x2389);
IkReal x2416=((0.244642)*x2390);
IkReal x2417=((0.244642)*x2389);
IkReal x2418=((1.0)*cj6*cj7);
evalcond[0]=(((cj6*x2389*x2401))+(((-1.0)*x2408))+((x2398*x2416))+(((0.07)*x2398))+(((-1.0)*x2399)));
evalcond[1]=((-0.028046)+((sj5*x2390*x2401))+(((0.01)*cj5))+(((0.240358)*sj5))+(((-1.0)*x2404*x2417))+(((-1.0)*sj4*x2393))+((x2391*x2392))+(((-1.0)*x2396*x2409))+((cj5*sj6*x2389*x2401))+(((0.07)*x2410))+((sj6*x2391*x2416))+((cj4*x2394)));
evalcond[2]=((-0.054778)+((sj4*x2396))+((sj5*sj6*x2389*x2401))+(((-0.240358)*cj5))+(((-1.0)*x2394*x2402))+(((-1.0)*cj4*x2393))+(((-1.0)*cj5*x2390*x2401))+((sj5*x2397*x2416))+((x2391*x2417))+(((-0.07)*x2405))+(((0.01)*sj5))+((x2392*x2404)));
evalcond[3]=((0.118834468928)+(((-0.117603323672)*x2415))+(((-0.109556)*x2412))+(((0.03365012)*cj7))+(((0.0014)*x2397))+(((0.117603323672)*cj7*x2390))+(((-1.0)*x2394*x2413))+(((-1.0)*pp))+(((0.03424988)*x2390))+((x2394*x2407))+(((-1.0)*x2396*x2407))+(((-0.056092)*x2395))+((x2396*x2413))+(((0.00489284)*x2389*x2403))+(((0.00489284)*x2390*x2397)));
evalcond[4]=((-0.07)+(((-0.240358)*cj7))+(((-0.01)*x2397))+(((-1.0)*x2394*x2409*x2410))+(((-1.0)*sj5*x2396*x2397*x2402))+((sj4*x2396*x2405))+((x2398*x2408))+((x2398*x2399))+((x2395*x2410))+(((-0.054778)*x2405))+(((0.028046)*sj6*x2391))+((sj6*x2391*x2395))+(((-1.0)*x2416))+((x2397*x2400))+((x2394*x2397*x2411))+((sj5*x2397*x2412))+(((-1.0)*x2391*x2394*x2406))+(((-1.0)*cj4*x2393*x2405))+(((-1.0)*x2394*x2402*x2405))+((x2391*x2396*x2406))+((cj4*x2396*x2410))+(((0.028046)*x2410)));
evalcond[5]=(((cj4*x2396*x2404))+(((0.01)*x2403))+(((0.028046)*x2404))+x2417+(((-1.0)*x2408*x2418))+((sj4*x2391*x2396))+(((-1.0)*x2400*x2403))+(((-1.0)*x2399*x2418))+(((-1.0)*cj4*x2391*x2393))+(((-0.054778)*x2391))+(((-0.028046)*x2414))+(((-1.0)*x2391*x2394*x2402))+(((-1.0)*x2396*x2409*x2414))+(((-0.240358)*sj7))+(((-1.0)*x2394*x2404*x2409))+(((-1.0)*sj5*x2394*x2402*x2403))+(((-1.0)*sj4*x2393*x2414))+((cj4*x2394*x2414))+((x2396*x2403*x2411))+(((-1.0)*cj4*sj5*x2393*x2403))+((x2395*x2404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2419=(cj6*sj7);
IkReal x2420=((2446.42)*sj6);
IkReal x2421=(py*sj3);
IkReal x2422=((13400.999476)*sj4);
IkReal x2423=(px*sj3);
IkReal x2424=(cj6*cj7);
IkReal x2425=(cj3*py);
IkReal x2426=((122321.0)*pp);
IkReal x2427=((6861.229532)*cj4);
IkReal x2428=(cj3*px);
IkReal x2429=((58801.661836)*cj7);
IkReal x2430=((13400.999476)*cj4*pz);
IkReal x2431=(sj7*x2428);
IkReal x2432=((6861.229532)*pz*sj4);
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign(((((14385.3561548827)*cj6))+(((4189.47957148)*x2424)))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal((((x2419*x2423*x2427))+((x2419*x2422*x2425))+((sj7*x2420*x2421))+(((-1.0)*x2419*x2422*x2423))+(((-1.0)*x2419*x2425*x2427))+(((-1.0)*x2419*x2430))+(((-1.0)*x2419*x2432))+((x2428*x2429))+((x2420*x2431))+(((-1.0)*x2419*x2426))+((x2421*x2429))+(((13337.2052737419)*x2419))+(((17124.94)*x2421))+(((17124.94)*x2428)))),IkReal(((((-4116.11632852)*cj6))+(((58801.661836)*x2431))+((x2424*x2430))+((x2424*x2432))+(((-1.0)*x2422*x2424*x2425))+(((-14535.9510737419)*x2424))+((x2424*x2425*x2427))+(((58801.661836)*sj7*x2421))+(((-1.0)*cj7*x2420*x2421))+(((-1.0)*cj7*x2420*x2428))+((x2422*x2423*x2424))+(((-1.0)*x2423*x2424*x2427))+((x2424*x2426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2433.value)))+(x2434.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x2435=IKcos(j8);
IkReal x2436=IKsin(j8);
IkReal x2437=(sj6*sj7);
IkReal x2438=(px*sj3);
IkReal x2439=((0.109556)*sj4);
IkReal x2440=((0.244642)*cj6);
IkReal x2441=((0.056092)*cj4);
IkReal x2442=(cj3*py);
IkReal x2443=(cj7*x2436);
evalcond[0]=((((-1.0)*cj3*px))+((x2440*x2443))+((sj7*x2435*x2440))+(((-1.0)*py*sj3))+(((0.07)*cj6*sj7)));
evalcond[1]=((0.118834468928)+(((-1.0)*x2438*x2439))+(((0.00489284)*x2435*x2437))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((0.117603323672)*cj7*x2435))+(((-0.117603323672)*sj7*x2436))+(((-1.0)*x2441*x2442))+(((-1.0)*pp))+(((0.03424988)*x2435))+(((-0.109556)*cj4*pz))+(((0.0014)*x2437))+((x2439*x2442))+(((0.00489284)*sj6*x2443))+((x2438*x2441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x2444=cj6*cj6;
IkReal x2445=cj7*cj7;
IkReal x2446=cj8*cj8;
IkReal x2447=(cj7*sj8);
IkReal x2448=((0.00489284)*sj6);
IkReal x2449=((0.03424988)*cj8);
IkReal x2450=(sj6*sj7);
IkReal x2451=(cj7*cj8);
IkReal x2452=(sj7*sj8);
IkReal x2453=((24.4642)*cj8);
IkReal x2454=(sj7*x2444);
IkReal x2455=(x2444*x2445);
IkReal x2456=(x2444*x2446);
j5eval[0]=((87.5869116628571)+(((-85.4995830914286)*cj8*x2447*x2454))+x2450+x2453+(((-42.7497915457143)*x2456))+(((84.0023740514286)*x2451))+((x2453*x2455))+(((-1.0)*x2444*x2453))+(((-24.4642)*x2447*x2454))+(((-39.2497915457143)*x2455))+(((24.0358)*cj7))+(((85.4995830914286)*x2446*x2455))+(((3.49488571428571)*sj6*x2447))+(((3.49488571428571)*cj8*x2450))+(((-3.5)*x2444))+(((-84.0023740514286)*x2452)));
j5eval[1]=IKsign(((0.122621676328)+((x2447*x2448))+x2449+(((0.03365012)*cj7))+(((0.117603323672)*x2451))+(((0.0014)*x2450))+(((-0.054949708164)*x2455))+(((-1.0)*x2444*x2449))+(((-0.119699416328)*cj8*x2447*x2454))+((x2449*x2455))+(((0.119699416328)*x2446*x2455))+(((-0.03424988)*x2447*x2454))+(((-0.059849708164)*x2456))+(((-0.117603323672)*x2452))+((cj8*sj7*x2448))+(((-0.0049)*x2444))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2457=(cj6*sj4);
IkReal x2458=(cj7*pz);
IkReal x2459=(cj6*sj7);
IkReal x2460=(px*sj3);
IkReal x2461=(cj4*cj6);
IkReal x2462=(sj6*sj7);
IkReal x2463=(cj8*sj6);
IkReal x2464=(cj6*cj7);
IkReal x2465=(cj4*pz);
IkReal x2466=(cj7*cj8);
IkReal x2467=((0.244642)*sj8);
IkReal x2468=(cj3*py);
IkReal x2469=((35.6557084789275)*cj7);
IkReal x2470=((0.244642)*cj8);
IkReal x2471=((124.61262619574)*sj8);
IkReal x2472=((0.07)*cj7);
IkReal x2473=((124.61262619574)*cj8);
IkReal x2474=(pz*sj7);
IkReal x2475=((124.61262619574)*x2468);
IkReal x2476=(cj7*sj6*sj8);
j5eval[0]=(((x2457*x2460*x2462*x2473))+(((-1.0)*x2457*x2458*x2473))+((cj4*x2459*x2468*x2471))+((x2457*x2471*x2474))+(((124.61262619574)*x2459*x2463*x2465))+(((6.82603043775023)*x2459*x2463))+(((-3.49488571428571)*cj8*x2464))+(((-1.0)*x2457*x2462*x2468*x2473))+(((-122.430496836829)*pz*x2457))+((x2460*x2461*x2469))+(((-1.0)*x2464))+(((3.49488571428571)*sj8*x2459))+(((-5.09367263984678)*x2457*x2468))+(((-1.0)*cj4*x2459*x2460*x2471))+((sj6*x2458*x2461*x2471))+(((-35.6557084789275)*x2457*x2458))+(((35.6557084789275)*sj6*x2459*x2465))+(((-3.15466451442019)*cj6))+(((124.61262619574)*x2460*x2461*x2466))+(((-1.0)*cj7*sj6*x2457*x2468*x2471))+(((-1.0)*x2461*x2468*x2469))+(((35.6557084789275)*x2457*x2460*x2462))+(((-1.0)*x2461*x2466*x2475))+(((-35.6557084789275)*x2457*x2462*x2468))+(((1.95314839905869)*sj6*x2459))+(((5.09367263984678)*pz*x2461))+((cj7*sj6*x2457*x2460*x2471))+(((6.82603043775023)*sj6*sj8*x2464))+(((122.430496836829)*x2460*x2461))+(((5.09367263984678)*x2457*x2460))+(((-122.430496836829)*x2461*x2468)));
j5eval[1]=IKsign(((((0.244642)*x2460*x2461*x2466))+((x2457*x2460*x2462*x2470))+(((-1.0)*x2457*x2458*x2470))+(((-0.006861229532)*cj8*x2464))+(((-1.0)*x2461*x2468*x2472))+((x2460*x2461*x2472))+(((0.240358)*x2460*x2461))+(((-1.0)*cj7*sj6*x2457*x2467*x2468))+(((-1.0)*x2457*x2462*x2468*x2470))+((cj7*sj6*x2457*x2460*x2467))+(((-0.006193300468)*cj6))+(((0.01)*pz*x2461))+((sj6*x2458*x2461*x2467))+(((-1.0)*cj4*x2459*x2460*x2467))+(((0.07)*x2457*x2460*x2462))+(((0.01)*x2457*x2460))+(((-0.07)*x2457*x2458))+(((-0.07)*x2457*x2462*x2468))+(((0.07)*sj6*x2459*x2465))+(((-0.240358)*pz*x2457))+(((-0.240358)*x2461*x2468))+(((0.006861229532)*sj8*x2459))+((x2457*x2467*x2474))+(((-0.01)*x2457*x2468))+(((0.013400999476)*x2459*x2463))+(((0.00383446)*sj6*x2459))+(((-0.244642)*x2461*x2466*x2468))+(((-0.00196322)*x2464))+((cj4*x2459*x2467*x2468))+(((0.244642)*x2459*x2463*x2465))+(((0.013400999476)*sj6*sj8*x2464))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2477=((0.07)*cj7);
IkReal x2478=((0.244642)*sj7);
IkReal x2479=(cj4*sj6);
IkReal x2480=((6.82603043775023)*cj6);
IkReal x2481=(sj7*sj8);
IkReal x2482=(sj4*sj8);
IkReal x2483=(cj7*cj8);
IkReal x2484=((35.6557084789275)*cj7);
IkReal x2485=((0.07)*sj7);
IkReal x2486=(cj6*pz);
IkReal x2487=((124.61262619574)*sj4);
IkReal x2488=((3.49488571428571)*cj6);
IkReal x2489=((35.6557084789275)*sj7);
IkReal x2490=(sj4*sj6);
IkReal x2491=(cj6*cj7);
IkReal x2492=((124.61262619574)*cj4);
IkReal x2493=((0.01)*cj4);
IkReal x2494=((0.013400999476)*cj6);
IkReal x2495=(cj7*sj8);
IkReal x2496=((5.09367263984678)*cj4);
IkReal x2497=(cj7*sj6);
IkReal x2498=(cj3*cj6*py);
IkReal x2499=(cj8*sj6*sj7);
IkReal x2500=(cj6*px*sj3);
IkReal x2501=(cj6*sj6*sj7);
IkReal x2502=((124.61262619574)*cj8*sj7);
IkReal x2503=((124.61262619574)*x2495);
IkReal x2504=(sj4*x2500);
j5eval[0]=((((-1.0)*x2483*x2486*x2492))+(((-6.84935489858498)*cj6))+(((-122.430496836829)*x2504))+(((-124.61262619574)*cj3*py*sj8*x2479*x2491))+(((-1.0)*x2496*x2498))+(((-1.0)*sj6*x2488*x2495))+((x2496*x2500))+(((-1.0)*x2481*x2487*x2498))+(((-1.0)*x2486*x2487*x2499))+((x2481*x2486*x2492))+((sj4*x2484*x2498))+((x2480*x2481))+(((-122.430496836829)*cj4*x2486))+(((-1.0)*x2479*x2489*x2498))+(((-1.0)*x2483*x2487*x2500))+((x2483*x2487*x2498))+(((122.430496836829)*sj4*x2498))+((x2479*x2500*x2502))+(((-1.0)*x2486*x2489*x2490))+(((-1.0)*x2480*x2483))+(((-1.0)*x2488*x2499))+(((-1.0)*x2501))+((x2481*x2487*x2500))+(((124.61262619574)*px*sj3*sj8*x2479*x2491))+(((-1.0)*x2484*x2504))+(((-1.95314839905869)*x2491))+((x2479*x2489*x2500))+(((-124.61262619574)*x2482*x2486*x2497))+(((-1.0)*x2479*x2498*x2502))+(((-5.09367263984678)*sj4*x2486))+(((-1.0)*cj4*x2484*x2486)));
j5eval[1]=IKsign(((((-0.244642)*x2483*x2504))+((sj4*x2477*x2498))+(((-0.00383446)*x2491))+((x2479*x2485*x2500))+(((-1.0)*x2493*x2498))+(((-1.0)*x2478*x2482*x2498))+(((-0.244642)*cj3*py*sj8*x2479*x2491))+((x2478*x2482*x2500))+(((-0.01)*sj4*x2486))+(((-1.0)*x2479*x2485*x2498))+(((-0.240358)*x2504))+(((0.244642)*px*sj3*sj8*x2479*x2491))+((x2481*x2494))+((x2493*x2500))+(((-1.0)*cj8*x2478*x2479*x2498))+(((-0.00196322)*x2501))+(((-1.0)*cj8*x2478*x2486*x2490))+(((-0.006861229532)*cj6*x2499))+(((-0.240358)*cj4*x2486))+((cj8*x2478*x2479*x2500))+(((0.240358)*sj4*x2498))+(((-0.244642)*cj4*x2483*x2486))+(((-1.0)*x2477*x2504))+(((-1.0)*x2483*x2494))+(((-0.006861229532)*sj6*sj8*x2491))+(((-1.0)*cj4*x2477*x2486))+(((-0.013446790524)*cj6))+(((-1.0)*x2485*x2486*x2490))+(((-0.244642)*x2482*x2486*x2497))+((cj4*sj8*x2478*x2486))+(((0.244642)*sj4*x2483*x2498))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(((((-0.00244642)*cj6*cj7*cj8))+(((-0.07)*cj7*py*sj3*sj6))+(((-2.0)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.028046)*cj3*cj6*py*sj4))+(((-0.240358)*cj3*px*sj6))+(((-1.0)*cj6*px*pz*sj3))+(((-0.0007)*cj6*cj7))+(((-1.0)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.054778)*cj4*cj6*px*sj3))+(((0.244642)*py*sj3*sj6*sj7*sj8))+(((-0.244642)*cj7*cj8*py*sj3*sj6))+(((-1.0)*cj4*cj6*sj4*(pz*pz)))+(((-0.07)*cj3*cj7*px*sj6))+(((-0.054778)*cj6*pz*sj4))+((cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((-0.240358)*py*sj3*sj6))+(((-0.028046)*cj6*px*sj3*sj4))+(((-0.054778)*cj3*cj4*cj6*py))+(((0.244642)*cj3*px*sj6*sj7*sj8))+(((-2.0)*cj3*cj6*py*pz*(cj4*cj4)))+((cj4*cj6*sj4*(px*px)))+(((-0.244642)*cj3*cj7*cj8*px*sj6))+((cj3*cj6*py*pz))+(((2.0)*cj6*px*pz*sj3*(cj4*cj4)))+(((0.00244642)*cj6*sj7*sj8))+(((-0.003939883788)*cj6))+(((-0.028046)*cj4*cj6*pz)))),IkReal(((((-0.244642)*cj7*py*sj3*sj8))+(((0.109556)*cj6*px*sj3*sj4))+((cj6*(px*px)))+(((0.109556)*cj4*cj6*pz))+(((2.0)*cj4*cj6*px*pz*sj3*sj4))+(((-0.244642)*cj3*cj8*px*sj7))+(((-2.0)*cj3*cj6*px*py*sj3))+(((-0.01)*cj3*px*sj6))+(((2.0)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((-0.07)*py*sj3*sj7))+((cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj6*(cj4*cj4)*(pz*pz)))+(((0.244642)*cj3*cj7*px*sj8*(cj6*cj6)))+(((0.002900629284)*cj6))+(((-0.244642)*cj3*cj7*px*sj8))+(((-1.0)*cj6*(cj3*cj3)*(px*px)))+(((-0.244642)*cj8*py*sj3*sj7))+(((-0.0007)*cj6*sj6*sj7))+(((0.244642)*cj7*py*sj3*sj8*(cj6*cj6)))+(((-2.0)*cj3*cj4*cj6*py*pz*sj4))+(((0.244642)*cj8*py*sj3*sj7*(cj6*cj6)))+(((-0.07)*cj3*px*sj7))+(((-1.0)*cj6*(cj4*cj4)*(px*px)))+(((-0.00244642)*cj6*cj8*sj6*sj7))+((cj6*(cj3*cj3)*(py*py)))+(((-0.00244642)*cj6*cj7*sj6*sj8))+(((-0.01)*py*sj3*sj6))+(((-0.109556)*cj3*cj6*py*sj4))+(((0.244642)*cj3*cj8*px*sj7*(cj6*cj6)))+(((-1.0)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.07)*py*sj3*sj7*(cj6*cj6)))+(((0.07)*cj3*px*sj7*(cj6*cj6))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign(((((0.244642)*cj4*cj6*cj7*px*sj3*sj6*sj8))+(((-0.07)*cj4*cj6*cj7*pz))+(((0.01)*cj4*cj6*px*sj3))+(((-0.07)*cj6*cj7*px*sj3*sj4))+(((-0.01)*cj3*cj4*cj6*py))+(((-0.244642)*cj4*cj6*cj7*cj8*pz))+(((-0.01)*cj6*pz*sj4))+(((0.013400999476)*cj6*sj7*sj8))+(((0.244642)*cj4*cj6*pz*sj7*sj8))+(((-0.244642)*cj3*cj4*cj6*cj7*py*sj6*sj8))+(((-0.244642)*cj6*cj8*pz*sj4*sj6*sj7))+(((0.244642)*cj6*px*sj3*sj4*sj7*sj8))+(((-0.013400999476)*cj6*cj7*cj8))+(((-0.244642)*cj6*cj7*cj8*px*sj3*sj4))+(((-0.240358)*cj4*cj6*pz))+(((-0.07)*cj3*cj4*cj6*py*sj6*sj7))+(((0.244642)*cj4*cj6*cj8*px*sj3*sj6*sj7))+(((-0.240358)*cj6*px*sj3*sj4))+(((-0.07)*cj6*pz*sj4*sj6*sj7))+(((0.240358)*cj3*cj6*py*sj4))+(((-0.244642)*cj3*cj6*py*sj4*sj7*sj8))+(((-0.006861229532)*cj6*cj7*sj6*sj8))+(((-0.00196322)*cj6*sj6*sj7))+(((-0.244642)*cj3*cj4*cj6*cj8*py*sj6*sj7))+(((0.07)*cj4*cj6*px*sj3*sj6*sj7))+(((-0.00383446)*cj6*cj7))+(((-0.006861229532)*cj6*cj8*sj6*sj7))+(((-0.244642)*cj6*cj7*pz*sj4*sj6*sj8))+(((-0.013446790524)*cj6))+(((0.244642)*cj3*cj6*cj7*cj8*py*sj4))+(((0.07)*cj3*cj6*cj7*py*sj4)))),-1);
if(!x2506.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2505.value)+(((1.5707963267949)*(x2506.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2507=IKcos(j5);
IkReal x2508=IKsin(j5);
IkReal x2509=((1.0)*pz);
IkReal x2510=((0.02)*sj4);
IkReal x2511=((0.244642)*sj8);
IkReal x2512=(cj7*sj6);
IkReal x2513=(sj6*sj7);
IkReal x2514=(cj4*cj7);
IkReal x2515=(cj4*sj7);
IkReal x2516=(cj4*pz);
IkReal x2517=(cj7*sj4);
IkReal x2518=(px*sj3);
IkReal x2519=(cj6*sj7);
IkReal x2520=(cj3*px);
IkReal x2521=(pz*sj4);
IkReal x2522=(py*sj3);
IkReal x2523=((0.056092)*cj4);
IkReal x2524=((1.0)*cj6);
IkReal x2525=((0.244642)*cj8);
IkReal x2526=((1.0)*sj4);
IkReal x2527=((1.0)*sj6);
IkReal x2528=((1.0)*cj4);
IkReal x2529=(cj3*py);
IkReal x2530=((0.054778)*x2508);
IkReal x2531=(cj6*x2508);
IkReal x2532=(cj7*x2508);
IkReal x2533=((1.0)*x2508);
IkReal x2534=(cj4*x2507);
IkReal x2535=(sj7*x2508);
IkReal x2536=((0.07)*x2507);
IkReal x2537=((0.14)*x2508);
IkReal x2538=(cj4*x2508);
IkReal x2539=((0.14)*x2507);
IkReal x2540=(sj4*x2529);
IkReal x2541=(sj4*x2507);
IkReal x2542=(cj6*x2507);
IkReal x2543=(cj7*x2507);
IkReal x2544=(sj7*x2507);
IkReal x2545=((0.028046)*x2507);
IkReal x2546=(x2508*x2529);
IkReal x2547=(x2507*x2529);
IkReal x2548=(x2507*x2518*x2528);
evalcond[0]=((-0.028046)+(((0.07)*x2532))+(((0.01)*x2507))+((cj4*x2518))+(((-1.0)*sj4*x2509))+(((-1.0)*x2528*x2529))+((x2525*x2532))+((x2513*x2536))+((x2507*x2511*x2512))+(((-1.0)*x2511*x2535))+(((0.240358)*x2508))+((x2507*x2513*x2525)));
evalcond[1]=((-0.054778)+x2540+(((0.01)*x2508))+(((-0.240358)*x2507))+((x2508*x2511*x2512))+(((-1.0)*cj4*x2509))+((x2508*x2513*x2525))+(((0.07)*x2508*x2513))+((x2511*x2544))+(((-1.0)*cj7*x2536))+(((-1.0)*x2525*x2543))+(((-1.0)*x2518*x2526)));
evalcond[2]=((((-1.0)*x2520*x2527))+(((-0.01)*cj6))+(((-1.0)*x2518*x2524*x2534))+(((0.028046)*x2542))+((cj6*x2530))+((cj6*x2529*x2534))+((sj4*x2518*x2531))+(((-1.0)*x2522*x2527))+((x2516*x2531))+(((-1.0)*x2508*x2524*x2540))+((x2521*x2542)));
evalcond[3]=((-0.07)+((x2517*x2547))+(((0.028046)*x2532))+((x2513*x2529*x2534))+((x2513*x2545))+(((-0.240358)*cj7))+((x2519*x2522))+((x2519*x2520))+((x2513*x2530))+(((-1.0)*x2514*x2518*x2533))+(((-0.01)*x2513))+(((-1.0)*x2513*x2548))+((x2514*x2546))+(((-0.054778)*x2543))+((pz*x2508*x2517))+((sj4*x2508*x2513*x2518))+((x2508*x2513*x2516))+(((-1.0)*x2513*x2526*x2546))+(((-1.0)*x2507*x2517*x2518))+(((-1.0)*x2525))+(((-1.0)*x2507*x2509*x2514))+((x2507*x2513*x2521)));
evalcond[4]=((((0.028046)*x2535))+x2511+((x2521*x2535))+(((-1.0)*x2515*x2518*x2533))+((x2515*x2546))+(((0.01)*x2512))+(((-1.0)*x2512*x2545))+((x2508*x2512*x2540))+(((-1.0)*cj7*x2520*x2524))+(((-1.0)*x2509*x2512*x2541))+(((-0.240358)*sj7))+(((-1.0)*cj7*x2522*x2524))+(((-0.054778)*x2544))+(((-1.0)*x2512*x2530))+(((-1.0)*x2518*x2526*x2544))+((x2540*x2544))+((x2512*x2518*x2534))+(((-1.0)*x2508*x2512*x2518*x2526))+(((-1.0)*x2507*x2509*x2515))+(((-1.0)*x2512*x2528*x2547))+(((-1.0)*x2509*x2512*x2538)));
evalcond[5]=((-0.0067094674)+(((0.109556)*x2540))+(((0.480716)*x2507*x2540))+(((-1.0)*x2517*x2518*x2539))+(((-1.0)*(px*px)))+(((-1.0)*x2523*x2529))+(((-0.109556)*sj4*x2518))+(((0.02)*x2508*x2516))+(((-0.025771741048)*x2507))+(((-0.00766892)*x2543))+(((0.00392644)*x2507*x2513))+((x2513*x2521*x2539))+(((-0.480716)*x2507*x2516))+((x2517*x2529*x2539))+(((-0.109556)*x2516))+(((-1.0)*x2514*x2518*x2537))+(((-0.480716)*x2518*x2541))+(((0.14)*x2519*x2520))+(((0.14)*x2519*x2522))+((pz*x2507*x2510))+(((-0.14)*x2513*x2518*x2534))+((x2513*x2516*x2537))+((x2508*x2510*x2518))+(((0.00392644)*x2532))+((x2514*x2529*x2537))+((x2518*x2523))+(((-0.480716)*x2518*x2538))+(((0.14)*x2513*x2529*x2534))+(((-1.0)*x2513*x2537*x2540))+(((0.480716)*x2529*x2538))+(((-0.0014)*x2513))+((pz*x2517*x2537))+(((-1.0)*pz*x2514*x2539))+(((-1.0)*x2510*x2546))+(((-1.0)*pz*x2509))+(((-0.056092)*x2521))+(((0.00766892)*x2508*x2513))+(((0.014577720936)*x2508))+(((-1.0)*(py*py)))+(((0.480716)*x2508*x2521))+((sj4*x2513*x2518*x2537))+(((-0.02)*x2518*x2534))+(((-0.03365012)*cj7))+(((0.02)*x2529*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(((((0.07)*cj3*px*sj7))+(((0.056092)*cj4*cj6*px*sj3))+(((-0.07)*py*sj3*sj7*(cj6*cj6)))+(((2.0)*cj4*cj6*px*pz*sj3*sj4))+(((-0.244642)*cj3*cj7*px*sj8*(cj6*cj6)))+(((0.00244642)*cj6*cj8*sj6*sj7))+(((-0.07)*cj3*px*sj7*(cj6*cj6)))+(((-0.056092)*cj6*pz*sj4))+(((2.0)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.244642)*cj7*py*sj3*sj8))+((cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj6*(cj4*cj4)*(pz*pz)))+(((-1.0)*cj6*(pz*pz)))+(((0.244642)*cj8*py*sj3*sj7))+(((0.07)*py*sj3*sj7))+(((-0.056092)*cj3*cj4*cj6*py))+(((-0.244642)*cj7*py*sj3*sj8*(cj6*cj6)))+(((-2.0)*cj3*cj4*cj6*py*pz*sj4))+(((0.01)*cj3*px*sj6))+(((0.244642)*cj3*cj7*px*sj8))+(((0.00244642)*cj6*cj7*sj6*sj8))+(((-1.0)*cj6*(cj4*cj4)*(px*px)))+(((0.01)*py*sj3*sj6))+(((-0.000686578116)*cj6))+(((-0.244642)*cj3*cj8*px*sj7*(cj6*cj6)))+(((0.244642)*cj3*cj8*px*sj7))+(((0.0007)*cj6*sj6*sj7))+(((-0.244642)*cj8*py*sj3*sj7*(cj6*cj6)))+(((-1.0)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py))))),IkReal(((((-0.00244642)*cj6*cj7*cj8))+(((-0.07)*cj7*py*sj3*sj6))+(((-0.054778)*cj4*cj6*px*sj3))+(((-0.240358)*cj3*px*sj6))+(((2.0)*cj3*cj4*cj6*px*py*sj3*sj4))+(((-2.0)*cj6*px*pz*sj3*(cj4*cj4)))+((cj4*cj6*sj4*(pz*pz)))+(((-0.0007)*cj6*cj7))+(((-0.000867276212)*cj6))+(((0.028046)*cj4*cj6*pz))+(((0.244642)*py*sj3*sj6*sj7*sj8))+(((-0.244642)*cj7*cj8*py*sj3*sj6))+(((0.054778)*cj6*pz*sj4))+(((-0.07)*cj3*cj7*px*sj6))+(((-0.240358)*py*sj3*sj6))+(((0.244642)*cj3*px*sj6*sj7*sj8))+(((-1.0)*cj3*cj6*py*pz))+((cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((-1.0)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+((cj6*px*pz*sj3))+(((-0.244642)*cj3*cj7*cj8*px*sj6))+(((-0.028046)*cj3*cj6*py*sj4))+(((0.054778)*cj3*cj4*cj6*py))+(((0.028046)*cj6*px*sj3*sj4))+(((0.00244642)*cj6*sj7*sj8))+(((2.0)*cj3*cj6*py*pz*(cj4*cj4)))+(((-1.0)*cj4*cj6*sj4*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550=IKPowWithIntegerCheck(IKsign(((((0.244642)*cj6*cj7*px*sj3*sj4*sj6*sj8))+(((-0.01)*cj3*cj6*py*sj4))+(((-0.07)*cj3*cj6*py*sj4*sj6*sj7))+(((0.244642)*cj6*cj8*px*sj3*sj4*sj6*sj7))+(((-0.244642)*cj4*cj6*px*sj3*sj7*sj8))+(((0.244642)*cj4*cj6*cj7*pz*sj6*sj8))+(((-0.00196322)*cj6*cj7))+(((0.07)*cj6*px*sj3*sj4*sj6*sj7))+(((-0.006193300468)*cj6))+(((-0.244642)*cj3*cj4*cj6*cj7*cj8*py))+(((0.006861229532)*cj6*sj7*sj8))+(((0.01)*cj6*px*sj3*sj4))+(((0.013400999476)*cj6*cj8*sj6*sj7))+(((0.07)*cj4*cj6*cj7*px*sj3))+(((-0.244642)*cj6*cj7*cj8*pz*sj4))+(((0.07)*cj4*cj6*pz*sj6*sj7))+(((-0.244642)*cj3*cj6*cj7*py*sj4*sj6*sj8))+(((0.013400999476)*cj6*cj7*sj6*sj8))+(((0.00383446)*cj6*sj6*sj7))+(((-0.240358)*cj3*cj4*cj6*py))+(((0.240358)*cj4*cj6*px*sj3))+(((-0.07)*cj6*cj7*pz*sj4))+(((-0.244642)*cj3*cj6*cj8*py*sj4*sj6*sj7))+(((-0.240358)*cj6*pz*sj4))+(((-0.07)*cj3*cj4*cj6*cj7*py))+(((0.244642)*cj4*cj6*cj8*pz*sj6*sj7))+(((0.01)*cj4*cj6*pz))+(((0.244642)*cj6*pz*sj4*sj7*sj8))+(((0.244642)*cj3*cj4*cj6*py*sj7*sj8))+(((0.244642)*cj4*cj6*cj7*cj8*px*sj3))+(((-0.006861229532)*cj6*cj7*cj8)))),-1);
if(!x2550.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2549.value)+(((1.5707963267949)*(x2550.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2551=IKcos(j5);
IkReal x2552=IKsin(j5);
IkReal x2553=((1.0)*pz);
IkReal x2554=((0.02)*sj4);
IkReal x2555=((0.244642)*sj8);
IkReal x2556=(cj7*sj6);
IkReal x2557=(sj6*sj7);
IkReal x2558=(cj4*cj7);
IkReal x2559=(cj4*sj7);
IkReal x2560=(cj4*pz);
IkReal x2561=(cj7*sj4);
IkReal x2562=(px*sj3);
IkReal x2563=(cj6*sj7);
IkReal x2564=(cj3*px);
IkReal x2565=(pz*sj4);
IkReal x2566=(py*sj3);
IkReal x2567=((0.056092)*cj4);
IkReal x2568=((1.0)*cj6);
IkReal x2569=((0.244642)*cj8);
IkReal x2570=((1.0)*sj4);
IkReal x2571=((1.0)*sj6);
IkReal x2572=((1.0)*cj4);
IkReal x2573=(cj3*py);
IkReal x2574=((0.054778)*x2552);
IkReal x2575=(cj6*x2552);
IkReal x2576=(cj7*x2552);
IkReal x2577=((1.0)*x2552);
IkReal x2578=(cj4*x2551);
IkReal x2579=(sj7*x2552);
IkReal x2580=((0.07)*x2551);
IkReal x2581=((0.14)*x2552);
IkReal x2582=(cj4*x2552);
IkReal x2583=((0.14)*x2551);
IkReal x2584=(sj4*x2573);
IkReal x2585=(sj4*x2551);
IkReal x2586=(cj6*x2551);
IkReal x2587=(cj7*x2551);
IkReal x2588=(sj7*x2551);
IkReal x2589=((0.028046)*x2551);
IkReal x2590=(x2552*x2573);
IkReal x2591=(x2551*x2573);
IkReal x2592=(x2551*x2562*x2572);
evalcond[0]=((-0.028046)+(((0.01)*x2551))+((x2551*x2555*x2556))+(((0.240358)*x2552))+((x2557*x2580))+(((-1.0)*x2555*x2579))+(((0.07)*x2576))+((x2551*x2557*x2569))+((x2569*x2576))+(((-1.0)*x2572*x2573))+((cj4*x2562))+(((-1.0)*sj4*x2553)));
evalcond[1]=((-0.054778)+(((0.01)*x2552))+x2584+(((0.07)*x2552*x2557))+((x2552*x2557*x2569))+((x2555*x2588))+(((-1.0)*x2562*x2570))+(((-1.0)*x2569*x2587))+((x2552*x2555*x2556))+(((-1.0)*cj7*x2580))+(((-0.240358)*x2551))+(((-1.0)*cj4*x2553)));
evalcond[2]=((((-1.0)*x2566*x2571))+(((-1.0)*x2552*x2568*x2584))+((cj6*x2574))+((x2560*x2575))+((sj4*x2562*x2575))+(((-0.01)*cj6))+((cj6*x2573*x2578))+((x2565*x2586))+(((0.028046)*x2586))+(((-1.0)*x2564*x2571))+(((-1.0)*x2562*x2568*x2578)));
evalcond[3]=((-0.07)+((x2552*x2557*x2560))+(((-0.240358)*cj7))+(((-1.0)*x2551*x2561*x2562))+(((-1.0)*x2557*x2570*x2590))+(((-0.054778)*x2587))+((x2557*x2589))+((x2558*x2590))+(((-1.0)*x2557*x2592))+((pz*x2552*x2561))+(((-1.0)*x2569))+((x2557*x2574))+(((0.028046)*x2576))+((x2563*x2564))+((x2563*x2566))+((x2551*x2557*x2565))+((sj4*x2552*x2557*x2562))+(((-1.0)*x2558*x2562*x2577))+(((-0.01)*x2557))+(((-1.0)*x2551*x2553*x2558))+((x2561*x2591))+((x2557*x2573*x2578)));
evalcond[4]=(((x2584*x2588))+(((0.01)*x2556))+((x2552*x2556*x2584))+x2555+(((-1.0)*x2556*x2589))+(((-1.0)*cj7*x2566*x2568))+(((-0.054778)*x2588))+((x2559*x2590))+(((-1.0)*x2556*x2574))+(((0.028046)*x2579))+(((-1.0)*x2553*x2556*x2582))+(((-1.0)*x2553*x2556*x2585))+(((-1.0)*x2552*x2556*x2562*x2570))+(((-1.0)*x2556*x2572*x2591))+(((-0.240358)*sj7))+(((-1.0)*x2562*x2570*x2588))+(((-1.0)*x2551*x2553*x2559))+((x2565*x2579))+(((-1.0)*x2559*x2562*x2577))+(((-1.0)*cj7*x2564*x2568))+((x2556*x2562*x2578)));
evalcond[5]=((-0.0067094674)+(((-0.02)*x2562*x2578))+(((0.480716)*x2552*x2565))+(((-0.0014)*x2557))+((x2557*x2560*x2581))+(((-1.0)*(px*px)))+(((0.480716)*x2573*x2582))+(((0.00392644)*x2576))+(((-1.0)*pz*x2553))+(((0.00392644)*x2551*x2557))+((x2557*x2565*x2583))+((sj4*x2557*x2562*x2581))+((x2562*x2567))+(((-1.0)*x2557*x2581*x2584))+(((-0.480716)*x2562*x2582))+(((-0.480716)*x2562*x2585))+((pz*x2561*x2581))+(((-0.056092)*x2565))+(((0.02)*x2552*x2560))+(((0.00766892)*x2552*x2557))+(((0.480716)*x2551*x2584))+((x2558*x2573*x2581))+(((0.14)*x2563*x2566))+(((0.14)*x2563*x2564))+(((-0.025771741048)*x2551))+(((-1.0)*x2567*x2573))+((pz*x2551*x2554))+(((-1.0)*x2554*x2590))+(((0.014577720936)*x2552))+(((-1.0)*pz*x2558*x2583))+(((-1.0)*x2558*x2562*x2581))+(((-0.14)*x2557*x2562*x2578))+(((-1.0)*(py*py)))+(((-0.109556)*sj4*x2562))+((x2561*x2573*x2583))+(((0.14)*x2557*x2573*x2578))+(((-0.480716)*x2551*x2560))+(((-0.109556)*x2560))+((x2552*x2554*x2562))+(((-0.03365012)*cj7))+(((-0.00766892)*x2587))+(((0.02)*x2573*x2578))+(((-1.0)*x2561*x2562*x2583))+(((0.109556)*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(IKsign(((0.122621676328)+(((0.03424988)*cj8*(cj6*cj6)*(cj7*cj7)))+(((-0.059849708164)*(cj6*cj6)*(cj8*cj8)))+(((0.03365012)*cj7))+(((0.117603323672)*cj7*cj8))+(((-0.054949708164)*(cj6*cj6)*(cj7*cj7)))+(((-0.03424988)*cj7*sj7*sj8*(cj6*cj6)))+(((0.119699416328)*(cj6*cj6)*(cj7*cj7)*(cj8*cj8)))+(((-0.0049)*(cj6*cj6)))+(((0.0014)*sj6*sj7))+(((0.00489284)*cj8*sj6*sj7))+(((-0.117603323672)*sj7*sj8))+(((-0.119699416328)*cj7*cj8*sj7*sj8*(cj6*cj6)))+(((0.00489284)*cj7*sj6*sj8))+(((0.03424988)*cj8))+(((-0.03424988)*cj8*(cj6*cj6))))),-1);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(((0.007288860468)+(((0.244642)*cj4*cj8*pz*sj6*sj7))+(((0.244642)*cj4*cj7*pz*sj6*sj8))+(((0.013400999476)*cj8*sj6*sj7))+(((0.244642)*cj3*cj4*cj7*cj8*py))+(((0.006861229532)*cj7*cj8))+(((-0.240358)*cj4*px*sj3))+(((-0.07)*cj3*py*sj4*sj6*sj7))+(((0.07)*cj3*cj4*cj7*py))+(((0.013400999476)*cj7*sj6*sj8))+(((0.01)*px*sj3*sj4))+(((-0.07)*cj4*cj7*px*sj3))+(((0.07)*cj7*pz*sj4))+(((0.00383446)*sj6*sj7))+(((-0.244642)*cj4*cj7*cj8*px*sj3))+(((0.00196322)*cj7))+(((0.240358)*pz*sj4))+(((0.240358)*cj3*cj4*py))+(((-0.244642)*cj3*cj8*py*sj4*sj6*sj7))+(((0.244642)*cj7*cj8*pz*sj4))+(((0.244642)*cj8*px*sj3*sj4*sj6*sj7))+(((-0.006861229532)*sj7*sj8))+(((-0.244642)*pz*sj4*sj7*sj8))+(((0.07)*cj4*pz*sj6*sj7))+(((0.01)*cj4*pz))+(((0.07)*px*sj3*sj4*sj6*sj7))+(((-0.244642)*cj3*cj7*py*sj4*sj6*sj8))+(((-0.244642)*cj3*cj4*py*sj7*sj8))+(((0.244642)*cj4*px*sj3*sj7*sj8))+(((0.244642)*cj7*px*sj3*sj4*sj6*sj8))+(((-0.01)*cj3*py*sj4)))),IkReal(((-0.012885870524)+(((0.07)*cj3*cj7*py*sj4))+(((-0.244642)*cj4*cj7*px*sj3*sj6*sj8))+(((0.244642)*cj8*pz*sj4*sj6*sj7))+(((-0.240358)*px*sj3*sj4))+(((-0.244642)*cj4*cj7*cj8*pz))+(((0.00196322)*sj6*sj7))+(((-0.00383446)*cj7))+(((0.240358)*cj3*py*sj4))+(((-0.244642)*cj3*py*sj4*sj7*sj8))+(((0.01)*pz*sj4))+(((-0.01)*cj4*px*sj3))+(((0.013400999476)*sj7*sj8))+(((0.244642)*cj3*cj4*cj7*py*sj6*sj8))+(((-0.244642)*cj4*cj8*px*sj3*sj6*sj7))+(((0.01)*cj3*cj4*py))+(((0.244642)*cj3*cj4*cj8*py*sj6*sj7))+(((-0.07)*cj4*cj7*pz))+(((0.006861229532)*cj8*sj6*sj7))+(((0.244642)*cj4*pz*sj7*sj8))+(((-0.240358)*cj4*pz))+(((0.244642)*px*sj3*sj4*sj7*sj8))+(((0.006861229532)*cj7*sj6*sj8))+(((-0.013400999476)*cj7*cj8))+(((0.07)*pz*sj4*sj6*sj7))+(((0.07)*cj3*cj4*py*sj6*sj7))+(((-0.07)*cj4*px*sj3*sj6*sj7))+(((-0.244642)*cj7*cj8*px*sj3*sj4))+(((0.244642)*cj3*cj7*cj8*py*sj4))+(((0.244642)*cj7*pz*sj4*sj6*sj8))+(((-0.07)*cj7*px*sj3*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2593.value)))+(x2594.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2595=IKcos(j5);
IkReal x2596=IKsin(j5);
IkReal x2597=((1.0)*pz);
IkReal x2598=((0.02)*sj4);
IkReal x2599=((0.244642)*sj8);
IkReal x2600=(cj7*sj6);
IkReal x2601=(sj6*sj7);
IkReal x2602=(cj4*cj7);
IkReal x2603=(cj4*sj7);
IkReal x2604=(cj4*pz);
IkReal x2605=(cj7*sj4);
IkReal x2606=(px*sj3);
IkReal x2607=(cj6*sj7);
IkReal x2608=(cj3*px);
IkReal x2609=(pz*sj4);
IkReal x2610=(py*sj3);
IkReal x2611=((0.056092)*cj4);
IkReal x2612=((1.0)*cj6);
IkReal x2613=((0.244642)*cj8);
IkReal x2614=((1.0)*sj4);
IkReal x2615=((1.0)*sj6);
IkReal x2616=((1.0)*cj4);
IkReal x2617=(cj3*py);
IkReal x2618=((0.054778)*x2596);
IkReal x2619=(cj6*x2596);
IkReal x2620=(cj7*x2596);
IkReal x2621=((1.0)*x2596);
IkReal x2622=(cj4*x2595);
IkReal x2623=(sj7*x2596);
IkReal x2624=((0.07)*x2595);
IkReal x2625=((0.14)*x2596);
IkReal x2626=(cj4*x2596);
IkReal x2627=((0.14)*x2595);
IkReal x2628=(sj4*x2617);
IkReal x2629=(sj4*x2595);
IkReal x2630=(cj6*x2595);
IkReal x2631=(cj7*x2595);
IkReal x2632=(sj7*x2595);
IkReal x2633=((0.028046)*x2595);
IkReal x2634=(x2596*x2617);
IkReal x2635=(x2595*x2617);
IkReal x2636=(x2595*x2606*x2616);
evalcond[0]=((-0.028046)+(((0.07)*x2620))+((x2595*x2601*x2613))+((cj4*x2606))+(((0.240358)*x2596))+((x2601*x2624))+(((-1.0)*sj4*x2597))+((x2595*x2599*x2600))+(((-1.0)*x2599*x2623))+(((-1.0)*x2616*x2617))+(((0.01)*x2595))+((x2613*x2620)));
evalcond[1]=((-0.054778)+(((-1.0)*x2606*x2614))+((x2596*x2601*x2613))+((x2599*x2632))+(((-1.0)*cj7*x2624))+((x2596*x2599*x2600))+(((-0.240358)*x2595))+(((0.07)*x2596*x2601))+(((-1.0)*x2613*x2631))+(((0.01)*x2596))+x2628+(((-1.0)*cj4*x2597)));
evalcond[2]=((((-1.0)*x2610*x2615))+(((0.028046)*x2630))+(((-1.0)*x2608*x2615))+((x2609*x2630))+(((-0.01)*cj6))+(((-1.0)*x2606*x2612*x2622))+((cj6*x2618))+(((-1.0)*x2596*x2612*x2628))+((cj6*x2617*x2622))+((x2604*x2619))+((sj4*x2606*x2619)));
evalcond[3]=((-0.07)+((x2596*x2601*x2604))+((x2607*x2608))+(((-0.240358)*cj7))+((x2605*x2635))+((x2595*x2601*x2609))+(((-1.0)*x2601*x2614*x2634))+(((-1.0)*x2595*x2597*x2602))+(((-0.054778)*x2631))+((x2601*x2617*x2622))+((x2601*x2618))+((sj4*x2596*x2601*x2606))+(((-1.0)*x2601*x2636))+(((0.028046)*x2620))+(((-1.0)*x2602*x2606*x2621))+((x2602*x2634))+((pz*x2596*x2605))+(((-1.0)*x2613))+(((-0.01)*x2601))+((x2601*x2633))+(((-1.0)*x2595*x2605*x2606))+((x2607*x2610)));
evalcond[4]=(((x2600*x2606*x2622))+x2599+(((-1.0)*cj7*x2610*x2612))+(((-1.0)*x2595*x2597*x2603))+(((-0.054778)*x2632))+(((-1.0)*x2600*x2618))+(((-1.0)*x2606*x2614*x2632))+(((-1.0)*cj7*x2608*x2612))+(((-1.0)*x2597*x2600*x2626))+(((-1.0)*x2597*x2600*x2629))+((x2628*x2632))+(((0.01)*x2600))+(((-1.0)*x2596*x2600*x2606*x2614))+(((-0.240358)*sj7))+(((0.028046)*x2623))+((x2609*x2623))+((x2603*x2634))+((x2596*x2600*x2628))+(((-1.0)*x2600*x2633))+(((-1.0)*x2600*x2616*x2635))+(((-1.0)*x2603*x2606*x2621)));
evalcond[5]=((-0.0067094674)+((pz*x2595*x2598))+(((-1.0)*(px*px)))+(((-0.109556)*x2604))+(((-1.0)*x2605*x2606*x2627))+(((-0.00766892)*x2631))+(((-1.0)*x2611*x2617))+(((-0.109556)*sj4*x2606))+((x2601*x2604*x2625))+((x2596*x2598*x2606))+(((0.02)*x2596*x2604))+(((0.02)*x2617*x2622))+((x2602*x2617*x2625))+(((0.14)*x2601*x2617*x2622))+(((-0.0014)*x2601))+(((-0.02)*x2606*x2622))+(((-0.480716)*x2595*x2604))+(((0.109556)*x2628))+(((0.014577720936)*x2596))+(((-1.0)*pz*x2602*x2627))+(((-1.0)*x2598*x2634))+((x2605*x2617*x2627))+((sj4*x2601*x2606*x2625))+(((0.00392644)*x2595*x2601))+(((0.14)*x2607*x2610))+(((0.480716)*x2596*x2609))+(((-1.0)*pz*x2597))+((x2606*x2611))+(((-1.0)*x2602*x2606*x2625))+(((0.14)*x2607*x2608))+((pz*x2605*x2625))+(((0.00392644)*x2620))+((x2601*x2609*x2627))+(((-0.14)*x2601*x2606*x2622))+(((0.480716)*x2595*x2628))+(((-0.056092)*x2609))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((0.480716)*x2617*x2626))+(((-0.025771741048)*x2595))+(((-1.0)*x2601*x2625*x2628))+(((-0.480716)*x2606*x2626))+(((-0.480716)*x2606*x2629))+(((0.00766892)*x2596*x2601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x267=(sj5*sj6);
IkReal x268=(cj3*sj6);
IkReal x269=(cj6*sj3);
IkReal x270=(cj6*sj5);
IkReal x271=((1.0)*sj4);
IkReal x272=(cj3*cj6);
IkReal x273=(cj7*sj8);
IkReal x274=((1.0)*sj3);
IkReal x275=(cj5*cj6);
IkReal x276=(cj5*sj6);
IkReal x277=((1.0)*sj7);
IkReal x278=((-1.0)*sj5);
IkReal x279=((-1.0)*sj3);
IkReal x280=((-1.0)*sj4);
IkReal x281=(((cj7*cj8))+(((-1.0)*sj8*x277)));
IkReal x282=(((cj8*sj7))+x273);
IkReal x283=(sj5*x281);
IkReal x284=(sj6*x281);
IkReal x285=(cj5*x281);
IkReal x286=(x269*x281);
IkReal x287=(x276*x281);
IkReal x288=(x272*x281);
IkReal x289=(((cj4*x275))+(((-1.0)*x270*x271)));
IkReal x290=(((cj4*x270))+((sj4*x275)));
IkReal x291=((((-1.0)*x273))+(((-1.0)*cj8*x277)));
IkReal x292=(cj3*x289);
IkReal x293=(cj6*x291);
IkReal x294=(x272*x291);
IkReal x295=(x292+((sj6*x279)));
IkReal x296=((((-1.0)*sj5*x282))+x287);
IkReal x297=(((cj5*x282))+((x267*x281)));
IkReal x298=((((-1.0)*x268))+(((-1.0)*x274*x289)));
IkReal x299=(cj4*x297);
IkReal x300=(((x278*x282))+x287);
IkReal x301=(((x267*x291))+x285);
IkReal x302=(((x278*x281))+((x276*x291)));
IkReal x303=(((sj4*x296))+x299);
IkReal x304=(((x280*x297))+((cj4*x296)));
IkReal x305=((((-1.0)*x271*x297))+((cj4*x300)));
IkReal x306=(((sj4*x302))+((cj4*x301)));
IkReal x307=(((x280*x301))+((cj4*x302)));
IkReal x308=(((cj3*x304))+x286);
IkReal x309=(((x279*x304))+x288);
IkReal x310=(((cj3*x307))+((x269*x291)));
IkReal x311=(x294+(((-1.0)*x274*x307)));
new_r00=(((r20*x303))+((r10*x308))+((r00*x309)));
new_r01=(((r11*x308))+((r21*x303))+((r01*x309)));
new_r02=(((r02*((x288+(((-1.0)*x274*x305))))))+((r12*((((cj3*x305))+x286))))+((r22*((x299+((sj4*x300)))))));
new_r10=(((r20*x290))+((r00*(((((-1.0)*x268))+((x279*x289))))))+((r10*(((((-1.0)*sj6*x274))+x292)))));
new_r11=(((r01*x298))+((r21*x290))+((r11*x295)));
new_r12=(((r12*x295))+((r02*x298))+((r22*x290)));
new_r20=(((r20*x306))+((r00*x311))+((r10*x310)));
new_r21=(((r01*((((x279*x307))+x294))))+((r11*x310))+((r21*x306)));
new_r22=(((r22*x306))+((r02*x311))+((r12*x310)));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
cj10array[0]=new_r22;
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj10;
j9eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j9eval[2]=IKsign(sj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=new_r02;
j9eval[1]=sj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j11mul = 1;
j11=0;
j9mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].fmul = j11mul;
vinfos[11].freeind = 0;
vinfos[11].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 11;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j11mul = 1;
j11=0;
j9mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].fmul = j11mul;
vinfos[11].freeind = 0;
vinfos[11].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 11;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x312=new_r22*new_r22;
IkReal x313=((16.0)*new_r10);
IkReal x314=((16.0)*new_r01);
IkReal x315=((16.0)*new_r00);
IkReal x316=(new_r11*new_r22);
IkReal x317=((8.0)*new_r00);
IkReal x318=(x312*x313);
IkReal x319=(x312*x314);
j9eval[0]=((IKabs((x314+(((-1.0)*x319)))))+(IKabs((x319+(((-1.0)*x314)))))+(IKabs(((((-8.0)*x316))+((x312*x317)))))+(IKabs(((((-32.0)*new_r11*x312))+(((16.0)*new_r11))+((new_r22*x315)))))+(IKabs(((((32.0)*new_r00))+(((-1.0)*x312*x315))+(((-16.0)*x316)))))+(IKabs((x313+(((-1.0)*x318)))))+(IKabs((x318+(((-1.0)*x313)))))+(IKabs((((new_r22*x317))+(((-8.0)*new_r11))))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j9, j11]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j9evalpoly[1];
IkReal x320=new_r22*new_r22;
IkReal x321=((16.0)*new_r01);
IkReal x322=(new_r00*new_r22);
IkReal x323=(x320*x321);
IkReal x324=((((8.0)*x322))+(((-8.0)*new_r11)));
op[0]=x324;
op[1]=((((-1.0)*x321))+x323);
op[2]=((((-32.0)*new_r11*x320))+(((16.0)*new_r11))+(((16.0)*x322)));
op[3]=((((-1.0)*x323))+x321);
op[4]=x324;
polyroots4(op,zeror,numroots);
IkReal j9array[4], cj9array[4], sj9array[4], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[4]={true,true,true,true};
_nj9 = 4;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

IkReal x325=new_r22*new_r22;
IkReal x326=((16.0)*new_r10);
IkReal x327=(new_r11*new_r22);
IkReal x328=((8.0)*x327);
IkReal x329=(new_r00*x325);
IkReal x330=((8.0)*x329);
IkReal x331=(x325*x326);
j9evalpoly[0]=((((htj9*htj9*htj9*htj9)*(((((-1.0)*x328))+x330))))+(((htj9*htj9*htj9)*((x326+(((-1.0)*x331))))))+(((-1.0)*x328))+x330+(((htj9*htj9)*(((((32.0)*new_r00))+(((-16.0)*x327))+(((-16.0)*x329))))))+((htj9*(((((-1.0)*x326))+x331)))));
if( IKabs(j9evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j11eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x332=new_r22*new_r22;
IkReal x333=cj9*cj9;
IkReal x334=(new_r22*sj9);
IkReal x335=(((x332*x333))+(((-1.0)*x332))+(((-1.0)*x333)));
j11eval[0]=x335;
j11eval[1]=((IKabs(((((-1.0)*cj9*new_r00))+((new_r01*x334)))))+(IKabs((((new_r00*x334))+((cj9*new_r01))))));
j11eval[2]=IKsign(x335);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=new_r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x336=IKsin(j11);
IkReal x337=IKcos(j11);
evalcond[0]=(x336+new_r11);
evalcond[1]=((-1.0)*x336);
evalcond[2]=((-1.0)*x337);
evalcond[3]=((((-1.0)*x337))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x338=IKsin(j11);
IkReal x339=IKcos(j11);
evalcond[0]=((-1.0)*x338);
evalcond[1]=((-1.0)*x339);
evalcond[2]=(x338+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x339))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x340=new_r22*new_r22;
CheckValue<IkReal> x341=IKPowWithIntegerCheck(((-1.0)+x340),-1);
if(!x341.valid){
continue;
}
if(((x340*(x341.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x340*(x341.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj9)))))+(IKabs(((((-1.0)*gconst46))+cj9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x342=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
sj9=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
cj9=gconst46;
if( (gconst46) < -1-IKFAST_SINCOS_THRESH || (gconst46) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=IKacos(gconst46);
CheckValue<IkReal> x343=IKPowWithIntegerCheck(((-1.0)+x342),-1);
if(!x343.valid){
continue;
}
if(((x342*(x343.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x342*(x343.value)));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
CheckValue<IkReal> x344=IKPowWithIntegerCheck(gconst46,-1);
if(!x344.valid){
continue;
}
if( IKabs(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))))+IKsqr((new_r00*(x344.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))), (new_r00*(x344.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x345=IKsin(j11);
IkReal x346=IKcos(j11);
IkReal x347=((1.0)*x346);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x348=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
evalcond[0]=((-1.0)*x345);
evalcond[1]=((-1.0)*x346);
evalcond[2]=(((gconst46*x345))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x347))+new_r00);
evalcond[4]=(((x345*x348))+new_r11);
evalcond[5]=((((-1.0)*x347*x348))+new_r10);
evalcond[6]=(((gconst46*new_r01))+((new_r11*x348))+x345);
evalcond[7]=(((gconst46*new_r00))+((new_r10*x348))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x349 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x349.valid){
continue;
}
CheckValue<IkReal> x350=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x350.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x349.value)+(((1.5707963267949)*(x350.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x351=IKsin(j11);
IkReal x352=IKcos(j11);
IkReal x353=((1.0)*x352);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x354=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
evalcond[0]=((-1.0)*x351);
evalcond[1]=((-1.0)*x352);
evalcond[2]=(((gconst46*x351))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x353))+new_r00);
evalcond[4]=(((x351*x354))+new_r11);
evalcond[5]=((((-1.0)*x353*x354))+new_r10);
evalcond[6]=(((gconst46*new_r01))+x351+((new_r11*x354)));
evalcond[7]=(((gconst46*new_r00))+(((-1.0)*x353))+((new_r10*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x355=new_r22*new_r22;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(((-1.0)+x355),-1);
if(!x356.valid){
continue;
}
if(((x355*(x356.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x355*(x356.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst46))+cj9)))+(IKabs(((1.0)+(IKsign(sj9)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x357=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
sj9=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))))));
cj9=gconst46;
if( (gconst46) < -1-IKFAST_SINCOS_THRESH || (gconst46) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=((-1.0)*(IKacos(gconst46)));
CheckValue<IkReal> x358=IKPowWithIntegerCheck(((-1.0)+x357),-1);
if(!x358.valid){
continue;
}
if(((x357*(x358.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x357*(x358.value)));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
CheckValue<IkReal> x359=IKPowWithIntegerCheck(gconst46,-1);
if(!x359.valid){
continue;
}
if( IKabs(((((-1.0)*gconst46*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x359.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst46*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))))+IKsqr((new_r00*(x359.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst46*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))), (new_r00*(x359.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x360=IKsin(j11);
IkReal x361=IKcos(j11);
IkReal x362=((1.0)*x361);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x363=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
IkReal x364=((1.0)*x363);
evalcond[0]=((-1.0)*x360);
evalcond[1]=((-1.0)*x361);
evalcond[2]=(((gconst46*x360))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x362))+new_r00);
evalcond[4]=(((x361*x363))+new_r10);
evalcond[5]=((((-1.0)*x360*x364))+new_r11);
evalcond[6]=(((gconst46*new_r01))+x360+(((-1.0)*new_r11*x364)));
evalcond[7]=(((gconst46*new_r00))+(((-1.0)*x362))+(((-1.0)*new_r10*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
CheckValue<IkReal> x366=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x366.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x365.value)+(((1.5707963267949)*(x366.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x367=IKsin(j11);
IkReal x368=IKcos(j11);
IkReal x369=((1.0)*x368);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x370=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
IkReal x371=((1.0)*x370);
evalcond[0]=((-1.0)*x367);
evalcond[1]=((-1.0)*x368);
evalcond[2]=(((gconst46*x367))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x369))+new_r00);
evalcond[4]=(new_r10+((x368*x370)));
evalcond[5]=((((-1.0)*x367*x371))+new_r11);
evalcond[6]=(((gconst46*new_r01))+x367+(((-1.0)*new_r11*x371)));
evalcond[7]=(((gconst46*new_r00))+(((-1.0)*x369))+(((-1.0)*new_r10*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x372=new_r22*new_r22;
CheckValue<IkReal> x373=IKPowWithIntegerCheck(((-1.0)+x372),-1);
if(!x373.valid){
continue;
}
if(((x372*(x373.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x372*(x373.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj9)))))+(IKabs(((((-1.0)*gconst47))+cj9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x374=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
sj9=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
cj9=gconst47;
if( (gconst47) < -1-IKFAST_SINCOS_THRESH || (gconst47) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=IKacos(gconst47);
CheckValue<IkReal> x375=IKPowWithIntegerCheck(((-1.0)+x374),-1);
if(!x375.valid){
continue;
}
if(((x374*(x375.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x374*(x375.value)))));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
CheckValue<IkReal> x376=IKPowWithIntegerCheck(gconst47,-1);
if(!x376.valid){
continue;
}
if( IKabs(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x376.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))))+IKsqr((new_r00*(x376.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))), (new_r00*(x376.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x377=IKsin(j11);
IkReal x378=IKcos(j11);
IkReal x379=((1.0)*x378);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x380=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
evalcond[0]=((-1.0)*x377);
evalcond[1]=((-1.0)*x378);
evalcond[2]=(((gconst47*x377))+new_r01);
evalcond[3]=((((-1.0)*gconst47*x379))+new_r00);
evalcond[4]=(((x377*x380))+new_r11);
evalcond[5]=((((-1.0)*x379*x380))+new_r10);
evalcond[6]=(x377+((new_r11*x380))+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*x379))+((new_r10*x380))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x381 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382=IKPowWithIntegerCheck(IKsign(gconst47),-1);
if(!x382.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x381.value)+(((1.5707963267949)*(x382.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x383=IKsin(j11);
IkReal x384=IKcos(j11);
IkReal x385=((1.0)*x384);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x386=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
evalcond[0]=((-1.0)*x383);
evalcond[1]=((-1.0)*x384);
evalcond[2]=(((gconst47*x383))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst47*x385)));
evalcond[4]=(((x383*x386))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x385*x386)));
evalcond[6]=(x383+((new_r11*x386))+((gconst47*new_r01)));
evalcond[7]=(((new_r10*x386))+(((-1.0)*x385))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x387=new_r22*new_r22;
CheckValue<IkReal> x388=IKPowWithIntegerCheck(((-1.0)+x387),-1);
if(!x388.valid){
continue;
}
if(((x387*(x388.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x387*(x388.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst47))+cj9)))+(IKabs(((1.0)+(IKsign(sj9)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x389=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
sj9=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))))));
cj9=gconst47;
if( (gconst47) < -1-IKFAST_SINCOS_THRESH || (gconst47) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=((-1.0)*(IKacos(gconst47)));
CheckValue<IkReal> x390=IKPowWithIntegerCheck(((-1.0)+x389),-1);
if(!x390.valid){
continue;
}
if(((x389*(x390.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x389*(x390.value)))));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
CheckValue<IkReal> x391=IKPowWithIntegerCheck(gconst47,-1);
if(!x391.valid){
continue;
}
if( IKabs(((((-1.0)*gconst47*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x391.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst47*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))))+IKsqr((new_r00*(x391.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst47*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))), (new_r00*(x391.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x392=IKsin(j11);
IkReal x393=IKcos(j11);
IkReal x394=((1.0)*x393);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x395=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
IkReal x396=((1.0)*x395);
evalcond[0]=((-1.0)*x392);
evalcond[1]=((-1.0)*x393);
evalcond[2]=(((gconst47*x392))+new_r01);
evalcond[3]=((((-1.0)*gconst47*x394))+new_r00);
evalcond[4]=(new_r10+((x393*x395)));
evalcond[5]=(new_r11+(((-1.0)*x392*x396)));
evalcond[6]=(x392+(((-1.0)*new_r11*x396))+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*x394))+(((-1.0)*new_r10*x396))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x397 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x397.valid){
continue;
}
CheckValue<IkReal> x398=IKPowWithIntegerCheck(IKsign(gconst47),-1);
if(!x398.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x397.value)+(((1.5707963267949)*(x398.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x399=IKsin(j11);
IkReal x400=IKcos(j11);
IkReal x401=((1.0)*x400);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x402=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
IkReal x403=((1.0)*x402);
evalcond[0]=((-1.0)*x399);
evalcond[1]=((-1.0)*x400);
evalcond[2]=(((gconst47*x399))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst47*x401)));
evalcond[4]=(new_r10+((x400*x402)));
evalcond[5]=((((-1.0)*x399*x403))+new_r11);
evalcond[6]=(x399+(((-1.0)*new_r11*x403))+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x403))+(((-1.0)*x401))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x404=(new_r11*new_r22);
IkReal x405=((1.0)*cj9*new_r01);
CheckValue<IkReal> x406=IKPowWithIntegerCheck(cj9,-1);
if(!x406.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*x405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x406.value)*((((x404*(cj9*cj9)))+(((-1.0)*new_r22*sj9*x405))+new_r00+(((-1.0)*x404)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*x405))))+IKsqr(((x406.value)*((((x404*(cj9*cj9)))+(((-1.0)*new_r22*sj9*x405))+new_r00+(((-1.0)*x404))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*x405))), ((x406.value)*((((x404*(cj9*cj9)))+(((-1.0)*new_r22*sj9*x405))+new_r00+(((-1.0)*x404))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x407=IKsin(j11);
IkReal x408=IKcos(j11);
IkReal x409=(cj9*new_r10);
IkReal x410=((1.0)*sj9);
IkReal x411=(cj9*new_r11);
IkReal x412=((1.0)*x408);
IkReal x413=(sj9*x407);
IkReal x414=(cj9*x407);
IkReal x415=((1.0)*x407);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x407);
evalcond[1]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x412)));
evalcond[2]=(x414+new_r01+((new_r22*sj9*x408)));
evalcond[3]=((((-1.0)*cj9*x412))+((new_r22*x413))+new_r00);
evalcond[4]=((((-1.0)*cj9*new_r22*x412))+x413+new_r11);
evalcond[5]=(x409+(((-1.0)*new_r00*x410))+(((-1.0)*new_r22*x415)));
evalcond[6]=(x411+(((-1.0)*new_r22*x412))+(((-1.0)*new_r01*x410)));
evalcond[7]=((((-1.0)*new_r22*x414))+new_r10+(((-1.0)*x408*x410)));
evalcond[8]=(((new_r22*x409))+(((-1.0)*x415))+(((-1.0)*new_r00*new_r22*x410)));
evalcond[9]=(((new_r22*x411))+(((-1.0)*new_r01*new_r22*x410))+(((-1.0)*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x416=((1.0)*new_r01);
CheckValue<IkReal> x417=IKPowWithIntegerCheck(new_r22,-1);
if(!x417.valid){
continue;
}
if( IKabs(((((-1.0)*cj9*x416))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x417.value)*(((((-1.0)*sj9*x416))+((cj9*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x416))+(((-1.0)*new_r11*sj9))))+IKsqr(((x417.value)*(((((-1.0)*sj9*x416))+((cj9*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x416))+(((-1.0)*new_r11*sj9))), ((x417.value)*(((((-1.0)*sj9*x416))+((cj9*new_r11))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x418=IKsin(j11);
IkReal x419=IKcos(j11);
IkReal x420=(cj9*new_r10);
IkReal x421=((1.0)*sj9);
IkReal x422=(cj9*new_r11);
IkReal x423=((1.0)*x419);
IkReal x424=(sj9*x418);
IkReal x425=(cj9*x418);
IkReal x426=((1.0)*x418);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x418);
evalcond[1]=(((new_r10*sj9))+(((-1.0)*x423))+((cj9*new_r00)));
evalcond[2]=(x425+new_r01+((new_r22*sj9*x419)));
evalcond[3]=(((new_r22*x424))+(((-1.0)*cj9*x423))+new_r00);
evalcond[4]=((((-1.0)*cj9*new_r22*x423))+x424+new_r11);
evalcond[5]=((((-1.0)*new_r22*x426))+(((-1.0)*new_r00*x421))+x420);
evalcond[6]=((((-1.0)*new_r22*x423))+x422+(((-1.0)*new_r01*x421)));
evalcond[7]=((((-1.0)*new_r22*x425))+(((-1.0)*x419*x421))+new_r10);
evalcond[8]=(((new_r22*x420))+(((-1.0)*x426))+(((-1.0)*new_r00*new_r22*x421)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x421))+((new_r22*x422))+(((-1.0)*x423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x427=new_r22*new_r22;
IkReal x428=cj9*cj9;
IkReal x429=(new_r22*sj9);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(IKsign(((((-1.0)*x427))+(((-1.0)*x428))+((x427*x428)))),-1);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431 = IKatan2WithCheck(IkReal((((cj9*new_r01))+((new_r00*x429)))),IkReal(((((-1.0)*cj9*new_r00))+((new_r01*x429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x431.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x430.value)))+(x431.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x432=IKsin(j11);
IkReal x433=IKcos(j11);
IkReal x434=(cj9*new_r10);
IkReal x435=((1.0)*sj9);
IkReal x436=(cj9*new_r11);
IkReal x437=((1.0)*x433);
IkReal x438=(sj9*x432);
IkReal x439=(cj9*x432);
IkReal x440=((1.0)*x432);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x432);
evalcond[1]=((((-1.0)*x437))+((new_r10*sj9))+((cj9*new_r00)));
evalcond[2]=(((new_r22*sj9*x433))+x439+new_r01);
evalcond[3]=((((-1.0)*cj9*x437))+new_r00+((new_r22*x438)));
evalcond[4]=(x438+new_r11+(((-1.0)*cj9*new_r22*x437)));
evalcond[5]=((((-1.0)*new_r00*x435))+x434+(((-1.0)*new_r22*x440)));
evalcond[6]=((((-1.0)*new_r01*x435))+x436+(((-1.0)*new_r22*x437)));
evalcond[7]=((((-1.0)*x433*x435))+(((-1.0)*new_r22*x439))+new_r10);
evalcond[8]=((((-1.0)*x440))+(((-1.0)*new_r00*new_r22*x435))+((new_r22*x434)));
evalcond[9]=((((-1.0)*x437))+(((-1.0)*new_r01*new_r22*x435))+((new_r22*x436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x442=IKPowWithIntegerCheck(sj10,-1);
if(!x442.valid){
continue;
}
IkReal x441=x442.value;
CheckValue<IkReal> x443=IKPowWithIntegerCheck(new_r02,-1);
if(!x443.valid){
continue;
}
if( IKabs((x441*(x443.value)*(((1.0)+(((-1.0)*(cj10*cj10)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x441)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x441*(x443.value)*(((1.0)+(((-1.0)*(cj10*cj10)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x441))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x441*(x443.value)*(((1.0)+(((-1.0)*(cj10*cj10)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x441));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x444=IKsin(j9);
IkReal x445=IKcos(j9);
IkReal x446=(new_r12*x445);
IkReal x447=(sj10*x444);
IkReal x448=((1.0)*sj10*x445);
IkReal x449=((1.0)*new_r02*x444);
evalcond[0]=(((sj10*x445))+new_r12);
evalcond[1]=((((-1.0)*x447))+new_r02);
evalcond[2]=(((new_r12*x444))+((new_r02*x445)));
evalcond[3]=((((-1.0)*x449))+sj10+x446);
evalcond[4]=(((cj10*x446))+((new_r22*sj10))+(((-1.0)*cj10*x449)));
evalcond[5]=(((new_r00*x447))+((cj10*new_r20))+(((-1.0)*new_r10*x448)));
evalcond[6]=(((cj10*new_r21))+((new_r01*x447))+(((-1.0)*new_r11*x448)));
evalcond[7]=((-1.0)+((cj10*new_r22))+(((-1.0)*sj10*x446))+((new_r02*x447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=cj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x450=((1.0)*sj9);
if( IKabs(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj9*new_r00))+(((-1.0)*new_r01*x450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x450))))+IKsqr((((cj9*new_r00))+(((-1.0)*new_r01*x450))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x450))), (((cj9*new_r00))+(((-1.0)*new_r01*x450))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x451=IKcos(j11);
IkReal x452=IKsin(j11);
IkReal x453=((1.0)*sj9);
IkReal x454=(sj9*x452);
IkReal x455=((1.0)*x451);
IkReal x456=((1.0)*x452);
IkReal x457=(cj9*x455);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x452);
evalcond[1]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x455)));
evalcond[2]=(((sj9*x451))+((cj9*x452))+new_r01);
evalcond[3]=((((-1.0)*x457))+x454+new_r00);
evalcond[4]=((((-1.0)*x457))+x454+new_r11);
evalcond[5]=(((cj9*new_r10))+(((-1.0)*new_r00*x453))+(((-1.0)*x456)));
evalcond[6]=((((-1.0)*new_r01*x453))+((cj9*new_r11))+(((-1.0)*x455)));
evalcond[7]=((((-1.0)*cj9*x456))+(((-1.0)*x451*x453))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x458=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x458))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x458))+(((-1.0)*new_r11*sj9))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x458))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x458))+(((-1.0)*new_r11*sj9))), (((new_r01*sj9))+(((-1.0)*new_r11*x458))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x459=IKsin(j11);
IkReal x460=IKcos(j11);
IkReal x461=((1.0)*sj9);
IkReal x462=(cj9*x459);
IkReal x463=((1.0)*x460);
IkReal x464=(x460*x461);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x459);
evalcond[1]=(((cj9*new_r10))+(((-1.0)*new_r00*x461))+x459);
evalcond[2]=(((cj9*new_r11))+(((-1.0)*new_r01*x461))+x460);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x463)));
evalcond[4]=(((sj9*x459))+((cj9*x460))+new_r11);
evalcond[5]=((((-1.0)*x464))+x462+new_r01);
evalcond[6]=((((-1.0)*x464))+x462+new_r10);
evalcond[7]=((((-1.0)*x459*x461))+(((-1.0)*cj9*x463))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x465=IKsin(j11);
IkReal x466=IKcos(j11);
IkReal x467=((1.0)*x466);
evalcond[0]=((((-1.0)*x465))+new_r20);
evalcond[1]=((((-1.0)*x467))+new_r21);
evalcond[2]=(((cj9*x465))+new_r01);
evalcond[3]=(new_r11+((sj9*x465)));
evalcond[4]=((((-1.0)*cj9*x467))+new_r00);
evalcond[5]=((((-1.0)*sj9*x467))+new_r10);
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x465);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x468=IKsin(j11);
IkReal x469=IKcos(j11);
IkReal x470=((1.0)*x469);
evalcond[0]=(x468+new_r20);
evalcond[1]=(x469+new_r21);
evalcond[2]=(((cj9*x468))+new_r01);
evalcond[3]=(new_r11+((sj9*x468)));
evalcond[4]=((((-1.0)*cj9*x470))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*sj9*x470)));
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x468);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x471=IKsin(j11);
IkReal x472=IKcos(j11);
IkReal x473=((1.0)*x472);
IkReal x474=((1.0)*x471);
evalcond[0]=(x471+new_r01);
evalcond[1]=(((new_r12*x471))+new_r20);
evalcond[2]=(((new_r12*x472))+new_r21);
evalcond[3]=((((-1.0)*x473))+new_r00);
evalcond[4]=((((-1.0)*cj10*x473))+new_r11);
evalcond[5]=((((-1.0)*cj10*x474))+new_r10);
evalcond[6]=(((cj10*new_r10))+(((-1.0)*x474))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r11))+(((-1.0)*x473))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x475=IKsin(j11);
IkReal x476=IKcos(j11);
IkReal x477=((1.0)*cj10);
IkReal x478=((1.0)*x476);
IkReal x479=((1.0)*x475);
evalcond[0]=(x475+(((-1.0)*new_r01)));
evalcond[1]=(((cj10*x476))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x479))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x478))+new_r21);
evalcond[4]=((((-1.0)*x478))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x475*x477))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x479))+(((-1.0)*new_r10*x477))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*x478))+(((-1.0)*new_r11*x477))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x480=IKcos(j11);
IkReal x481=IKsin(j11);
IkReal x482=((1.0)*cj10);
IkReal x483=((1.0)*x480);
IkReal x484=((1.0)*x481);
evalcond[0]=(x481+new_r11);
evalcond[1]=((((-1.0)*x483))+new_r10);
evalcond[2]=(new_r01+((cj10*x480)));
evalcond[3]=(new_r00+((cj10*x481)));
evalcond[4]=((((-1.0)*new_r02*x484))+new_r20);
evalcond[5]=((((-1.0)*new_r02*x483))+new_r21);
evalcond[6]=((((-1.0)*x484))+(((-1.0)*new_r00*x482))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r01*x482))+(((-1.0)*x483))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=IKsign(new_r02);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x485=IKsin(j11);
IkReal x486=((1.0)*(IKcos(j11)));
evalcond[0]=((((-1.0)*x485))+new_r20);
evalcond[1]=((((-1.0)*x486))+new_r21);
evalcond[2]=(x485+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x486))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x487=IKsin(j11);
IkReal x488=IKcos(j11);
evalcond[0]=(x487+new_r20);
evalcond[1]=(x488+new_r21);
evalcond[2]=(x487+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x488))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x489=IKsin(j11);
IkReal x490=IKcos(j11);
IkReal x491=((1.0)*x490);
IkReal x492=((1.0)*x489);
evalcond[0]=(x489+(((-1.0)*new_r11)));
evalcond[1]=(new_r01+(((-1.0)*cj10*x491)));
evalcond[2]=(new_r00+(((-1.0)*cj10*x492)));
evalcond[3]=((((-1.0)*x491))+(((-1.0)*new_r10)));
evalcond[4]=((((-1.0)*x492))+((cj10*new_r00)));
evalcond[5]=((((-1.0)*x491))+((cj10*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x493=IKcos(j11);
IkReal x494=IKsin(j11);
IkReal x495=((-1.0)*x494);
IkReal x496=((-1.0)*x493);
evalcond[0]=x495;
evalcond[1]=x496;
evalcond[2]=(new_r22*x496);
evalcond[3]=(new_r22*x495);
evalcond[4]=(x494+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x493))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x497=IKPowWithIntegerCheck(new_r02,-1);
if(!x497.valid){
continue;
}
CheckValue<IkReal> x498=IKPowWithIntegerCheck(cj10,-1);
if(!x498.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x497.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x497.value)))+IKsqr((new_r01*(x498.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20*(x497.value)), (new_r01*(x498.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x499=IKsin(j11);
IkReal x500=IKcos(j11);
IkReal x501=((1.0)*x500);
IkReal x502=((1.0)*x499);
evalcond[0]=(((new_r02*x499))+new_r20);
evalcond[1]=(((new_r02*x500))+new_r21);
evalcond[2]=(x499+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x501))+new_r01);
evalcond[4]=((((-1.0)*cj10*x502))+new_r00);
evalcond[5]=((((-1.0)*x501))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x502))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x501))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x503=IKPowWithIntegerCheck(new_r02,-1);
if(!x503.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x503.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x503.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x503.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x504=IKsin(j11);
IkReal x505=IKcos(j11);
IkReal x506=((1.0)*x505);
IkReal x507=((1.0)*x504);
evalcond[0]=(((new_r02*x504))+new_r20);
evalcond[1]=(((new_r02*x505))+new_r21);
evalcond[2]=(x504+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x506))+new_r01);
evalcond[4]=((((-1.0)*cj10*x507))+new_r00);
evalcond[5]=((((-1.0)*x506))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x507))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x506))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x508=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x508.valid){
continue;
}
CheckValue<IkReal> x509 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x509.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x508.value)))+(x509.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x510=IKsin(j11);
IkReal x511=IKcos(j11);
IkReal x512=((1.0)*x511);
IkReal x513=((1.0)*x510);
evalcond[0]=(((new_r02*x510))+new_r20);
evalcond[1]=(((new_r02*x511))+new_r21);
evalcond[2]=(x510+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x512))+new_r01);
evalcond[4]=((((-1.0)*cj10*x513))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x512)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x513))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+((new_r21*sj10))+(((-1.0)*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=1.0;
if( IKabs(j11eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j11]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j11array[2], cj11array[2], sj11array[2], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[2]={true,true};
_nj11 = 2;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(sj10,-1);
if(!x515.valid){
continue;
}
IkReal x514=x515.value;
CheckValue<IkReal> x516=IKPowWithIntegerCheck(cj10,-1);
if(!x516.valid){
continue;
}
CheckValue<IkReal> x517=IKPowWithIntegerCheck(sj9,-1);
if(!x517.valid){
continue;
}
if( IKabs((new_r20*x514)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x514*(x516.value)*(x517.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x514))+IKsqr((x514*(x516.value)*(x517.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x514), (x514*(x516.value)*(x517.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x518=IKsin(j11);
IkReal x519=IKcos(j11);
IkReal x520=((1.0)*sj9);
IkReal x521=(cj10*sj9);
IkReal x522=(cj9*new_r11);
IkReal x523=(cj10*cj9);
IkReal x524=((1.0)*x519);
IkReal x525=((1.0)*x518);
evalcond[0]=((((-1.0)*sj10*x525))+new_r20);
evalcond[1]=((((-1.0)*sj10*x524))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x518);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x524)));
evalcond[4]=(((x519*x521))+((cj9*x518))+new_r01);
evalcond[5]=((((-1.0)*cj9*x524))+((x518*x521))+new_r00);
evalcond[6]=((((-1.0)*x523*x524))+((sj9*x518))+new_r11);
evalcond[7]=((((-1.0)*cj10*x525))+((cj9*new_r10))+(((-1.0)*new_r00*x520)));
evalcond[8]=((((-1.0)*cj10*x524))+(((-1.0)*new_r01*x520))+x522);
evalcond[9]=((((-1.0)*x523*x525))+new_r10+(((-1.0)*x519*x520)));
evalcond[10]=((((-1.0)*cj10*new_r00*x520))+(((-1.0)*x525))+((new_r10*x523))+((new_r20*sj10)));
evalcond[11]=(((cj10*x522))+(((-1.0)*x524))+((new_r21*sj10))+(((-1.0)*cj10*new_r01*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x527=IKPowWithIntegerCheck(sj10,-1);
if(!x527.valid){
continue;
}
IkReal x526=x527.value;
CheckValue<IkReal> x528=IKPowWithIntegerCheck(cj9,-1);
if(!x528.valid){
continue;
}
if( IKabs((new_r20*x526)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x526*(x528.value)*((((cj10*new_r20*sj9))+((new_r00*sj10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x526))+IKsqr((x526*(x528.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x526), (x526*(x528.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x529=IKsin(j11);
IkReal x530=IKcos(j11);
IkReal x531=((1.0)*sj9);
IkReal x532=(cj10*sj9);
IkReal x533=(cj9*new_r11);
IkReal x534=(cj10*cj9);
IkReal x535=((1.0)*x530);
IkReal x536=((1.0)*x529);
evalcond[0]=((((-1.0)*sj10*x536))+new_r20);
evalcond[1]=((((-1.0)*sj10*x535))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x529);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x535)));
evalcond[4]=(((cj9*x529))+new_r01+((x530*x532)));
evalcond[5]=((((-1.0)*cj9*x535))+new_r00+((x529*x532)));
evalcond[6]=((((-1.0)*x534*x535))+((sj9*x529))+new_r11);
evalcond[7]=((((-1.0)*cj10*x536))+(((-1.0)*new_r00*x531))+((cj9*new_r10)));
evalcond[8]=((((-1.0)*cj10*x535))+(((-1.0)*new_r01*x531))+x533);
evalcond[9]=((((-1.0)*x534*x536))+(((-1.0)*x530*x531))+new_r10);
evalcond[10]=((((-1.0)*cj10*new_r00*x531))+(((-1.0)*x536))+((new_r10*x534))+((new_r20*sj10)));
evalcond[11]=(((cj10*x533))+(((-1.0)*x535))+((new_r21*sj10))+(((-1.0)*cj10*new_r01*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x539=IKsin(j11);
IkReal x540=IKcos(j11);
IkReal x541=((1.0)*sj9);
IkReal x542=(cj10*sj9);
IkReal x543=(cj9*new_r11);
IkReal x544=(cj10*cj9);
IkReal x545=((1.0)*x540);
IkReal x546=((1.0)*x539);
evalcond[0]=((((-1.0)*sj10*x546))+new_r20);
evalcond[1]=((((-1.0)*sj10*x545))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x539);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x545)));
evalcond[4]=(((x540*x542))+((cj9*x539))+new_r01);
evalcond[5]=(((x539*x542))+(((-1.0)*cj9*x545))+new_r00);
evalcond[6]=((((-1.0)*x544*x545))+((sj9*x539))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x541))+(((-1.0)*cj10*x546))+((cj9*new_r10)));
evalcond[8]=((((-1.0)*cj10*x545))+(((-1.0)*new_r01*x541))+x543);
evalcond[9]=((((-1.0)*x544*x546))+(((-1.0)*x540*x541))+new_r10);
evalcond[10]=(((new_r10*x544))+(((-1.0)*cj10*new_r00*x541))+(((-1.0)*x546))+((new_r20*sj10)));
evalcond[11]=(((cj10*x543))+(((-1.0)*x545))+(((-1.0)*cj10*new_r01*x541))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x547=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x547.value)))+(x548.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x549=IKsin(j9);
IkReal x550=IKcos(j9);
IkReal x551=(new_r12*x550);
IkReal x552=(sj10*x549);
IkReal x553=((1.0)*sj10*x550);
IkReal x554=((1.0)*new_r02*x549);
evalcond[0]=(new_r12+((sj10*x550)));
evalcond[1]=((((-1.0)*x552))+new_r02);
evalcond[2]=(((new_r02*x550))+((new_r12*x549)));
evalcond[3]=(sj10+(((-1.0)*x554))+x551);
evalcond[4]=(((cj10*x551))+(((-1.0)*cj10*x554))+((new_r22*sj10)));
evalcond[5]=(((cj10*new_r20))+(((-1.0)*new_r10*x553))+((new_r00*x552)));
evalcond[6]=(((cj10*new_r21))+(((-1.0)*new_r11*x553))+((new_r01*x552)));
evalcond[7]=((-1.0)+((cj10*new_r22))+((new_r02*x552))+(((-1.0)*sj10*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=cj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x555=((1.0)*sj9);
if( IKabs(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj9*new_r00))+(((-1.0)*new_r01*x555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x555))))+IKsqr((((cj9*new_r00))+(((-1.0)*new_r01*x555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x555))), (((cj9*new_r00))+(((-1.0)*new_r01*x555))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x556=IKcos(j11);
IkReal x557=IKsin(j11);
IkReal x558=((1.0)*sj9);
IkReal x559=(sj9*x557);
IkReal x560=((1.0)*x556);
IkReal x561=((1.0)*x557);
IkReal x562=(cj9*x560);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x557);
evalcond[1]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x560)));
evalcond[2]=(((cj9*x557))+((sj9*x556))+new_r01);
evalcond[3]=(x559+new_r00+(((-1.0)*x562)));
evalcond[4]=(x559+new_r11+(((-1.0)*x562)));
evalcond[5]=(((cj9*new_r10))+(((-1.0)*new_r00*x558))+(((-1.0)*x561)));
evalcond[6]=((((-1.0)*new_r01*x558))+((cj9*new_r11))+(((-1.0)*x560)));
evalcond[7]=((((-1.0)*x556*x558))+(((-1.0)*cj9*x561))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x563=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x563))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*new_r01*x563))), (((new_r01*sj9))+(((-1.0)*new_r11*x563))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x564=IKsin(j11);
IkReal x565=IKcos(j11);
IkReal x566=((1.0)*sj9);
IkReal x567=(cj9*x564);
IkReal x568=((1.0)*x565);
IkReal x569=(x565*x566);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x564);
evalcond[1]=((((-1.0)*new_r00*x566))+((cj9*new_r10))+x564);
evalcond[2]=(((cj9*new_r11))+x565+(((-1.0)*new_r01*x566)));
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x568)));
evalcond[4]=(new_r11+((cj9*x565))+((sj9*x564)));
evalcond[5]=(x567+new_r01+(((-1.0)*x569)));
evalcond[6]=(x567+new_r10+(((-1.0)*x569)));
evalcond[7]=((((-1.0)*x564*x566))+(((-1.0)*cj9*x568))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x570=IKsin(j11);
IkReal x571=IKcos(j11);
IkReal x572=((1.0)*x571);
evalcond[0]=((((-1.0)*x570))+new_r20);
evalcond[1]=((((-1.0)*x572))+new_r21);
evalcond[2]=(((cj9*x570))+new_r01);
evalcond[3]=(((sj9*x570))+new_r11);
evalcond[4]=((((-1.0)*cj9*x572))+new_r00);
evalcond[5]=((((-1.0)*sj9*x572))+new_r10);
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x570);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x573=IKsin(j11);
IkReal x574=IKcos(j11);
IkReal x575=((1.0)*x574);
evalcond[0]=(x573+new_r20);
evalcond[1]=(x574+new_r21);
evalcond[2]=(((cj9*x573))+new_r01);
evalcond[3]=(((sj9*x573))+new_r11);
evalcond[4]=((((-1.0)*cj9*x575))+new_r00);
evalcond[5]=((((-1.0)*sj9*x575))+new_r10);
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x573);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x576=IKsin(j11);
IkReal x577=IKcos(j11);
IkReal x578=((1.0)*x577);
IkReal x579=((1.0)*x576);
evalcond[0]=(x576+new_r01);
evalcond[1]=(((new_r12*x576))+new_r20);
evalcond[2]=(((new_r12*x577))+new_r21);
evalcond[3]=((((-1.0)*x578))+new_r00);
evalcond[4]=((((-1.0)*cj10*x578))+new_r11);
evalcond[5]=((((-1.0)*cj10*x579))+new_r10);
evalcond[6]=(((cj10*new_r10))+(((-1.0)*x579))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r11))+(((-1.0)*x578))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x580=IKsin(j11);
IkReal x581=IKcos(j11);
IkReal x582=((1.0)*cj10);
IkReal x583=((1.0)*x581);
IkReal x584=((1.0)*x580);
evalcond[0]=(x580+(((-1.0)*new_r01)));
evalcond[1]=(((cj10*x581))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x584))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x583))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x583)));
evalcond[5]=((((-1.0)*x580*x582))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r10*x582))+(((-1.0)*x584))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r11*x582))+((new_r21*sj10))+(((-1.0)*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x585=IKcos(j11);
IkReal x586=IKsin(j11);
IkReal x587=((1.0)*cj10);
IkReal x588=((1.0)*x585);
IkReal x589=((1.0)*x586);
evalcond[0]=(x586+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x588)));
evalcond[2]=(((cj10*x585))+new_r01);
evalcond[3]=(((cj10*x586))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x589))+new_r20);
evalcond[5]=((((-1.0)*new_r02*x588))+new_r21);
evalcond[6]=((((-1.0)*x589))+((new_r20*sj10))+(((-1.0)*new_r00*x587)));
evalcond[7]=((((-1.0)*new_r01*x587))+((new_r21*sj10))+(((-1.0)*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=IKsign(new_r02);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x590=IKsin(j11);
IkReal x591=((1.0)*(IKcos(j11)));
evalcond[0]=((((-1.0)*x590))+new_r20);
evalcond[1]=((((-1.0)*x591))+new_r21);
evalcond[2]=(x590+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x591))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x592=IKsin(j11);
IkReal x593=IKcos(j11);
evalcond[0]=(x592+new_r20);
evalcond[1]=(x593+new_r21);
evalcond[2]=(x592+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x593))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x594=IKsin(j11);
IkReal x595=IKcos(j11);
IkReal x596=((1.0)*x595);
IkReal x597=((1.0)*x594);
evalcond[0]=(x594+(((-1.0)*new_r11)));
evalcond[1]=(new_r01+(((-1.0)*cj10*x596)));
evalcond[2]=(new_r00+(((-1.0)*cj10*x597)));
evalcond[3]=((((-1.0)*x596))+(((-1.0)*new_r10)));
evalcond[4]=(((cj10*new_r00))+(((-1.0)*x597)));
evalcond[5]=(((cj10*new_r01))+(((-1.0)*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x598=IKcos(j11);
IkReal x599=IKsin(j11);
IkReal x600=((-1.0)*x599);
IkReal x601=((-1.0)*x598);
evalcond[0]=x600;
evalcond[1]=x601;
evalcond[2]=(new_r22*x601);
evalcond[3]=(new_r22*x600);
evalcond[4]=(x599+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x598))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x602=IKPowWithIntegerCheck(new_r02,-1);
if(!x602.valid){
continue;
}
CheckValue<IkReal> x603=IKPowWithIntegerCheck(cj10,-1);
if(!x603.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x602.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x603.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x602.value)))+IKsqr((new_r01*(x603.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20*(x602.value)), (new_r01*(x603.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x604=IKsin(j11);
IkReal x605=IKcos(j11);
IkReal x606=((1.0)*x605);
IkReal x607=((1.0)*x604);
evalcond[0]=(((new_r02*x604))+new_r20);
evalcond[1]=(((new_r02*x605))+new_r21);
evalcond[2]=(x604+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x606))+new_r01);
evalcond[4]=((((-1.0)*cj10*x607))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x606)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x607))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+((new_r21*sj10))+(((-1.0)*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(new_r02,-1);
if(!x608.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x608.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x608.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x608.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x609=IKsin(j11);
IkReal x610=IKcos(j11);
IkReal x611=((1.0)*x610);
IkReal x612=((1.0)*x609);
evalcond[0]=(((new_r02*x609))+new_r20);
evalcond[1]=(((new_r02*x610))+new_r21);
evalcond[2]=(x609+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x611))+new_r01);
evalcond[4]=((((-1.0)*cj10*x612))+new_r00);
evalcond[5]=((((-1.0)*x611))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x612))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x611))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x613=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x613.valid){
continue;
}
CheckValue<IkReal> x614 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x614.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x613.value)))+(x614.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x615=IKsin(j11);
IkReal x616=IKcos(j11);
IkReal x617=((1.0)*x616);
IkReal x618=((1.0)*x615);
evalcond[0]=(((new_r02*x615))+new_r20);
evalcond[1]=(((new_r02*x616))+new_r21);
evalcond[2]=(x615+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x617))+new_r01);
evalcond[4]=((((-1.0)*cj10*x618))+new_r00);
evalcond[5]=((((-1.0)*x617))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x618))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x617))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=1.0;
if( IKabs(j11eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j11]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j11array[2], cj11array[2], sj11array[2], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[2]={true,true};
_nj11 = 2;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x620=IKPowWithIntegerCheck(sj10,-1);
if(!x620.valid){
continue;
}
IkReal x619=x620.value;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(cj10,-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(sj9,-1);
if(!x622.valid){
continue;
}
if( IKabs((new_r20*x619)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x619*(x621.value)*(x622.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x619))+IKsqr((x619*(x621.value)*(x622.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x619), (x619*(x621.value)*(x622.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x623=IKsin(j11);
IkReal x624=IKcos(j11);
IkReal x625=((1.0)*sj9);
IkReal x626=(cj10*sj9);
IkReal x627=(cj9*new_r11);
IkReal x628=(cj10*cj9);
IkReal x629=((1.0)*x624);
IkReal x630=((1.0)*x623);
evalcond[0]=(new_r20+(((-1.0)*sj10*x630)));
evalcond[1]=(new_r21+(((-1.0)*sj10*x629)));
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x623);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x629)));
evalcond[4]=(((x624*x626))+new_r01+((cj9*x623)));
evalcond[5]=((((-1.0)*cj9*x629))+new_r00+((x623*x626)));
evalcond[6]=(((sj9*x623))+(((-1.0)*x628*x629))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x625))+((cj9*new_r10))+(((-1.0)*cj10*x630)));
evalcond[8]=((((-1.0)*new_r01*x625))+(((-1.0)*cj10*x629))+x627);
evalcond[9]=((((-1.0)*x628*x630))+(((-1.0)*x624*x625))+new_r10);
evalcond[10]=((((-1.0)*x630))+(((-1.0)*cj10*new_r00*x625))+((new_r10*x628))+((new_r20*sj10)));
evalcond[11]=(((cj10*x627))+(((-1.0)*x629))+(((-1.0)*cj10*new_r01*x625))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x632=IKPowWithIntegerCheck(sj10,-1);
if(!x632.valid){
continue;
}
IkReal x631=x632.value;
CheckValue<IkReal> x633=IKPowWithIntegerCheck(cj9,-1);
if(!x633.valid){
continue;
}
if( IKabs((new_r20*x631)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x631*(x633.value)*((((cj10*new_r20*sj9))+((new_r00*sj10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x631))+IKsqr((x631*(x633.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x631), (x631*(x633.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x634=IKsin(j11);
IkReal x635=IKcos(j11);
IkReal x636=((1.0)*sj9);
IkReal x637=(cj10*sj9);
IkReal x638=(cj9*new_r11);
IkReal x639=(cj10*cj9);
IkReal x640=((1.0)*x635);
IkReal x641=((1.0)*x634);
evalcond[0]=((((-1.0)*sj10*x641))+new_r20);
evalcond[1]=((((-1.0)*sj10*x640))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x634);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x640)));
evalcond[4]=(((x635*x637))+new_r01+((cj9*x634)));
evalcond[5]=(((x634*x637))+(((-1.0)*cj9*x640))+new_r00);
evalcond[6]=(((sj9*x634))+(((-1.0)*x639*x640))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x636))+((cj9*new_r10))+(((-1.0)*cj10*x641)));
evalcond[8]=((((-1.0)*new_r01*x636))+(((-1.0)*cj10*x640))+x638);
evalcond[9]=((((-1.0)*x639*x641))+(((-1.0)*x635*x636))+new_r10);
evalcond[10]=((((-1.0)*x641))+(((-1.0)*cj10*new_r00*x636))+((new_r10*x639))+((new_r20*sj10)));
evalcond[11]=(((cj10*x638))+(((-1.0)*x640))+(((-1.0)*cj10*new_r01*x636))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x643.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x642.value)))+(x643.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x644=IKsin(j11);
IkReal x645=IKcos(j11);
IkReal x646=((1.0)*sj9);
IkReal x647=(cj10*sj9);
IkReal x648=(cj9*new_r11);
IkReal x649=(cj10*cj9);
IkReal x650=((1.0)*x645);
IkReal x651=((1.0)*x644);
evalcond[0]=((((-1.0)*sj10*x651))+new_r20);
evalcond[1]=((((-1.0)*sj10*x650))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x644);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x650)));
evalcond[4]=(((cj9*x644))+((x645*x647))+new_r01);
evalcond[5]=(((x644*x647))+(((-1.0)*cj9*x650))+new_r00);
evalcond[6]=(((sj9*x644))+(((-1.0)*x649*x650))+new_r11);
evalcond[7]=(((cj9*new_r10))+(((-1.0)*cj10*x651))+(((-1.0)*new_r00*x646)));
evalcond[8]=((((-1.0)*cj10*x650))+(((-1.0)*new_r01*x646))+x648);
evalcond[9]=((((-1.0)*x649*x651))+(((-1.0)*x645*x646))+new_r10);
evalcond[10]=((((-1.0)*x651))+(((-1.0)*cj10*new_r00*x646))+((new_r10*x649))+((new_r20*sj10)));
evalcond[11]=((((-1.0)*x650))+((cj10*x648))+(((-1.0)*cj10*new_r01*x646))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x652=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x652.value)))+(x653.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x654=((1.0)*sj10);
evalcond[0]=(new_r20+(((-1.0)*x654*(IKsin(j11)))));
evalcond[1]=((((-1.0)*x654*(IKcos(j11))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj10;
j9eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j9eval[2]=IKsign(sj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=new_r11;
j9eval[1]=sj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x655=((1.0)*sj11);
if( IKabs(((((-1.0)*new_r00*x655))+(((-1.0)*cj11*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x655))+((cj11*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x655))+(((-1.0)*cj11*new_r01))))+IKsqr(((((-1.0)*new_r01*x655))+((cj11*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*x655))+(((-1.0)*cj11*new_r01))), ((((-1.0)*new_r01*x655))+((cj11*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x656=IKcos(j9);
IkReal x657=IKsin(j9);
IkReal x658=((1.0)*cj11);
IkReal x659=((1.0)*sj11);
IkReal x660=(sj11*x657);
IkReal x661=((1.0)*x657);
IkReal x662=(x656*x658);
evalcond[0]=(sj11+((new_r01*x656))+((new_r11*x657)));
evalcond[1]=(((cj11*x657))+new_r01+((sj11*x656)));
evalcond[2]=((((-1.0)*x662))+x660+new_r00);
evalcond[3]=((((-1.0)*x662))+x660+new_r11);
evalcond[4]=((((-1.0)*x658))+((new_r10*x657))+((new_r00*x656)));
evalcond[5]=((((-1.0)*x657*x658))+(((-1.0)*x656*x659))+new_r10);
evalcond[6]=((((-1.0)*x659))+((new_r10*x656))+(((-1.0)*new_r00*x661)));
evalcond[7]=((((-1.0)*x658))+((new_r11*x656))+(((-1.0)*new_r01*x661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x663=(((new_r11*sj11))+((cj11*new_r01)));
j9eval[0]=x663;
j9eval[1]=IKsign(x663);
j9eval[2]=((IKabs(((((-1.0)*cj11*sj11))+(((-1.0)*new_r01*new_r11)))))+(IKabs(((-1.0)+(new_r01*new_r01)+(cj11*cj11)))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x664=((1.0)*sj11);
IkReal x665=(((new_r10*new_r11))+((new_r00*new_r01)));
j9eval[0]=x665;
j9eval[1]=IKsign(x665);
j9eval[2]=((IKabs(((((-1.0)*new_r10*x664))+((new_r01*sj11)))))+(IKabs(((((-1.0)*new_r11*x664))+(((-1.0)*new_r00*x664))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x666=((1.0)*new_r11);
IkReal x667=((new_r01*new_r01)+(new_r11*new_r11));
j9eval[0]=x667;
j9eval[1]=IKsign(x667);
j9eval[2]=((IKabs(((((-1.0)*new_r01*sj11))+(((-1.0)*cj11*x666)))))+(IKabs(((((-1.0)*sj11*x666))+((cj11*new_r01))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
new_r01=0;
new_r11=0;
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
IkReal x668=x669.value;
j9array[0]=((-1.0)*x668);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x668)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j9))))+((new_r10*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x670=IKcos(j9);
IkReal x671=IKsin(j9);
IkReal x672=((1.0)*x671);
evalcond[0]=(x670+new_r11);
evalcond[1]=(new_r01+(((-1.0)*x672)));
evalcond[2]=((((-1.0)*x670))+new_r00);
evalcond[3]=(new_r10+(((-1.0)*x672)));
evalcond[4]=(((new_r11*x671))+((new_r01*x670)));
evalcond[5]=((-1.0)+((new_r00*x670))+((new_r10*x671)));
evalcond[6]=(((new_r10*x670))+(((-1.0)*new_r00*x672)));
evalcond[7]=((1.0)+((new_r11*x670))+(((-1.0)*new_r01*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x673=IKsin(j9);
IkReal x674=IKcos(j9);
IkReal x675=((1.0)*x673);
evalcond[0]=(x673+new_r01);
evalcond[1]=(x674+new_r00);
evalcond[2]=(x673+new_r10);
evalcond[3]=((((-1.0)*x674))+new_r11);
evalcond[4]=(((new_r11*x673))+((new_r01*x674)));
evalcond[5]=((1.0)+((new_r00*x674))+((new_r10*x673)));
evalcond[6]=(((new_r10*x674))+(((-1.0)*new_r00*x675)));
evalcond[7]=((-1.0)+((new_r11*x674))+(((-1.0)*new_r01*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x677 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x677)==0){
continue;
}
IkReal x676=pow(x677,-0.5);
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
IkReal gconst40=((-1.0)*(x678.value));
IkReal gconst41=((-1.0)*new_r01*x676);
IkReal gconst42=(new_r11*x676);
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x679.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
IkReal x680=((-1.0)*(x682.value));
IkReal x681=x676;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x680;
IkReal gconst40=x680;
IkReal gconst41=((-1.0)*new_r01*x681);
IkReal gconst42=(new_r11*x681);
IkReal x683=new_r01*new_r01;
IkReal x684=(new_r00*new_r01);
IkReal x685=(((new_r10*new_r11))+x684);
IkReal x686=x676;
IkReal x687=(new_r01*x686);
j9eval[0]=x685;
j9eval[1]=IKsign(x685);
j9eval[2]=((IKabs(((((-1.0)*x683*x686))+((new_r10*x687)))))+(IKabs((((new_r11*x687))+((x684*x686))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
IkReal x688=((-1.0)*(x690.value));
IkReal x689=x676;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x688;
IkReal gconst40=x688;
IkReal gconst41=((-1.0)*new_r01*x689);
IkReal gconst42=(new_r11*x689);
IkReal x691=((new_r01*new_r01)+(new_r11*new_r11));
j9eval[0]=x691;
j9eval[1]=IKsign(x691);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x694 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x694.valid){
continue;
}
IkReal x692=((-1.0)*(x694.value));
IkReal x693=x676;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x692;
IkReal gconst40=x692;
IkReal gconst41=((-1.0)*new_r01*x693);
IkReal gconst42=(new_r11*x693);
j9eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst42*gconst42)+(gconst41*gconst41));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[4], cj9array[4], sj9array[4];
bool j9valid[4]={false};
_nj9 = 4;
j9array[0]=0;
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=1.5707963267949;
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
j9array[2]=3.14159265358979;
sj9array[2]=IKsin(j9array[2]);
cj9array[2]=IKcos(j9array[2]);
j9array[3]=-1.5707963267949;
sj9array[3]=IKsin(j9array[3]);
cj9array[3]=IKcos(j9array[3]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
if( j9array[2] > IKPI )
{
    j9array[2]-=IK2PI;
}
else if( j9array[2] < -IKPI )
{    j9array[2]+=IK2PI;
}
j9valid[2] = true;
if( j9array[3] > IKPI )
{
    j9array[3]-=IK2PI;
}
else if( j9array[3] < -IKPI )
{    j9array[3]+=IK2PI;
}
j9valid[3] = true;
for(int ij9 = 0; ij9 < 4; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 4; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
IkReal x695=((-1.0)*(x696.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x695;
new_r11=0;
new_r00=0;
IkReal gconst40=x695;
IkReal x697 = new_r01*new_r01;
if(IKabs(x697)==0){
continue;
}
IkReal gconst41=((-1.0)*new_r01*(pow(x697,-0.5)));
IkReal gconst42=0;
j9eval[0]=new_r01;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x698=IKPowWithIntegerCheck(gconst41,-1);
if(!x698.valid){
continue;
}
cj9array[0]=((-1.0)*new_r01*(x698.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x699=IKsin(j9);
IkReal x700=IKcos(j9);
IkReal x701=((-1.0)*x699);
evalcond[0]=(new_r10*x699);
evalcond[1]=(gconst41*x701);
evalcond[2]=(new_r01*x701);
evalcond[3]=(((new_r01*x700))+gconst41);
evalcond[4]=(gconst41+((new_r10*x700)));
evalcond[5]=(((gconst41*x700))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x702=IKPowWithIntegerCheck(new_r01,-1);
if(!x702.valid){
continue;
}
cj9array[0]=((-1.0)*gconst41*(x702.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x703=IKsin(j9);
IkReal x704=IKcos(j9);
IkReal x705=(gconst41*x704);
IkReal x706=((-1.0)*x703);
evalcond[0]=(new_r10*x703);
evalcond[1]=(gconst41*x706);
evalcond[2]=(new_r01*x706);
evalcond[3]=(x705+new_r01);
evalcond[4]=(gconst41+((new_r10*x704)));
evalcond[5]=(x705+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst41;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
CheckValue<IkReal> x708 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x708.valid){
continue;
}
IkReal x707=((-1.0)*(x708.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x707;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x707;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j9eval[0]=-1.0;
j9eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j9eval[2]=-1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
IkReal x709=((-1.0)*(x710.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x709;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x709;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j9eval[0]=-1.0;
j9eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j9eval[2]=-1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
IkReal x711=((-1.0)*(x712.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x711;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x711;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j9eval[0]=1.0;
j9eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j9eval[2]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x713=((1.0)*gconst41);
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x713)))),IkReal(((((-1.0)*gconst42*new_r11))+(((-1.0)*new_r01*x713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
CheckValue<IkReal> x715=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x715.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x714.value)+(((1.5707963267949)*(x715.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x716=IKsin(j9);
IkReal x717=IKcos(j9);
IkReal x718=(gconst41*x717);
IkReal x719=((1.0)*x716);
IkReal x720=(gconst42*x717);
IkReal x721=(gconst42*x719);
evalcond[0]=(((new_r01*x717))+gconst41+((new_r11*x716)));
evalcond[1]=(((gconst41*x716))+x720+new_r11);
evalcond[2]=((((-1.0)*x721))+x718);
evalcond[3]=((((-1.0)*x721))+x718+new_r01);
evalcond[4]=((((-1.0)*gconst41*x719))+(((-1.0)*x720)));
evalcond[5]=(gconst42+((new_r11*x717))+(((-1.0)*new_r01*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x722=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst41*gconst41)))+(((-1.0)*(gconst42*gconst42))))),-1);
if(!x722.valid){
continue;
}
CheckValue<IkReal> x723 = IKatan2WithCheck(IkReal((gconst41*new_r11)),IkReal((gconst42*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x723.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x722.value)))+(x723.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x724=IKsin(j9);
IkReal x725=IKcos(j9);
IkReal x726=(gconst41*x725);
IkReal x727=((1.0)*x724);
IkReal x728=(gconst42*x725);
IkReal x729=(gconst42*x727);
evalcond[0]=(gconst41+((new_r01*x725))+((new_r11*x724)));
evalcond[1]=(((gconst41*x724))+x728+new_r11);
evalcond[2]=((((-1.0)*x729))+x726);
evalcond[3]=((((-1.0)*x729))+x726+new_r01);
evalcond[4]=((((-1.0)*gconst41*x727))+(((-1.0)*x728)));
evalcond[5]=(gconst42+((new_r11*x725))+(((-1.0)*new_r01*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x730 = IKatan2WithCheck(IkReal((gconst41*gconst42)),IkReal(((-1.0)*(gconst41*gconst41))),IKFAST_ATAN2_MAGTHRESH);
if(!x730.valid){
continue;
}
CheckValue<IkReal> x731=IKPowWithIntegerCheck(IKsign((((gconst41*new_r01))+(((-1.0)*gconst42*new_r11)))),-1);
if(!x731.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x730.value)+(((1.5707963267949)*(x731.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x732=IKsin(j9);
IkReal x733=IKcos(j9);
IkReal x734=(gconst41*x733);
IkReal x735=((1.0)*x732);
IkReal x736=(gconst42*x733);
IkReal x737=(gconst42*x735);
evalcond[0]=(((new_r01*x733))+gconst41+((new_r11*x732)));
evalcond[1]=(((gconst41*x732))+x736+new_r11);
evalcond[2]=((((-1.0)*x737))+x734);
evalcond[3]=((((-1.0)*x737))+x734+new_r01);
evalcond[4]=((((-1.0)*gconst41*x735))+(((-1.0)*x736)));
evalcond[5]=(gconst42+(((-1.0)*new_r01*x735))+((new_r11*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(gconst42,-1);
if(!x738.valid){
continue;
}
cj9array[0]=(new_r00*(x738.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x739=IKsin(j9);
IkReal x740=IKcos(j9);
IkReal x741=((-1.0)*x739);
evalcond[0]=(new_r11*x739);
evalcond[1]=(gconst42*x741);
evalcond[2]=(new_r00*x741);
evalcond[3]=(((gconst42*x740))+new_r11);
evalcond[4]=(gconst42+((new_r11*x740)));
evalcond[5]=((((-1.0)*gconst42))+((new_r00*x740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
IkReal x742=((-1.0)*(x743.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x742;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x742;
IkReal gconst41=0;
IkReal x744 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x744)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x744,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
IkReal x745=((-1.0)*(x746.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x745;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x745;
IkReal gconst41=0;
IkReal x747 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x747)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x747,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
IkReal x748=((-1.0)*(x749.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x748;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x748;
IkReal gconst41=0;
IkReal x750 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x750)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x750,-0.5)));
j9eval[0]=new_r10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(new_r10,-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(gconst42,-1);
if(!x752.valid){
continue;
}
if( IKabs((gconst42*(x751.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x752.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst42*(x751.value)))+IKsqr(((-1.0)*new_r11*(x752.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((gconst42*(x751.value)), ((-1.0)*new_r11*(x752.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x753=IKsin(j9);
IkReal x754=IKcos(j9);
IkReal x755=((1.0)*gconst42);
IkReal x756=((-1.0)*gconst42);
evalcond[0]=(new_r11*x753);
evalcond[1]=(new_r10*x754);
evalcond[2]=(x753*x756);
evalcond[3]=(x754*x756);
evalcond[4]=(((gconst42*x754))+new_r11);
evalcond[5]=(gconst42+((new_r11*x754)));
evalcond[6]=((((-1.0)*x753*x755))+new_r10);
evalcond[7]=(((new_r10*x753))+(((-1.0)*x755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x757=IKPowWithIntegerCheck(gconst42,-1);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758=IKPowWithIntegerCheck(new_r11,-1);
if(!x758.valid){
continue;
}
if( IKabs((new_r10*(x757.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst42*(x758.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x757.value)))+IKsqr(((-1.0)*gconst42*(x758.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x757.value)), ((-1.0)*gconst42*(x758.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x759=IKsin(j9);
IkReal x760=IKcos(j9);
IkReal x761=((1.0)*gconst42);
IkReal x762=((-1.0)*gconst42);
evalcond[0]=(new_r11*x759);
evalcond[1]=(new_r10*x760);
evalcond[2]=(x759*x762);
evalcond[3]=(x760*x762);
evalcond[4]=(((gconst42*x760))+new_r11);
evalcond[5]=(((new_r11*x760))+gconst42);
evalcond[6]=(new_r10+(((-1.0)*x759*x761)));
evalcond[7]=((((-1.0)*x761))+((new_r10*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x763=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x763.value)))+(x764.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x765=IKsin(j9);
IkReal x766=IKcos(j9);
IkReal x767=((1.0)*gconst42);
IkReal x768=((-1.0)*gconst42);
evalcond[0]=(new_r11*x765);
evalcond[1]=(new_r10*x766);
evalcond[2]=(x765*x768);
evalcond[3]=(x766*x768);
evalcond[4]=(((gconst42*x766))+new_r11);
evalcond[5]=(((new_r11*x766))+gconst42);
evalcond[6]=((((-1.0)*x765*x767))+new_r10);
evalcond[7]=(((new_r10*x765))+(((-1.0)*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
IkReal x769=((-1.0)*(x770.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x769;
new_r01=0;
IkReal gconst40=x769;
IkReal gconst41=0;
IkReal x771 = new_r11*new_r11;
if(IKabs(x771)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x771,-0.5)));
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
IkReal x772=((-1.0)*(x773.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x772;
new_r01=0;
IkReal gconst40=x772;
IkReal gconst41=0;
IkReal x774 = new_r11*new_r11;
if(IKabs(x774)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x774,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
IkReal x775=((-1.0)*(x776.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x775;
new_r01=0;
IkReal gconst40=x775;
IkReal gconst41=0;
IkReal x777 = new_r11*new_r11;
if(IKabs(x777)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x777,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x778=IKPowWithIntegerCheck(gconst42,-1);
if(!x778.valid){
continue;
}
CheckValue<IkReal> x779=IKPowWithIntegerCheck(new_r11,-1);
if(!x779.valid){
continue;
}
if( IKabs((new_r10*(x778.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst42*(x779.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x778.value)))+IKsqr(((-1.0)*gconst42*(x779.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x778.value)), ((-1.0)*gconst42*(x779.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x780=IKsin(j9);
IkReal x781=IKcos(j9);
IkReal x782=((1.0)*gconst42);
evalcond[0]=(new_r11*x780);
evalcond[1]=((-1.0)*gconst42*x780);
evalcond[2]=(((gconst42*x781))+new_r11);
evalcond[3]=(((new_r11*x781))+gconst42);
evalcond[4]=((((-1.0)*x781*x782))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x780*x782)));
evalcond[6]=(((new_r10*x781))+(((-1.0)*new_r00*x780)));
evalcond[7]=(((new_r10*x780))+(((-1.0)*x782))+((new_r00*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x783=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x783.valid){
continue;
}
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x783.value)))+(x784.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x785=IKsin(j9);
IkReal x786=IKcos(j9);
IkReal x787=((1.0)*gconst42);
evalcond[0]=(new_r11*x785);
evalcond[1]=((-1.0)*gconst42*x785);
evalcond[2]=(((gconst42*x786))+new_r11);
evalcond[3]=(((new_r11*x786))+gconst42);
evalcond[4]=((((-1.0)*x786*x787))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x785*x787)));
evalcond[6]=(((new_r10*x786))+(((-1.0)*new_r00*x785)));
evalcond[7]=(((new_r10*x785))+(((-1.0)*x787))+((new_r00*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x788=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x789.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x788.value)))+(x789.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x790=IKsin(j9);
IkReal x791=IKcos(j9);
IkReal x792=((1.0)*gconst42);
evalcond[0]=(new_r11*x790);
evalcond[1]=((-1.0)*gconst42*x790);
evalcond[2]=(((gconst42*x791))+new_r11);
evalcond[3]=(((new_r11*x791))+gconst42);
evalcond[4]=((((-1.0)*x791*x792))+new_r00);
evalcond[5]=((((-1.0)*x790*x792))+new_r10);
evalcond[6]=(((new_r10*x791))+(((-1.0)*new_r00*x790)));
evalcond[7]=((((-1.0)*x792))+((new_r10*x790))+((new_r00*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x793=((1.0)*gconst41);
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x793)))),IkReal(((((-1.0)*new_r01*x793))+(((-1.0)*gconst42*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(((gconst42*gconst42)+(gconst41*gconst41))),-1);
if(!x795.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x794.value)+(((1.5707963267949)*(x795.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x796=IKsin(j9);
IkReal x797=IKcos(j9);
IkReal x798=((1.0)*gconst42);
IkReal x799=(gconst41*x797);
IkReal x800=((1.0)*x796);
IkReal x801=(x796*x798);
evalcond[0]=(((new_r11*x796))+gconst41+((new_r01*x797)));
evalcond[1]=(((gconst42*x797))+((gconst41*x796))+new_r11);
evalcond[2]=(x799+new_r01+(((-1.0)*x801)));
evalcond[3]=(((new_r10*x797))+(((-1.0)*new_r00*x800))+gconst41);
evalcond[4]=((((-1.0)*new_r01*x800))+((new_r11*x797))+gconst42);
evalcond[5]=(x799+new_r10+(((-1.0)*x801)));
evalcond[6]=((((-1.0)*x798))+((new_r10*x796))+((new_r00*x797)));
evalcond[7]=((((-1.0)*x797*x798))+new_r00+(((-1.0)*gconst41*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x802=((1.0)*gconst41);
CheckValue<IkReal> x803=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x803.valid){
continue;
}
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x802)))),IkReal(((((-1.0)*new_r01*x802))+(((-1.0)*gconst42*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x803.value)))+(x804.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x805=IKsin(j9);
IkReal x806=IKcos(j9);
IkReal x807=((1.0)*gconst42);
IkReal x808=(gconst41*x806);
IkReal x809=((1.0)*x805);
IkReal x810=(x805*x807);
evalcond[0]=(gconst41+((new_r11*x805))+((new_r01*x806)));
evalcond[1]=(new_r11+((gconst41*x805))+((gconst42*x806)));
evalcond[2]=((((-1.0)*x810))+new_r01+x808);
evalcond[3]=((((-1.0)*new_r00*x809))+gconst41+((new_r10*x806)));
evalcond[4]=((((-1.0)*new_r01*x809))+gconst42+((new_r11*x806)));
evalcond[5]=((((-1.0)*x810))+new_r10+x808);
evalcond[6]=(((new_r00*x806))+((new_r10*x805))+(((-1.0)*x807)));
evalcond[7]=((((-1.0)*x806*x807))+new_r00+(((-1.0)*gconst41*x809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x811=((1.0)*gconst41);
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal((((gconst41*new_r01))+(((-1.0)*new_r10*x811)))),IkReal(((((-1.0)*new_r11*x811))+(((-1.0)*new_r00*x811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x813.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x812.value)+(((1.5707963267949)*(x813.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x814=IKsin(j9);
IkReal x815=IKcos(j9);
IkReal x816=((1.0)*gconst42);
IkReal x817=(gconst41*x815);
IkReal x818=((1.0)*x814);
IkReal x819=(x814*x816);
evalcond[0]=(((new_r11*x814))+((new_r01*x815))+gconst41);
evalcond[1]=(((gconst41*x814))+((gconst42*x815))+new_r11);
evalcond[2]=((((-1.0)*x819))+new_r01+x817);
evalcond[3]=(((new_r10*x815))+gconst41+(((-1.0)*new_r00*x818)));
evalcond[4]=(((new_r11*x815))+gconst42+(((-1.0)*new_r01*x818)));
evalcond[5]=((((-1.0)*x819))+new_r10+x817);
evalcond[6]=(((new_r00*x815))+((new_r10*x814))+(((-1.0)*x816)));
evalcond[7]=((((-1.0)*gconst41*x818))+(((-1.0)*x815*x816))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x821 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x821)==0){
continue;
}
IkReal x820=pow(x821,-0.5);
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+(((-1.0)*(x822.value))));
IkReal gconst44=((1.0)*new_r01*x820);
IkReal gconst45=((-1.0)*new_r11*x820);
CheckValue<IkReal> x823 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x823.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x823.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
CheckValue<IkReal> x826 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x826.valid){
continue;
}
IkReal x824=((1.0)*(x826.value));
IkReal x825=x820;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x824)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x824)));
IkReal gconst44=((1.0)*new_r01*x825);
IkReal gconst45=((-1.0)*new_r11*x825);
IkReal x827=new_r01*new_r01;
IkReal x828=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x829=x820;
IkReal x830=((1.0)*new_r01*x829);
j9eval[0]=x828;
j9eval[1]=((IKabs(((((-1.0)*new_r11*x830))+(((-1.0)*new_r00*x830)))))+(IKabs(((((-1.0)*new_r10*x830))+((x827*x829))))));
j9eval[2]=IKsign(x828);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
IkReal x831=((1.0)*(x833.value));
IkReal x832=x820;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x831)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x831)));
IkReal gconst44=((1.0)*new_r01*x832);
IkReal gconst45=((-1.0)*new_r11*x832);
IkReal x834=((new_r01*new_r01)+(new_r11*new_r11));
j9eval[0]=x834;
j9eval[1]=IKsign(x834);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
IkReal x835=((1.0)*(x837.value));
IkReal x836=x820;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x835)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x835)));
IkReal gconst44=((1.0)*new_r01*x836);
IkReal gconst45=((-1.0)*new_r11*x836);
j9eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst45*gconst45)+(gconst44*gconst44));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[4], cj9array[4], sj9array[4];
bool j9valid[4]={false};
_nj9 = 4;
j9array[0]=0;
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=1.5707963267949;
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
j9array[2]=3.14159265358979;
sj9array[2]=IKsin(j9array[2]);
cj9array[2]=IKcos(j9array[2]);
j9array[3]=-1.5707963267949;
sj9array[3]=IKsin(j9array[3]);
cj9array[3]=IKcos(j9array[3]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
if( j9array[2] > IKPI )
{
    j9array[2]-=IK2PI;
}
else if( j9array[2] < -IKPI )
{    j9array[2]+=IK2PI;
}
j9valid[2] = true;
if( j9array[3] > IKPI )
{
    j9array[3]-=IK2PI;
}
else if( j9array[3] < -IKPI )
{    j9array[3]+=IK2PI;
}
j9valid[3] = true;
for(int ij9 = 0; ij9 < 4; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 4; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
IkReal x838=((1.0)*(x839.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x838)));
new_r11=0;
new_r00=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x838)));
IkReal x840 = new_r01*new_r01;
if(IKabs(x840)==0){
continue;
}
IkReal gconst44=((1.0)*new_r01*(pow(x840,-0.5)));
IkReal gconst45=0;
j9eval[0]=new_r01;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x841=IKPowWithIntegerCheck(gconst44,-1);
if(!x841.valid){
continue;
}
cj9array[0]=((-1.0)*new_r01*(x841.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x842=IKsin(j9);
IkReal x843=IKcos(j9);
IkReal x844=((-1.0)*x842);
evalcond[0]=(new_r10*x842);
evalcond[1]=(gconst44*x844);
evalcond[2]=(new_r01*x844);
evalcond[3]=(gconst44+((new_r01*x843)));
evalcond[4]=(((new_r10*x843))+gconst44);
evalcond[5]=(new_r10+((gconst44*x843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x845=IKPowWithIntegerCheck(new_r01,-1);
if(!x845.valid){
continue;
}
cj9array[0]=((-1.0)*gconst44*(x845.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x846=IKsin(j9);
IkReal x847=IKcos(j9);
IkReal x848=(gconst44*x847);
IkReal x849=((-1.0)*x846);
evalcond[0]=(new_r10*x846);
evalcond[1]=(gconst44*x849);
evalcond[2]=(new_r01*x849);
evalcond[3]=(new_r01+x848);
evalcond[4]=(((new_r10*x847))+gconst44);
evalcond[5]=(new_r10+x848);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst44;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[4];
CheckValue<IkReal> x851 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x851.valid){
continue;
}
IkReal x850=((1.0)*(x851.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x850)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x850)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j9eval[0]=1.0;
j9eval[1]=new_r01;
j9eval[2]=1.0;
j9eval[3]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
IkReal x852=((1.0)*(x853.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x852)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x852)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j9eval[0]=-1.0;
j9eval[1]=-1.0;
j9eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
IkReal x854=((1.0)*(x855.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x854)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x854)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j9eval[0]=1.0;
j9eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j9eval[2]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x856=((1.0)*new_r11);
CheckValue<IkReal> x857=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x856))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x858.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x857.value)))+(x858.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x859=IKcos(j9);
IkReal x860=IKsin(j9);
IkReal x861=(gconst44*x859);
IkReal x862=((1.0)*x860);
IkReal x863=(gconst45*x859);
IkReal x864=(gconst45*x862);
evalcond[0]=(gconst44+((new_r11*x860))+((new_r01*x859)));
evalcond[1]=(((gconst44*x860))+new_r11+x863);
evalcond[2]=((((-1.0)*x864))+x861);
evalcond[3]=((((-1.0)*x864))+new_r01+x861);
evalcond[4]=((((-1.0)*x863))+(((-1.0)*gconst44*x862)));
evalcond[5]=((((-1.0)*new_r01*x862))+gconst45+((new_r11*x859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x865 = IKatan2WithCheck(IkReal((gconst44*new_r11)),IkReal((gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x865.valid){
continue;
}
CheckValue<IkReal> x866=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst44*gconst44))))),-1);
if(!x866.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x865.value)+(((1.5707963267949)*(x866.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x867=IKcos(j9);
IkReal x868=IKsin(j9);
IkReal x869=(gconst44*x867);
IkReal x870=((1.0)*x868);
IkReal x871=(gconst45*x867);
IkReal x872=(gconst45*x870);
evalcond[0]=(((new_r01*x867))+gconst44+((new_r11*x868)));
evalcond[1]=(((gconst44*x868))+new_r11+x871);
evalcond[2]=(x869+(((-1.0)*x872)));
evalcond[3]=(new_r01+x869+(((-1.0)*x872)));
evalcond[4]=((((-1.0)*x871))+(((-1.0)*gconst44*x870)));
evalcond[5]=(gconst45+(((-1.0)*new_r01*x870))+((new_r11*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x873 = IKatan2WithCheck(IkReal((gconst44*gconst45)),IkReal(((-1.0)*(gconst44*gconst44))),IKFAST_ATAN2_MAGTHRESH);
if(!x873.valid){
continue;
}
CheckValue<IkReal> x874=IKPowWithIntegerCheck(IKsign((((gconst44*new_r01))+(((-1.0)*gconst45*new_r11)))),-1);
if(!x874.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x873.value)+(((1.5707963267949)*(x874.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x875=IKcos(j9);
IkReal x876=IKsin(j9);
IkReal x877=(gconst44*x875);
IkReal x878=((1.0)*x876);
IkReal x879=(gconst45*x875);
IkReal x880=(gconst45*x878);
evalcond[0]=(((new_r01*x875))+gconst44+((new_r11*x876)));
evalcond[1]=(((gconst44*x876))+new_r11+x879);
evalcond[2]=((((-1.0)*x880))+x877);
evalcond[3]=((((-1.0)*x880))+new_r01+x877);
evalcond[4]=((((-1.0)*x879))+(((-1.0)*gconst44*x878)));
evalcond[5]=(gconst45+(((-1.0)*new_r01*x878))+((new_r11*x875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x881=IKPowWithIntegerCheck(gconst45,-1);
if(!x881.valid){
continue;
}
cj9array[0]=(new_r00*(x881.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x882=IKsin(j9);
IkReal x883=IKcos(j9);
IkReal x884=((-1.0)*x882);
evalcond[0]=(new_r11*x882);
evalcond[1]=(gconst45*x884);
evalcond[2]=(new_r00*x884);
evalcond[3]=(new_r11+((gconst45*x883)));
evalcond[4]=(((new_r11*x883))+gconst45);
evalcond[5]=((((-1.0)*gconst45))+((new_r00*x883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
IkReal x885=((1.0)*(x886.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x885)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x885)));
IkReal gconst44=0;
IkReal x887 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x887)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x887,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
IkReal x888=((1.0)*(x889.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x888)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x888)));
IkReal gconst44=0;
IkReal x890 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x890)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x890,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
IkReal x891=((1.0)*(x892.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x891)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x891)));
IkReal gconst44=0;
IkReal x893 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x893)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x893,-0.5)));
j9eval[0]=new_r10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x894=IKPowWithIntegerCheck(new_r10,-1);
if(!x894.valid){
continue;
}
CheckValue<IkReal> x895=IKPowWithIntegerCheck(gconst45,-1);
if(!x895.valid){
continue;
}
if( IKabs((gconst45*(x894.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x895.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst45*(x894.value)))+IKsqr(((-1.0)*new_r11*(x895.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((gconst45*(x894.value)), ((-1.0)*new_r11*(x895.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x896=IKsin(j9);
IkReal x897=IKcos(j9);
IkReal x898=((1.0)*gconst45);
IkReal x899=((-1.0)*gconst45);
evalcond[0]=(new_r11*x896);
evalcond[1]=(new_r10*x897);
evalcond[2]=(x896*x899);
evalcond[3]=(x897*x899);
evalcond[4]=(new_r11+((gconst45*x897)));
evalcond[5]=(((new_r11*x897))+gconst45);
evalcond[6]=((((-1.0)*x896*x898))+new_r10);
evalcond[7]=(((new_r10*x896))+(((-1.0)*x898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x900=IKPowWithIntegerCheck(gconst45,-1);
if(!x900.valid){
continue;
}
CheckValue<IkReal> x901=IKPowWithIntegerCheck(new_r11,-1);
if(!x901.valid){
continue;
}
if( IKabs((new_r10*(x900.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x901.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x900.value)))+IKsqr(((-1.0)*gconst45*(x901.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x900.value)), ((-1.0)*gconst45*(x901.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x902=IKsin(j9);
IkReal x903=IKcos(j9);
IkReal x904=((1.0)*gconst45);
IkReal x905=((-1.0)*gconst45);
evalcond[0]=(new_r11*x902);
evalcond[1]=(new_r10*x903);
evalcond[2]=(x902*x905);
evalcond[3]=(x903*x905);
evalcond[4]=(new_r11+((gconst45*x903)));
evalcond[5]=(gconst45+((new_r11*x903)));
evalcond[6]=((((-1.0)*x902*x904))+new_r10);
evalcond[7]=((((-1.0)*x904))+((new_r10*x902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x907.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x906.value)+(((1.5707963267949)*(x907.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x908=IKsin(j9);
IkReal x909=IKcos(j9);
IkReal x910=((1.0)*gconst45);
IkReal x911=((-1.0)*gconst45);
evalcond[0]=(new_r11*x908);
evalcond[1]=(new_r10*x909);
evalcond[2]=(x908*x911);
evalcond[3]=(x909*x911);
evalcond[4]=(new_r11+((gconst45*x909)));
evalcond[5]=(gconst45+((new_r11*x909)));
evalcond[6]=((((-1.0)*x908*x910))+new_r10);
evalcond[7]=((((-1.0)*x910))+((new_r10*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
IkReal x912=((1.0)*(x913.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x912)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x912)));
IkReal gconst44=0;
IkReal x914 = new_r11*new_r11;
if(IKabs(x914)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x914,-0.5)));
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x916 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x916.valid){
continue;
}
IkReal x915=((1.0)*(x916.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x915)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x915)));
IkReal gconst44=0;
IkReal x917 = new_r11*new_r11;
if(IKabs(x917)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x917,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x919 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
IkReal x918=((1.0)*(x919.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x918)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x918)));
IkReal gconst44=0;
IkReal x920 = new_r11*new_r11;
if(IKabs(x920)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x920,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(gconst45,-1);
if(!x921.valid){
continue;
}
CheckValue<IkReal> x922=IKPowWithIntegerCheck(new_r11,-1);
if(!x922.valid){
continue;
}
if( IKabs((new_r10*(x921.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x922.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x921.value)))+IKsqr(((-1.0)*gconst45*(x922.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x921.value)), ((-1.0)*gconst45*(x922.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x923=IKsin(j9);
IkReal x924=IKcos(j9);
IkReal x925=((1.0)*gconst45);
evalcond[0]=(new_r11*x923);
evalcond[1]=((-1.0)*gconst45*x923);
evalcond[2]=(((gconst45*x924))+new_r11);
evalcond[3]=(gconst45+((new_r11*x924)));
evalcond[4]=((((-1.0)*x924*x925))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x923*x925)));
evalcond[6]=((((-1.0)*new_r00*x923))+((new_r10*x924)));
evalcond[7]=((((-1.0)*x925))+((new_r00*x924))+((new_r10*x923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x926 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x927.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x926.value)+(((1.5707963267949)*(x927.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x928=IKsin(j9);
IkReal x929=IKcos(j9);
IkReal x930=((1.0)*gconst45);
evalcond[0]=(new_r11*x928);
evalcond[1]=((-1.0)*gconst45*x928);
evalcond[2]=(((gconst45*x929))+new_r11);
evalcond[3]=(gconst45+((new_r11*x929)));
evalcond[4]=((((-1.0)*x929*x930))+new_r00);
evalcond[5]=((((-1.0)*x928*x930))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x928))+((new_r10*x929)));
evalcond[7]=(((new_r00*x929))+((new_r10*x928))+(((-1.0)*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x931.value)))+(x932.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x933=IKsin(j9);
IkReal x934=IKcos(j9);
IkReal x935=((1.0)*gconst45);
evalcond[0]=(new_r11*x933);
evalcond[1]=((-1.0)*gconst45*x933);
evalcond[2]=(((gconst45*x934))+new_r11);
evalcond[3]=(gconst45+((new_r11*x934)));
evalcond[4]=((((-1.0)*x934*x935))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x933*x935)));
evalcond[6]=((((-1.0)*new_r00*x933))+((new_r10*x934)));
evalcond[7]=(((new_r00*x934))+((new_r10*x933))+(((-1.0)*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x936=((1.0)*new_r11);
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x936))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
CheckValue<IkReal> x938=IKPowWithIntegerCheck(IKsign(((gconst45*gconst45)+(gconst44*gconst44))),-1);
if(!x938.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x937.value)+(((1.5707963267949)*(x938.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x939=IKcos(j9);
IkReal x940=IKsin(j9);
IkReal x941=((1.0)*gconst45);
IkReal x942=(gconst44*x939);
IkReal x943=((1.0)*x940);
IkReal x944=(x940*x941);
evalcond[0]=(gconst44+((new_r01*x939))+((new_r11*x940)));
evalcond[1]=(((gconst45*x939))+((gconst44*x940))+new_r11);
evalcond[2]=((((-1.0)*x944))+new_r01+x942);
evalcond[3]=(gconst44+((new_r10*x939))+(((-1.0)*new_r00*x943)));
evalcond[4]=(gconst45+(((-1.0)*new_r01*x943))+((new_r11*x939)));
evalcond[5]=((((-1.0)*x944))+new_r10+x942);
evalcond[6]=((((-1.0)*x941))+((new_r00*x939))+((new_r10*x940)));
evalcond[7]=((((-1.0)*gconst44*x943))+(((-1.0)*x939*x941))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x945=((1.0)*new_r11);
CheckValue<IkReal> x946 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x945))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x947.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x946.value)+(((1.5707963267949)*(x947.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x948=IKcos(j9);
IkReal x949=IKsin(j9);
IkReal x950=((1.0)*gconst45);
IkReal x951=(gconst44*x948);
IkReal x952=((1.0)*x949);
IkReal x953=(x949*x950);
evalcond[0]=(((new_r01*x948))+gconst44+((new_r11*x949)));
evalcond[1]=(((gconst45*x948))+((gconst44*x949))+new_r11);
evalcond[2]=(new_r01+(((-1.0)*x953))+x951);
evalcond[3]=(gconst44+(((-1.0)*new_r00*x952))+((new_r10*x948)));
evalcond[4]=(gconst45+(((-1.0)*new_r01*x952))+((new_r11*x948)));
evalcond[5]=(new_r10+(((-1.0)*x953))+x951);
evalcond[6]=(((new_r00*x948))+((new_r10*x949))+(((-1.0)*x950)));
evalcond[7]=((((-1.0)*gconst44*x952))+new_r00+(((-1.0)*x948*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x954=((1.0)*gconst44);
CheckValue<IkReal> x955 = IKatan2WithCheck(IkReal((((gconst44*new_r01))+(((-1.0)*new_r10*x954)))),IkReal(((((-1.0)*new_r00*x954))+(((-1.0)*new_r11*x954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x955.valid){
continue;
}
CheckValue<IkReal> x956=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x956.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x955.value)+(((1.5707963267949)*(x956.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x957=IKcos(j9);
IkReal x958=IKsin(j9);
IkReal x959=((1.0)*gconst45);
IkReal x960=(gconst44*x957);
IkReal x961=((1.0)*x958);
IkReal x962=(x958*x959);
evalcond[0]=(((new_r01*x957))+gconst44+((new_r11*x958)));
evalcond[1]=(((gconst44*x958))+((gconst45*x957))+new_r11);
evalcond[2]=(new_r01+x960+(((-1.0)*x962)));
evalcond[3]=(((new_r10*x957))+gconst44+(((-1.0)*new_r00*x961)));
evalcond[4]=(gconst45+(((-1.0)*new_r01*x961))+((new_r11*x957)));
evalcond[5]=(new_r10+x960+(((-1.0)*x962)));
evalcond[6]=(((new_r10*x958))+((new_r00*x957))+(((-1.0)*x959)));
evalcond[7]=((((-1.0)*gconst44*x961))+(((-1.0)*x957*x959))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x964 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x964.valid){
continue;
}
IkReal x963=x964.value;
j9array[0]=((-1.0)*x963);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x963)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j9))))+((new_r10*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x965=((1.0)*new_r11);
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal((((cj11*new_r01))+(((-1.0)*sj11*x965)))),IkReal(((((-1.0)*new_r01*sj11))+(((-1.0)*cj11*x965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
CheckValue<IkReal> x967=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x967.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x966.value)+(((1.5707963267949)*(x967.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x968=IKsin(j9);
IkReal x969=IKcos(j9);
IkReal x970=(sj11*x969);
IkReal x971=((1.0)*x968);
IkReal x972=(cj11*x969);
IkReal x973=(cj11*x971);
evalcond[0]=(((new_r11*x968))+((new_r01*x969))+sj11);
evalcond[1]=(((sj11*x968))+new_r11+x972);
evalcond[2]=(new_r01+x970+(((-1.0)*x973)));
evalcond[3]=(sj11+(((-1.0)*new_r00*x971))+((new_r10*x969)));
evalcond[4]=(((new_r11*x969))+(((-1.0)*new_r01*x971))+cj11);
evalcond[5]=(new_r10+x970+(((-1.0)*x973)));
evalcond[6]=(((new_r00*x969))+(((-1.0)*cj11))+((new_r10*x968)));
evalcond[7]=((((-1.0)*x972))+(((-1.0)*sj11*x971))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x974=((1.0)*sj11);
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x974))+((new_r01*sj11)))),IkReal(((((-1.0)*new_r11*x974))+(((-1.0)*new_r00*x974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
CheckValue<IkReal> x976=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x976.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x975.value)+(((1.5707963267949)*(x976.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x977=IKsin(j9);
IkReal x978=IKcos(j9);
IkReal x979=(sj11*x978);
IkReal x980=((1.0)*x977);
IkReal x981=(cj11*x978);
IkReal x982=(cj11*x980);
evalcond[0]=(((new_r01*x978))+sj11+((new_r11*x977)));
evalcond[1]=(((sj11*x977))+new_r11+x981);
evalcond[2]=((((-1.0)*x982))+new_r01+x979);
evalcond[3]=((((-1.0)*new_r00*x980))+sj11+((new_r10*x978)));
evalcond[4]=((((-1.0)*new_r01*x980))+cj11+((new_r11*x978)));
evalcond[5]=((((-1.0)*x982))+new_r10+x979);
evalcond[6]=((((-1.0)*cj11))+((new_r10*x977))+((new_r00*x978)));
evalcond[7]=((((-1.0)*x981))+new_r00+(((-1.0)*sj11*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x983=IKPowWithIntegerCheck(IKsign((((new_r11*sj11))+((cj11*new_r01)))),-1);
if(!x983.valid){
continue;
}
CheckValue<IkReal> x984 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj11*cj11))),IkReal(((((-1.0)*cj11*sj11))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x983.value)))+(x984.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x985=IKsin(j9);
IkReal x986=IKcos(j9);
IkReal x987=(sj11*x986);
IkReal x988=((1.0)*x985);
IkReal x989=(cj11*x986);
IkReal x990=(cj11*x988);
evalcond[0]=(sj11+((new_r11*x985))+((new_r01*x986)));
evalcond[1]=(((sj11*x985))+new_r11+x989);
evalcond[2]=((((-1.0)*x990))+new_r01+x987);
evalcond[3]=((((-1.0)*new_r00*x988))+sj11+((new_r10*x986)));
evalcond[4]=((((-1.0)*new_r01*x988))+cj11+((new_r11*x986)));
evalcond[5]=((((-1.0)*x990))+new_r10+x987);
evalcond[6]=(((new_r00*x986))+(((-1.0)*cj11))+((new_r10*x985)));
evalcond[7]=((((-1.0)*x989))+new_r00+(((-1.0)*sj11*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x991=x992.value;
j9array[0]=((-1.0)*x991);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x991)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x993=IKcos(j9);
IkReal x994=IKsin(j9);
IkReal x995=((1.0)*x994);
IkReal x996=(new_r11*x993);
evalcond[0]=(((new_r11*x994))+((new_r01*x993)));
evalcond[1]=(((new_r10*x994))+((new_r00*x993)));
evalcond[2]=((((-1.0)*new_r00*x995))+((new_r10*x993)));
evalcond[3]=((((-1.0)*new_r01*x995))+x996);
evalcond[4]=((((-1.0)*new_r01*new_r22*x995))+((new_r22*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
IkReal x997=x998.value;
j9array[0]=((-1.0)*x997);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x997)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x999=IKcos(j9);
IkReal x1000=IKsin(j9);
IkReal x1001=(new_r22*x999);
IkReal x1002=((1.0)*x1000);
evalcond[0]=(((new_r11*x1000))+((new_r01*x999)));
evalcond[1]=(((new_r10*x999))+(((-1.0)*new_r00*x1002)));
evalcond[2]=(((new_r11*x999))+(((-1.0)*new_r01*x1002)));
evalcond[3]=(((new_r10*x1001))+(((-1.0)*new_r00*new_r22*x1002)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1002))+((new_r11*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1004 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
IkReal x1003=x1004.value;
j9array[0]=((-1.0)*x1003);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1003)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x1005=IKcos(j9);
IkReal x1006=IKsin(j9);
IkReal x1007=(new_r10*x1005);
IkReal x1008=((1.0)*x1006);
IkReal x1009=(new_r11*x1005);
evalcond[0]=(((new_r10*x1006))+((new_r00*x1005)));
evalcond[1]=(x1007+(((-1.0)*new_r00*x1008)));
evalcond[2]=(x1009+(((-1.0)*new_r01*x1008)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1008))+((new_r22*x1007)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1008))+((new_r22*x1009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(sj10,-1);
if(!x1011.valid){
continue;
}
IkReal x1010=x1011.value;
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(new_r11,-1);
if(!x1012.valid){
continue;
}
if( IKabs((x1010*(x1012.value)*((((new_r01*new_r12))+(((-1.0)*sj10*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x1010)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1010*(x1012.value)*((((new_r01*new_r12))+(((-1.0)*sj10*sj11))))))+IKsqr(((-1.0)*new_r12*x1010))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x1010*(x1012.value)*((((new_r01*new_r12))+(((-1.0)*sj10*sj11))))), ((-1.0)*new_r12*x1010));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x1013=IKsin(j9);
IkReal x1014=IKcos(j9);
IkReal x1015=((1.0)*cj11);
IkReal x1016=((1.0)*sj10);
IkReal x1017=((1.0)*new_r02);
IkReal x1018=((1.0)*sj11);
IkReal x1019=(new_r11*x1014);
IkReal x1020=(sj10*x1013);
IkReal x1021=(cj10*x1013);
IkReal x1022=(new_r12*x1014);
IkReal x1023=((1.0)*x1013);
IkReal x1024=(new_r10*x1014);
IkReal x1025=((1.0)*cj10*x1014);
evalcond[0]=(new_r12+((sj10*x1014)));
evalcond[1]=((((-1.0)*x1013*x1016))+new_r02);
evalcond[2]=(((new_r02*x1014))+((new_r12*x1013)));
evalcond[3]=(((new_r11*x1013))+sj11+((new_r01*x1014)));
evalcond[4]=(x1022+sj10+(((-1.0)*x1013*x1017)));
evalcond[5]=(((sj11*x1014))+((cj11*x1021))+new_r01);
evalcond[6]=((((-1.0)*x1015))+((new_r10*x1013))+((new_r00*x1014)));
evalcond[7]=((((-1.0)*x1014*x1015))+((sj11*x1021))+new_r00);
evalcond[8]=((((-1.0)*cj10*x1014*x1015))+((sj11*x1013))+new_r11);
evalcond[9]=((((-1.0)*cj10*x1014*x1018))+(((-1.0)*x1013*x1015))+new_r10);
evalcond[10]=((((-1.0)*new_r00*x1023))+x1024+(((-1.0)*cj10*x1018)));
evalcond[11]=(x1019+(((-1.0)*cj10*x1015))+(((-1.0)*new_r01*x1023)));
evalcond[12]=(((cj10*x1022))+((new_r22*sj10))+(((-1.0)*x1017*x1021)));
evalcond[13]=(((cj10*new_r20))+(((-1.0)*x1016*x1024))+((new_r00*x1020)));
evalcond[14]=(((cj10*new_r21))+(((-1.0)*x1016*x1019))+((new_r01*x1020)));
evalcond[15]=((-1.0)+((cj10*new_r22))+(((-1.0)*x1016*x1022))+((new_r02*x1020)));
evalcond[16]=((((-1.0)*new_r00*x1021))+(((-1.0)*x1018))+((cj10*x1024))+((new_r20*sj10)));
evalcond[17]=(((cj10*x1019))+(((-1.0)*new_r01*x1021))+(((-1.0)*x1015))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1026.value)))+(x1027.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x1028=IKsin(j9);
IkReal x1029=IKcos(j9);
IkReal x1030=((1.0)*cj11);
IkReal x1031=((1.0)*sj10);
IkReal x1032=((1.0)*new_r02);
IkReal x1033=((1.0)*sj11);
IkReal x1034=(new_r11*x1029);
IkReal x1035=(sj10*x1028);
IkReal x1036=(cj10*x1028);
IkReal x1037=(new_r12*x1029);
IkReal x1038=((1.0)*x1028);
IkReal x1039=(new_r10*x1029);
IkReal x1040=((1.0)*cj10*x1029);
evalcond[0]=(new_r12+((sj10*x1029)));
evalcond[1]=((((-1.0)*x1028*x1031))+new_r02);
evalcond[2]=(((new_r12*x1028))+((new_r02*x1029)));
evalcond[3]=(((new_r11*x1028))+sj11+((new_r01*x1029)));
evalcond[4]=((((-1.0)*x1028*x1032))+x1037+sj10);
evalcond[5]=(((sj11*x1029))+((cj11*x1036))+new_r01);
evalcond[6]=(((new_r10*x1028))+(((-1.0)*x1030))+((new_r00*x1029)));
evalcond[7]=((((-1.0)*x1029*x1030))+((sj11*x1036))+new_r00);
evalcond[8]=((((-1.0)*cj10*x1029*x1030))+((sj11*x1028))+new_r11);
evalcond[9]=((((-1.0)*cj10*x1029*x1033))+(((-1.0)*x1028*x1030))+new_r10);
evalcond[10]=(x1039+(((-1.0)*cj10*x1033))+(((-1.0)*new_r00*x1038)));
evalcond[11]=(x1034+(((-1.0)*cj10*x1030))+(((-1.0)*new_r01*x1038)));
evalcond[12]=((((-1.0)*x1032*x1036))+((cj10*x1037))+((new_r22*sj10)));
evalcond[13]=(((cj10*new_r20))+(((-1.0)*x1031*x1039))+((new_r00*x1035)));
evalcond[14]=(((cj10*new_r21))+(((-1.0)*x1031*x1034))+((new_r01*x1035)));
evalcond[15]=((-1.0)+((cj10*new_r22))+(((-1.0)*x1031*x1037))+((new_r02*x1035)));
evalcond[16]=((((-1.0)*x1033))+((cj10*x1039))+(((-1.0)*new_r00*x1036))+((new_r20*sj10)));
evalcond[17]=((((-1.0)*x1030))+((cj10*x1034))+((new_r21*sj10))+(((-1.0)*new_r01*x1036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (2d4b4f489f3dcfae9cabaa87c3702b26)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }


int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
  double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i){
    vfree[i] = free_joint[i];
  }
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){//seednoidはアームが伸びきった状態の第2,第4関節が，+90°のため
	sol_joint[i][j] = M_PI/2-solvalues[j+1];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==5){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==6){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==7){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==8){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==9){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==10){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==11){
	//std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
	continue;
      }
      else
	sol_joint[i][j] = solvalues[j];

      //std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
      
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}


  
#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

