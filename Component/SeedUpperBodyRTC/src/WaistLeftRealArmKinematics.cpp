/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-09-08 16:01:22.993696
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_WL_REAL {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))))*(((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2])))))))));
eerot[1]=((((((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eerot[2]=((((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eetrans[0]=((((((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(((((-0.240358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.244642)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((-0.07)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((-0.240358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((((((-0.244642)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))))+(((-0.134)*(IKcos(j[2]))*(IKsin(j[0]))))+(((((((((((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-0.244642)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.036)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))+(((((((-0.036)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((0.07)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.07)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.240358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((0.240358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.244642)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((((((0.07)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.304)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.018)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.134)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.304)*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(((((((((-0.07)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.07)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((-0.028046)*(IKsin(j[4]))))+(((((((0.07)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.07)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-0.240358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))+(((((((((((-0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((0.240358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.054778)*(IKcos(j[4])))))))));
eerot[3]=((((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eerot[4]=((((((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1])))))))));
eerot[5]=((((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eetrans[1]=((((((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))*(((((-0.240358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.244642)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((-0.07)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((-0.240358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((((((-0.244642)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))))+(((-0.018)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.134)*(IKcos(j[0]))*(IKcos(j[2]))))+(((0.134)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.304)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.304)*(IKcos(j[0]))*(IKsin(j[2]))))+(((((((((((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-0.244642)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.036)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((-0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))+(((((((-0.036)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((0.07)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.07)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.240358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((0.240358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.244642)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((((((0.07)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.07)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(((((((((-0.07)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.07)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((-0.028046)*(IKsin(j[4]))))+(((((((0.07)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.07)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-0.240358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))+(((((((((((-0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((0.240358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.054778)*(IKcos(j[4])))))))));
eerot[6]=((((((((((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[11]))))+(((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))))*(IKsin(j[11]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((-1.0)*(((((((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((-1.0)*(((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[11]))))+(((((((-1.0)*(((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))))*(IKcos(j[11]))))))*(IKsin(j[1])))));
eerot[7]=((((((((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))))+(((((((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(IKsin(j[1])))));
eerot[8]=((((((((((((-1.0)*(((((-1.0)*(((((((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((-1.0)*(((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((-1.0)*(((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))))*(IKsin(j[11]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))))*(IKcos(j[11]))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[9]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[11]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[9]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[11]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eetrans[2]=((0.1455)+(((((((((((-1.0)*(((((0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((0.244642)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[9]))))+(((-1.0)*(((((-0.036)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((-1.0)*(((((-0.244642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-0.244642)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-0.244642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-0.240358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((-1.0)*(((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.036)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((-0.240358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((0.07)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((0.07)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.07)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-0.07)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[1]))))+(((((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))*(((((-0.240358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((-0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.244642)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[9]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((-0.07)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.07)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((-0.240358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((((((-0.244642)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.244642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((0.244642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.244642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((-0.07)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.07)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))))+(((0.134)*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.018)*(IKsin(j[1]))))+(((0.304)*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))*(((((((((-0.07)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.07)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((-0.028046)*(IKsin(j[4]))))+(((((((0.07)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.07)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-0.240358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-0.036)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[9]))))))*(IKsin(j[10]))))+(((((((((((-0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKsin(j[8]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((0.244642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.244642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.244642)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.244642)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((0.240358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.054778)*(IKcos(j[4])))))))));
}

IKFAST_API int GetNumFreeParameters() { return 6; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 4, 6, 7}; return freeparams; }
IKFAST_API int GetNumJoints() { return 12; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j5,cj5,sj5,htj5,j5mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij5[2], _nj5,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij4[2], _nj4,_ij6[2], _nj6,_ij7[2], _nj7;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0;  _ij7[0] = -1; _ij7[1] = -1; _nj7 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]), htj2=tan(pfree[2]*0.5);
j4=pfree[3]; cj4=cos(pfree[3]); sj4=sin(pfree[3]), htj4=tan(pfree[3]*0.5);
j6=pfree[4]; cj6=cos(pfree[4]); sj6=sin(pfree[4]), htj6=tan(pfree[4]*0.5);
j7=pfree[5]; cj7=cos(pfree[5]); sj7=sin(pfree[5]), htj7=tan(pfree[5]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x0=IKcos(j1);
new_r00=(((r00*x0*(IKcos(j0))))+((r10*x0*(IKsin(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x1=IKcos(j1);
IkReal x2=((1.0)*x1);
new_r01=((((-1.0)*r02*x2*(IKcos(j0))))+(((-1.0)*r12*x2*(IKsin(j0))))+((r22*(IKsin(j1)))));
IkReal x3=IKcos(j1);
new_r02=((((-1.0)*r21*(IKsin(j1))))+((r01*x3*(IKcos(j0))))+((r11*x3*(IKsin(j0)))));
IkReal x4=IKsin(j1);
IkReal x5=IKcos(j1);
IkReal x6=IKcos(j0);
IkReal x7=IKsin(j0);
IkReal x8=(x5*x7);
IkReal x9=(x5*x6);
new_px=((0.018)+(((0.036)*r21*x4))+(((-1.0)*pz*x4))+(((0.1455)*x4))+(((-0.036)*r01*x9))+((py*x8))+((px*x9))+(((-0.036)*r11*x8)));
IkReal x10=IKcos(j2);
IkReal x11=IKcos(j0);
IkReal x12=IKsin(j0);
IkReal x13=IKsin(j2);
IkReal x14=IKcos(j1);
IkReal x15=IKsin(j1);
IkReal x16=((0.173619753017279)*x13);
IkReal x17=(r20*x14);
IkReal x18=(r00*x10);
IkReal x19=(r10*x10);
IkReal x20=((0.984812764621894)*x13);
IkReal x21=(x11*x15);
IkReal x22=(x12*x15);
new_r10=((((-0.173619753017279)*x11*x19))+(((-1.0)*r00*x16*x21))+(((0.173619753017279)*x12*x18))+(((-1.0)*r10*x16*x22))+(((-1.0)*x16*x17))+((r10*x11*x20))+(((-0.984812764621894)*x18*x21))+(((-0.984812764621894)*x19*x22))+(((-1.0)*r00*x12*x20))+(((-0.984812764621894)*x10*x17)));
IkReal x23=IKsin(j2);
IkReal x24=IKsin(j0);
IkReal x25=IKsin(j1);
IkReal x26=IKcos(j0);
IkReal x27=IKcos(j2);
IkReal x28=IKcos(j1);
IkReal x29=(r02*x26);
IkReal x30=(r12*x24);
IkReal x31=(r22*x28);
IkReal x32=(r02*x24);
IkReal x33=((0.173619753017279)*x27);
IkReal x34=((0.984812764621894)*x23);
IkReal x35=(r12*x26);
IkReal x36=((0.173619753017279)*x23*x25);
IkReal x37=((0.984812764621894)*x25*x27);
new_r11=(((x29*x37))+((x29*x36))+(((0.173619753017279)*x23*x31))+(((-1.0)*x32*x33))+(((0.984812764621894)*x27*x31))+((x30*x37))+((x30*x36))+(((-1.0)*x34*x35))+((x32*x34))+((x33*x35)));
IkReal x38=IKcos(j2);
IkReal x39=IKsin(j0);
IkReal x40=IKsin(j2);
IkReal x41=IKcos(j0);
IkReal x42=IKsin(j1);
IkReal x43=IKcos(j1);
IkReal x44=((0.984812764621894)*r11);
IkReal x45=((0.984812764621894)*r01);
IkReal x46=((0.173619753017279)*r01);
IkReal x47=((0.173619753017279)*r11);
IkReal x48=(r21*x43);
IkReal x49=(x38*x39);
IkReal x50=(x40*x41);
IkReal x51=(x39*x40);
IkReal x52=(x38*x41);
new_r12=((((-1.0)*x45*x51))+(((-0.984812764621894)*x38*x48))+(((-1.0)*x42*x45*x52))+((x44*x50))+(((-1.0)*x42*x44*x49))+(((-1.0)*x42*x47*x51))+((x46*x49))+(((-1.0)*x42*x46*x50))+(((-1.0)*x47*x52))+(((-0.173619753017279)*x40*x48)));
IkReal x53=IKsin(j0);
IkReal x54=IKsin(j2);
IkReal x55=IKcos(j1);
IkReal x56=IKsin(j1);
IkReal x57=IKcos(j0);
IkReal x58=IKcos(j2);
IkReal x59=((0.984812764621894)*py);
IkReal x60=((0.984812764621894)*px);
IkReal x61=(r21*x55);
IkReal x62=((0.00625031110862206)*x54);
IkReal x63=((0.0354532595263882)*x58);
IkReal x64=((0.173619753017279)*x54);
IkReal x65=((0.0354532595263882)*x54);
IkReal x66=(r01*x53);
IkReal x67=((0.173619753017279)*x58);
IkReal x68=(r11*x57);
IkReal x69=((0.00625031110862206)*x58);
IkReal x70=(x53*x56);
IkReal x71=(x55*x58);
IkReal x72=(x56*x57);
new_py=((0.322648127349371)+(((-1.0)*x66*x69))+(((-1.0)*pz*x55*x64))+((r11*x62*x70))+(((-0.984812764621894)*pz*x71))+(((0.143290257252486)*x71))+((x54*x57*x59))+((r11*x63*x70))+(((-1.0)*py*x57*x67))+((x61*x62))+((x61*x63))+(((-1.0)*py*x64*x70))+((x68*x69))+(((-1.0)*x58*x60*x72))+((r01*x63*x72))+(((-1.0)*px*x64*x72))+((r01*x62*x72))+(((-1.0)*x65*x68))+(((0.0252616740640142)*x54*x55))+(((-1.0)*x58*x59*x70))+(((-1.0)*x53*x54*x60))+((x65*x66))+((px*x53*x67)));
IkReal x73=IKcos(j0);
IkReal x74=IKsin(j2);
IkReal x75=IKsin(j1);
IkReal x76=IKsin(j0);
IkReal x77=IKcos(j2);
IkReal x78=IKcos(j1);
IkReal x79=(r10*x76);
IkReal x80=((0.984812764621894)*x74);
IkReal x81=(r20*x78);
IkReal x82=(r00*x73);
IkReal x83=(r00*x76);
IkReal x84=((0.984812764621894)*x77);
IkReal x85=((0.173619753017279)*x74);
IkReal x86=(r10*x73);
IkReal x87=((0.173619753017279)*x75*x77);
new_r20=(((x84*x86))+(((-1.0)*x82*x87))+((x75*x80*x82))+(((-1.0)*x83*x85))+(((-1.0)*x83*x84))+((x75*x79*x80))+((x85*x86))+(((-1.0)*x79*x87))+(((-0.173619753017279)*x77*x81))+((x80*x81)));
IkReal x88=IKcos(j2);
IkReal x89=IKsin(j1);
IkReal x90=IKsin(j0);
IkReal x91=IKcos(j0);
IkReal x92=IKsin(j2);
IkReal x93=IKcos(j1);
IkReal x94=(r02*x91);
IkReal x95=(r12*x90);
IkReal x96=(r22*x93);
IkReal x97=(r02*x90);
IkReal x98=((0.984812764621894)*x88);
IkReal x99=((0.173619753017279)*x92);
IkReal x100=(r12*x91);
IkReal x101=((0.984812764621894)*x89*x92);
IkReal x102=((0.173619753017279)*x88*x89);
new_r21=((((-0.984812764621894)*x92*x96))+((x102*x94))+((x102*x95))+(((0.173619753017279)*x88*x96))+((x97*x98))+((x97*x99))+(((-1.0)*x101*x94))+(((-1.0)*x101*x95))+(((-1.0)*x100*x98))+(((-1.0)*x100*x99)));
IkReal x103=IKsin(j1);
IkReal x104=IKsin(j2);
IkReal x105=IKcos(j0);
IkReal x106=IKcos(j2);
IkReal x107=IKsin(j0);
IkReal x108=IKcos(j1);
IkReal x109=((0.173619753017279)*x107);
IkReal x110=(r01*x104);
IkReal x111=(r11*x103);
IkReal x112=((0.984812764621894)*x107);
IkReal x113=(r01*x106);
IkReal x114=(r11*x105);
IkReal x115=(r21*x108);
IkReal x116=(x103*x105);
new_r22=((((0.984812764621894)*x104*x115))+(((-1.0)*x112*x113))+((x104*x111*x112))+(((0.984812764621894)*x106*x114))+(((0.984812764621894)*x110*x116))+(((-1.0)*x109*x110))+(((-0.173619753017279)*x113*x116))+(((-0.173619753017279)*x106*x115))+(((-1.0)*x106*x109*x111))+(((0.173619753017279)*x104*x114)));
IkReal x117=IKsin(j0);
IkReal x118=IKsin(j2);
IkReal x119=IKcos(j2);
IkReal x120=IKcos(j0);
IkReal x121=IKsin(j1);
IkReal x122=IKcos(j1);
IkReal x123=((0.0354532595263882)*r11);
IkReal x124=((0.00625031110862206)*r11);
IkReal x125=((0.0354532595263882)*r01);
IkReal x126=((0.00625031110862206)*r01);
IkReal x127=((0.984812764621894)*x120);
IkReal x128=(py*x119);
IkReal x129=((0.173619753017279)*x119);
IkReal x130=(pz*x122);
IkReal x131=((0.984812764621894)*x117);
IkReal x132=(x118*x121);
IkReal x133=(x118*x120);
IkReal x134=(x119*x120);
IkReal x135=(x119*x122);
IkReal x136=(x117*x121);
IkReal x137=(x118*x122);
IkReal x138=(x117*x118);
new_pz=((-0.0791845055420809)+(((-1.0)*x123*x134))+((px*x127*x132))+(((-0.0354532595263882)*r21*x137))+(((-1.0)*px*x120*x121*x129))+((py*x131*x132))+(((-1.0)*x124*x133))+(((0.984812764621894)*x118*x130))+((x117*x119*x125))+(((0.0252616740640142)*x135))+((x126*x138))+((x119*x124*x136))+(((-1.0)*px*x119*x131))+(((0.00625031110862206)*r21*x135))+(((-1.0)*x117*x123*x132))+(((-1.0)*x129*x130))+((x121*x126*x134))+(((-0.143290257252486)*x137))+(((-0.173619753017279)*px*x138))+(((-0.173619753017279)*x128*x136))+(((0.173619753017279)*py*x133))+((x127*x128))+(((-1.0)*x120*x125*x132)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x139=((1.0)*px);
IkReal x140=((1.0)*pz);
IkReal x141=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x141)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x140)));
rxp0_2=((((-1.0)*r10*x139))+((py*r00)));
rxp1_0=((((-1.0)*r21*x141))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x140)));
rxp1_2=((((-1.0)*r11*x139))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x141)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x140)));
rxp2_2=((((-1.0)*r12*x139))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x142=((1.0)*px);
IkReal x143=((1.0)*pp);
IkReal x144=((0.151253443672)*cj7);
IkReal x145=((0.083953203672)*cj7);
IkReal x146=(sj6*sj7);
IkReal x147=(cj6*sj7);
IkReal x148=((0.109556)*cj4*pz);
IkReal x149=((0.056092)*pz*sj4);
IkReal x150=((0.109556)*py*sj4);
IkReal x151=((0.056092)*cj4*py);
IkReal x152=((0.314642)*x147);
IkReal x153=((0.174642)*x147);
IkReal x154=((0.00629284)*x146);
IkReal x155=((0.00349284)*x146);
IkReal x156=((((-1.0)*x152))+px);
IkReal x157=((((-1.0)*x142))+x153);
IkReal x158=(x153+px);
IkReal x159=((((-1.0)*x142))+(((-1.0)*x152)));
IkReal x160=((((-0.00978568)*cj7*sj6))+(((-0.235206647344)*sj7)));
IkReal x161=((((0.112184)*cj4*px))+(((0.219112)*px*sj4)));
IkReal x162=(x151+x150);
IkReal x163=((0.153084348928)+x144+x148);
IkReal x164=(x143+x145+x149);
IkReal x165=((0.084584588928)+x155+x148);
IkReal x166=(x154+x143+x149);
IkReal x167=((((-1.0)*x162))+(((-1.0)*x166))+x163);
IkReal x168=((((-1.0)*x162))+(((-1.0)*x164))+x165);
IkReal x169=((((-1.0)*x166))+x162+x163);
IkReal x170=((((-1.0)*x164))+x162+x165);
IkReal gconst0=x159;
IkReal gconst1=x157;
IkReal gconst2=x167;
IkReal gconst3=x160;
IkReal gconst4=x168;
IkReal gconst5=x159;
IkReal gconst6=x157;
IkReal gconst7=x167;
IkReal gconst8=x160;
IkReal gconst9=x168;
IkReal gconst10=x161;
IkReal gconst11=x161;
IkReal gconst12=x161;
IkReal gconst13=x161;
IkReal gconst14=x156;
IkReal gconst15=x158;
IkReal gconst16=x169;
IkReal gconst17=x160;
IkReal gconst18=x170;
IkReal gconst19=x156;
IkReal gconst20=x158;
IkReal gconst21=x169;
IkReal gconst22=x160;
IkReal gconst23=x170;
IkReal x171=cj6*cj6;
IkReal x172=cj7*cj7;
IkReal x173=((1.0)*gconst13);
IkReal x174=(gconst0*gconst4);
IkReal x175=((0.489284)*gconst19);
IkReal x176=((0.978568)*py);
IkReal x177=(gconst5*gconst9);
IkReal x178=(gconst1*gconst10);
IkReal x179=(gconst14*gconst18);
IkReal x180=(gconst15*gconst16);
IkReal x181=((2.0)*py);
IkReal x182=(gconst1*gconst2);
IkReal x183=(cj6*cj7);
IkReal x184=(gconst17*gconst21);
IkReal x185=(gconst20*gconst21);
IkReal x186=(gconst17*gconst22);
IkReal x187=(gconst12*gconst20);
IkReal x188=((0.489284)*gconst15);
IkReal x189=(gconst12*gconst6);
IkReal x190=(gconst19*gconst23);
IkReal x191=(gconst6*gconst7);
IkReal x192=(gconst0*gconst11);
IkReal x193=((1.0)*gconst15);
IkReal x194=(gconst3*gconst8);
IkReal x195=(gconst11*gconst14);
IkReal x196=((1.0)*x191);
IkReal x197=((0.489284)*gconst5*gconst8);
IkReal x198=((0.489284)*gconst1*gconst3);
IkReal x199=(gconst18*gconst22*x183);
IkReal x200=((0.239398832656)*x171*x172);
IkReal x201=(gconst7*x200);
op[0]=((((-1.0)*gconst18*gconst21*x200))+((x180*x190))+((x179*x185))+(((-1.0)*gconst19*x186*x193))+(((-1.0)*x180*x185))+(((-1.0)*x183*x184*x188))+(((-1.0)*x175*x199))+(((-1.0)*x179*x190)));
op[1]=(((x176*x199))+((gconst13*gconst19*x180))+(((-1.0)*gconst11*gconst21*x200))+(((-1.0)*gconst12*gconst17*x183*x188))+(((-1.0)*gconst21*x179*x181))+(((-1.0)*gconst23*x180*x181))+((x179*x187))+(((-1.0)*gconst10*x185*x193))+((gconst18*x181*x190))+((gconst21*x180*x181))+((gconst15*x181*x186))+((x185*x195))+(((-1.0)*x180*x187))+((gconst10*gconst15*x190))+(((-1.0)*gconst11*gconst22*x175*x183))+(((-1.0)*gconst19*x173*x179))+((gconst23*x179*x181))+((gconst19*x181*x186))+(((-1.0)*gconst12*gconst18*x200))+((x176*x183*x184))+(((-1.0)*gconst16*x181*x190))+((gconst16*x181*x185))+(((-1.0)*x190*x195))+(((-1.0)*gconst18*x181*x185)));
op[2]=((((4.0)*gconst18*gconst21*(py*py)))+(((-0.489284)*cj6*cj7*gconst18*gconst22*gconst5))+((gconst11*gconst12*gconst14*gconst20))+(((-0.239398832656)*gconst18*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst17*gconst19*gconst22))+(((-0.489284)*cj6*cj7*gconst15*gconst17*gconst21))+(((-0.239398832656)*gconst21*gconst4*(cj6*cj6)*(cj7*cj7)))+(((4.0)*gconst16*gconst23*(py*py)))+(((2.0)*gconst13*gconst14*gconst18*py))+((gconst15*gconst16*gconst23*gconst5))+((gconst10*gconst13*gconst15*gconst19))+(((2.0)*gconst13*gconst18*gconst19*py))+(((-2.0)*gconst10*gconst15*gconst23*py))+(((-2.0)*gconst13*gconst16*gconst19*py))+(((2.0)*gconst12*gconst15*gconst16*py))+(((-1.0)*gconst15*gconst16*gconst21*gconst6))+(((-1.0)*gconst11*gconst13*gconst14*gconst19))+(((-1.0)*gconst1*gconst16*gconst20*gconst21))+(((-1.0)*gconst14*gconst19*gconst23*gconst4))+(((-2.0)*gconst11*gconst14*gconst21*py))+(((-1.0)*gconst15*gconst17*gconst19*gconst8))+(((-4.0)*gconst18*gconst23*(py*py)))+(((-2.0)*gconst11*gconst20*gconst21*py))+(((-0.489284)*cj6*cj7*gconst18*gconst19*gconst22))+((gconst15*gconst19*gconst2*gconst23))+(((-2.0)*gconst13*gconst15*gconst16*py))+((gconst14*gconst20*gconst21*gconst4))+(((-1.0)*gconst14*gconst18*gconst23*gconst5))+(((-0.489284)*cj6*cj7*gconst18*gconst19*gconst8))+(((-4.0)*gconst17*gconst22*(py*py)))+(((0.978568)*cj6*cj7*gconst12*gconst17*py))+(((-4.0)*gconst16*gconst21*(py*py)))+(((2.0)*gconst12*gconst16*gconst20*py))+((gconst1*gconst16*gconst19*gconst23))+(((-2.0)*gconst12*gconst18*gconst20*py))+(((-0.489284)*cj6*cj7*gconst19*gconst22*gconst4))+(((2.0)*gconst11*gconst14*gconst23*py))+(((-2.0)*gconst12*gconst14*gconst18*py))+(((-2.0)*gconst10*gconst19*gconst23*py))+(((-1.0)*gconst10*gconst12*gconst15*gconst20))+(((-1.0)*gconst0*gconst18*gconst19*gconst23))+(((-0.489284)*cj6*cj7*gconst1*gconst17*gconst21))+(((2.0)*gconst10*gconst15*gconst21*py))+(((2.0)*gconst10*gconst20*gconst21*py))+(((2.0)*gconst11*gconst19*gconst23*py))+((gconst14*gconst18*gconst20*gconst7))+((gconst15*gconst16*gconst19*gconst9))+((gconst14*gconst18*gconst21*gconst6))+(((-0.489284)*cj6*cj7*gconst15*gconst21*gconst3))+((gconst0*gconst18*gconst20*gconst21))+(((-1.0)*gconst15*gconst2*gconst20*gconst21))+(((-1.0)*gconst15*gconst19*gconst22*gconst3))+(((-0.478797665312)*gconst18*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst15*gconst17*gconst22*gconst5))+(((-0.239398832656)*gconst11*gconst12*(cj6*cj6)*(cj7*cj7)))+(((-0.489284)*cj6*cj7*gconst15*gconst17*gconst7))+(((0.978568)*cj6*cj7*gconst11*gconst22*py))+(((-1.0)*gconst14*gconst18*gconst19*gconst9))+(((-1.0)*gconst15*gconst16*gconst20*gconst7)));
op[3]=((((-2.0)*gconst16*gconst23*gconst5*py))+(((2.0)*gconst17*gconst19*gconst8*py))+(((2.0)*gconst16*gconst21*gconst6*py))+(((2.0)*gconst1*gconst17*gconst22*py))+(((2.0)*gconst14*gconst23*gconst4*py))+(((2.0)*gconst19*gconst22*gconst3*py))+(((2.0)*gconst15*gconst22*gconst3*py))+(((-0.489284)*cj6*cj7*gconst11*gconst19*gconst22))+((gconst11*gconst14*gconst20*gconst7))+(((0.978568)*cj6*cj7*gconst18*gconst8*py))+(((2.0)*gconst11*gconst13*gconst14*py))+((gconst10*gconst15*gconst19*gconst9))+(((2.0)*gconst18*gconst23*gconst5*py))+(((-2.0)*gconst18*gconst20*gconst7*py))+(((-1.0)*gconst12*gconst15*gconst2*gconst20))+((gconst1*gconst13*gconst16*gconst19))+(((2.0)*gconst14*gconst18*gconst9*py))+((gconst13*gconst15*gconst19*gconst2))+(((-1.0)*gconst0*gconst11*gconst19*gconst23))+(((0.978568)*cj6*cj7*gconst17*gconst21*py))+(((0.978568)*cj6*cj7*gconst17*gconst7*py))+(((2.0)*gconst2*gconst20*gconst21*py))+(((0.978568)*cj6*cj7*gconst21*gconst3*py))+(((-4.0)*gconst11*gconst23*(py*py)))+(((-1.0)*gconst1*gconst12*gconst16*gconst20))+(((-0.478797665312)*gconst11*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst13*gconst14*gconst18*gconst5))+(((2.0)*gconst0*gconst18*gconst23*py))+(((-0.489284)*cj6*cj7*gconst12*gconst15*gconst3))+(((-2.0)*gconst15*gconst2*gconst23*py))+(((-1.0)*gconst13*gconst14*gconst19*gconst4))+(((2.0)*gconst10*gconst12*gconst15*py))+((gconst10*gconst15*gconst23*gconst5))+(((-2.0)*gconst10*gconst13*gconst19*py))+(((-2.0)*gconst10*gconst13*gconst15*py))+(((-4.0)*gconst10*gconst21*(py*py)))+(((0.978568)*cj6*cj7*gconst22*gconst4*py))+(((-2.0)*gconst1*gconst16*gconst23*py))+(((4.0)*gconst13*gconst16*(py*py)))+(((-2.0)*gconst18*gconst21*gconst6*py))+(((-1.0)*gconst0*gconst13*gconst18*gconst19))+(((2.0)*gconst15*gconst17*gconst8*py))+(((2.0)*gconst18*gconst19*gconst9*py))+(((-0.489284)*cj6*cj7*gconst11*gconst22*gconst5))+(((2.0)*gconst19*gconst23*gconst4*py))+(((-2.0)*gconst15*gconst16*gconst9*py))+((gconst0*gconst12*gconst18*gconst20))+((gconst12*gconst14*gconst18*gconst6))+(((-1.0)*gconst10*gconst15*gconst21*gconst6))+(((2.0)*gconst15*gconst16*gconst7*py))+(((-2.0)*gconst0*gconst18*gconst21*py))+(((2.0)*gconst10*gconst12*gconst20*py))+(((4.0)*gconst12*gconst18*(py*py)))+(((-0.489284)*cj6*cj7*gconst12*gconst15*gconst17))+(((-0.489284)*cj6*cj7*gconst1*gconst12*gconst17))+(((-2.0)*gconst19*gconst2*gconst23*py))+(((2.0)*gconst1*gconst16*gconst21*py))+(((2.0)*gconst17*gconst22*gconst5*py))+((gconst12*gconst14*gconst20*gconst4))+(((-2.0)*gconst11*gconst12*gconst20*py))+(((2.0)*gconst11*gconst13*gconst19*py))+(((-1.0)*gconst12*gconst15*gconst16*gconst6))+(((-2.0)*gconst20*gconst21*gconst4*py))+(((-4.0)*gconst13*gconst18*(py*py)))+(((-0.239398832656)*gconst11*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst11*gconst14*gconst23*gconst5))+(((-1.0)*gconst11*gconst14*gconst19*gconst9))+(((-2.0)*gconst11*gconst12*gconst14*py))+(((-2.0)*gconst14*gconst18*gconst7*py))+(((-0.239398832656)*gconst12*gconst4*(cj6*cj6)*(cj7*cj7)))+(((-0.478797665312)*gconst12*gconst18*(cj6*cj6)*(cj7*cj7)))+((gconst13*gconst15*gconst16*gconst5))+(((4.0)*gconst10*gconst23*(py*py)))+((gconst11*gconst14*gconst21*gconst6))+(((0.978568)*cj6*cj7*gconst18*gconst22*py))+(((-4.0)*gconst12*gconst16*(py*py)))+(((-2.0)*gconst14*gconst21*gconst4*py))+(((-2.0)*gconst16*gconst19*gconst9*py))+((gconst0*gconst11*gconst20*gconst21))+(((4.0)*gconst11*gconst21*(py*py)))+(((-1.0)*gconst1*gconst10*gconst20*gconst21))+(((2.0)*gconst16*gconst20*gconst7*py))+(((-1.0)*gconst10*gconst15*gconst20*gconst7))+(((-0.489284)*cj6*cj7*gconst11*gconst19*gconst8))+((gconst1*gconst10*gconst19*gconst23))+(((2.0)*gconst15*gconst2*gconst21*py)));
op[4]=((((-1.0)*gconst0*gconst19*gconst23*gconst4))+(((-1.0)*gconst15*gconst19*gconst3*gconst8))+(((-4.0)*gconst11*gconst13*(py*py)))+(((-1.0)*gconst1*gconst10*gconst12*gconst20))+(((-1.0)*gconst10*gconst12*gconst15*gconst6))+((gconst14*gconst21*gconst4*gconst6))+(((-4.0)*gconst18*gconst9*(py*py)))+(((-2.0)*gconst13*gconst16*gconst5*py))+(((-0.489284)*cj6*cj7*gconst18*gconst22*gconst5))+(((-4.0)*gconst16*gconst7*(py*py)))+(((-1.0)*gconst14*gconst19*gconst4*gconst9))+(((4.0)*gconst16*gconst9*(py*py)))+(((-1.0)*gconst1*gconst17*gconst19*gconst8))+(((-4.0)*gconst10*gconst12*(py*py)))+(((-1.0)*gconst14*gconst18*gconst5*gconst9))+(((-0.239398832656)*gconst18*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst16*gconst21*gconst6))+(((4.0)*gconst21*gconst4*(py*py)))+((gconst15*gconst16*gconst5*gconst9))+(((0.978568)*cj6*cj7*gconst11*gconst8*py))+(((-0.489284)*cj6*cj7*gconst1*gconst21*gconst3))+(((-0.489284)*cj6*cj7*gconst22*gconst4*gconst5))+((gconst0*gconst18*gconst21*gconst6))+(((-1.0)*gconst15*gconst2*gconst21*gconst6))+(((-2.0)*gconst0*gconst12*gconst18*py))+((gconst0*gconst20*gconst21*gconst4))+(((-0.478797665312)*gconst21*gconst4*(cj6*cj6)*(cj7*cj7)))+((gconst15*gconst2*gconst23*gconst5))+(((0.978568)*cj6*cj7*gconst12*gconst3*py))+(((-2.0)*gconst11*gconst14*gconst7*py))+(((-0.489284)*cj6*cj7*gconst15*gconst3*gconst7))+((gconst15*gconst19*gconst2*gconst9))+(((-0.478797665312)*gconst11*gconst12*(cj6*cj6)*(cj7*cj7)))+(((4.0)*gconst18*gconst7*(py*py)))+(((2.0)*gconst1*gconst10*gconst21*py))+(((4.0)*gconst2*gconst23*(py*py)))+(((2.0)*gconst12*gconst2*gconst20*py))+((gconst14*gconst20*gconst4*gconst7))+(((2.0)*gconst13*gconst19*gconst4*py))+(((4.0)*gconst11*gconst12*(py*py)))+(((-2.0)*gconst13*gconst19*gconst2*py))+(((-2.0)*gconst0*gconst11*gconst21*py))+(((-2.0)*gconst12*gconst14*gconst4*py))+(((-1.0)*gconst15*gconst22*gconst3*gconst5))+(((-2.0)*gconst10*gconst23*gconst5*py))+(((-2.0)*gconst10*gconst15*gconst9*py))+((gconst1*gconst16*gconst23*gconst5))+(((-0.239398832656)*gconst4*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-0.489284)*cj6*cj7*gconst18*gconst19*gconst8))+(((-0.489284)*cj6*cj7*gconst19*gconst4*gconst8))+(((-4.0)*gconst22*gconst3*(py*py)))+(((-1.0)*gconst15*gconst17*gconst5*gconst8))+((gconst1*gconst16*gconst19*gconst9))+(((-2.0)*gconst11*gconst21*gconst6*py))+(((2.0)*gconst0*gconst13*gconst18*py))+(((0.978568)*cj6*cj7*gconst12*gconst17*py))+(((-1.0)*gconst15*gconst2*gconst20*gconst7))+(((2.0)*gconst11*gconst14*gconst9*py))+(((-2.0)*gconst12*gconst18*gconst6*py))+(((-4.0)*gconst17*gconst8*(py*py)))+(((-2.0)*gconst1*gconst13*gconst16*py))+(((-1.0)*gconst1*gconst17*gconst22*gconst5))+(((-1.0)*gconst1*gconst19*gconst22*gconst3))+(((-0.489284)*cj6*cj7*gconst19*gconst22*gconst4))+((gconst1*gconst10*gconst13*gconst19))+(((2.0)*gconst11*gconst19*gconst9*py))+(((2.0)*gconst10*gconst21*gconst6*py))+((gconst0*gconst11*gconst12*gconst20))+(((2.0)*gconst10*gconst20*gconst7*py))+((gconst14*gconst18*gconst6*gconst7))+(((-4.0)*gconst2*gconst21*(py*py)))+(((-0.489284)*cj6*cj7*gconst1*gconst17*gconst21))+(((-0.489284)*cj6*cj7*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst23*gconst5*py))+(((-1.0)*gconst14*gconst23*gconst4*gconst5))+(((2.0)*gconst12*gconst16*gconst6*py))+((gconst11*gconst12*gconst14*gconst6))+(((-1.0)*gconst11*gconst13*gconst14*gconst5))+((gconst10*gconst13*gconst15*gconst5))+(((-0.489284)*cj6*cj7*gconst15*gconst21*gconst3))+(((-2.0)*gconst1*gconst10*gconst23*py))+(((-2.0)*gconst13*gconst15*gconst2*py))+(((2.0)*gconst1*gconst12*gconst16*py))+(((2.0)*gconst0*gconst11*gconst23*py))+(((-0.489284)*cj6*cj7*gconst18*gconst5*gconst8))+(((2.0)*gconst12*gconst15*gconst2*py))+(((-0.478797665312)*gconst18*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+(((-4.0)*gconst23*gconst4*(py*py)))+(((-2.0)*gconst10*gconst19*gconst9*py))+(((-1.0)*gconst0*gconst18*gconst19*gconst9))+(((-1.0)*gconst15*gconst16*gconst6*gconst7))+(((-1.0)*gconst1*gconst2*gconst20*gconst21))+(((-1.0)*gconst1*gconst16*gconst20*gconst7))+(((-2.0)*gconst11*gconst20*gconst7*py))+(((2.0)*gconst10*gconst15*gconst7*py))+(((-1.0)*gconst0*gconst11*gconst13*gconst19))+((gconst1*gconst19*gconst2*gconst23))+((gconst0*gconst18*gconst20*gconst7))+(((-0.489284)*cj6*cj7*gconst15*gconst17*gconst7))+(((0.978568)*cj6*cj7*gconst11*gconst22*py))+(((2.0)*gconst13*gconst14*gconst4*py))+(((2.0)*gconst13*gconst18*gconst5*py))+(((4.0)*gconst10*gconst13*(py*py)))+(((-2.0)*gconst12*gconst20*gconst4*py)));
op[5]=((((4.0)*gconst10*gconst9*(py*py)))+(((2.0)*gconst18*gconst5*gconst9*py))+(((2.0)*gconst15*gconst3*gconst8*py))+(((4.0)*gconst12*gconst4*(py*py)))+(((-1.0)*gconst1*gconst12*gconst2*gconst20))+(((-1.0)*gconst12*gconst15*gconst2*gconst6))+(((2.0)*gconst16*gconst6*gconst7*py))+(((-4.0)*gconst11*gconst9*(py*py)))+(((-2.0)*gconst1*gconst16*gconst9*py))+(((0.978568)*cj6*cj7*gconst18*gconst8*py))+(((-1.0)*gconst13*gconst14*gconst4*gconst5))+(((-0.489284)*cj6*cj7*gconst1*gconst12*gconst3))+((gconst1*gconst13*gconst16*gconst5))+(((-1.0)*gconst11*gconst14*gconst5*gconst9))+(((-0.239398832656)*gconst12*gconst18*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst10*gconst20*gconst7))+(((-2.0)*gconst1*gconst2*gconst23*py))+(((0.978568)*cj6*cj7*gconst17*gconst7*py))+(((2.0)*gconst19*gconst3*gconst8*py))+(((0.978568)*cj6*cj7*gconst21*gconst3*py))+(((-1.0)*gconst1*gconst10*gconst21*gconst6))+(((2.0)*gconst1*gconst17*gconst8*py))+(((-2.0)*gconst15*gconst2*gconst9*py))+(((-0.478797665312)*gconst12*gconst4*(cj6*cj6)*(cj7*cj7)))+(((2.0)*gconst10*gconst12*gconst6*py))+(((-1.0)*gconst10*gconst15*gconst6*gconst7))+(((-0.489284)*cj6*cj7*gconst12*gconst15*gconst3))+(((2.0)*gconst19*gconst4*gconst9*py))+(((2.0)*gconst0*gconst11*gconst13*py))+(((4.0)*gconst13*gconst2*(py*py)))+(((-2.0)*gconst2*gconst23*gconst5*py))+(((0.978568)*cj6*cj7*gconst22*gconst4*py))+(((-2.0)*gconst0*gconst11*gconst12*py))+((gconst1*gconst10*gconst23*gconst5))+(((-2.0)*gconst21*gconst4*gconst6*py))+(((2.0)*gconst17*gconst5*gconst8*py))+(((-0.489284)*cj6*cj7*gconst11*gconst22*gconst5))+((gconst0*gconst11*gconst20*gconst7))+((gconst1*gconst13*gconst19*gconst2))+(((0.978568)*cj6*cj7*gconst3*gconst7*py))+(((0.978568)*cj6*cj7*gconst4*gconst8*py))+((gconst0*gconst12*gconst18*gconst6))+(((-2.0)*gconst0*gconst18*gconst7*py))+((gconst0*gconst12*gconst20*gconst4))+((gconst1*gconst10*gconst19*gconst9))+(((2.0)*gconst1*gconst16*gconst7*py))+(((-1.0)*gconst1*gconst12*gconst16*gconst6))+(((-0.489284)*cj6*cj7*gconst1*gconst12*gconst17))+(((2.0)*gconst2*gconst20*gconst7*py))+(((-2.0)*gconst0*gconst21*gconst4*py))+((gconst11*gconst14*gconst6*gconst7))+(((-0.489284)*cj6*cj7*gconst11*gconst5*gconst8))+(((2.0)*gconst11*gconst13*gconst5*py))+((gconst10*gconst15*gconst5*gconst9))+(((-0.478797665312)*gconst11*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-2.0)*gconst19*gconst2*gconst9*py))+(((-4.0)*gconst10*gconst7*(py*py)))+(((2.0)*gconst22*gconst3*gconst5*py))+(((4.0)*gconst11*gconst7*(py*py)))+(((2.0)*gconst0*gconst23*gconst4*py))+(((-2.0)*gconst11*gconst12*gconst6*py))+(((-0.239398832656)*gconst11*gconst21*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst0*gconst11*gconst19*gconst9))+((gconst0*gconst11*gconst21*gconst6))+(((-4.0)*gconst12*gconst2*(py*py)))+(((-2.0)*gconst18*gconst6*gconst7*py))+(((-2.0)*gconst16*gconst5*gconst9*py))+(((2.0)*gconst14*gconst4*gconst9*py))+(((2.0)*gconst1*gconst2*gconst21*py))+(((2.0)*gconst15*gconst2*gconst7*py))+(((-1.0)*gconst0*gconst13*gconst18*gconst5))+(((-2.0)*gconst14*gconst4*gconst7*py))+(((-2.0)*gconst10*gconst13*gconst5*py))+(((2.0)*gconst0*gconst18*gconst9*py))+(((-1.0)*gconst0*gconst11*gconst23*gconst5))+(((-4.0)*gconst13*gconst4*(py*py)))+(((-2.0)*gconst1*gconst10*gconst13*py))+(((-1.0)*gconst0*gconst13*gconst19*gconst4))+((gconst12*gconst14*gconst4*gconst6))+((gconst13*gconst15*gconst2*gconst5))+(((2.0)*gconst23*gconst4*gconst5*py))+(((2.0)*gconst1*gconst10*gconst12*py))+(((2.0)*gconst2*gconst21*gconst6*py))+(((-0.489284)*cj6*cj7*gconst11*gconst19*gconst8))+(((-2.0)*gconst20*gconst4*gconst7*py))+(((2.0)*gconst1*gconst22*gconst3*py)));
op[6]=(((gconst14*gconst4*gconst6*gconst7))+(((-4.0)*gconst2*gconst7*(py*py)))+(((-1.0)*gconst15*gconst3*gconst5*gconst8))+(((2.0)*gconst13*gconst4*gconst5*py))+(((2.0)*gconst11*gconst5*gconst9*py))+(((2.0)*gconst10*gconst6*gconst7*py))+(((2.0)*gconst1*gconst10*gconst7*py))+(((-1.0)*gconst1*gconst10*gconst12*gconst6))+(((-0.239398832656)*gconst18*gconst7*(cj6*cj6)*(cj7*cj7)))+(((2.0)*gconst1*gconst12*gconst2*py))+(((-0.239398832656)*gconst21*gconst4*(cj6*cj6)*(cj7*cj7)))+(((2.0)*gconst0*gconst11*gconst9*py))+(((-2.0)*gconst0*gconst11*gconst7*py))+(((0.978568)*cj6*cj7*gconst11*gconst8*py))+(((-0.489284)*cj6*cj7*gconst1*gconst21*gconst3))+(((-0.489284)*cj6*cj7*gconst22*gconst4*gconst5))+((gconst0*gconst20*gconst4*gconst7))+(((0.978568)*cj6*cj7*gconst12*gconst3*py))+(((-0.489284)*cj6*cj7*gconst15*gconst3*gconst7))+(((-4.0)*gconst3*gconst8*(py*py)))+(((-1.0)*gconst1*gconst19*gconst3*gconst8))+((gconst0*gconst11*gconst12*gconst6))+(((2.0)*gconst0*gconst13*gconst4*py))+((gconst0*gconst18*gconst6*gconst7))+(((-2.0)*gconst10*gconst5*gconst9*py))+((gconst1*gconst2*gconst23*gconst5))+(((-0.478797665312)*gconst4*gconst7*(cj6*cj6)*(cj7*cj7)))+(((-1.0)*gconst1*gconst22*gconst3*gconst5))+(((-1.0)*gconst0*gconst19*gconst4*gconst9))+(((-0.489284)*cj6*cj7*gconst1*gconst3*gconst7))+(((-1.0)*gconst14*gconst4*gconst5*gconst9))+(((-1.0)*gconst1*gconst2*gconst21*gconst6))+(((-0.489284)*cj6*cj7*gconst19*gconst4*gconst8))+(((-1.0)*gconst0*gconst18*gconst5*gconst9))+(((4.0)*gconst4*gconst7*(py*py)))+(((-1.0)*gconst1*gconst16*gconst6*gconst7))+((gconst1*gconst19*gconst2*gconst9))+(((-0.489284)*cj6*cj7*gconst4*gconst5*gconst8))+(((4.0)*gconst2*gconst9*(py*py)))+((gconst15*gconst2*gconst5*gconst9))+(((-1.0)*gconst1*gconst17*gconst5*gconst8))+(((-0.489284)*cj6*cj7*gconst1*gconst17*gconst7))+(((2.0)*gconst12*gconst2*gconst6*py))+(((-2.0)*gconst13*gconst2*gconst5*py))+(((-2.0)*gconst1*gconst13*gconst2*py))+((gconst0*gconst21*gconst4*gconst6))+(((-2.0)*gconst0*gconst12*gconst4*py))+(((-4.0)*gconst4*gconst9*(py*py)))+(((-1.0)*gconst1*gconst2*gconst20*gconst7))+(((-1.0)*gconst15*gconst2*gconst6*gconst7))+(((-0.489284)*cj6*cj7*gconst18*gconst5*gconst8))+((gconst1*gconst16*gconst5*gconst9))+(((-0.239398832656)*gconst11*gconst12*(cj6*cj6)*(cj7*cj7)))+((gconst1*gconst10*gconst13*gconst5))+(((-1.0)*gconst0*gconst11*gconst13*gconst5))+(((-2.0)*gconst1*gconst10*gconst9*py))+(((-2.0)*gconst12*gconst4*gconst6*py))+(((-1.0)*gconst0*gconst23*gconst4*gconst5))+(((-2.0)*gconst11*gconst6*gconst7*py)));
op[7]=((((-1.0)*x178*x196))+(((-1.0)*gconst12*gconst4*x200))+(((-1.0)*gconst4*x181*x191))+(((-1.0)*gconst11*x183*x197))+((x174*x189))+(((-1.0)*gconst12*x183*x198))+(((-1.0)*gconst2*x177*x181))+(((-1.0)*gconst7*x174*x181))+(((-1.0)*gconst5*x173*x174))+((x191*x192))+((gconst3*gconst7*x176*x183))+((gconst4*x177*x181))+((gconst13*gconst5*x182))+((gconst7*x181*x182))+((gconst1*x181*x194))+(((-1.0)*gconst11*x201))+(((-1.0)*x177*x192))+((gconst9*x174*x181))+((gconst2*x181*x191))+(((-1.0)*gconst9*x181*x182))+((gconst5*x181*x194))+((gconst4*gconst8*x176*x183))+(((-1.0)*x182*x189))+((x177*x178)));
op[8]=(((x177*x182))+(((-1.0)*gconst4*x183*x197))+(((-1.0)*gconst1*gconst5*x194))+((x174*x191))+(((-1.0)*gconst4*x201))+(((-1.0)*x174*x177))+(((-1.0)*gconst7*x183*x198))+(((-1.0)*x182*x196)));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j8eval[2];
IkReal x202=(cj6*cj7);
j8eval[0]=(x202+(((3.43368571428571)*cj6)));
j8eval[1]=IKsign(((((4189.47957148)*x202))+(((14385.3561548827)*cj6))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x203=cj3*cj3;
IkReal x204=px*px;
IkReal x205=py*py;
IkReal x206=pz*pz;
IkReal x207=(cj6*sj4);
IkReal x208=(cj6*cj7);
IkReal x209=(px*sj3);
IkReal x210=((14.8109131810421)*cj4);
IkReal x211=((0.01533784)*cj7);
IkReal x212=(cj4*pz);
IkReal x213=((0.026964321872)*cj6);
IkReal x214=(cj3*py);
IkReal x215=((28.9279113681495)*cj7);
IkReal x216=((50.8560210052701)*cj6);
IkReal x217=(cj7*pz);
IkReal x218=(cj6*x206);
IkReal x219=((264.04680134497)*x204);
IkReal x220=(cj4*x214);
IkReal x221=(cj6*x203);
IkReal x222=((0.480716)*x204);
IkReal x223=((0.14)*x203);
IkReal x224=((906.653729681061)*x204);
j5eval[0]=((((-1.0)*x216*x220))+(((-264.04680134497)*x206*x208))+(((-906.653729681061)*x205*x221))+(((-906.653729681061)*x218))+(((1813.30745936212)*cj6*x209*x214))+(((-3.43368571428571)*cj6))+(((-1.0)*x208*x210*x214))+((x208*x209*x210))+((x207*x209*x215))+(((-99.3293560089383)*x207*x214))+((x203*x208*x219))+(((-50.8560210052701)*pz*x207))+(((528.09360268994)*x208*x209*x214))+(((99.3293560089383)*cj6*x212))+(((-1.0)*x207*x214*x215))+(((28.9279113681495)*x208*x212))+(((-264.04680134497)*x203*x205*x208))+((x221*x224))+(((99.3293560089383)*x207*x209))+(((-1.0)*x208*x219))+(((-1.0)*x208))+((cj4*x209*x216))+(((-1.0)*cj6*x224))+(((-14.8109131810421)*x207*x217)));
j5eval[1]=IKsign(((((-0.14)*x204*x208))+(((-0.00785288)*x208*x220))+(((-0.000530209036)*x208))+(((0.052665322096)*x207*x209))+((x207*x209*x211))+(((-1.0)*x205*x208*x223))+(((-1.0)*x213*x220))+(((0.00785288)*cj4*x208*x209))+(((-0.480716)*x218))+((x204*x208*x223))+(((-0.0018205711924984)*cj6))+(((-0.052665322096)*x207*x214))+(((-1.0)*x207*x211*x214))+(((-0.480716)*x205*x221))+((x221*x222))+(((0.28)*x208*x209*x214))+(((0.01533784)*x208*x212))+(((0.961432)*cj6*x209*x214))+(((0.052665322096)*cj6*x212))+((cj4*x209*x213))+(((-0.026964321872)*pz*x207))+(((-0.00785288)*x207*x217))+(((-0.14)*x206*x208))+(((-1.0)*cj6*x222))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=((3.5)+(((41.3371201171429)*(sj7*sj7)))+(((-1.0)*sj7))+(((41.3371201171429)*(cj7*cj7)))+(((24.0358)*cj7)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x225=(pz*sj4);
IkReal x226=(px*sj3);
IkReal x227=(cj3*py);
IkReal x228=((0.02)*sj4);
IkReal x229=((0.056092)*cj4);
IkReal x230=(cj4*pz);
IkReal x231=((0.02)*cj4);
IkReal x232=((0.480716)*cj4);
IkReal x233=((0.109556)*sj4);
IkReal x234=((0.480716)*sj4);
IkReal x235=((0.14)*cj4*sj7);
IkReal x236=((0.14)*cj4*cj7);
IkReal x237=((0.14)*sj4*sj7);
IkReal x238=((0.14)*cj7*sj4);
IkReal x239=((-0.025771741048)+(((0.14)*cj7*x230))+(((-1.0)*x227*x238))+(((-1.0)*x227*x234))+(((-1.0)*x227*x235))+(((-0.00766892)*cj7))+(((0.480716)*x230))+(((-0.14)*sj7*x225))+((x226*x238))+((x226*x234))+((x226*x235))+(((0.02)*x225))+(((-1.0)*x226*x231))+((x227*x231))+(((-0.00392644)*sj7)));
IkReal x240=((-0.014577720936)+(((-0.480716)*x225))+(((-1.0)*x227*x232))+(((-1.0)*x227*x236))+(((-1.0)*x227*x228))+(((0.00766892)*sj7))+(((0.02)*x230))+((x226*x232))+((x226*x236))+(((-1.0)*x226*x237))+((x227*x237))+((x226*x228))+(((-0.14)*cj7*x225))+(((-0.14)*sj7*x230))+(((-0.00392644)*cj7)));
CheckValue<IkReal> x243 = IKatan2WithCheck(IkReal(x239),IkReal(x240),IKFAST_ATAN2_MAGTHRESH);
if(!x243.valid){
continue;
}
IkReal x241=((1.0)*(x243.value));
if((((x240*x240)+(x239*x239))) < -0.00001)
continue;
CheckValue<IkReal> x244=IKPowWithIntegerCheck(IKabs(IKsqrt(((x240*x240)+(x239*x239)))),-1);
if(!x244.valid){
continue;
}
if( (((x244.value)*(((-0.0067094674)+(((-1.0)*(px*px)))+(((-1.0)*x227*x233))+(((-1.0)*x227*x229))+(((0.0014)*sj7))+(((-0.056092)*x225))+((x226*x233))+(((-1.0)*(pz*pz)))+(((0.109556)*x230))+((x226*x229))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7)))))) < -1-IKFAST_SINCOS_THRESH || (((x244.value)*(((-0.0067094674)+(((-1.0)*(px*px)))+(((-1.0)*x227*x233))+(((-1.0)*x227*x229))+(((0.0014)*sj7))+(((-0.056092)*x225))+((x226*x233))+(((-1.0)*(pz*pz)))+(((0.109556)*x230))+((x226*x229))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x242=IKasin(((x244.value)*(((-0.0067094674)+(((-1.0)*(px*px)))+(((-1.0)*x227*x233))+(((-1.0)*x227*x229))+(((0.0014)*sj7))+(((-0.056092)*x225))+((x226*x233))+(((-1.0)*(pz*pz)))+(((0.109556)*x230))+((x226*x229))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))))));
j5array[0]=((((-1.0)*x242))+(((-1.0)*x241)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x242+(((-1.0)*x241)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x245=(cj7*sj4);
IkReal x246=(cj4*sj7);
IkReal x247=(cj5*sj7);
IkReal x248=(cj3*py);
IkReal x249=(cj5*pz);
IkReal x250=(sj5*sj7);
IkReal x251=(px*sj3);
IkReal x252=((4.08760556241365)*sj5);
IkReal x253=((4.08760556241365)*cj5);
IkReal x254=((4.08760556241365)*sj4);
IkReal x255=((0.223910857497895)*cj7);
IkReal x256=((0.114640985603453)*cj7);
IkReal x257=(pz*x252);
IkReal x258=((4.08760556241365)*cj4*cj7);
if( IKabs(((((-1.0)*x246*x251*x252))+(((0.223910857497895)*x247))+((pz*x250*x254))+(((-1.0)*cj5*x256))+(((-1.0)*x245*x251*x252))+(((-4.08760556241365)*x246*x249))+((x246*x248*x252))+(((0.98248869777062)*sj7))+(((0.114640985603453)*x250))+(((0.0408760556241365)*cj7))+(((-1.0)*cj4*cj7*x257))+(((-1.0)*cj4*cj7*x248*x253))+((cj4*cj7*x251*x253))+((x245*x248*x252))+((sj5*x255))+(((-4.08760556241365)*x245*x249))+(((-1.0)*x247*x251*x254))+((x247*x248*x254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((0.0408760556241365)*sj7))+((x248*x250*x254))+(((-1.0)*x245*x248*x253))+(((-1.0)*cj5*x255))+((x249*x258))+(((-1.0)*x250*x251*x254))+(((0.223910857497895)*x250))+(((-1.0)*x246*x257))+(((-1.0)*x245*x257))+(((-1.0)*cj4*cj7*x248*x252))+(((-1.0)*pz*x247*x254))+((x245*x251*x253))+((cj4*cj7*x251*x252))+(((-0.98248869777062)*cj7))+((x246*x251*x253))+(((-1.0)*sj5*x256))+(((-1.0)*x246*x248*x253))+(((-0.114640985603453)*x247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x246*x251*x252))+(((0.223910857497895)*x247))+((pz*x250*x254))+(((-1.0)*cj5*x256))+(((-1.0)*x245*x251*x252))+(((-4.08760556241365)*x246*x249))+((x246*x248*x252))+(((0.98248869777062)*sj7))+(((0.114640985603453)*x250))+(((0.0408760556241365)*cj7))+(((-1.0)*cj4*cj7*x257))+(((-1.0)*cj4*cj7*x248*x253))+((cj4*cj7*x251*x253))+((x245*x248*x252))+((sj5*x255))+(((-4.08760556241365)*x245*x249))+(((-1.0)*x247*x251*x254))+((x247*x248*x254))))+IKsqr(((-0.286132389368955)+(((0.0408760556241365)*sj7))+((x248*x250*x254))+(((-1.0)*x245*x248*x253))+(((-1.0)*cj5*x255))+((x249*x258))+(((-1.0)*x250*x251*x254))+(((0.223910857497895)*x250))+(((-1.0)*x246*x257))+(((-1.0)*x245*x257))+(((-1.0)*cj4*cj7*x248*x252))+(((-1.0)*pz*x247*x254))+((x245*x251*x253))+((cj4*cj7*x251*x252))+(((-0.98248869777062)*cj7))+((x246*x251*x253))+(((-1.0)*sj5*x256))+(((-1.0)*x246*x248*x253))+(((-0.114640985603453)*x247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x246*x251*x252))+(((0.223910857497895)*x247))+((pz*x250*x254))+(((-1.0)*cj5*x256))+(((-1.0)*x245*x251*x252))+(((-4.08760556241365)*x246*x249))+((x246*x248*x252))+(((0.98248869777062)*sj7))+(((0.114640985603453)*x250))+(((0.0408760556241365)*cj7))+(((-1.0)*cj4*cj7*x257))+(((-1.0)*cj4*cj7*x248*x253))+((cj4*cj7*x251*x253))+((x245*x248*x252))+((sj5*x255))+(((-4.08760556241365)*x245*x249))+(((-1.0)*x247*x251*x254))+((x247*x248*x254))), ((-0.286132389368955)+(((0.0408760556241365)*sj7))+((x248*x250*x254))+(((-1.0)*x245*x248*x253))+(((-1.0)*cj5*x255))+((x249*x258))+(((-1.0)*x250*x251*x254))+(((0.223910857497895)*x250))+(((-1.0)*x246*x257))+(((-1.0)*x245*x257))+(((-1.0)*cj4*cj7*x248*x252))+(((-1.0)*pz*x247*x254))+((x245*x251*x253))+((cj4*cj7*x251*x252))+(((-0.98248869777062)*cj7))+((x246*x251*x253))+(((-1.0)*sj5*x256))+(((-1.0)*x246*x248*x253))+(((-0.114640985603453)*x247))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x259=IKsin(j8);
IkReal x260=IKcos(j8);
IkReal x261=(pz*sj4);
IkReal x262=(cj3*py);
IkReal x263=(cj4*pz);
IkReal x264=(sj5*sj7);
IkReal x265=((1.0)*cj5);
IkReal x266=(cj4*cj7);
IkReal x267=(cj5*cj7);
IkReal x268=(cj5*sj7);
IkReal x269=(cj7*sj5);
IkReal x270=((0.244642)*sj5);
IkReal x271=(cj4*px*sj3);
IkReal x272=(cj7*x260);
IkReal x273=(px*sj3*sj4);
IkReal x274=((0.244642)*x260);
IkReal x275=(cj7*x259);
IkReal x276=((0.244642)*x259);
evalcond[0]=((-0.028046)+(((-1.0)*x261))+(((-1.0)*cj4*x262))+(((-0.07)*x269))+(((-0.07)*x268))+(((0.01)*cj5))+(((-1.0)*x269*x274))+((x264*x276))+x271+(((-0.240358)*sj5))+(((-1.0)*x268*x274))+(((-1.0)*x267*x276)));
evalcond[1]=((0.054778)+(((0.07)*x267))+(((0.240358)*cj5))+(((-1.0)*x263))+(((-0.07)*x264))+(((-1.0)*x273))+(((-1.0)*x269*x276))+(((-1.0)*x268*x276))+((sj4*x262))+(((0.01)*sj5))+(((-1.0)*x264*x274))+((x267*x274)));
evalcond[2]=((0.118834468928)+(((0.056092)*x271))+(((0.03365012)*cj7))+(((-0.117603323672)*sj7*x259))+(((-0.0014)*sj7))+(((0.109556)*x273))+(((0.109556)*x263))+(((-1.0)*pp))+(((-0.109556)*sj4*x262))+(((-0.00489284)*x275))+(((0.117603323672)*x272))+(((0.03424988)*x260))+(((-0.00489284)*sj7*x260))+(((-0.056092)*cj4*x262))+(((-0.056092)*x261)));
evalcond[3]=((0.07)+(((0.240358)*cj7))+((sj5*x262*x266))+((x263*x264))+(((0.028046)*x269))+(((0.028046)*x268))+((x264*x273))+x274+(((-1.0)*sj7*x265*x271))+(((-0.01)*sj7))+(((-1.0)*px*sj3*sj5*x266))+(((-1.0)*sj4*x262*x264))+(((-0.054778)*x264))+((sj4*x262*x267))+(((-1.0)*cj7*x263*x265))+((x261*x269))+((x261*x268))+(((0.054778)*x267))+(((-1.0)*cj7*x265*x273))+((cj4*x262*x268)));
evalcond[4]=((((-1.0)*cj7*x261*x265))+(((-1.0)*x262*x265*x266))+(((0.01)*cj7))+(((0.028046)*x264))+(((0.240358)*sj7))+(((-0.028046)*x267))+(((-1.0)*sj7*x265*x273))+(((-1.0)*sj7*x263*x265))+(((-1.0)*x263*x269))+((sj4*x262*x268))+((sj4*x262*x269))+(((-1.0)*x276))+((x261*x264))+(((0.054778)*x269))+(((0.054778)*x268))+(((-1.0)*x269*x273))+((cj5*px*sj3*x266))+(((-1.0)*x264*x271))+((cj4*x262*x264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1051=((0.056092)*cj4);
IkReal x1052=(px*sj3);
IkReal x1053=(cj3*py);
IkReal x1054=((0.109556)*sj4);
IkReal x1055=((0.03424988)+(((0.117603323672)*cj7))+(((-0.00489284)*sj7)));
IkReal x1056=((((-0.117603323672)*sj7))+(((-0.00489284)*cj7)));
CheckValue<IkReal> x1059 = IKatan2WithCheck(IkReal(x1055),IkReal(x1056),IKFAST_ATAN2_MAGTHRESH);
if(!x1059.valid){
continue;
}
IkReal x1057=((1.0)*(x1059.value));
if((((x1055*x1055)+(x1056*x1056))) < -0.00001)
continue;
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1055*x1055)+(x1056*x1056)))),-1);
if(!x1060.valid){
continue;
}
if( (((x1060.value)*(((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj7))+((x1052*x1054))+(((-1.0)*pp))+((x1051*x1052))+(((-1.0)*x1053*x1054))+(((-1.0)*x1051*x1053)))))) < -1-IKFAST_SINCOS_THRESH || (((x1060.value)*(((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj7))+((x1052*x1054))+(((-1.0)*pp))+((x1051*x1052))+(((-1.0)*x1053*x1054))+(((-1.0)*x1051*x1053)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1058=IKasin(((x1060.value)*(((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj7))+((x1052*x1054))+(((-1.0)*pp))+((x1051*x1052))+(((-1.0)*x1053*x1054))+(((-1.0)*x1051*x1053))))));
j8array[0]=((((-1.0)*x1057))+(((-1.0)*x1058)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1057))+x1058);
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1061=(cj8*sj7);
IkReal x1062=(sj7*sj8);
IkReal x1063=(cj7*sj8);
IkReal x1064=(cj7*cj8);
j5eval[0]=((87.5869116628571)+(((-84.0023740514286)*x1062))+(((-1.0)*sj7))+(((84.0023740514286)*x1064))+(((24.4642)*cj8))+(((-3.49488571428571)*x1063))+(((-3.49488571428571)*x1061))+(((24.0358)*cj7)));
j5eval[1]=IKsign(((0.122621676328)+(((0.03365012)*cj7))+(((-0.00489284)*x1061))+(((-0.00489284)*x1063))+(((-0.0014)*sj7))+(((0.117603323672)*x1064))+(((-0.117603323672)*x1062))+(((0.03424988)*cj8))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1065=((124.61262619574)*sj4);
IkReal x1066=(cj3*py);
IkReal x1067=(cj8*pz);
IkReal x1068=(pz*sj4);
IkReal x1069=((35.6557084789275)*cj4);
IkReal x1070=((0.01)*sj7);
IkReal x1071=(cj4*cj7);
IkReal x1072=(cj4*cj8);
IkReal x1073=((122.430496836829)*sj7);
IkReal x1074=(cj4*pz);
IkReal x1075=((0.244642)*sj8);
IkReal x1076=((5.09367263984678)*sj7);
IkReal x1077=(px*sj3);
IkReal x1078=((0.240358)*sj7);
IkReal x1079=(cj4*x1077);
IkReal x1080=((5.09367263984678)*cj7*sj4);
IkReal x1081=((0.01)*cj7*sj4);
j5eval[0]=((-1.0)+((x1068*x1076))+(((124.61262619574)*sj8*x1074))+((x1069*x1077))+(((-1.0)*sj4*x1073*x1077))+(((-1.0)*x1073*x1074))+((sj4*x1066*x1073))+(((-5.09367263984678)*pz*x1071))+(((124.61262619574)*x1072*x1077))+(((-1.0)*sj8*x1065*x1066))+(((-1.0)*x1076*x1079))+((cj4*x1066*x1076))+(((-122.430496836829)*x1066*x1071))+(((-35.6557084789275)*x1068))+((sj8*x1065*x1077))+((x1066*x1080))+(((-124.61262619574)*x1066*x1072))+(((-3.15466451442019)*cj7))+(((-3.49488571428571)*cj8))+(((-1.0)*x1066*x1069))+(((-1.0)*x1077*x1080))+(((-6.82603043775023)*sj8))+(((6.84935489858498)*sj7))+(((-1.0)*x1065*x1067))+(((-122.430496836829)*cj7*x1068))+(((122.430496836829)*x1071*x1077)));
j5eval[1]=IKsign(((-0.00196322)+((x1068*x1070))+((x1074*x1075))+(((-1.0)*x1074*x1078))+(((0.244642)*x1072*x1077))+((sj4*x1066*x1078))+(((-1.0)*sj4*x1077*x1078))+(((-1.0)*sj4*x1066*x1075))+(((-1.0)*x1070*x1079))+(((-0.244642)*sj4*x1067))+(((-0.006193300468)*cj7))+(((-0.240358)*x1066*x1071))+((cj4*x1066*x1070))+(((-0.013400999476)*sj8))+(((0.013446790524)*sj7))+(((-0.07)*cj4*x1066))+((x1066*x1081))+(((0.240358)*x1071*x1077))+(((-0.01)*pz*x1071))+(((-1.0)*x1077*x1081))+(((-0.006861229532)*cj8))+(((0.07)*x1079))+(((-0.07)*x1068))+((sj4*x1075*x1077))+(((-0.240358)*cj7*x1068))+(((-0.244642)*x1066*x1072))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1082=(cj4*pz);
IkReal x1083=(cj4*sj7);
IkReal x1084=(px*sj3);
IkReal x1085=(cj3*py);
IkReal x1086=(sj4*sj7);
IkReal x1087=(cj4*sj8);
IkReal x1088=((0.240358)*cj7);
IkReal x1089=((62.6836634102325)*cj7);
IkReal x1090=(cj4*cj7);
IkReal x1091=((18.2555040344664)*sj4);
IkReal x1092=((63.8009002571418)*cj8);
IkReal x1093=((0.07)*sj4);
IkReal x1094=(pz*sj4);
IkReal x1095=((0.244642)*cj8);
IkReal x1096=(sj7*x1082);
j5eval[0]=((1.0)+(((3.50682769516438)*cj7))+(((-18.2555040344664)*x1082))+(((62.6836634102325)*x1083*x1085))+(((1.61516888114624)*sj7))+(((-2.60792914778091)*x1084*x1090))+(((-63.8009002571418)*x1085*x1087))+((x1085*x1091))+(((-62.6836634102325)*x1083*x1084))+((sj4*x1085*x1092))+(((63.8009002571418)*x1084*x1087))+(((3.49488571428571)*cj8))+((sj4*x1085*x1089))+(((-1.0)*x1084*x1091))+(((2.60792914778091)*x1085*x1090))+(((-1.0)*sj4*x1084*x1089))+(((-2.60792914778091)*x1085*x1086))+(((-1.0)*x1082*x1089))+(((2.60792914778091)*cj7*x1094))+(((-63.8009002571418)*sj8*x1094))+(((-1.0)*sj4*x1084*x1092))+(((-1.7893600486118)*sj8))+(((62.6836634102325)*pz*x1086))+(((-1.0)*x1082*x1092))+(((2.60792914778091)*x1096))+(((2.60792914778091)*x1084*x1086)));
j5eval[1]=IKsign(((0.00383446)+(((-0.244642)*sj8*x1094))+(((0.01)*x1084*x1086))+(((0.01)*cj7*x1094))+(((0.244642)*x1084*x1087))+(((-0.01)*x1085*x1086))+((x1085*x1093))+(((0.01)*x1085*x1090))+((sj4*x1085*x1095))+(((0.01)*x1096))+((sj4*x1085*x1088))+(((-1.0)*x1084*x1093))+(((0.240358)*pz*x1086))+(((-0.07)*x1082))+(((0.013446790524)*cj7))+(((0.006193300468)*sj7))+(((0.240358)*x1083*x1085))+(((-1.0)*sj4*x1084*x1088))+(((-0.244642)*x1085*x1087))+(((-1.0)*x1082*x1088))+(((-1.0)*sj4*x1084*x1095))+(((-0.240358)*x1083*x1084))+(((-0.006861229532)*sj8))+(((-1.0)*x1082*x1095))+(((-0.01)*x1084*x1090))+(((0.013400999476)*cj8))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1097 = IKatan2WithCheck(IkReal(((-0.0014)+(((0.056092)*cj4*px*sj3*sj7))+((cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((0.0007)*(cj7*cj7)))+(((0.01712494)*cj7*sj8))+(((2.0)*cj4*px*pz*sj3*sj4*sj7))+(((0.00244642)*cj8*(cj7*cj7)))+(((0.059849708164)*cj7*cj8*sj8))+(((-1.0)*sj7*(cj4*cj4)*(px*px)))+(((-2.0)*cj7*px*pz*sj3*(cj4*cj4)))+((cj7*px*pz*sj3))+(((-0.054778)*cj7*pz*sj4))+((sj7*(cj4*cj4)*(pz*pz)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.004213421884)*sj7))+((cj4*cj7*sj4*(pz*pz)))+(((-0.00244642)*cj7*sj7*sj8))+(((0.058801661836)*cj7*cj8*sj7))+(((2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((-1.0)*sj7*(pz*pz)))+(((0.03424988)*cj8*sj7))+(((2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((-0.00489284)*cj8))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.01682506)*cj7*sj7))+(((-0.054778)*cj3*cj4*cj7*py))+(((-1.0)*cj4*cj7*sj4*(px*px)))+(((-0.028046)*cj3*cj7*py*sj4))+(((0.058801661836)*sj8*(cj7*cj7)))+(((-2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.003939883788)*cj7))+(((0.054778)*cj4*cj7*px*sj3))+(((2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((0.028046)*cj4*cj7*pz))+(((0.028046)*cj7*px*sj3*sj4))+(((-0.056092)*pz*sj4*sj7))+(((0.059849708164)*sj7*(cj8*cj8)))+((sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.056092)*cj3*cj4*py*sj7))+(((-1.0)*cj3*cj7*py*pz)))),IkReal(((-0.01682506)+(((0.00244642)*sj8*(cj7*cj7)))+(((0.056092)*cj3*cj4*cj7*py))+(((0.0007)*cj7*sj7))+(((2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-2.0)*cj4*cj7*px*pz*sj3*sj4))+(((-0.054778)*cj3*cj4*py*sj7))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj7*(cj4*cj4)*(px*px)))+(((-0.028046)*cj3*py*sj4*sj7))+((cj4*sj4*sj7*(pz*pz)))+(((2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((-0.03424988)*cj7*cj8))+(((-1.0)*cj3*py*pz*sj7))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.056092)*cj7*pz*sj4))+(((2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+(((-0.054778)*pz*sj4*sj7))+(((-0.00244642)*sj8))+(((-1.0)*cj4*sj4*sj7*(px*px)))+(((-0.01682506)*(cj7*cj7)))+(((-0.059849708164)*cj7*(cj8*cj8)))+(((-0.058801661836)*cj8*(cj7*cj7)))+(((0.028046)*cj4*pz*sj7))+((cj7*(pz*pz)))+(((0.059849708164)*cj8*sj7*sj8))+(((-0.061885390048)*cj7))+(((0.058801661836)*cj7*sj7*sj8))+(((-0.058801661836)*cj8))+(((0.054778)*cj4*px*sj3*sj7))+(((-2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+((px*pz*sj3*sj7))+(((-2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-0.056092)*cj4*cj7*px*sj3))+(((-1.0)*cj7*(cj4*cj4)*(pz*pz)))+((cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.01712494)*sj7*sj8))+(((0.000867276212)*sj7))+(((0.028046)*px*sj3*sj4*sj7))+((cj4*sj4*sj7*(cj3*cj3)*(px*px)))+(((0.00244642)*cj7*cj8*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1097.valid){
continue;
}
CheckValue<IkReal> x1098=IKPowWithIntegerCheck(IKsign(((0.00383446)+(((0.01)*px*sj3*sj4*sj7))+(((-0.240358)*cj4*px*sj3*sj7))+(((-0.244642)*cj8*px*sj3*sj4))+(((0.240358)*cj3*cj7*py*sj4))+(((0.01)*cj7*pz*sj4))+(((0.01)*cj4*pz*sj7))+(((-0.01)*cj4*cj7*px*sj3))+(((-0.240358)*cj7*px*sj3*sj4))+(((0.244642)*cj3*cj8*py*sj4))+(((0.01)*cj3*cj4*cj7*py))+(((0.240358)*cj3*cj4*py*sj7))+(((-0.07)*px*sj3*sj4))+(((0.244642)*cj4*px*sj3*sj8))+(((0.013446790524)*cj7))+(((0.006193300468)*sj7))+(((0.07)*cj3*py*sj4))+(((-0.240358)*cj4*cj7*pz))+(((-0.244642)*cj3*cj4*py*sj8))+(((-0.01)*cj3*py*sj4*sj7))+(((0.240358)*pz*sj4*sj7))+(((-0.006861229532)*sj8))+(((-0.244642)*cj4*cj8*pz))+(((-0.07)*cj4*pz))+(((0.013400999476)*cj8))+(((-0.244642)*pz*sj4*sj8)))),-1);
if(!x1098.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1097.value)+(((1.5707963267949)*(x1098.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1099=IKsin(j5);
IkReal x1100=IKcos(j5);
IkReal x1101=(pz*sj4);
IkReal x1102=((0.244642)*sj8);
IkReal x1103=(cj4*pz);
IkReal x1104=((0.14)*sj7);
IkReal x1105=((0.244642)*cj8);
IkReal x1106=(cj7*x1099);
IkReal x1107=((0.480716)*x1099);
IkReal x1108=(cj3*py*sj4);
IkReal x1109=((0.02)*x1099);
IkReal x1110=(cj3*cj4*py);
IkReal x1111=(sj7*x1099);
IkReal x1112=(px*sj3*sj4);
IkReal x1113=(cj7*x1100);
IkReal x1114=(sj7*x1100);
IkReal x1115=(cj4*px*sj3);
IkReal x1116=((0.02)*x1100);
IkReal x1117=((0.480716)*x1100);
IkReal x1118=(x1100*x1115);
evalcond[0]=((-0.028046)+x1115+((x1102*x1111))+(((-1.0)*x1101))+(((-1.0)*x1110))+(((-0.07)*x1106))+(((-0.07)*x1114))+(((-0.240358)*x1099))+(((0.01)*x1100))+(((-1.0)*x1102*x1113))+(((-1.0)*x1105*x1114))+(((-1.0)*x1105*x1106)));
evalcond[1]=((0.054778)+x1108+((x1105*x1113))+(((0.01)*x1099))+(((-1.0)*x1103))+(((-1.0)*x1112))+(((-0.07)*x1111))+(((0.07)*x1113))+(((0.240358)*x1100))+(((-1.0)*x1102*x1114))+(((-1.0)*x1102*x1106))+(((-1.0)*x1105*x1111)));
evalcond[2]=((0.07)+x1105+(((0.240358)*cj7))+((x1108*x1113))+((x1111*x1112))+((x1110*x1114))+(((0.054778)*x1113))+(((-0.054778)*x1111))+((x1101*x1106))+((x1101*x1114))+(((0.028046)*x1114))+(((0.028046)*x1106))+(((-1.0)*x1103*x1113))+(((-1.0)*x1112*x1113))+(((-1.0)*x1114*x1115))+(((-0.01)*sj7))+((x1103*x1111))+(((-1.0)*x1108*x1111))+((x1106*x1110))+(((-1.0)*x1106*x1115)));
evalcond[3]=((((-1.0)*x1110*x1113))+((x1108*x1114))+((x1113*x1115))+(((0.054778)*x1106))+((x1110*x1111))+(((0.054778)*x1114))+(((0.01)*cj7))+((x1101*x1111))+(((-1.0)*x1111*x1115))+(((0.028046)*x1111))+(((0.240358)*sj7))+(((-1.0)*x1103*x1114))+(((-1.0)*x1112*x1114))+(((-1.0)*x1103*x1106))+(((-0.028046)*x1113))+(((-1.0)*x1102))+(((-1.0)*x1101*x1113))+((x1106*x1108))+(((-1.0)*x1106*x1112)));
evalcond[4]=((-0.0067094674)+(((-0.00766892)*x1113))+((x1109*x1112))+(((-0.14)*x1108*x1113))+(((-1.0)*x1100*x1104*x1110))+(((-0.109556)*x1108))+(((-1.0)*(px*px)))+(((-1.0)*x1100*x1101*x1104))+((x1112*x1117))+(((-0.00392644)*x1106))+((x1110*x1116))+(((-0.00392644)*x1114))+(((0.056092)*x1115))+((x1099*x1104*x1108))+(((0.0014)*sj7))+(((-1.0)*x1099*x1104*x1112))+(((-0.025771741048)*x1100))+(((-1.0)*x1099*x1103*x1104))+((x1101*x1116))+((x1104*x1118))+(((-1.0)*x1108*x1109))+(((0.00766892)*x1111))+(((-1.0)*x1107*x1110))+(((-1.0)*x1108*x1117))+(((-0.14)*x1106*x1110))+(((-0.14)*x1101*x1106))+(((-1.0)*(pz*pz)))+(((-0.014577720936)*x1099))+(((0.14)*x1112*x1113))+((x1103*x1117))+(((0.109556)*x1103))+(((0.14)*x1106*x1115))+((x1103*x1109))+(((-1.0)*(py*py)))+(((0.109556)*x1112))+(((-0.056092)*x1101))+((x1107*x1115))+(((0.14)*x1103*x1113))+(((-0.03365012)*cj7))+(((-0.056092)*x1110))+(((-1.0)*x1115*x1116))+(((-1.0)*x1101*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1119 = IKatan2WithCheck(IkReal(((0.01682506)+(((0.00244642)*sj8*(cj7*cj7)))+(((0.056092)*cj3*cj4*cj7*py))+(((0.0007)*cj7*sj7))+(((2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-2.0)*cj4*cj7*px*pz*sj3*sj4))+(((0.058801661836)*cj8))+(((-0.054778)*cj3*cj4*py*sj7))+(((-0.003939883788)*sj7))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj7*(cj4*cj4)*(px*px)))+(((-0.028046)*cj3*py*sj4*sj7))+((cj4*sj4*sj7*(pz*pz)))+(((2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((-1.0)*cj3*py*pz*sj7))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.056092)*cj7*pz*sj4))+(((2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+(((-0.054778)*pz*sj4*sj7))+(((-0.01712494)*sj7*sj8))+(((-0.059849708164)*cj8*sj7*sj8))+(((-1.0)*cj4*sj4*sj7*(px*px)))+(((-0.01682506)*(cj7*cj7)))+(((0.00244642)*sj8))+(((-0.058801661836)*cj8*(cj7*cj7)))+(((0.028046)*cj4*pz*sj7))+((cj7*(pz*pz)))+(((0.059849708164)*cj7*(cj8*cj8)))+(((0.058801661836)*cj7*sj7*sj8))+(((-0.059163130048)*cj7))+(((0.054778)*cj4*px*sj3*sj7))+(((-2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+((px*pz*sj3*sj7))+(((-2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-0.056092)*cj4*cj7*px*sj3))+(((-1.0)*cj7*(cj4*cj4)*(pz*pz)))+((cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.028046)*px*sj3*sj4*sj7))+((cj4*sj4*sj7*(cj3*cj3)*(px*px)))+(((0.00244642)*cj7*cj8*sj7)))),IkReal(((((0.01712494)*cj7*sj8))+((cj3*cj7*py*pz))+(((0.054778)*cj3*cj4*cj7*py))+(((0.054778)*cj7*pz*sj4))+(((-2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((2.0)*cj7*px*pz*sj3*(cj4*cj4)))+(((0.059849708164)*cj7*cj8*sj8))+(((-2.0)*cj4*px*pz*sj3*sj4*sj7))+(((-0.028046)*cj4*cj7*pz))+(((-1.0)*sj7*(cj4*cj4)*(pz*pz)))+(((-0.000867276212)*cj7))+(((-1.0)*cj7*px*pz*sj3))+(((-2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((0.117603323672)*sj8))+(((-2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((-0.054778)*cj4*cj7*px*sj3))+(((-0.0007)*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(pz*pz)))+(((0.00244642)*cj7*sj7*sj8))+(((-0.116835098212)*sj7))+(((2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.058801661836)*sj8*(cj7*cj7)))+((cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj3*cj4*py*sj7))+(((0.056092)*pz*sj4*sj7))+(((-0.028046)*cj7*px*sj3*sj4))+(((-0.01682506)*cj7*sj7))+((sj7*(cj4*cj4)*(px*px)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((-0.00244642)*cj8*(cj7*cj7)))+(((-0.056092)*cj4*px*sj3*sj7))+((sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.058801661836)*cj7*cj8*sj7))+((sj7*(pz*pz)))+(((0.028046)*cj3*cj7*py*sj4))+(((0.059849708164)*sj7*(cj8*cj8)))+((cj4*cj7*sj4*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1119.valid){
continue;
}
CheckValue<IkReal> x1120=IKPowWithIntegerCheck(IKsign(((-0.00196322)+(((-0.240358)*cj4*pz*sj7))+(((-0.07)*cj3*cj4*py))+(((-0.01)*cj4*cj7*pz))+(((-0.240358)*cj7*pz*sj4))+(((0.01)*cj3*cj7*py*sj4))+(((-0.244642)*cj3*cj4*cj8*py))+(((-0.244642)*cj3*py*sj4*sj8))+(((-0.006193300468)*cj7))+(((-0.013400999476)*sj8))+(((-0.07)*pz*sj4))+(((-0.244642)*cj8*pz*sj4))+(((0.013446790524)*sj7))+(((0.244642)*cj4*pz*sj8))+(((0.240358)*cj4*cj7*px*sj3))+(((-0.240358)*px*sj3*sj4*sj7))+(((0.07)*cj4*px*sj3))+(((-0.01)*cj4*px*sj3*sj7))+(((0.01)*pz*sj4*sj7))+(((-0.006861229532)*cj8))+(((0.244642)*cj4*cj8*px*sj3))+(((-0.01)*cj7*px*sj3*sj4))+(((0.244642)*px*sj3*sj4*sj8))+(((0.240358)*cj3*py*sj4*sj7))+(((-0.240358)*cj3*cj4*cj7*py))+(((0.01)*cj3*cj4*py*sj7)))),-1);
if(!x1120.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1119.value)+(((1.5707963267949)*(x1120.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1121=IKsin(j5);
IkReal x1122=IKcos(j5);
IkReal x1123=(pz*sj4);
IkReal x1124=((0.244642)*sj8);
IkReal x1125=(cj4*pz);
IkReal x1126=((0.14)*sj7);
IkReal x1127=((0.244642)*cj8);
IkReal x1128=(cj7*x1121);
IkReal x1129=((0.480716)*x1121);
IkReal x1130=(cj3*py*sj4);
IkReal x1131=((0.02)*x1121);
IkReal x1132=(cj3*cj4*py);
IkReal x1133=(sj7*x1121);
IkReal x1134=(px*sj3*sj4);
IkReal x1135=(cj7*x1122);
IkReal x1136=(sj7*x1122);
IkReal x1137=(cj4*px*sj3);
IkReal x1138=((0.02)*x1122);
IkReal x1139=((0.480716)*x1122);
IkReal x1140=(x1122*x1137);
evalcond[0]=((-0.028046)+(((0.01)*x1122))+x1137+(((-0.240358)*x1121))+(((-1.0)*x1127*x1136))+(((-1.0)*x1127*x1128))+((x1124*x1133))+(((-1.0)*x1123))+(((-1.0)*x1132))+(((-0.07)*x1136))+(((-1.0)*x1124*x1135))+(((-0.07)*x1128)));
evalcond[1]=((0.054778)+(((0.01)*x1121))+x1130+(((0.07)*x1135))+(((-1.0)*x1127*x1133))+(((-1.0)*x1125))+(((-1.0)*x1134))+(((-1.0)*x1124*x1128))+(((-0.07)*x1133))+(((-1.0)*x1124*x1136))+(((0.240358)*x1122))+((x1127*x1135)));
evalcond[2]=((0.07)+(((-0.054778)*x1133))+x1127+(((0.240358)*cj7))+(((-1.0)*x1128*x1137))+(((-1.0)*x1125*x1135))+((x1130*x1135))+(((-1.0)*x1134*x1135))+(((-1.0)*x1130*x1133))+((x1125*x1133))+(((-0.01)*sj7))+(((0.028046)*x1128))+((x1128*x1132))+(((0.028046)*x1136))+((x1123*x1136))+((x1123*x1128))+((x1133*x1134))+(((-1.0)*x1136*x1137))+(((0.054778)*x1135))+((x1132*x1136)));
evalcond[3]=((((-0.028046)*x1135))+(((0.054778)*x1128))+(((-1.0)*x1128*x1134))+(((-1.0)*x1125*x1136))+(((-1.0)*x1132*x1135))+((x1130*x1136))+(((-1.0)*x1125*x1128))+((x1135*x1137))+(((0.01)*cj7))+(((-1.0)*x1134*x1136))+(((0.240358)*sj7))+(((-1.0)*x1133*x1137))+(((-1.0)*x1123*x1135))+(((-1.0)*x1124))+((x1128*x1130))+(((0.028046)*x1133))+((x1123*x1133))+(((0.054778)*x1136))+((x1132*x1133)));
evalcond[4]=((-0.0067094674)+(((-0.109556)*x1130))+(((-1.0)*(px*px)))+(((0.14)*x1134*x1135))+(((-0.00766892)*x1135))+((x1131*x1134))+((x1129*x1137))+(((-0.00392644)*x1136))+(((-1.0)*x1121*x1126*x1134))+(((0.0014)*sj7))+(((-0.14)*x1123*x1128))+(((-0.00392644)*x1128))+(((0.056092)*x1137))+(((-1.0)*x1130*x1131))+(((-1.0)*x1130*x1139))+(((-1.0)*x1122*x1126*x1132))+((x1126*x1140))+(((-1.0)*x1123*x1129))+((x1134*x1139))+(((0.00766892)*x1133))+(((-1.0)*x1121*x1125*x1126))+(((-0.14)*x1130*x1135))+((x1125*x1139))+((x1125*x1131))+(((-0.056092)*x1132))+((x1121*x1126*x1130))+(((-0.14)*x1128*x1132))+(((-0.056092)*x1123))+(((-0.025771741048)*x1122))+(((-1.0)*(pz*pz)))+((x1123*x1138))+(((-1.0)*x1137*x1138))+(((0.109556)*x1134))+(((0.14)*x1128*x1137))+(((-1.0)*x1122*x1123*x1126))+(((-1.0)*(py*py)))+(((0.14)*x1125*x1135))+(((0.109556)*x1125))+(((-0.014577720936)*x1121))+(((-0.03365012)*cj7))+(((-1.0)*x1129*x1132))+((x1132*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1141=(cj8*sj7);
IkReal x1142=(px*sj3);
IkReal x1143=((0.01)*cj4);
IkReal x1144=((0.240358)*sj4);
IkReal x1145=((0.07)*sj4);
IkReal x1146=((0.244642)*cj4);
IkReal x1147=(cj3*py);
IkReal x1148=(sj7*sj8);
IkReal x1149=((0.01)*sj4);
IkReal x1150=(cj7*cj8);
IkReal x1151=((0.244642)*sj4);
IkReal x1152=((0.07)*cj4);
IkReal x1153=((0.240358)*cj4);
IkReal x1154=(cj7*pz);
IkReal x1155=(cj7*sj8);
IkReal x1156=((0.240358)*x1147);
IkReal x1157=(cj7*x1147);
IkReal x1158=(sj8*x1151);
IkReal x1159=(sj7*x1152);
IkReal x1160=(pz*sj8*x1146);
IkReal x1161=(pz*x1158);
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal(((-0.007288860468)+((x1142*x1146*x1150))+((x1142*x1153))+((pz*x1143))+((x1141*x1147*x1151))+((x1142*x1149))+((x1147*x1151*x1155))+(((-1.0)*pz*x1141*x1146))+(((-0.00196322)*cj7))+(((-1.0)*pz*x1150*x1151))+(((-1.0)*x1147*x1153))+((x1146*x1147*x1148))+(((-1.0)*x1146*x1147*x1150))+((cj7*x1142*x1152))+(((0.013400999476)*x1155))+(((-1.0)*sj8*x1146*x1154))+(((-1.0)*x1147*x1149))+(((-1.0)*x1152*x1157))+((pz*x1148*x1151))+(((0.013400999476)*x1141))+(((-1.0)*pz*x1159))+(((-1.0)*x1142*x1151*x1155))+(((0.006861229532)*x1148))+(((-1.0)*x1145*x1154))+(((-1.0)*x1141*x1142*x1151))+((sj7*x1145*x1147))+(((0.00383446)*sj7))+(((-1.0)*sj7*x1142*x1145))+(((-0.006861229532)*x1150))+(((-1.0)*pz*x1144))+(((-1.0)*x1142*x1146*x1148)))),IkReal(((-0.012885870524)+((pz*x1153))+(((-1.0)*x1154*x1158))+((x1147*x1148*x1151))+((x1143*x1147))+((x1142*x1146*x1155))+((x1142*x1159))+(((-0.00383446)*cj7))+((pz*x1149))+((x1141*x1142*x1146))+(((-1.0)*pz*x1141*x1151))+((x1142*x1144))+((cj7*x1142*x1145))+((x1152*x1154))+(((-1.0)*x1147*x1159))+(((-0.00196322)*sj7))+(((-1.0)*pz*sj7*x1145))+((pz*x1146*x1150))+(((-1.0)*x1146*x1147*x1155))+(((-1.0)*pz*x1146*x1148))+((x1142*x1150*x1151))+(((0.013400999476)*x1148))+(((-0.013400999476)*x1150))+(((-0.006861229532)*x1141))+(((-1.0)*x1141*x1146*x1147))+(((-1.0)*x1144*x1147))+(((-1.0)*x1145*x1157))+(((-1.0)*x1147*x1150*x1151))+(((-1.0)*x1142*x1143))+(((-0.006861229532)*x1155))+(((-1.0)*x1142*x1148*x1151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(IKsign(((0.122621676328)+(((-0.00489284)*x1141))+(((0.03365012)*cj7))+(((-0.00489284)*x1155))+(((-0.0014)*sj7))+(((0.117603323672)*x1150))+(((-0.117603323672)*x1148))+(((0.03424988)*cj8)))),-1);
if(!x1163.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1162.value)+(((1.5707963267949)*(x1163.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1164=IKsin(j5);
IkReal x1165=IKcos(j5);
IkReal x1166=(pz*sj4);
IkReal x1167=((0.244642)*sj8);
IkReal x1168=(cj4*pz);
IkReal x1169=((0.14)*sj7);
IkReal x1170=((0.244642)*cj8);
IkReal x1171=(cj7*x1164);
IkReal x1172=((0.480716)*x1164);
IkReal x1173=(cj3*py*sj4);
IkReal x1174=((0.02)*x1164);
IkReal x1175=(cj3*cj4*py);
IkReal x1176=(sj7*x1164);
IkReal x1177=(px*sj3*sj4);
IkReal x1178=(cj7*x1165);
IkReal x1179=(sj7*x1165);
IkReal x1180=(cj4*px*sj3);
IkReal x1181=((0.02)*x1165);
IkReal x1182=((0.480716)*x1165);
IkReal x1183=(x1165*x1180);
evalcond[0]=((-0.028046)+(((-0.07)*x1171))+(((-0.07)*x1179))+x1180+(((0.01)*x1165))+(((-0.240358)*x1164))+(((-1.0)*x1167*x1178))+((x1167*x1176))+(((-1.0)*x1170*x1179))+(((-1.0)*x1170*x1171))+(((-1.0)*x1166))+(((-1.0)*x1175)));
evalcond[1]=((0.054778)+(((0.07)*x1178))+(((-0.07)*x1176))+x1173+(((0.01)*x1164))+(((-1.0)*x1167*x1179))+(((-1.0)*x1167*x1171))+(((-1.0)*x1170*x1176))+(((0.240358)*x1165))+((x1170*x1178))+(((-1.0)*x1168))+(((-1.0)*x1177)));
evalcond[2]=((0.07)+x1170+(((0.240358)*cj7))+(((-1.0)*x1171*x1180))+((x1166*x1179))+((x1166*x1171))+((x1168*x1176))+((x1173*x1178))+(((-0.054778)*x1176))+(((0.054778)*x1178))+(((0.028046)*x1179))+(((0.028046)*x1171))+((x1176*x1177))+((x1175*x1179))+(((-1.0)*x1173*x1176))+(((-0.01)*sj7))+(((-1.0)*x1177*x1178))+(((-1.0)*x1168*x1178))+(((-1.0)*x1179*x1180))+((x1171*x1175)));
evalcond[3]=(((x1178*x1180))+(((-0.028046)*x1178))+((x1166*x1176))+((x1173*x1179))+(((0.054778)*x1179))+(((0.054778)*x1171))+(((-1.0)*x1175*x1178))+(((0.01)*cj7))+(((0.028046)*x1176))+(((-1.0)*x1166*x1178))+((x1175*x1176))+(((0.240358)*sj7))+(((-1.0)*x1177*x1179))+(((-1.0)*x1168*x1179))+(((-1.0)*x1168*x1171))+(((-1.0)*x1176*x1180))+(((-1.0)*x1171*x1177))+(((-1.0)*x1167))+((x1171*x1173)));
evalcond[4]=((-0.0067094674)+(((-1.0)*(px*px)))+(((-1.0)*x1173*x1174))+(((-1.0)*x1164*x1169*x1177))+(((0.056092)*x1180))+((x1168*x1174))+((x1169*x1183))+(((0.14)*x1177*x1178))+(((0.14)*x1168*x1178))+((x1174*x1177))+(((-0.14)*x1173*x1178))+((x1166*x1181))+(((-1.0)*x1172*x1175))+(((0.0014)*sj7))+((x1175*x1181))+(((-0.00766892)*x1178))+((x1172*x1180))+((x1177*x1182))+(((-0.14)*x1166*x1171))+(((-0.025771741048)*x1165))+(((-0.00392644)*x1171))+(((-0.00392644)*x1179))+(((-1.0)*x1180*x1181))+(((0.109556)*x1177))+(((-1.0)*(pz*pz)))+(((0.109556)*x1168))+(((-1.0)*x1173*x1182))+(((-0.014577720936)*x1164))+(((-0.14)*x1171*x1175))+(((-1.0)*x1165*x1169*x1175))+(((-0.056092)*x1175))+(((-0.109556)*x1173))+(((0.00766892)*x1176))+((x1164*x1169*x1173))+(((-0.056092)*x1166))+((x1168*x1182))+(((-1.0)*x1164*x1168*x1169))+(((-1.0)*(py*py)))+(((0.14)*x1171*x1180))+(((-0.03365012)*cj7))+(((-1.0)*x1166*x1172))+(((-1.0)*x1165*x1166*x1169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j8eval[0]=((3.5)+(((41.3371201171429)*(sj7*sj7)))+sj7+(((41.3371201171429)*(cj7*cj7)))+(((24.0358)*cj7)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1184=(pz*sj4);
IkReal x1185=(px*sj3);
IkReal x1186=(cj3*py);
IkReal x1187=((0.02)*sj4);
IkReal x1188=((0.056092)*cj4);
IkReal x1189=(cj4*pz);
IkReal x1190=((0.02)*cj4);
IkReal x1191=((0.480716)*cj4);
IkReal x1192=((0.109556)*sj4);
IkReal x1193=((0.480716)*sj4);
IkReal x1194=((0.14)*cj4*sj7);
IkReal x1195=((0.14)*cj4*cj7);
IkReal x1196=((0.14)*sj4*sj7);
IkReal x1197=((0.14)*cj7*sj4);
IkReal x1198=((-0.014577720936)+(((0.02)*x1189))+(((-0.00766892)*sj7))+(((-1.0)*x1186*x1187))+((x1185*x1187))+((x1185*x1196))+((x1185*x1195))+((x1185*x1191))+(((-1.0)*x1186*x1195))+(((-1.0)*x1186*x1196))+(((-1.0)*x1186*x1191))+(((-0.480716)*x1184))+(((0.14)*sj7*x1189))+(((-0.14)*cj7*x1184))+(((-0.00392644)*cj7)));
IkReal x1199=((-0.025771741048)+(((0.02)*x1184))+((x1186*x1194))+((x1186*x1190))+(((-0.00766892)*cj7))+(((0.480716)*x1189))+((x1185*x1197))+((x1185*x1193))+(((-1.0)*x1186*x1197))+(((-1.0)*x1186*x1193))+(((0.14)*cj7*x1189))+(((0.00392644)*sj7))+(((0.14)*sj7*x1184))+(((-1.0)*x1185*x1194))+(((-1.0)*x1185*x1190)));
CheckValue<IkReal> x1202 = IKatan2WithCheck(IkReal(x1199),IkReal(x1198),IKFAST_ATAN2_MAGTHRESH);
if(!x1202.valid){
continue;
}
IkReal x1200=((1.0)*(x1202.value));
if((((x1199*x1199)+(x1198*x1198))) < -0.00001)
continue;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1199*x1199)+(x1198*x1198)))),-1);
if(!x1203.valid){
continue;
}
if( (((x1203.value)*(((-0.0067094674)+(((0.109556)*x1189))+(((-1.0)*(px*px)))+(((-1.0)*x1186*x1188))+((x1185*x1188))+(((-0.0014)*sj7))+((x1185*x1192))+(((-1.0)*x1186*x1192))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1184))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7)))))) < -1-IKFAST_SINCOS_THRESH || (((x1203.value)*(((-0.0067094674)+(((0.109556)*x1189))+(((-1.0)*(px*px)))+(((-1.0)*x1186*x1188))+((x1185*x1188))+(((-0.0014)*sj7))+((x1185*x1192))+(((-1.0)*x1186*x1192))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1184))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1201=IKasin(((x1203.value)*(((-0.0067094674)+(((0.109556)*x1189))+(((-1.0)*(px*px)))+(((-1.0)*x1186*x1188))+((x1185*x1188))+(((-0.0014)*sj7))+((x1185*x1192))+(((-1.0)*x1186*x1192))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1184))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))))));
j5array[0]=((((-1.0)*x1201))+(((-1.0)*x1200)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1201+(((-1.0)*x1200)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1204=(cj7*sj4);
IkReal x1205=(cj4*sj7);
IkReal x1206=(cj5*sj7);
IkReal x1207=(cj3*py);
IkReal x1208=(cj5*pz);
IkReal x1209=(sj5*sj7);
IkReal x1210=(px*sj3);
IkReal x1211=((4.08760556241365)*sj5);
IkReal x1212=((4.08760556241365)*cj5);
IkReal x1213=((4.08760556241365)*sj4);
IkReal x1214=((0.223910857497895)*cj7);
IkReal x1215=((0.114640985603453)*cj7);
IkReal x1216=(pz*x1211);
IkReal x1217=((4.08760556241365)*cj4*cj7);
if( IKabs((((cj4*cj7*x1216))+(((-1.0)*cj4*cj7*x1210*x1212))+(((-1.0)*x1206*x1210*x1213))+((cj5*x1215))+((x1204*x1210*x1211))+(((-1.0)*x1204*x1207*x1211))+((x1205*x1207*x1211))+(((4.08760556241365)*x1204*x1208))+(((0.98248869777062)*sj7))+(((-0.0408760556241365)*cj7))+((cj4*cj7*x1207*x1212))+(((-1.0)*sj5*x1214))+((pz*x1209*x1213))+(((0.114640985603453)*x1209))+(((-4.08760556241365)*x1205*x1208))+((x1206*x1207*x1213))+(((0.223910857497895)*x1206))+(((-1.0)*x1205*x1210*x1211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((x1209*x1210*x1213))+(((-1.0)*x1204*x1216))+((cj4*cj7*x1210*x1211))+(((-0.0408760556241365)*sj7))+((x1204*x1210*x1212))+(((-1.0)*cj4*cj7*x1207*x1211))+(((-1.0)*x1204*x1207*x1212))+((x1205*x1207*x1212))+((pz*x1206*x1213))+(((-1.0)*sj5*x1215))+(((-0.98248869777062)*cj7))+(((0.114640985603453)*x1206))+((x1205*x1216))+(((-0.223910857497895)*x1209))+((x1208*x1217))+(((-1.0)*cj5*x1214))+(((-1.0)*x1207*x1209*x1213))+(((-1.0)*x1205*x1210*x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*cj7*x1216))+(((-1.0)*cj4*cj7*x1210*x1212))+(((-1.0)*x1206*x1210*x1213))+((cj5*x1215))+((x1204*x1210*x1211))+(((-1.0)*x1204*x1207*x1211))+((x1205*x1207*x1211))+(((4.08760556241365)*x1204*x1208))+(((0.98248869777062)*sj7))+(((-0.0408760556241365)*cj7))+((cj4*cj7*x1207*x1212))+(((-1.0)*sj5*x1214))+((pz*x1209*x1213))+(((0.114640985603453)*x1209))+(((-4.08760556241365)*x1205*x1208))+((x1206*x1207*x1213))+(((0.223910857497895)*x1206))+(((-1.0)*x1205*x1210*x1211))))+IKsqr(((-0.286132389368955)+((x1209*x1210*x1213))+(((-1.0)*x1204*x1216))+((cj4*cj7*x1210*x1211))+(((-0.0408760556241365)*sj7))+((x1204*x1210*x1212))+(((-1.0)*cj4*cj7*x1207*x1211))+(((-1.0)*x1204*x1207*x1212))+((x1205*x1207*x1212))+((pz*x1206*x1213))+(((-1.0)*sj5*x1215))+(((-0.98248869777062)*cj7))+(((0.114640985603453)*x1206))+((x1205*x1216))+(((-0.223910857497895)*x1209))+((x1208*x1217))+(((-1.0)*cj5*x1214))+(((-1.0)*x1207*x1209*x1213))+(((-1.0)*x1205*x1210*x1212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj4*cj7*x1216))+(((-1.0)*cj4*cj7*x1210*x1212))+(((-1.0)*x1206*x1210*x1213))+((cj5*x1215))+((x1204*x1210*x1211))+(((-1.0)*x1204*x1207*x1211))+((x1205*x1207*x1211))+(((4.08760556241365)*x1204*x1208))+(((0.98248869777062)*sj7))+(((-0.0408760556241365)*cj7))+((cj4*cj7*x1207*x1212))+(((-1.0)*sj5*x1214))+((pz*x1209*x1213))+(((0.114640985603453)*x1209))+(((-4.08760556241365)*x1205*x1208))+((x1206*x1207*x1213))+(((0.223910857497895)*x1206))+(((-1.0)*x1205*x1210*x1211))), ((-0.286132389368955)+((x1209*x1210*x1213))+(((-1.0)*x1204*x1216))+((cj4*cj7*x1210*x1211))+(((-0.0408760556241365)*sj7))+((x1204*x1210*x1212))+(((-1.0)*cj4*cj7*x1207*x1211))+(((-1.0)*x1204*x1207*x1212))+((x1205*x1207*x1212))+((pz*x1206*x1213))+(((-1.0)*sj5*x1215))+(((-0.98248869777062)*cj7))+(((0.114640985603453)*x1206))+((x1205*x1216))+(((-0.223910857497895)*x1209))+((x1208*x1217))+(((-1.0)*cj5*x1214))+(((-1.0)*x1207*x1209*x1213))+(((-1.0)*x1205*x1210*x1212))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1218=IKsin(j8);
IkReal x1219=IKcos(j8);
IkReal x1220=(pz*sj4);
IkReal x1221=((1.0)*cj5);
IkReal x1222=(cj3*py);
IkReal x1223=(cj4*sj7);
IkReal x1224=(sj5*sj7);
IkReal x1225=(cj5*cj7);
IkReal x1226=(cj7*sj5);
IkReal x1227=(cj5*sj7);
IkReal x1228=(cj4*pz);
IkReal x1229=(cj4*px*sj3);
IkReal x1230=(cj7*x1219);
IkReal x1231=((1.0)*x1228);
IkReal x1232=(px*sj3*sj4);
IkReal x1233=((0.244642)*x1219);
IkReal x1234=((0.244642)*x1218);
evalcond[0]=((-0.028046)+x1229+(((-1.0)*x1220))+(((-1.0)*x1226*x1233))+((x1225*x1234))+(((0.01)*cj5))+((x1224*x1234))+(((-0.240358)*sj5))+(((0.07)*x1227))+(((-1.0)*cj4*x1222))+((x1227*x1233))+(((-0.07)*x1226)));
evalcond[1]=((0.054778)+(((0.240358)*cj5))+(((-1.0)*x1232))+(((-1.0)*x1231))+((x1225*x1233))+((x1224*x1233))+(((-1.0)*x1227*x1234))+((x1226*x1234))+(((0.07)*x1225))+(((0.07)*x1224))+((sj4*x1222))+(((0.01)*sj5)));
evalcond[2]=((0.118834468928)+(((0.056092)*x1229))+(((0.03365012)*cj7))+(((-0.056092)*cj4*x1222))+(((-0.056092)*x1220))+(((0.0014)*sj7))+(((0.117603323672)*x1230))+(((-0.109556)*sj4*x1222))+(((-1.0)*pp))+(((0.109556)*x1228))+(((0.00489284)*cj7*x1218))+(((0.109556)*x1232))+(((-0.117603323672)*sj7*x1218))+(((0.03424988)*x1219))+(((0.00489284)*sj7*x1219)));
evalcond[3]=(((sj4*x1222*x1227))+((cj4*x1222*x1225))+(((-1.0)*sj4*x1222*x1226))+(((0.028046)*x1225))+(((0.028046)*x1224))+(((0.054778)*x1227))+(((-0.01)*cj7))+(((-1.0)*x1234))+(((-0.054778)*x1226))+((sj5*x1222*x1223))+(((-1.0)*cj7*x1221*x1229))+(((0.240358)*sj7))+(((-1.0)*pz*x1221*x1223))+((x1220*x1224))+((x1220*x1225))+(((-1.0)*px*sj3*sj5*x1223))+((x1226*x1232))+((x1226*x1228))+(((-1.0)*sj7*x1221*x1232)));
evalcond[4]=((0.07)+((sj4*x1222*x1225))+((sj4*x1222*x1224))+((cj4*x1222*x1226))+(((0.240358)*cj7))+x1233+(((-1.0)*sj7*x1220*x1221))+(((0.028046)*x1226))+(((-1.0)*x1226*x1229))+(((-1.0)*pz*sj5*x1223))+(((0.054778)*x1225))+(((0.054778)*x1224))+(((-0.028046)*x1227))+(((-1.0)*cj7*x1221*x1228))+(((-1.0)*cj7*x1221*x1232))+((x1220*x1226))+(((-1.0)*x1221*x1222*x1223))+((cj5*px*sj3*x1223))+(((0.01)*sj7))+(((-1.0)*x1224*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1235=((0.056092)*cj4);
IkReal x1236=(px*sj3);
IkReal x1237=(cj3*py);
IkReal x1238=((0.109556)*sj4);
IkReal x1239=((((-0.117603323672)*sj7))+(((0.00489284)*cj7)));
IkReal x1240=((0.03424988)+(((0.00489284)*sj7))+(((0.117603323672)*cj7)));
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(x1240),IkReal(x1239),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
IkReal x1241=((1.0)*(x1243.value));
if((((x1240*x1240)+(x1239*x1239))) < -0.00001)
continue;
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1240*x1240)+(x1239*x1239)))),-1);
if(!x1244.valid){
continue;
}
if( (((x1244.value)*(((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+((x1235*x1236))+(((-0.056092)*pz*sj4))+(((0.0014)*sj7))+(((-1.0)*x1237*x1238))+(((-1.0)*pp))+(((-1.0)*x1235*x1237))+((x1236*x1238)))))) < -1-IKFAST_SINCOS_THRESH || (((x1244.value)*(((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+((x1235*x1236))+(((-0.056092)*pz*sj4))+(((0.0014)*sj7))+(((-1.0)*x1237*x1238))+(((-1.0)*pp))+(((-1.0)*x1235*x1237))+((x1236*x1238)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1242=IKasin(((x1244.value)*(((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+((x1235*x1236))+(((-0.056092)*pz*sj4))+(((0.0014)*sj7))+(((-1.0)*x1237*x1238))+(((-1.0)*pp))+(((-1.0)*x1235*x1237))+((x1236*x1238))))));
j8array[0]=((((-1.0)*x1242))+(((-1.0)*x1241)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+x1242+(((-1.0)*x1241)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1245=(cj8*sj7);
IkReal x1246=(sj7*sj8);
IkReal x1247=(cj7*sj8);
IkReal x1248=(cj7*cj8);
j5eval[0]=((87.5869116628571)+(((3.49488571428571)*x1247))+(((3.49488571428571)*x1245))+sj7+(((84.0023740514286)*x1248))+(((24.4642)*cj8))+(((-84.0023740514286)*x1246))+(((24.0358)*cj7)));
j5eval[1]=IKsign(((0.122621676328)+(((-0.117603323672)*x1246))+(((0.03365012)*cj7))+(((0.117603323672)*x1248))+(((0.0014)*sj7))+(((0.00489284)*x1245))+(((0.00489284)*x1247))+(((0.03424988)*cj8))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1249=(cj3*py);
IkReal x1250=((124.61262619574)*sj4);
IkReal x1251=((0.01)*sj7);
IkReal x1252=(cj8*pz);
IkReal x1253=(cj4*cj8);
IkReal x1254=(pz*sj4);
IkReal x1255=(cj4*cj7);
IkReal x1256=(px*sj3);
IkReal x1257=(cj4*pz);
IkReal x1258=((0.240358)*sj7);
IkReal x1259=((0.07)*cj4);
IkReal x1260=((122.430496836829)*sj7);
IkReal x1261=((0.244642)*sj8);
IkReal x1262=((35.6557084789275)*cj4);
IkReal x1263=((5.09367263984678)*cj7*sj4);
IkReal x1264=((5.09367263984678)*cj4*sj7);
IkReal x1265=((0.01)*cj7*sj4);
j5eval[0]=((1.0)+(((124.61262619574)*x1249*x1253))+(((-1.0)*x1249*x1263))+((sj4*x1249*x1260))+(((-124.61262619574)*x1253*x1256))+(((3.15466451442019)*cj7))+(((122.430496836829)*x1249*x1255))+(((-1.0)*sj8*x1249*x1250))+(((3.49488571428571)*cj8))+(((35.6557084789275)*x1254))+((x1256*x1263))+(((-122.430496836829)*x1255*x1256))+(((-1.0)*x1257*x1260))+(((-1.0)*x1256*x1262))+(((-1.0)*x1256*x1264))+((x1250*x1252))+(((5.09367263984678)*sj7*x1254))+(((5.09367263984678)*pz*x1255))+(((-6.82603043775023)*sj8))+(((124.61262619574)*sj8*x1257))+(((6.84935489858498)*sj7))+(((122.430496836829)*cj7*x1254))+((sj8*x1250*x1256))+((x1249*x1264))+((x1249*x1262))+(((-1.0)*sj4*x1256*x1260)));
j5eval[1]=IKsign(((0.00196322)+(((-1.0)*cj4*x1251*x1256))+(((-1.0)*x1249*x1265))+((sj4*x1249*x1258))+(((0.01)*pz*x1255))+(((-1.0)*sj4*x1256*x1258))+(((0.006861229532)*cj8))+(((-0.244642)*x1253*x1256))+(((-1.0)*sj4*x1249*x1261))+(((0.244642)*x1249*x1253))+(((-0.013400999476)*sj8))+((sj4*x1256*x1261))+(((-0.240358)*x1255*x1256))+(((0.013446790524)*sj7))+((x1256*x1265))+(((-1.0)*x1256*x1259))+((cj4*x1249*x1251))+(((0.240358)*x1249*x1255))+(((-1.0)*x1257*x1258))+(((0.244642)*sj4*x1252))+(((0.240358)*cj7*x1254))+(((0.006193300468)*cj7))+((x1251*x1254))+((x1257*x1261))+((x1249*x1259))+(((0.07)*x1254))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1266=(cj4*pz);
IkReal x1267=((0.01)*sj7);
IkReal x1268=((62.6836634102325)*cj7);
IkReal x1269=((0.01)*cj7);
IkReal x1270=((62.6836634102325)*sj7);
IkReal x1271=((0.240358)*sj7);
IkReal x1272=(pz*sj4);
IkReal x1273=((63.8009002571418)*sj8);
IkReal x1274=((0.240358)*cj7);
IkReal x1275=((0.244642)*sj8);
IkReal x1276=((2.60792914778091)*cj7);
IkReal x1277=((2.60792914778091)*sj7);
IkReal x1278=((63.8009002571418)*cj8);
IkReal x1279=((0.244642)*cj8);
IkReal x1280=(cj4*px*sj3);
IkReal x1281=(cj3*cj4*py);
IkReal x1282=(px*sj3*sj4);
IkReal x1283=(cj3*py*sj4);
j5eval[0]=((1.0)+(((3.50682769516438)*cj7))+((x1270*x1280))+(((18.2555040344664)*x1283))+((x1278*x1283))+(((-1.0)*x1276*x1280))+(((-1.0)*x1270*x1272))+((x1272*x1273))+((x1272*x1276))+(((-1.0)*x1266*x1278))+(((-1.0)*x1266*x1277))+(((-1.0)*x1270*x1281))+(((3.49488571428571)*cj8))+(((-1.0)*x1266*x1268))+(((-1.0)*x1277*x1282))+(((-18.2555040344664)*x1282))+(((-1.0)*x1273*x1280))+(((-18.2555040344664)*x1266))+((x1268*x1283))+((x1277*x1283))+(((-1.0)*x1278*x1282))+((x1276*x1281))+((x1273*x1281))+(((-1.61516888114624)*sj7))+(((-1.0)*x1268*x1282))+(((1.7893600486118)*sj8)));
j5eval[1]=IKsign(((0.00383446)+((x1269*x1272))+((x1279*x1283))+(((-1.0)*x1275*x1280))+((x1272*x1275))+(((-1.0)*x1266*x1279))+(((-1.0)*x1266*x1274))+(((-1.0)*x1271*x1272))+(((-1.0)*x1267*x1282))+((x1275*x1281))+(((-1.0)*x1266*x1267))+(((0.07)*x1283))+(((-1.0)*x1269*x1280))+(((0.013446790524)*cj7))+(((-1.0)*x1271*x1281))+(((0.006861229532)*sj8))+(((-0.07)*x1266))+(((-1.0)*x1274*x1282))+((x1267*x1283))+((x1274*x1283))+(((-1.0)*x1279*x1282))+(((-0.006193300468)*sj7))+((x1269*x1281))+(((-0.07)*x1282))+(((0.013400999476)*cj8))+((x1271*x1280))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((-0.0014)+((cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((0.0007)*(cj7*cj7)))+(((-0.03424988)*cj8*sj7))+(((0.00244642)*cj8*(cj7*cj7)))+(((-2.0)*cj7*px*pz*sj3*(cj4*cj4)))+(((-2.0)*cj4*px*pz*sj3*sj4*sj7))+((cj7*px*pz*sj3))+(((-1.0)*sj7*(cj4*cj4)*(pz*pz)))+(((-0.054778)*cj7*pz*sj4))+((cj4*cj7*sj4*(pz*pz)))+(((-0.00244642)*cj7*sj7*sj8))+(((-2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((-0.004213421884)*sj7))+(((2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((-0.059849708164)*sj7*(cj8*cj8)))+(((2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.058801661836)*sj8*(cj7*cj7)))+(((-0.00489284)*cj8))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj3*cj4*py*sj7))+(((0.056092)*pz*sj4*sj7))+(((-0.01682506)*cj7*sj7))+((sj7*(cj4*cj4)*(px*px)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.054778)*cj3*cj4*cj7*py))+(((-1.0)*cj4*cj7*sj4*(px*px)))+(((-0.056092)*cj4*px*sj3*sj7))+(((-0.028046)*cj3*cj7*py*sj4))+((sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.058801661836)*cj7*cj8*sj7))+((sj7*(pz*pz)))+(((-0.01712494)*cj7*sj8))+(((-0.003939883788)*cj7))+(((0.054778)*cj4*cj7*px*sj3))+(((0.028046)*cj4*cj7*pz))+(((0.028046)*cj7*px*sj3*sj4))+(((-1.0)*cj3*cj7*py*pz))+(((-0.059849708164)*cj7*cj8*sj8)))),IkReal(((-0.01682506)+(((0.056092)*cj3*cj4*cj7*py))+(((-2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+((cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.028046)*cj3*py*sj4*sj7))+(((2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-2.0)*cj4*cj7*px*pz*sj3*sj4))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj7*(cj4*cj4)*(px*px)))+(((-0.000867276212)*sj7))+(((-0.00244642)*cj7*cj8*sj7))+((cj4*sj4*sj7*(px*px)))+(((-0.03424988)*cj7*cj8))+(((0.054778)*cj3*cj4*py*sj7))+(((0.056092)*cj7*pz*sj4))+(((-0.00244642)*sj8*(cj7*cj7)))+(((-1.0)*cj4*sj4*sj7*(pz*pz)))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(px*px)))+(((2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((-1.0)*px*pz*sj3*sj7))+(((-0.01682506)*(cj7*cj7)))+(((0.054778)*pz*sj4*sj7))+(((-0.059849708164)*cj7*(cj8*cj8)))+(((0.00244642)*sj8))+(((-0.058801661836)*cj8*(cj7*cj7)))+((cj7*(pz*pz)))+(((0.059849708164)*cj8*sj7*sj8))+(((-0.061885390048)*cj7))+(((-0.028046)*cj4*pz*sj7))+((cj3*py*pz*sj7))+(((-0.028046)*px*sj3*sj4*sj7))+(((-2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((0.058801661836)*cj7*sj7*sj8))+(((-0.058801661836)*cj8))+(((-2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+(((-0.054778)*cj4*px*sj3*sj7))+(((-0.056092)*cj4*cj7*px*sj3))+(((-1.0)*cj7*(cj4*cj4)*(pz*pz)))+((cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.0007)*cj7*sj7))+(((0.01712494)*sj7*sj8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(IKsign(((0.00383446)+(((-0.240358)*cj3*cj4*py*sj7))+(((-0.244642)*cj8*px*sj3*sj4))+(((0.240358)*cj3*cj7*py*sj4))+(((0.01)*cj7*pz*sj4))+(((-0.01)*cj4*cj7*px*sj3))+(((-0.240358)*cj7*px*sj3*sj4))+(((0.244642)*cj3*cj8*py*sj4))+(((0.244642)*cj3*cj4*py*sj8))+(((0.240358)*cj4*px*sj3*sj7))+(((0.01)*cj3*cj4*cj7*py))+(((-0.07)*px*sj3*sj4))+(((0.013446790524)*cj7))+(((0.006861229532)*sj8))+(((0.07)*cj3*py*sj4))+(((-0.01)*px*sj3*sj4*sj7))+(((-0.240358)*cj4*cj7*pz))+(((0.01)*cj3*py*sj4*sj7))+(((0.244642)*pz*sj4*sj8))+(((-0.244642)*cj4*px*sj3*sj8))+(((-0.006193300468)*sj7))+(((-0.01)*cj4*pz*sj7))+(((-0.244642)*cj4*cj8*pz))+(((-0.07)*cj4*pz))+(((0.013400999476)*cj8))+(((-0.240358)*pz*sj4*sj7)))),-1);
if(!x1285.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1284.value)+(((1.5707963267949)*(x1285.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1286=IKcos(j5);
IkReal x1287=IKsin(j5);
IkReal x1288=(pz*sj4);
IkReal x1289=((0.244642)*sj8);
IkReal x1290=(cj4*pz);
IkReal x1291=(px*sj3);
IkReal x1292=((0.14)*cj4);
IkReal x1293=((0.14)*sj4);
IkReal x1294=((1.0)*sj4);
IkReal x1295=((0.244642)*cj8);
IkReal x1296=((1.0)*cj4);
IkReal x1297=(cj7*x1287);
IkReal x1298=((0.480716)*x1287);
IkReal x1299=(cj3*py*sj4);
IkReal x1300=((0.02)*x1287);
IkReal x1301=(cj3*cj4*py);
IkReal x1302=(sj7*x1287);
IkReal x1303=(sj7*x1286);
IkReal x1304=(cj7*x1286);
IkReal x1305=((0.02)*x1286);
IkReal x1306=((0.480716)*x1286);
evalcond[0]=((-0.028046)+(((-1.0)*x1288))+(((0.01)*x1286))+(((0.07)*x1303))+((x1295*x1303))+(((-0.07)*x1297))+((x1289*x1302))+((x1289*x1304))+(((-0.240358)*x1287))+(((-1.0)*x1295*x1297))+(((-1.0)*cj3*py*x1296))+((cj4*x1291)));
evalcond[1]=((0.054778)+x1299+(((0.01)*x1287))+(((0.240358)*x1286))+(((0.07)*x1302))+(((0.07)*x1304))+((x1295*x1304))+((x1295*x1302))+(((-1.0)*x1290))+(((-1.0)*x1291*x1294))+(((-1.0)*x1289*x1303))+((x1289*x1297)));
evalcond[2]=(((x1288*x1302))+((x1288*x1304))+((x1299*x1303))+(((-1.0)*x1291*x1294*x1303))+(((-0.01)*cj7))+(((0.054778)*x1303))+(((-0.054778)*x1297))+(((-1.0)*cj3*py*x1294*x1297))+((x1290*x1297))+(((-1.0)*x1291*x1296*x1304))+(((-1.0)*x1291*x1296*x1302))+(((0.240358)*sj7))+(((-1.0)*x1290*x1303))+(((0.028046)*x1302))+(((0.028046)*x1304))+(((-1.0)*x1289))+((sj4*x1291*x1297))+((x1301*x1302))+((x1301*x1304)));
evalcond[3]=((0.07)+((x1299*x1304))+((x1299*x1302))+(((0.240358)*cj7))+x1295+(((-1.0)*x1291*x1294*x1302))+(((-1.0)*x1291*x1294*x1304))+(((-1.0)*x1288*x1303))+(((0.028046)*x1297))+(((-1.0)*x1291*x1296*x1297))+(((0.054778)*x1304))+(((0.054778)*x1302))+(((-1.0)*cj3*py*x1296*x1303))+((x1288*x1297))+(((-1.0)*x1290*x1302))+(((-1.0)*x1290*x1304))+(((-0.028046)*x1303))+((x1297*x1301))+(((0.01)*sj7))+((cj4*x1291*x1303)));
evalcond[4]=((-0.0067094674)+((x1288*x1305))+(((-0.14)*x1288*x1297))+(((-1.0)*cj3*py*x1293*x1302))+(((-1.0)*cj3*py*x1293*x1304))+(((-1.0)*(px*px)))+((sj4*x1291*x1306))+((sj4*x1291*x1300))+((x1291*x1293*x1302))+((x1291*x1293*x1304))+(((-0.109556)*x1299))+(((-1.0)*x1299*x1300))+(((-1.0)*x1299*x1306))+(((-1.0)*x1288*x1298))+(((-1.0)*cj3*py*x1292*x1297))+(((-0.056092)*x1301))+(((0.109556)*x1290))+(((-0.0014)*sj7))+((cj4*x1291*x1298))+(((0.14)*x1290*x1304))+(((0.14)*x1290*x1302))+(((-0.00392644)*x1297))+(((-1.0)*x1291*x1292*x1303))+((x1290*x1300))+((x1290*x1306))+(((0.109556)*sj4*x1291))+(((-0.056092)*x1288))+(((-0.025771741048)*x1286))+(((0.00392644)*x1303))+(((-1.0)*(pz*pz)))+((x1291*x1292*x1297))+(((-1.0)*x1298*x1301))+((cj3*py*x1292*x1303))+(((-1.0)*cj4*x1291*x1305))+(((0.14)*x1288*x1303))+(((0.056092)*cj4*x1291))+(((-1.0)*(py*py)))+(((-0.014577720936)*x1287))+((x1301*x1305))+(((-0.00766892)*x1304))+(((-0.00766892)*x1302))+(((-0.03365012)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal(((-0.01682506)+(((-0.056092)*cj7*pz*sj4))+(((0.00244642)*sj8*(cj7*cj7)))+(((0.01682506)*(cj7*cj7)))+(((2.0)*cj4*cj7*px*pz*sj3*sj4))+(((0.0007)*cj7*sj7))+(((-2.0)*cj3*cj4*cj7*py*pz*sj4))+(((-1.0)*cj7*(pz*pz)))+(((-0.054778)*cj3*cj4*py*sj7))+(((0.059163130048)*cj7))+(((-0.003939883788)*sj7))+(((-0.028046)*cj3*py*sj4*sj7))+((cj4*sj4*sj7*(pz*pz)))+(((2.0)*cj3*py*pz*sj7*(cj4*cj4)))+(((-1.0)*cj3*py*pz*sj7))+(((-1.0)*cj4*sj4*sj7*(cj3*cj3)*(py*py)))+(((0.056092)*cj4*cj7*px*sj3))+((cj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((2.0)*cj3*cj4*px*py*sj3*sj4*sj7))+(((-0.054778)*pz*sj4*sj7))+(((-0.056092)*cj3*cj4*cj7*py))+(((-1.0)*cj4*sj4*sj7*(px*px)))+((cj7*(cj4*cj4)*(pz*pz)))+(((-1.0)*cj7*(cj4*cj4)*(px*px)))+(((-0.059849708164)*cj7*(cj8*cj8)))+(((0.00244642)*sj8))+(((0.028046)*cj4*pz*sj7))+(((2.0)*cj3*cj7*px*py*sj3*(cj4*cj4)))+(((0.059849708164)*cj8*sj7*sj8))+(((-0.058801661836)*cj7*sj7*sj8))+(((-0.058801661836)*cj8))+(((0.054778)*cj4*px*sj3*sj7))+((px*pz*sj3*sj7))+(((-2.0)*px*pz*sj3*sj7*(cj4*cj4)))+(((0.058801661836)*cj8*(cj7*cj7)))+(((0.01712494)*sj7*sj8))+(((0.028046)*px*sj3*sj4*sj7))+(((-1.0)*cj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+((cj4*sj4*sj7*(cj3*cj3)*(px*px)))+(((0.00244642)*cj7*cj8*sj7)))),IkReal((((cj4*cj7*sj4*(cj3*cj3)*(px*px)))+(((0.0007)*(cj7*cj7)))+(((0.01712494)*cj7*sj8))+(((0.000867276212)*cj7))+(((0.00244642)*cj8*(cj7*cj7)))+(((0.059849708164)*cj7*cj8*sj8))+(((-2.0)*cj7*px*pz*sj3*(cj4*cj4)))+(((-2.0)*cj4*px*pz*sj3*sj4*sj7))+((cj7*px*pz*sj3))+(((-1.0)*sj7*(cj4*cj4)*(pz*pz)))+(((-0.054778)*cj7*pz*sj4))+((cj4*cj7*sj4*(pz*pz)))+(((-0.00244642)*cj7*sj7*sj8))+(((0.117603323672)*sj8))+(((-2.0)*cj3*px*py*sj3*sj7*(cj4*cj4)))+(((2.0)*cj3*cj4*cj7*px*py*sj3*sj4))+(((-0.116835098212)*sj7))+(((2.0)*cj3*cj7*py*pz*(cj4*cj4)))+(((2.0)*cj3*cj4*py*pz*sj4*sj7))+(((-0.058801661836)*sj8*(cj7*cj7)))+(((-1.0)*cj4*cj7*sj4*(cj3*cj3)*(py*py)))+(((0.056092)*cj3*cj4*py*sj7))+(((0.056092)*pz*sj4*sj7))+(((-0.01682506)*cj7*sj7))+((sj7*(cj4*cj4)*(px*px)))+(((-1.0)*sj7*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.054778)*cj3*cj4*cj7*py))+(((-1.0)*cj4*cj7*sj4*(px*px)))+(((-0.056092)*cj4*px*sj3*sj7))+(((-0.028046)*cj3*cj7*py*sj4))+((sj7*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.058801661836)*cj7*cj8*sj7))+((sj7*(pz*pz)))+(((0.054778)*cj4*cj7*px*sj3))+(((0.028046)*cj4*cj7*pz))+(((0.028046)*cj7*px*sj3*sj4))+(((0.059849708164)*sj7*(cj8*cj8)))+(((-1.0)*cj3*cj7*py*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(IKsign(((0.00196322)+(((-0.240358)*cj4*pz*sj7))+(((0.01)*cj4*cj7*pz))+(((0.006861229532)*cj8))+(((0.240358)*cj3*cj4*cj7*py))+(((-0.244642)*cj3*py*sj4*sj8))+(((-0.244642)*cj4*cj8*px*sj3))+(((-0.013400999476)*sj8))+(((0.240358)*cj7*pz*sj4))+(((-0.240358)*cj4*cj7*px*sj3))+(((0.013446790524)*sj7))+(((0.244642)*cj4*pz*sj8))+(((-0.01)*cj3*cj7*py*sj4))+(((0.07)*cj3*cj4*py))+(((-0.240358)*px*sj3*sj4*sj7))+(((0.01)*cj7*px*sj3*sj4))+(((0.07)*pz*sj4))+(((0.244642)*cj8*pz*sj4))+(((-0.01)*cj4*px*sj3*sj7))+(((0.244642)*cj3*cj4*cj8*py))+(((0.006193300468)*cj7))+(((0.01)*pz*sj4*sj7))+(((-0.07)*cj4*px*sj3))+(((0.244642)*px*sj3*sj4*sj8))+(((0.240358)*cj3*py*sj4*sj7))+(((0.01)*cj3*cj4*py*sj7)))),-1);
if(!x1308.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1307.value)+(((1.5707963267949)*(x1308.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1309=IKcos(j5);
IkReal x1310=IKsin(j5);
IkReal x1311=(pz*sj4);
IkReal x1312=((0.244642)*sj8);
IkReal x1313=(cj4*pz);
IkReal x1314=(px*sj3);
IkReal x1315=((0.14)*cj4);
IkReal x1316=((0.14)*sj4);
IkReal x1317=((1.0)*sj4);
IkReal x1318=((0.244642)*cj8);
IkReal x1319=((1.0)*cj4);
IkReal x1320=(cj7*x1310);
IkReal x1321=((0.480716)*x1310);
IkReal x1322=(cj3*py*sj4);
IkReal x1323=((0.02)*x1310);
IkReal x1324=(cj3*cj4*py);
IkReal x1325=(sj7*x1310);
IkReal x1326=(sj7*x1309);
IkReal x1327=(cj7*x1309);
IkReal x1328=((0.02)*x1309);
IkReal x1329=((0.480716)*x1309);
evalcond[0]=((-0.028046)+((x1312*x1327))+((x1312*x1325))+(((-1.0)*cj3*py*x1319))+((cj4*x1314))+(((-0.240358)*x1310))+(((-1.0)*x1311))+(((0.07)*x1326))+(((-0.07)*x1320))+(((0.01)*x1309))+((x1318*x1326))+(((-1.0)*x1318*x1320)));
evalcond[1]=((0.054778)+((x1312*x1320))+x1322+(((-1.0)*x1312*x1326))+(((0.01)*x1310))+(((0.240358)*x1309))+(((-1.0)*x1313))+(((0.07)*x1325))+(((0.07)*x1327))+(((-1.0)*x1314*x1317))+((x1318*x1327))+((x1318*x1325)));
evalcond[2]=(((x1313*x1320))+((sj4*x1314*x1320))+(((0.054778)*x1326))+(((-1.0)*x1313*x1326))+(((-0.01)*cj7))+(((-1.0)*x1312))+((x1322*x1326))+((x1324*x1325))+((x1324*x1327))+(((0.240358)*sj7))+(((-1.0)*cj3*py*x1317*x1320))+(((0.028046)*x1325))+(((0.028046)*x1327))+(((-0.054778)*x1320))+(((-1.0)*x1314*x1317*x1326))+(((-1.0)*x1314*x1319*x1327))+(((-1.0)*x1314*x1319*x1325))+((x1311*x1325))+((x1311*x1327)));
evalcond[3]=((0.07)+x1318+(((0.240358)*cj7))+(((0.054778)*x1325))+(((0.054778)*x1327))+((x1320*x1324))+(((-1.0)*x1313*x1325))+(((-1.0)*x1313*x1327))+((x1322*x1325))+((x1322*x1327))+(((-1.0)*cj3*py*x1319*x1326))+(((0.028046)*x1320))+(((-1.0)*x1314*x1317*x1327))+(((-1.0)*x1314*x1317*x1325))+(((-1.0)*x1314*x1319*x1320))+(((-0.028046)*x1326))+(((-1.0)*x1311*x1326))+(((0.01)*sj7))+((cj4*x1314*x1326))+((x1311*x1320)));
evalcond[4]=((-0.0067094674)+(((0.109556)*x1313))+(((-0.109556)*x1322))+(((-1.0)*(px*px)))+((x1313*x1329))+((x1313*x1323))+((x1314*x1316*x1327))+((x1314*x1316*x1325))+(((-0.14)*x1311*x1320))+(((0.14)*x1311*x1326))+(((0.109556)*sj4*x1314))+((sj4*x1314*x1329))+((sj4*x1314*x1323))+(((-1.0)*x1322*x1329))+(((-1.0)*x1322*x1323))+(((-1.0)*cj3*py*x1315*x1320))+(((-0.025771741048)*x1309))+(((-0.0014)*sj7))+((x1314*x1315*x1320))+((x1324*x1328))+(((-0.056092)*x1324))+(((-1.0)*cj3*py*x1316*x1325))+(((-1.0)*cj3*py*x1316*x1327))+((cj3*py*x1315*x1326))+(((-0.056092)*x1311))+(((-1.0)*cj4*x1314*x1328))+(((-1.0)*x1321*x1324))+(((-1.0)*x1314*x1315*x1326))+(((-0.00392644)*x1320))+(((-1.0)*(pz*pz)))+(((-0.014577720936)*x1310))+(((0.00392644)*x1326))+(((-0.00766892)*x1327))+(((-0.00766892)*x1325))+(((-1.0)*(py*py)))+(((0.14)*x1313*x1327))+(((0.14)*x1313*x1325))+(((-0.03365012)*cj7))+(((-1.0)*x1311*x1321))+((cj4*x1314*x1321))+(((0.056092)*cj4*x1314))+((x1311*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1330=(cj8*sj7);
IkReal x1331=(px*sj3);
IkReal x1332=((0.01)*cj4);
IkReal x1333=(pz*sj4);
IkReal x1334=((0.07)*sj4);
IkReal x1335=((0.244642)*cj4);
IkReal x1336=(cj3*py);
IkReal x1337=(sj7*sj8);
IkReal x1338=((0.01)*sj4);
IkReal x1339=(cj7*cj8);
IkReal x1340=((0.07)*cj4);
IkReal x1341=(cj7*sj8);
IkReal x1342=((0.240358)*cj4);
IkReal x1343=((0.244642)*sj4);
IkReal x1344=((0.240358)*x1336);
IkReal x1345=((0.244642)*x1337);
IkReal x1346=(cj7*x1336);
IkReal x1347=(sj8*x1343);
IkReal x1348=(sj7*x1340);
IkReal x1349=((0.244642)*pz*x1341);
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal(((-0.007288860468)+(((-1.0)*x1336*x1342))+(((-1.0)*x1340*x1346))+(((-0.07)*cj7*x1333))+((x1331*x1338))+((pz*x1330*x1335))+((pz*x1332))+((x1333*x1345))+((pz*x1335*x1341))+((x1331*x1341*x1343))+(((-0.013400999476)*x1341))+((x1335*x1336*x1337))+(((-0.240358)*x1333))+((sj7*x1331*x1334))+(((-0.00196322)*cj7))+(((0.006861229532)*x1337))+(((-1.0)*x1331*x1335*x1337))+(((-1.0)*sj7*x1334*x1336))+(((-0.006861229532)*x1339))+(((-1.0)*x1336*x1338))+(((-1.0)*x1330*x1336*x1343))+(((-0.00383446)*sj7))+((x1331*x1342))+(((-0.244642)*x1333*x1339))+(((-0.013400999476)*x1330))+((x1331*x1335*x1339))+(((-1.0)*x1335*x1336*x1339))+((x1330*x1331*x1343))+((cj7*x1331*x1340))+(((-1.0)*x1336*x1341*x1343))+((pz*x1348)))),IkReal(((-0.012885870524)+((x1335*x1336*x1341))+(((0.244642)*x1330*x1333))+(((0.244642)*x1333*x1341))+(((-1.0)*x1331*x1348))+(((-0.00383446)*cj7))+(((0.07)*sj7*x1333))+((x1330*x1335*x1336))+(((0.013400999476)*x1337))+(((-1.0)*pz*x1335*x1337))+(((-1.0)*sj4*x1344))+((x1336*x1337*x1343))+(((0.01)*x1333))+(((0.006861229532)*x1330))+(((-1.0)*x1336*x1339*x1343))+(((0.00196322)*sj7))+(((-1.0)*x1331*x1332))+((x1336*x1348))+((cj7*x1331*x1334))+(((-1.0)*x1330*x1331*x1335))+(((-0.013400999476)*x1339))+((cj7*pz*x1340))+(((-1.0)*x1334*x1346))+((x1331*x1339*x1343))+(((-1.0)*x1331*x1335*x1341))+(((0.240358)*sj4*x1331))+((pz*x1335*x1339))+(((0.006861229532)*x1341))+((pz*x1342))+((x1332*x1336))+(((-1.0)*x1331*x1337*x1343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351=IKPowWithIntegerCheck(IKsign(((0.122621676328)+(((0.117603323672)*x1339))+(((0.03365012)*cj7))+(((0.0014)*sj7))+(((-0.117603323672)*x1337))+(((0.00489284)*x1330))+(((0.00489284)*x1341))+(((0.03424988)*cj8)))),-1);
if(!x1351.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1350.value)+(((1.5707963267949)*(x1351.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1352=IKcos(j5);
IkReal x1353=IKsin(j5);
IkReal x1354=(pz*sj4);
IkReal x1355=((0.244642)*sj8);
IkReal x1356=(cj4*pz);
IkReal x1357=(px*sj3);
IkReal x1358=((0.14)*cj4);
IkReal x1359=((0.14)*sj4);
IkReal x1360=((1.0)*sj4);
IkReal x1361=((0.244642)*cj8);
IkReal x1362=((1.0)*cj4);
IkReal x1363=(cj7*x1353);
IkReal x1364=((0.480716)*x1353);
IkReal x1365=(cj3*py*sj4);
IkReal x1366=((0.02)*x1353);
IkReal x1367=(cj3*cj4*py);
IkReal x1368=(sj7*x1353);
IkReal x1369=(sj7*x1352);
IkReal x1370=(cj7*x1352);
IkReal x1371=((0.02)*x1352);
IkReal x1372=((0.480716)*x1352);
evalcond[0]=((-0.028046)+((x1355*x1368))+(((-1.0)*x1354))+(((-0.07)*x1363))+((x1361*x1369))+((cj4*x1357))+(((-1.0)*cj3*py*x1362))+(((0.07)*x1369))+(((-1.0)*x1361*x1363))+((x1355*x1370))+(((0.01)*x1352))+(((-0.240358)*x1353)));
evalcond[1]=((0.054778)+((x1355*x1363))+x1365+(((-1.0)*x1356))+((x1361*x1368))+(((0.07)*x1370))+(((0.240358)*x1352))+(((-1.0)*x1355*x1369))+(((0.07)*x1368))+(((-1.0)*x1357*x1360))+((x1361*x1370))+(((0.01)*x1353)));
evalcond[2]=(((sj4*x1357*x1363))+((x1356*x1363))+((x1367*x1368))+(((-1.0)*x1355))+(((-0.01)*cj7))+(((-1.0)*x1356*x1369))+(((-0.054778)*x1363))+((x1354*x1368))+((x1367*x1370))+(((0.240358)*sj7))+((x1365*x1369))+((x1354*x1370))+(((0.028046)*x1370))+(((-1.0)*cj3*py*x1360*x1363))+(((0.028046)*x1368))+(((0.054778)*x1369))+(((-1.0)*x1357*x1362*x1368))+(((-1.0)*x1357*x1360*x1369))+(((-1.0)*x1357*x1362*x1370)));
evalcond[3]=((0.07)+((x1365*x1370))+x1361+(((0.240358)*cj7))+(((-1.0)*x1357*x1360*x1370))+((x1363*x1367))+(((-1.0)*x1356*x1370))+(((-1.0)*x1356*x1368))+((x1354*x1363))+((cj4*x1357*x1369))+(((0.054778)*x1370))+(((-1.0)*cj3*py*x1362*x1369))+((x1365*x1368))+(((-0.028046)*x1369))+(((0.028046)*x1363))+(((0.01)*sj7))+(((0.054778)*x1368))+(((-1.0)*x1354*x1369))+(((-1.0)*x1357*x1362*x1363))+(((-1.0)*x1357*x1360*x1368)));
evalcond[4]=((-0.0067094674)+((sj4*x1357*x1366))+(((-1.0)*cj3*py*x1358*x1363))+(((-1.0)*x1357*x1358*x1369))+((x1356*x1366))+(((-1.0)*x1364*x1367))+(((-1.0)*x1365*x1372))+(((-1.0)*(px*px)))+(((-1.0)*cj4*x1357*x1371))+(((-0.14)*x1354*x1363))+(((-0.056092)*x1367))+(((-1.0)*cj3*py*x1359*x1370))+(((-0.056092)*x1354))+(((0.056092)*cj4*x1357))+(((-1.0)*x1354*x1364))+(((0.109556)*x1356))+(((-0.00392644)*x1363))+(((-0.109556)*x1365))+((cj4*x1357*x1364))+((x1367*x1371))+(((0.14)*x1354*x1369))+(((-0.0014)*sj7))+((x1357*x1359*x1370))+((x1357*x1358*x1363))+(((0.109556)*sj4*x1357))+(((-0.025771741048)*x1352))+(((0.00392644)*x1369))+(((-0.00766892)*x1368))+((sj4*x1357*x1372))+(((0.14)*x1356*x1370))+((x1354*x1371))+(((-1.0)*x1365*x1366))+(((-1.0)*(pz*pz)))+((x1356*x1372))+((cj3*py*x1358*x1369))+(((-1.0)*cj3*py*x1359*x1368))+((x1357*x1359*x1368))+(((-1.0)*(py*py)))+(((-0.03365012)*cj7))+(((-0.014577720936)*x1353))+(((0.14)*x1356*x1368))+(((-0.00766892)*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(((((0.026964321872)*cj4*cj6*px*sj3))+(((-0.01533784)*cj3*cj6*cj7*py*sj4))+(((-0.480716)*cj6*(pz*pz)))+(((0.480716)*cj6*(cj3*cj3)*(px*px)))+(((0.00785288)*cj4*cj6*cj7*px*sj3))+(((-0.480716)*cj6*(px*px)))+(((-0.14)*cj6*cj7*(px*px)))+(((-0.00785288)*cj6*cj7*pz*sj4))+(((-0.14)*cj6*cj7*(pz*pz)))+(((-0.026964321872)*cj3*cj4*cj6*py))+(((0.052665322096)*cj6*px*sj3*sj4))+(((0.01533784)*cj4*cj6*cj7*pz))+(((0.052665322096)*cj4*cj6*pz))+(((0.01533784)*cj6*cj7*px*sj3*sj4))+(((0.14)*cj6*cj7*(cj3*cj3)*(px*px)))+(((-0.000530209036)*cj6*cj7))+(((0.28)*cj3*cj6*cj7*px*py*sj3))+(((-0.0018205711924984)*cj6))+(((-0.480716)*cj6*(cj3*cj3)*(py*py)))+(((-0.052665322096)*cj3*cj6*py*sj4))+(((0.961432)*cj3*cj6*px*py*sj3))+(((-0.14)*cj6*cj7*(cj3*cj3)*(py*py)))+(((-0.00785288)*cj3*cj4*cj6*cj7*py))+(((-0.026964321872)*cj6*pz*sj4)))),-1);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal(((((0.112184)*cj3*cj4*cj6*py*pz*sj4))+(((-0.109556)*cj4*cj6*sj4*(pz*pz)))+(((-0.056092)*cj6*(cj4*cj4)*(pz*pz)))+(((0.14)*py*pz*sj3*sj4*sj7))+(((0.025771741048)*py*sj3*sj6))+(((-0.007879767576)*cj4*cj6*pz))+(((-0.219112)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.109556)*cj3*cj6*py*pz))+(((-0.02)*py*pz*sj3*sj4*sj6))+(((0.14)*cj3*cj7*sj3*sj4*sj6*(py*py)))+(((-0.480716)*cj3*sj3*sj4*sj6*(px*px)))+(((0.28)*cj4*px*py*sj7*(cj3*cj3)))+(((0.056092)*cj6*(cj4*cj4)*(px*px)))+(((0.109556)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((-0.0014)*cj4*cj6*cj7*pz))+(((0.14)*cj3*px*pz*sj4*sj7))+(((-1.0)*cj4*cj6*sj3*(px*px*px)))+(((-0.112184)*cj4*cj6*px*pz*sj3*sj4))+(((0.14)*cj3*cj4*sj3*sj7*(py*py)))+(((-0.109556)*cj6*px*pz*sj3))+(((0.00392644)*cj3*px*sj7))+(((0.0014)*cj3*cj6*cj7*py*sj4))+(((-1.0)*cj4*cj6*px*sj3*(py*py)))+(((0.0004458911331804)*cj6))+(((-0.14)*cj4*cj7*py*pz*sj3*sj6))+(((-0.03365012)*cj4*cj6*cj7*px*sj3))+(((0.025771741048)*cj3*px*sj6))+(((0.28)*cj7*px*py*sj4*sj6*(cj3*cj3)))+(((-0.02)*cj3*cj4*sj3*sj6*(py*py)))+(((-0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.04)*cj4*px*py*sj6*(cj3*cj3)))+(((-0.112184)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.008082623632)*cj6*pz*sj4))+(((0.084138)*cj6*(pz*pz)))+((cj6*sj4*(pz*pz*pz)))+(((0.02)*cj3*cj4*sj3*sj6*(px*px)))+(((-0.14)*cj4*px*py*sj7))+(((-0.14)*cj3*cj4*cj7*px*pz*sj6))+((cj6*pz*sj4*(py*py)))+(((-0.14)*cj3*cj4*sj3*sj7*(px*px)))+(((0.00392644)*py*sj3*sj7))+(((0.00766892)*cj7*py*sj3*sj6))+(((0.109556)*cj4*cj6*sj4*(px*px)))+((cj3*cj4*cj6*py*(px*px)))+(((0.961432)*px*py*sj4*sj6*(cj3*cj3)))+((cj3*cj4*cj6*py*(pz*pz)))+(((0.00766892)*cj3*cj7*px*sj6))+(((-0.480716)*cj4*py*pz*sj3*sj6))+(((0.028046)*cj6*(px*px)))+(((0.00102044046552)*cj6*cj7))+(((0.03365012)*cj3*cj4*cj6*cj7*py))+(((-0.480716)*px*py*sj4*sj6))+(((-0.0014)*cj6*cj7*px*sj3*sj4))+(((0.008082623632)*cj3*cj4*cj6*py))+(((0.480716)*cj3*sj3*sj4*sj6*(py*py)))+(((-0.219112)*cj3*cj6*py*pz*(cj4*cj4)))+(((-0.14)*cj7*px*py*sj4*sj6))+(((0.028046)*cj6*(py*py)))+(((-0.480716)*cj3*cj4*px*pz*sj6))+(((0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.007879767576)*cj3*cj6*py*sj4))+(((-0.008082623632)*cj4*cj6*px*sj3))+((cj6*pz*sj4*(px*px)))+(((0.02)*cj4*px*py*sj6))+(((-1.0)*cj4*cj6*px*sj3*(pz*pz)))+(((0.219112)*cj6*px*pz*sj3*(cj4*cj4)))+(((-0.109556)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.03365012)*cj6*cj7*pz*sj4))+(((-0.14)*cj3*cj7*sj3*sj4*sj6*(px*px)))+(((-0.007879767576)*cj6*px*sj3*sj4))+((cj3*cj4*cj6*(py*py*py)))+(((-0.02)*cj3*px*pz*sj4*sj6)))),IkReal(((((0.00180402187336)*cj6*cj7))+(((-0.219112)*cj3*cj4*cj6*py*pz*sj4))+(((0.001734552424)*cj4*cj6*px*sj3))+(((-0.14)*cj3*cj4*cj7*sj3*sj6*(py*py)))+(((0.054778)*cj6*(pz*pz)))+(((-0.14)*cj3*sj3*sj4*sj7*(px*px)))+(((-0.056092)*cj6*px*pz*sj3))+(((0.02)*cj4*py*pz*sj3*sj6))+(((-0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((-0.961432)*cj4*px*py*sj6*(cj3*cj3)))+(((-0.28)*cj4*cj7*px*py*sj6*(cj3*cj3)))+(((0.14)*cj3*sj3*sj4*sj7*(py*py)))+(((0.054778)*cj6*(py*py)))+(((-0.012510725968)*cj4*cj6*pz))+(((-1.0)*cj4*cj6*pz*(px*px)))+(((-0.056092)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.056092)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.109556)*cj6*(cj3*cj3)*(py*py)))+(((0.02)*cj3*cj4*px*pz*sj6))+(((-0.0014)*cj6*cj7*pz*sj4))+(((0.0014)*cj4*cj6*cj7*px*sj3))+((cj3*cj6*py*sj4*(px*px)))+(((-0.480716)*cj3*cj4*sj3*sj6*(py*py)))+(((-0.112184)*cj3*cj6*py*pz*(cj4*cj4)))+(((0.14)*cj3*cj4*cj7*sj3*sj6*(px*px)))+(((-0.012510725968)*cj6*px*sj3*sj4))+(((0.109556)*cj6*(cj4*cj4)*(pz*pz)))+(((0.480716)*cj4*px*py*sj6))+(((0.164334)*cj6*(px*px)))+(((-0.14)*cj4*py*pz*sj3*sj7))+(((-0.219112)*cj3*cj6*px*py*sj3))+(((-1.0)*cj6*sj3*sj4*(px*px*px)))+(((-0.480716)*cj3*px*pz*sj4*sj6))+(((-0.001734552424)*cj3*cj4*cj6*py))+(((-0.14)*cj3*cj4*px*pz*sj7))+(((0.056092)*cj4*cj6*sj4*(px*px)))+(((-0.14)*cj3*cj7*px*pz*sj4*sj6))+(((-0.04)*px*py*sj4*sj6*(cj3*cj3)))+((cj3*cj6*py*sj4*(pz*pz)))+(((0.28)*px*py*sj4*sj7*(cj3*cj3)))+(((-0.014577720936)*py*sj3*sj6))+(((0.112184)*cj6*px*pz*sj3*(cj4*cj4)))+(((-1.0)*cj4*cj6*pz*(py*py)))+(((-0.0014)*cj3*cj4*cj6*cj7*py))+(((0.02)*cj3*sj3*sj4*sj6*(px*px)))+(((0.00766892)*py*sj3*sj7))+(((-1.0)*cj4*cj6*(pz*pz*pz)))+(((0.14)*cj4*cj7*px*py*sj6))+(((0.056092)*cj3*cj6*py*pz))+(((-0.03365012)*cj4*cj6*cj7*pz))+(((-0.056092)*cj4*cj6*sj4*(pz*pz)))+(((-0.14)*px*py*sj4*sj7))+((cj3*cj6*sj4*(py*py*py)))+(((-0.00392644)*cj3*cj7*px*sj6))+(((-0.00392644)*cj7*py*sj3*sj6))+(((0.219112)*cj4*cj6*px*pz*sj3*sj4))+(((0.03365012)*cj3*cj6*cj7*py*sj4))+(((0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((0.02)*px*py*sj4*sj6))+(((-0.109556)*cj6*(cj4*cj4)*(px*px)))+(((-1.0)*cj6*px*sj3*sj4*(py*py)))+(((-0.014577720936)*cj3*px*sj6))+(((-0.001734552424)*cj6*pz*sj4))+(((0.0002217539958772)*cj6))+(((-1.0)*cj6*px*sj3*sj4*(pz*pz)))+(((-0.02)*cj3*sj3*sj4*sj6*(py*py)))+(((-0.14)*cj7*py*pz*sj3*sj4*sj6))+(((0.480716)*cj3*cj4*sj3*sj6*(px*px)))+(((-0.03365012)*cj6*cj7*px*sj3*sj4))+(((-0.480716)*py*pz*sj3*sj4*sj6))+(((-0.109556)*cj6*(cj3*cj3)*(px*px)))+(((0.219112)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((-0.112184)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.00766892)*cj3*px*sj7))+(((0.012510725968)*cj3*cj6*py*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1373.value)))+(x1374.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1375=IKcos(j5);
IkReal x1376=IKsin(j5);
IkReal x1377=(cj3*py);
IkReal x1378=((0.14)*cj7);
IkReal x1379=(cj6*pz);
IkReal x1380=((0.480716)*pz);
IkReal x1381=(sj3*sj6);
IkReal x1382=((0.14)*sj7);
IkReal x1383=(pz*sj6);
IkReal x1384=(cj3*px);
IkReal x1385=((0.02)*pz);
IkReal x1386=(sj6*sj7);
IkReal x1387=(px*sj3);
IkReal x1388=((0.056092)*cj4);
IkReal x1389=((0.109556)*sj4);
IkReal x1390=(sj4*x1375);
IkReal x1391=(cj6*x1387);
IkReal x1392=(cj4*x1375);
IkReal x1393=(sj4*x1376);
IkReal x1394=(cj4*x1376);
evalcond[0]=((((-1.0)*sj6*x1384))+((cj6*x1377*x1392))+(((-1.0)*cj6*x1377*x1393))+(((-0.054778)*cj6*x1376))+(((-0.01)*cj6))+(((-1.0)*py*x1381))+((x1379*x1394))+((x1379*x1390))+(((-1.0)*x1391*x1392))+((x1391*x1393))+(((0.028046)*cj6*x1375)));
evalcond[1]=((-0.0067094674)+(((-0.00392644)*cj7*x1376))+(((-0.02)*x1377*x1393))+(((-0.00766892)*cj7*x1375))+(((0.109556)*cj4*pz))+(((-1.0)*(px*px)))+((pz*x1378*x1392))+(((-1.0)*pz*x1378*x1393))+((sj6*x1377*x1382*x1393))+(((-0.00392644)*x1375*x1386))+(((-0.056092)*pz*sj4))+(((-1.0)*cj6*x1382*x1384))+(((-1.0)*x1377*x1388))+(((-1.0)*x1377*x1389))+((px*x1381*x1382*x1392))+(((-0.02)*x1387*x1392))+(((-0.480716)*x1377*x1394))+(((-0.480716)*x1377*x1390))+(((-0.025771741048)*x1375))+(((0.00766892)*x1376*x1386))+(((-0.014577720936)*x1376))+((x1387*x1388))+((x1387*x1389))+(((-1.0)*sj6*x1377*x1382*x1392))+(((-1.0)*cj6*py*sj3*x1382))+(((-1.0)*x1380*x1393))+(((0.02)*x1387*x1393))+(((-1.0)*(pz*pz)))+(((-1.0)*px*x1381*x1382*x1393))+((x1385*x1394))+((x1385*x1390))+(((0.02)*x1377*x1392))+(((-1.0)*x1377*x1378*x1390))+(((-1.0)*x1377*x1378*x1394))+(((-1.0)*x1382*x1383*x1394))+(((-1.0)*x1382*x1383*x1390))+(((-1.0)*(py*py)))+(((0.0014)*x1386))+(((-0.03365012)*cj7))+((x1378*x1387*x1390))+((x1378*x1387*x1394))+(((0.480716)*x1387*x1390))+(((0.480716)*x1387*x1394))+((x1380*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[2];
IkReal x1395=(cj5*cj6);
j8eval[0]=x1395;
j8eval[1]=IKsign(x1395);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1396=(cj6*sj5);
j8eval[0]=x1396;
j8eval[1]=IKsign(x1396);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1397=(cj6*cj7);
j8eval[0]=(x1397+(((3.43368571428571)*cj6)));
j8eval[1]=IKsign(((((4189.47957148)*x1397))+(((14385.3561548827)*cj6))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1398=(cj7*sj4);
IkReal x1399=(cj4*sj7);
IkReal x1400=(cj5*sj7);
IkReal x1401=(cj3*py);
IkReal x1402=(cj5*pz);
IkReal x1403=(sj5*sj7);
IkReal x1404=(px*sj3);
IkReal x1405=((4.08760556241365)*sj5);
IkReal x1406=((4.08760556241365)*cj5);
IkReal x1407=((4.08760556241365)*sj4);
IkReal x1408=((0.223910857497895)*cj7);
IkReal x1409=((0.114640985603453)*cj7);
IkReal x1410=(pz*x1405);
IkReal x1411=((4.08760556241365)*cj4*cj7);
if( IKabs(((((-1.0)*x1400*x1404*x1407))+(((-1.0)*x1398*x1404*x1405))+(((-1.0)*x1399*x1404*x1405))+((pz*x1403*x1407))+(((-1.0)*cj4*cj7*x1410))+(((0.114640985603453)*x1403))+(((-1.0)*cj4*cj7*x1401*x1406))+((sj5*x1408))+((cj4*cj7*x1404*x1406))+(((0.98248869777062)*sj7))+(((0.223910857497895)*x1400))+(((0.0408760556241365)*cj7))+((x1398*x1401*x1405))+(((-1.0)*cj5*x1409))+((x1399*x1401*x1405))+(((-4.08760556241365)*x1398*x1402))+((x1400*x1401*x1407))+(((-4.08760556241365)*x1399*x1402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((0.0408760556241365)*sj7))+(((-1.0)*x1398*x1401*x1406))+(((-1.0)*x1399*x1401*x1406))+(((-0.114640985603453)*x1400))+(((-1.0)*cj4*cj7*x1401*x1405))+((x1402*x1411))+((x1399*x1404*x1406))+((x1398*x1404*x1406))+(((-1.0)*x1399*x1410))+((cj4*cj7*x1404*x1405))+(((-1.0)*x1398*x1410))+(((0.223910857497895)*x1403))+((x1401*x1403*x1407))+(((-0.98248869777062)*cj7))+(((-1.0)*cj5*x1408))+(((-1.0)*pz*x1400*x1407))+(((-1.0)*sj5*x1409))+(((-1.0)*x1403*x1404*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1400*x1404*x1407))+(((-1.0)*x1398*x1404*x1405))+(((-1.0)*x1399*x1404*x1405))+((pz*x1403*x1407))+(((-1.0)*cj4*cj7*x1410))+(((0.114640985603453)*x1403))+(((-1.0)*cj4*cj7*x1401*x1406))+((sj5*x1408))+((cj4*cj7*x1404*x1406))+(((0.98248869777062)*sj7))+(((0.223910857497895)*x1400))+(((0.0408760556241365)*cj7))+((x1398*x1401*x1405))+(((-1.0)*cj5*x1409))+((x1399*x1401*x1405))+(((-4.08760556241365)*x1398*x1402))+((x1400*x1401*x1407))+(((-4.08760556241365)*x1399*x1402))))+IKsqr(((-0.286132389368955)+(((0.0408760556241365)*sj7))+(((-1.0)*x1398*x1401*x1406))+(((-1.0)*x1399*x1401*x1406))+(((-0.114640985603453)*x1400))+(((-1.0)*cj4*cj7*x1401*x1405))+((x1402*x1411))+((x1399*x1404*x1406))+((x1398*x1404*x1406))+(((-1.0)*x1399*x1410))+((cj4*cj7*x1404*x1405))+(((-1.0)*x1398*x1410))+(((0.223910857497895)*x1403))+((x1401*x1403*x1407))+(((-0.98248869777062)*cj7))+(((-1.0)*cj5*x1408))+(((-1.0)*pz*x1400*x1407))+(((-1.0)*sj5*x1409))+(((-1.0)*x1403*x1404*x1407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1400*x1404*x1407))+(((-1.0)*x1398*x1404*x1405))+(((-1.0)*x1399*x1404*x1405))+((pz*x1403*x1407))+(((-1.0)*cj4*cj7*x1410))+(((0.114640985603453)*x1403))+(((-1.0)*cj4*cj7*x1401*x1406))+((sj5*x1408))+((cj4*cj7*x1404*x1406))+(((0.98248869777062)*sj7))+(((0.223910857497895)*x1400))+(((0.0408760556241365)*cj7))+((x1398*x1401*x1405))+(((-1.0)*cj5*x1409))+((x1399*x1401*x1405))+(((-4.08760556241365)*x1398*x1402))+((x1400*x1401*x1407))+(((-4.08760556241365)*x1399*x1402))), ((-0.286132389368955)+(((0.0408760556241365)*sj7))+(((-1.0)*x1398*x1401*x1406))+(((-1.0)*x1399*x1401*x1406))+(((-0.114640985603453)*x1400))+(((-1.0)*cj4*cj7*x1401*x1405))+((x1402*x1411))+((x1399*x1404*x1406))+((x1398*x1404*x1406))+(((-1.0)*x1399*x1410))+((cj4*cj7*x1404*x1405))+(((-1.0)*x1398*x1410))+(((0.223910857497895)*x1403))+((x1401*x1403*x1407))+(((-0.98248869777062)*cj7))+(((-1.0)*cj5*x1408))+(((-1.0)*pz*x1400*x1407))+(((-1.0)*sj5*x1409))+(((-1.0)*x1403*x1404*x1407))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1412=IKsin(j8);
IkReal x1413=IKcos(j8);
IkReal x1414=(pz*sj4);
IkReal x1415=(cj3*py);
IkReal x1416=(cj4*pz);
IkReal x1417=(sj5*sj7);
IkReal x1418=((1.0)*cj5);
IkReal x1419=(cj4*cj7);
IkReal x1420=(cj5*cj7);
IkReal x1421=(cj5*sj7);
IkReal x1422=(cj7*sj5);
IkReal x1423=((0.244642)*sj5);
IkReal x1424=(cj4*px*sj3);
IkReal x1425=(cj7*x1413);
IkReal x1426=(px*sj3*sj4);
IkReal x1427=((0.244642)*x1413);
IkReal x1428=(cj7*x1412);
IkReal x1429=((0.244642)*x1412);
evalcond[0]=((-0.028046)+(((-1.0)*x1421*x1427))+(((-1.0)*cj4*x1415))+(((-0.07)*x1422))+(((-0.07)*x1421))+(((0.01)*cj5))+(((-1.0)*x1420*x1429))+(((-0.240358)*sj5))+(((-1.0)*x1422*x1427))+x1424+((x1417*x1429))+(((-1.0)*x1414)));
evalcond[1]=((0.054778)+(((-1.0)*x1421*x1429))+(((0.240358)*cj5))+(((0.07)*x1420))+((x1420*x1427))+(((-1.0)*x1417*x1427))+((sj4*x1415))+(((-1.0)*x1426))+(((-1.0)*x1422*x1429))+(((0.01)*sj5))+(((-0.07)*x1417))+(((-1.0)*x1416)));
evalcond[2]=((0.118834468928)+(((-0.109556)*sj4*x1415))+(((0.056092)*x1424))+(((0.03365012)*cj7))+(((-0.00489284)*sj7*x1413))+(((-0.0014)*sj7))+(((0.03424988)*x1413))+(((-0.00489284)*x1428))+(((-1.0)*pp))+(((-0.056092)*x1414))+(((-0.056092)*cj4*x1415))+(((0.117603323672)*x1425))+(((0.109556)*x1416))+(((-0.117603323672)*sj7*x1412))+(((0.109556)*x1426)));
evalcond[3]=((0.07)+(((-1.0)*sj7*x1418*x1424))+(((0.240358)*cj7))+(((-0.054778)*x1417))+((x1414*x1422))+((x1414*x1421))+((sj5*x1415*x1419))+(((0.028046)*x1421))+(((0.028046)*x1422))+((sj4*x1415*x1420))+((x1416*x1417))+(((-1.0)*cj7*x1418*x1426))+(((-0.01)*sj7))+x1427+((cj4*x1415*x1421))+(((-1.0)*sj4*x1415*x1417))+(((-1.0)*cj7*x1416*x1418))+((x1417*x1426))+(((-1.0)*px*sj3*sj5*x1419))+(((0.054778)*x1420)));
evalcond[4]=((((-1.0)*sj7*x1418*x1426))+(((-1.0)*x1422*x1426))+(((0.01)*cj7))+(((-1.0)*x1416*x1422))+((sj4*x1415*x1421))+((sj4*x1415*x1422))+(((0.240358)*sj7))+(((-1.0)*x1417*x1424))+((cj5*px*sj3*x1419))+(((-1.0)*sj7*x1416*x1418))+(((0.028046)*x1417))+(((-0.028046)*x1420))+((cj4*x1415*x1417))+(((-1.0)*cj7*x1414*x1418))+((x1414*x1417))+(((-1.0)*x1415*x1418*x1419))+(((-1.0)*x1429))+(((0.054778)*x1421))+(((0.054778)*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1430=(cj7*sj4);
IkReal x1431=(cj4*sj7);
IkReal x1432=(cj5*sj7);
IkReal x1433=(cj3*py);
IkReal x1434=(cj5*pz);
IkReal x1435=(sj5*sj7);
IkReal x1436=(px*sj3);
IkReal x1437=((4.08760556241365)*sj5);
IkReal x1438=((4.08760556241365)*cj5);
IkReal x1439=((4.08760556241365)*sj4);
IkReal x1440=((0.223910857497895)*cj7);
IkReal x1441=((0.114640985603453)*cj7);
IkReal x1442=(pz*x1437);
IkReal x1443=((4.08760556241365)*cj4*cj7);
if( IKabs((((x1432*x1433*x1439))+((cj4*cj7*x1433*x1438))+(((-1.0)*x1430*x1433*x1437))+(((-1.0)*sj5*x1440))+(((-1.0)*cj4*cj7*x1436*x1438))+((x1430*x1436*x1437))+(((0.114640985603453)*x1435))+(((0.98248869777062)*sj7))+(((-0.0408760556241365)*cj7))+((x1431*x1433*x1437))+(((0.223910857497895)*x1432))+((cj4*cj7*x1442))+((pz*x1435*x1439))+(((4.08760556241365)*x1430*x1434))+(((-1.0)*x1432*x1436*x1439))+(((-1.0)*x1431*x1436*x1437))+((cj5*x1441))+(((-4.08760556241365)*x1431*x1434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((x1434*x1443))+(((-0.0408760556241365)*sj7))+(((-1.0)*x1430*x1433*x1438))+(((-1.0)*sj5*x1441))+(((-1.0)*x1430*x1442))+((x1430*x1436*x1438))+((cj4*cj7*x1436*x1437))+(((0.114640985603453)*x1432))+(((-1.0)*cj5*x1440))+((x1431*x1433*x1438))+(((-0.223910857497895)*x1435))+(((-1.0)*x1433*x1435*x1439))+((x1431*x1442))+(((-0.98248869777062)*cj7))+((x1435*x1436*x1439))+(((-1.0)*cj4*cj7*x1433*x1437))+((pz*x1432*x1439))+(((-1.0)*x1431*x1436*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1432*x1433*x1439))+((cj4*cj7*x1433*x1438))+(((-1.0)*x1430*x1433*x1437))+(((-1.0)*sj5*x1440))+(((-1.0)*cj4*cj7*x1436*x1438))+((x1430*x1436*x1437))+(((0.114640985603453)*x1435))+(((0.98248869777062)*sj7))+(((-0.0408760556241365)*cj7))+((x1431*x1433*x1437))+(((0.223910857497895)*x1432))+((cj4*cj7*x1442))+((pz*x1435*x1439))+(((4.08760556241365)*x1430*x1434))+(((-1.0)*x1432*x1436*x1439))+(((-1.0)*x1431*x1436*x1437))+((cj5*x1441))+(((-4.08760556241365)*x1431*x1434))))+IKsqr(((-0.286132389368955)+((x1434*x1443))+(((-0.0408760556241365)*sj7))+(((-1.0)*x1430*x1433*x1438))+(((-1.0)*sj5*x1441))+(((-1.0)*x1430*x1442))+((x1430*x1436*x1438))+((cj4*cj7*x1436*x1437))+(((0.114640985603453)*x1432))+(((-1.0)*cj5*x1440))+((x1431*x1433*x1438))+(((-0.223910857497895)*x1435))+(((-1.0)*x1433*x1435*x1439))+((x1431*x1442))+(((-0.98248869777062)*cj7))+((x1435*x1436*x1439))+(((-1.0)*cj4*cj7*x1433*x1437))+((pz*x1432*x1439))+(((-1.0)*x1431*x1436*x1438))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1432*x1433*x1439))+((cj4*cj7*x1433*x1438))+(((-1.0)*x1430*x1433*x1437))+(((-1.0)*sj5*x1440))+(((-1.0)*cj4*cj7*x1436*x1438))+((x1430*x1436*x1437))+(((0.114640985603453)*x1435))+(((0.98248869777062)*sj7))+(((-0.0408760556241365)*cj7))+((x1431*x1433*x1437))+(((0.223910857497895)*x1432))+((cj4*cj7*x1442))+((pz*x1435*x1439))+(((4.08760556241365)*x1430*x1434))+(((-1.0)*x1432*x1436*x1439))+(((-1.0)*x1431*x1436*x1437))+((cj5*x1441))+(((-4.08760556241365)*x1431*x1434))), ((-0.286132389368955)+((x1434*x1443))+(((-0.0408760556241365)*sj7))+(((-1.0)*x1430*x1433*x1438))+(((-1.0)*sj5*x1441))+(((-1.0)*x1430*x1442))+((x1430*x1436*x1438))+((cj4*cj7*x1436*x1437))+(((0.114640985603453)*x1432))+(((-1.0)*cj5*x1440))+((x1431*x1433*x1438))+(((-0.223910857497895)*x1435))+(((-1.0)*x1433*x1435*x1439))+((x1431*x1442))+(((-0.98248869777062)*cj7))+((x1435*x1436*x1439))+(((-1.0)*cj4*cj7*x1433*x1437))+((pz*x1432*x1439))+(((-1.0)*x1431*x1436*x1438))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1444=IKsin(j8);
IkReal x1445=IKcos(j8);
IkReal x1446=(pz*sj4);
IkReal x1447=((1.0)*cj5);
IkReal x1448=(cj3*py);
IkReal x1449=(cj4*sj7);
IkReal x1450=(sj5*sj7);
IkReal x1451=(cj5*cj7);
IkReal x1452=(cj7*sj5);
IkReal x1453=(cj5*sj7);
IkReal x1454=(cj4*pz);
IkReal x1455=(cj4*px*sj3);
IkReal x1456=(cj7*x1445);
IkReal x1457=((1.0)*x1454);
IkReal x1458=(px*sj3*sj4);
IkReal x1459=((0.244642)*x1445);
IkReal x1460=((0.244642)*x1444);
evalcond[0]=((-0.028046)+((x1451*x1460))+(((-1.0)*x1446))+((x1450*x1460))+(((0.01)*cj5))+(((-0.240358)*sj5))+(((0.07)*x1453))+x1455+(((-1.0)*cj4*x1448))+(((-1.0)*x1452*x1459))+((x1453*x1459))+(((-0.07)*x1452)));
evalcond[1]=((0.054778)+((x1452*x1460))+(((0.240358)*cj5))+((sj4*x1448))+(((-1.0)*x1453*x1460))+(((-1.0)*x1457))+((x1450*x1459))+(((-1.0)*x1458))+(((0.07)*x1451))+(((0.07)*x1450))+(((0.01)*sj5))+((x1451*x1459)));
evalcond[2]=((0.118834468928)+(((0.03365012)*cj7))+(((-0.056092)*cj4*x1448))+(((0.0014)*sj7))+(((0.00489284)*cj7*x1444))+(((0.056092)*x1455))+(((0.117603323672)*x1456))+(((-1.0)*pp))+(((-0.117603323672)*sj7*x1444))+(((-0.109556)*sj4*x1448))+(((0.109556)*x1454))+(((0.109556)*x1458))+(((-0.056092)*x1446))+(((0.00489284)*sj7*x1445))+(((0.03424988)*x1445)));
evalcond[3]=(((x1446*x1451))+((x1446*x1450))+((sj5*x1448*x1449))+((sj4*x1448*x1453))+(((-0.01)*cj7))+(((-0.054778)*x1452))+(((-1.0)*x1460))+(((-1.0)*pz*x1447*x1449))+(((-1.0)*cj7*x1447*x1455))+(((-1.0)*sj4*x1448*x1452))+(((0.054778)*x1453))+(((-1.0)*px*sj3*sj5*x1449))+(((0.240358)*sj7))+(((0.028046)*x1451))+(((0.028046)*x1450))+((cj4*x1448*x1451))+((x1452*x1458))+((x1452*x1454))+(((-1.0)*sj7*x1447*x1458)));
evalcond[4]=((0.07)+(((0.240358)*cj7))+((x1446*x1452))+((sj4*x1448*x1451))+((sj4*x1448*x1450))+(((-1.0)*x1447*x1448*x1449))+(((-1.0)*sj7*x1446*x1447))+((cj5*px*sj3*x1449))+(((-1.0)*cj7*x1447*x1458))+(((-1.0)*cj7*x1447*x1454))+(((0.054778)*x1450))+(((0.054778)*x1451))+(((-1.0)*pz*sj5*x1449))+(((-0.028046)*x1453))+(((-1.0)*x1450*x1458))+(((-1.0)*x1452*x1455))+(((0.028046)*x1452))+x1459+((cj4*x1448*x1452))+(((0.01)*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=0;
cj5=1.0;
j5=0;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=1.0;
j5=0;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=1.0;
j5=0;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1461=((4.08760556241365)*cj4);
IkReal x1462=(px*sj3);
IkReal x1463=(cj7*pz);
IkReal x1464=(cj3*py);
IkReal x1465=(pz*sj7);
IkReal x1466=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*sj7*x1462*x1466))+(((-1.0)*cj7*x1461*x1464))+(((1.20639955526851)*sj7))+(((-0.0737649299793167)*cj7))+(((-1.0)*x1463*x1466))+((sj7*x1464*x1466))+(((-1.0)*x1461*x1465))+((cj7*x1461*x1462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+(((-0.0737649299793167)*sj7))+(((-1.0)*cj7*x1464*x1466))+(((-1.0)*sj7*x1461*x1464))+((cj7*x1462*x1466))+((sj7*x1461*x1462))+((x1461*x1463))+(((-1.0)*x1465*x1466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj7*x1462*x1466))+(((-1.0)*cj7*x1461*x1464))+(((1.20639955526851)*sj7))+(((-0.0737649299793167)*cj7))+(((-1.0)*x1463*x1466))+((sj7*x1464*x1466))+(((-1.0)*x1461*x1465))+((cj7*x1461*x1462))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+(((-0.0737649299793167)*sj7))+(((-1.0)*cj7*x1464*x1466))+(((-1.0)*sj7*x1461*x1464))+((cj7*x1462*x1466))+((sj7*x1461*x1462))+((x1461*x1463))+(((-1.0)*x1465*x1466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj7*x1462*x1466))+(((-1.0)*cj7*x1461*x1464))+(((1.20639955526851)*sj7))+(((-0.0737649299793167)*cj7))+(((-1.0)*x1463*x1466))+((sj7*x1464*x1466))+(((-1.0)*x1461*x1465))+((cj7*x1461*x1462))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+(((-0.0737649299793167)*sj7))+(((-1.0)*cj7*x1464*x1466))+(((-1.0)*sj7*x1461*x1464))+((cj7*x1462*x1466))+((sj7*x1461*x1462))+((x1461*x1463))+(((-1.0)*x1465*x1466))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1467=IKcos(j8);
IkReal x1468=IKsin(j8);
IkReal x1469=(pz*sj4);
IkReal x1470=(px*sj3);
IkReal x1471=(cj3*py);
IkReal x1472=((1.0)*cj7);
IkReal x1473=(cj4*pz);
IkReal x1474=((0.056092)*cj4);
IkReal x1475=((1.0)*sj4);
IkReal x1476=((0.109556)*sj4);
IkReal x1477=((1.0)*sj7);
IkReal x1478=(sj7*x1468);
IkReal x1479=(cj7*x1468);
IkReal x1480=((0.244642)*x1467);
evalcond[0]=((-0.018046)+((cj4*x1470))+(((-0.244642)*x1479))+(((-1.0)*sj7*x1480))+(((-0.07)*sj7))+(((-1.0)*cj4*x1471))+(((-1.0)*x1469)));
evalcond[1]=((0.295136)+(((-0.244642)*x1478))+(((0.07)*cj7))+(((-1.0)*x1470*x1475))+((sj4*x1471))+(((-1.0)*x1473))+((cj7*x1480)));
evalcond[2]=((0.07)+(((0.018046)*sj7))+((cj7*sj4*x1471))+(((-1.0)*sj4*x1470*x1472))+(((-1.0)*cj4*x1470*x1477))+x1480+((sj7*x1469))+(((0.295136)*cj7))+(((-1.0)*x1472*x1473))+((cj4*sj7*x1471)));
evalcond[3]=((((-1.0)*sj7*x1470*x1475))+(((0.295136)*sj7))+(((-1.0)*x1469*x1472))+(((-0.244642)*x1468))+(((-0.018046)*cj7))+((cj4*cj7*x1470))+((sj4*sj7*x1471))+(((-1.0)*cj4*x1471*x1472))+(((-1.0)*x1473*x1477)));
evalcond[4]=((0.118834468928)+(((-1.0)*x1471*x1474))+(((-1.0)*x1471*x1476))+(((0.109556)*x1473))+(((0.03365012)*cj7))+(((-0.117603323672)*x1478))+(((0.03424988)*x1467))+(((-0.056092)*x1469))+(((-0.0014)*sj7))+((x1470*x1474))+((x1470*x1476))+(((-1.0)*pp))+(((-0.00489284)*sj7*x1467))+(((-0.00489284)*x1479))+(((0.117603323672)*cj7*x1467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1481=((4.08760556241365)*cj4);
IkReal x1482=(px*sj3);
IkReal x1483=(cj7*pz);
IkReal x1484=(cj3*py);
IkReal x1485=(pz*sj7);
IkReal x1486=((4.08760556241365)*sj4);
if( IKabs((((sj7*x1484*x1486))+((cj7*x1481*x1484))+(((0.0737649299793167)*cj7))+(((-1.0)*x1481*x1485))+(((1.20639955526851)*sj7))+(((-1.0)*cj7*x1481*x1482))+((x1483*x1486))+(((-1.0)*sj7*x1482*x1486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((sj7*x1481*x1484))+(((0.0737649299793167)*sj7))+((x1481*x1483))+(((-1.0)*cj7*x1484*x1486))+(((-1.0)*sj7*x1481*x1482))+((x1485*x1486))+((cj7*x1482*x1486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj7*x1484*x1486))+((cj7*x1481*x1484))+(((0.0737649299793167)*cj7))+(((-1.0)*x1481*x1485))+(((1.20639955526851)*sj7))+(((-1.0)*cj7*x1481*x1482))+((x1483*x1486))+(((-1.0)*sj7*x1482*x1486))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((sj7*x1481*x1484))+(((0.0737649299793167)*sj7))+((x1481*x1483))+(((-1.0)*cj7*x1484*x1486))+(((-1.0)*sj7*x1481*x1482))+((x1485*x1486))+((cj7*x1482*x1486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((sj7*x1484*x1486))+((cj7*x1481*x1484))+(((0.0737649299793167)*cj7))+(((-1.0)*x1481*x1485))+(((1.20639955526851)*sj7))+(((-1.0)*cj7*x1481*x1482))+((x1483*x1486))+(((-1.0)*sj7*x1482*x1486))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+((sj7*x1481*x1484))+(((0.0737649299793167)*sj7))+((x1481*x1483))+(((-1.0)*cj7*x1484*x1486))+(((-1.0)*sj7*x1481*x1482))+((x1485*x1486))+((cj7*x1482*x1486))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1487=IKcos(j8);
IkReal x1488=IKsin(j8);
IkReal x1489=(pz*sj4);
IkReal x1490=(px*sj3);
IkReal x1491=((1.0)*sj4);
IkReal x1492=(cj4*pz);
IkReal x1493=(cj4*sj7);
IkReal x1494=((1.0)*sj7);
IkReal x1495=((0.056092)*cj4);
IkReal x1496=(cj3*py);
IkReal x1497=(cj4*cj7);
IkReal x1498=(sj4*x1496);
IkReal x1499=(sj7*x1488);
IkReal x1500=(cj7*x1488);
IkReal x1501=((0.244642)*x1487);
evalcond[0]=((-0.018046)+(((0.07)*sj7))+(((-1.0)*x1489))+((sj7*x1501))+((cj4*x1490))+(((-1.0)*cj4*x1496))+(((0.244642)*x1500)));
evalcond[1]=((0.295136)+(((0.07)*cj7))+(((-0.244642)*x1499))+(((-1.0)*x1492))+x1498+(((-1.0)*x1490*x1491))+((cj7*x1501)));
evalcond[2]=((((0.018046)*cj7))+(((-1.0)*sj7*x1490*x1491))+(((0.295136)*sj7))+(((-1.0)*x1492*x1494))+(((-0.244642)*x1488))+((x1496*x1497))+((sj7*x1498))+((cj7*x1489))+(((-1.0)*x1490*x1497)));
evalcond[3]=((0.07)+(((-1.0)*cj7*x1490*x1491))+(((-1.0)*cj7*x1492))+(((-1.0)*x1493*x1496))+(((-0.018046)*sj7))+x1501+((cj7*x1498))+(((0.295136)*cj7))+((x1490*x1493))+(((-1.0)*x1489*x1494)));
evalcond[4]=((0.118834468928)+(((0.109556)*sj4*x1490))+(((-0.056092)*x1489))+(((0.03365012)*cj7))+(((0.117603323672)*cj7*x1487))+(((-0.109556)*x1498))+(((-1.0)*x1495*x1496))+(((0.0014)*sj7))+(((0.03424988)*x1487))+(((0.109556)*x1492))+(((-1.0)*pp))+(((0.00489284)*sj7*x1487))+(((0.00489284)*x1500))+(((-0.117603323672)*x1499))+((x1490*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1502=((4.08760556241365)*cj4);
IkReal x1503=(cj3*py);
IkReal x1504=((4.08760556241365)*cj6);
IkReal x1505=(px*sj3);
IkReal x1506=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*sj6*x1502*x1503))+(((-0.0737649299793167)*sj6))+((sj6*x1502*x1505))+(((-1.0)*cj3*px*x1504))+(((-1.0)*py*sj3*x1504))+(((-1.0)*pz*sj6*x1506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.49253194463747)+((pz*x1502))+(((-1.0)*x1503*x1506))+((x1505*x1506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x1502*x1503))+(((-0.0737649299793167)*sj6))+((sj6*x1502*x1505))+(((-1.0)*cj3*px*x1504))+(((-1.0)*py*sj3*x1504))+(((-1.0)*pz*sj6*x1506))))+IKsqr(((-1.49253194463747)+((pz*x1502))+(((-1.0)*x1503*x1506))+((x1505*x1506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj6*x1502*x1503))+(((-0.0737649299793167)*sj6))+((sj6*x1502*x1505))+(((-1.0)*cj3*px*x1504))+(((-1.0)*py*sj3*x1504))+(((-1.0)*pz*sj6*x1506))), ((-1.49253194463747)+((pz*x1502))+(((-1.0)*x1503*x1506))+((x1505*x1506))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1507=IKsin(j8);
IkReal x1508=IKcos(j8);
IkReal x1509=(pz*sj4);
IkReal x1510=(cj3*py);
IkReal x1511=((1.0)*sj6);
IkReal x1512=(cj4*pz);
IkReal x1513=((1.0)*px);
IkReal x1514=(sj3*sj4);
IkReal x1515=((0.244642)*x1507);
IkReal x1516=(cj4*px*sj3);
IkReal x1517=((1.0)*py*sj3);
evalcond[0]=((((-1.0)*x1517))+(((-1.0)*cj3*x1513))+(((-1.0)*cj6*x1515)));
evalcond[1]=((0.365136)+(((-1.0)*x1512))+(((-1.0)*x1513*x1514))+((sj4*x1510))+(((0.244642)*x1508)));
evalcond[2]=((-0.018046)+(((-1.0)*x1509))+x1516+(((-1.0)*sj6*x1515))+(((-1.0)*cj4*x1510)));
evalcond[3]=((((-1.0)*x1515))+(((-1.0)*cj3*cj6*x1513))+((sj6*x1516))+(((-0.018046)*sj6))+(((-1.0)*cj4*x1510*x1511))+(((-1.0)*cj6*x1517))+(((-1.0)*x1509*x1511)));
evalcond[4]=((0.152484588928)+(((-0.00489284)*sj6*x1507))+(((0.109556)*px*x1514))+(((-0.056092)*cj4*x1510))+(((0.056092)*x1516))+(((-0.109556)*sj4*x1510))+(((0.151853203672)*x1508))+(((0.109556)*x1512))+(((-1.0)*pp))+(((-0.056092)*x1509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1518=((4.08760556241365)*cj4);
IkReal x1519=(cj3*py);
IkReal x1520=((4.08760556241365)*cj6);
IkReal x1521=(px*sj3);
IkReal x1522=((4.08760556241365)*sj4);
if( IKabs((((py*sj3*x1520))+(((0.0737649299793167)*sj6))+(((-1.0)*sj6*x1518*x1521))+((pz*sj6*x1522))+((sj6*x1518*x1519))+((cj3*px*x1520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.920267165899559)+((x1519*x1522))+(((-1.0)*pz*x1518))+(((-1.0)*x1521*x1522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*sj3*x1520))+(((0.0737649299793167)*sj6))+(((-1.0)*sj6*x1518*x1521))+((pz*sj6*x1522))+((sj6*x1518*x1519))+((cj3*px*x1520))))+IKsqr(((0.920267165899559)+((x1519*x1522))+(((-1.0)*pz*x1518))+(((-1.0)*x1521*x1522))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((py*sj3*x1520))+(((0.0737649299793167)*sj6))+(((-1.0)*sj6*x1518*x1521))+((pz*sj6*x1522))+((sj6*x1518*x1519))+((cj3*px*x1520))), ((0.920267165899559)+((x1519*x1522))+(((-1.0)*pz*x1518))+(((-1.0)*x1521*x1522))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1523=IKsin(j8);
IkReal x1524=IKcos(j8);
IkReal x1525=(pz*sj4);
IkReal x1526=(cj3*py);
IkReal x1527=((1.0)*cj4);
IkReal x1528=(py*sj3);
IkReal x1529=((1.0)*px);
IkReal x1530=(sj3*sj4);
IkReal x1531=((0.244642)*x1523);
IkReal x1532=(cj4*px*sj3);
evalcond[0]=(((cj6*x1531))+(((-1.0)*cj3*x1529))+(((-1.0)*x1528)));
evalcond[1]=((0.225136)+(((-1.0)*x1529*x1530))+(((-0.244642)*x1524))+((sj4*x1526))+(((-1.0)*pz*x1527)));
evalcond[2]=((-0.018046)+x1532+(((-1.0)*x1526*x1527))+((sj6*x1531))+(((-1.0)*x1525)));
evalcond[3]=((((0.018046)*sj6))+((cj6*x1528))+(((-1.0)*x1531))+((cj3*cj6*px))+((sj6*x1525))+(((-1.0)*px*sj3*sj6*x1527))+((cj4*sj6*x1526)));
evalcond[4]=((0.085184348928)+(((0.109556)*cj4*pz))+(((-0.083353443672)*x1524))+(((-0.109556)*sj4*x1526))+(((0.00489284)*sj6*x1523))+(((-0.056092)*cj4*x1526))+(((0.056092)*x1532))+(((-1.0)*pp))+(((-0.056092)*x1525))+(((0.109556)*px*x1530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1533=((4.08760556241365)*sj7);
IkReal x1534=(py*sj3);
IkReal x1535=(cj4*pz);
IkReal x1536=((4.08760556241365)*cj7);
IkReal x1537=(cj3*px);
IkReal x1538=(px*sj3*sj4);
IkReal x1539=(cj3*py*sj4);
if( IKabs(((((1.20639955526851)*sj7))+(((-1.0)*x1533*x1535))+(((-1.0)*x1533*x1538))+(((-1.0)*x1534*x1536))+((x1533*x1539))+(((-1.0)*x1536*x1537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1536*x1538))+(((-1.0)*x1533*x1537))+(((-1.0)*x1533*x1534))+((x1535*x1536))+(((-1.0)*x1536*x1539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.20639955526851)*sj7))+(((-1.0)*x1533*x1535))+(((-1.0)*x1533*x1538))+(((-1.0)*x1534*x1536))+((x1533*x1539))+(((-1.0)*x1536*x1537))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1536*x1538))+(((-1.0)*x1533*x1537))+(((-1.0)*x1533*x1534))+((x1535*x1536))+(((-1.0)*x1536*x1539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((1.20639955526851)*sj7))+(((-1.0)*x1533*x1535))+(((-1.0)*x1533*x1538))+(((-1.0)*x1534*x1536))+((x1533*x1539))+(((-1.0)*x1536*x1537))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1536*x1538))+(((-1.0)*x1533*x1537))+(((-1.0)*x1533*x1534))+((x1535*x1536))+(((-1.0)*x1536*x1539))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1540=IKcos(j8);
IkReal x1541=IKsin(j8);
IkReal x1542=(px*sj7);
IkReal x1543=(px*sj4);
IkReal x1544=(cj4*pz);
IkReal x1545=((0.056092)*cj4);
IkReal x1546=((1.0)*sj3);
IkReal x1547=((1.0)*cj7);
IkReal x1548=(cj3*px);
IkReal x1549=(cj3*py*sj4);
IkReal x1550=(cj7*x1546);
IkReal x1551=(sj7*x1541);
IkReal x1552=((0.244642)*x1540);
IkReal x1553=((0.244642)*x1541);
evalcond[0]=((((-1.0)*x1548))+(((-1.0)*cj7*x1553))+(((-1.0)*sj7*x1552))+(((-0.07)*sj7))+(((-1.0)*py*x1546)));
evalcond[1]=((0.295136)+(((-1.0)*x1544))+(((-0.244642)*x1551))+(((0.07)*cj7))+(((-1.0)*x1543*x1546))+x1549+((cj7*x1552)));
evalcond[2]=((0.07)+(((-1.0)*x1543*x1550))+((cj3*x1542))+((py*sj3*sj7))+x1552+((cj7*x1549))+(((-1.0)*x1544*x1547))+(((0.295136)*cj7)));
evalcond[3]=(((sj7*x1549))+(((-1.0)*py*x1550))+(((0.295136)*sj7))+(((-1.0)*sj7*x1544))+(((-1.0)*x1547*x1548))+(((-1.0)*sj4*x1542*x1546))+(((-1.0)*x1553)));
evalcond[4]=((0.118834468928)+(((-1.0)*cj3*py*x1545))+((px*sj3*x1545))+(((0.117603323672)*cj7*x1540))+(((0.03365012)*cj7))+(((0.03424988)*x1540))+(((-0.056092)*pz*sj4))+(((-0.117603323672)*x1551))+(((-0.109556)*x1549))+(((0.109556)*x1544))+(((-1.0)*pp))+(((0.109556)*sj3*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1554=((4.08760556241365)*sj7);
IkReal x1555=(py*sj3);
IkReal x1556=(cj4*pz);
IkReal x1557=((4.08760556241365)*cj7);
IkReal x1558=(cj3*px);
IkReal x1559=(px*sj3*sj4);
IkReal x1560=(cj3*py*sj4);
if( IKabs((((x1555*x1557))+(((1.20639955526851)*sj7))+((x1557*x1558))+((x1554*x1560))+(((-1.0)*x1554*x1559))+(((-1.0)*x1554*x1556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1556*x1557))+((x1557*x1559))+(((-1.0)*x1557*x1560))+((x1554*x1558))+((x1554*x1555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1555*x1557))+(((1.20639955526851)*sj7))+((x1557*x1558))+((x1554*x1560))+(((-1.0)*x1554*x1559))+(((-1.0)*x1554*x1556))))+IKsqr(((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1556*x1557))+((x1557*x1559))+(((-1.0)*x1557*x1560))+((x1554*x1558))+((x1554*x1555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1555*x1557))+(((1.20639955526851)*sj7))+((x1557*x1558))+((x1554*x1560))+(((-1.0)*x1554*x1559))+(((-1.0)*x1554*x1556))), ((-0.286132389368955)+(((-1.20639955526851)*cj7))+((x1556*x1557))+((x1557*x1559))+(((-1.0)*x1557*x1560))+((x1554*x1558))+((x1554*x1555))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1561=IKcos(j8);
IkReal x1562=IKsin(j8);
IkReal x1563=((1.0)*sj3);
IkReal x1564=(cj7*px);
IkReal x1565=(cj4*pz);
IkReal x1566=((0.056092)*cj4);
IkReal x1567=(px*sj3);
IkReal x1568=(px*sj7);
IkReal x1569=((1.0)*cj3);
IkReal x1570=(cj3*py*sj4);
IkReal x1571=(sj7*x1562);
IkReal x1572=((0.244642)*x1561);
IkReal x1573=((0.244642)*x1562);
evalcond[0]=(((sj7*x1572))+(((0.07)*sj7))+(((-1.0)*py*x1563))+(((-1.0)*px*x1569))+((cj7*x1573)));
evalcond[1]=((0.295136)+(((0.07)*cj7))+(((-0.244642)*x1571))+x1570+((cj7*x1572))+(((-1.0)*px*sj4*x1563))+(((-1.0)*x1565)));
evalcond[2]=(((sj7*x1570))+((cj7*py*sj3))+(((0.295136)*sj7))+((cj3*x1564))+(((-1.0)*sj7*x1565))+(((-1.0)*sj4*x1563*x1568))+(((-1.0)*x1573)));
evalcond[3]=((0.07)+(((-1.0)*py*sj7*x1563))+(((-1.0)*x1568*x1569))+x1572+(((-1.0)*cj7*x1565))+((cj7*x1570))+(((-1.0)*sj4*x1563*x1564))+(((0.295136)*cj7)));
evalcond[4]=((0.118834468928)+((x1566*x1567))+(((0.03424988)*x1561))+(((0.03365012)*cj7))+(((0.117603323672)*cj7*x1561))+(((-0.056092)*pz*sj4))+(((0.109556)*sj4*x1567))+(((-0.109556)*x1570))+(((-1.0)*pp))+(((0.109556)*x1565))+(((-0.117603323672)*x1571))+(((-1.0)*cj3*py*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1574=cj7*cj7;
IkReal x1575=cj6*cj6;
IkReal x1576=((4.08760556241365)*pz);
IkReal x1577=(cj4*sj7);
IkReal x1578=(cj6*sj7);
IkReal x1579=(cj6*px);
IkReal x1580=((500000.0)*sj3);
IkReal x1581=(cj3*cj7);
IkReal x1582=((500000.0)*py);
IkReal x1583=(cj7*sj6);
IkReal x1584=(sj4*sj7);
IkReal x1585=(cj6*cj7);
IkReal x1586=((500000.0)*pz);
IkReal x1587=((4.08760556241365)*py);
IkReal x1588=((4.08760556241365)*px*sj3);
IkReal x1589=((500000.0)*cj3*px);
IkReal x1590=(cj4*sj6*x1574);
IkReal x1591=(x1574*x1575);
IkReal x1592=(cj6*sj6*x1574);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(cj6,-1);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594=IKPowWithIntegerCheck(sj7,-1);
if(!x1594.valid){
continue;
}
if( IKabs(((((-1.0)*x1576*x1577))+(((-1.0)*cj4*sj6*x1581*x1587))+(((-1.0)*sj3*x1585*x1587))+((cj4*x1583*x1588))+(((1.20639955526851)*sj7))+(((-1.0)*x1584*x1588))+(((-1.0)*sj4*x1576*x1583))+(((-0.0737649299793167)*x1583))+(((-4.08760556241365)*x1579*x1581))+((cj3*x1584*x1587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x1593.value)*(x1594.value)*(((((-1.0)*x1589))+(((-35000.0)*x1578))+(((-1.0)*sj4*x1578*x1581*x1582))+(((-1.0)*py*x1580))+(((-1.0)*x1579*x1580*x1590))+((x1589*x1591))+((cj7*px*sj4*x1578*x1580))+((sj4*x1586*x1592))+((cj3*cj6*x1582*x1590))+(((9023.0)*x1592))+(((-147568.0)*cj7*x1578))+((x1577*x1585*x1586))+((py*x1580*x1591)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1576*x1577))+(((-1.0)*cj4*sj6*x1581*x1587))+(((-1.0)*sj3*x1585*x1587))+((cj4*x1583*x1588))+(((1.20639955526851)*sj7))+(((-1.0)*x1584*x1588))+(((-1.0)*sj4*x1576*x1583))+(((-0.0737649299793167)*x1583))+(((-4.08760556241365)*x1579*x1581))+((cj3*x1584*x1587))))+IKsqr(((8.1752111248273e-6)*(x1593.value)*(x1594.value)*(((((-1.0)*x1589))+(((-35000.0)*x1578))+(((-1.0)*sj4*x1578*x1581*x1582))+(((-1.0)*py*x1580))+(((-1.0)*x1579*x1580*x1590))+((x1589*x1591))+((cj7*px*sj4*x1578*x1580))+((sj4*x1586*x1592))+((cj3*cj6*x1582*x1590))+(((9023.0)*x1592))+(((-147568.0)*cj7*x1578))+((x1577*x1585*x1586))+((py*x1580*x1591))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1576*x1577))+(((-1.0)*cj4*sj6*x1581*x1587))+(((-1.0)*sj3*x1585*x1587))+((cj4*x1583*x1588))+(((1.20639955526851)*sj7))+(((-1.0)*x1584*x1588))+(((-1.0)*sj4*x1576*x1583))+(((-0.0737649299793167)*x1583))+(((-4.08760556241365)*x1579*x1581))+((cj3*x1584*x1587))), ((8.1752111248273e-6)*(x1593.value)*(x1594.value)*(((((-1.0)*x1589))+(((-35000.0)*x1578))+(((-1.0)*sj4*x1578*x1581*x1582))+(((-1.0)*py*x1580))+(((-1.0)*x1579*x1580*x1590))+((x1589*x1591))+((cj7*px*sj4*x1578*x1580))+((sj4*x1586*x1592))+((cj3*cj6*x1582*x1590))+(((9023.0)*x1592))+(((-147568.0)*cj7*x1578))+((x1577*x1585*x1586))+((py*x1580*x1591))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1595=IKcos(j8);
IkReal x1596=IKsin(j8);
IkReal x1597=(pz*sj4);
IkReal x1598=(px*sj3);
IkReal x1599=(cj3*py);
IkReal x1600=(cj6*sj7);
IkReal x1601=(py*sj3);
IkReal x1602=(sj6*sj7);
IkReal x1603=((1.0)*sj4);
IkReal x1604=(cj4*pz);
IkReal x1605=(cj7*sj6);
IkReal x1606=((0.109556)*sj4);
IkReal x1607=((0.056092)*cj4);
IkReal x1608=((1.0)*cj4);
IkReal x1609=((1.0)*cj7);
IkReal x1610=(cj3*px);
IkReal x1611=(sj7*x1596);
IkReal x1612=((0.244642)*x1595);
IkReal x1613=((0.244642)*cj7*x1596);
evalcond[0]=((((-1.0)*x1610))+(((-1.0)*x1601))+(((-1.0)*x1600*x1612))+(((-0.07)*x1600))+(((-1.0)*cj6*x1613)));
evalcond[1]=((0.295136)+(((0.07)*cj7))+(((-1.0)*x1604))+((cj7*x1612))+((sj4*x1599))+(((-0.244642)*x1611))+(((-1.0)*x1598*x1603)));
evalcond[2]=((-0.018046)+((cj4*x1598))+(((-1.0)*x1599*x1608))+(((-0.244642)*x1596*x1605))+(((-1.0)*x1602*x1612))+(((-0.07)*x1602))+(((-1.0)*x1597)));
evalcond[3]=((0.07)+(((-1.0)*x1598*x1602*x1608))+((cj7*sj4*x1599))+(((-1.0)*cj7*x1598*x1603))+x1612+((x1600*x1601))+(((0.018046)*x1602))+((cj4*x1599*x1602))+((x1600*x1610))+(((0.295136)*cj7))+((x1597*x1602))+(((-1.0)*x1604*x1609)));
evalcond[4]=((((-1.0)*sj7*x1604))+(((-0.244642)*x1596))+(((0.295136)*sj7))+(((-1.0)*cj6*x1609*x1610))+(((-1.0)*sj7*x1598*x1603))+(((-1.0)*x1599*x1605*x1608))+((cj4*x1598*x1605))+(((-1.0)*x1597*x1605))+((sj4*sj7*x1599))+(((-0.018046)*x1605))+(((-1.0)*cj6*x1601*x1609)));
evalcond[5]=((0.118834468928)+(((0.03424988)*x1595))+(((0.117603323672)*cj7*x1595))+(((-0.00489284)*x1595*x1602))+(((-0.0014)*x1602))+(((0.03365012)*cj7))+(((-0.00489284)*x1596*x1605))+(((-0.056092)*x1597))+(((-1.0)*pp))+(((-1.0)*x1599*x1607))+(((-1.0)*x1599*x1606))+((x1598*x1606))+((x1598*x1607))+(((0.109556)*x1604))+(((-0.117603323672)*x1611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1614=(cj4*cj7);
IkReal x1615=(sj4*sj6);
IkReal x1616=(cj4*sj7);
IkReal x1617=((500000.0)*pz);
IkReal x1618=((147568.0)*sj6);
IkReal x1619=((500000.0)*cj3*py);
IkReal x1620=((500000.0)*px*sj3);
CheckValue<IkReal> x1621=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1621.valid){
continue;
}
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal(((((-1.0)*sj7*x1615*x1620))+((sj7*x1618))+((x1614*x1620))+(((-9023.0)*cj7))+(((-1.0)*sj6*x1616*x1617))+(((-1.0)*x1614*x1619))+((sj7*x1615*x1619))+(((-1.0)*cj7*sj4*x1617)))),IkReal((((cj7*x1615*x1620))+(((-35000.0)*sj6))+(((-1.0)*x1616*x1619))+(((-1.0)*sj4*sj7*x1617))+(((-1.0)*cj7*x1618))+(((-1.0)*cj7*x1615*x1619))+((x1616*x1620))+(((-9023.0)*sj7))+((sj6*x1614*x1617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1621.value)))+(x1622.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1623=IKcos(j8);
IkReal x1624=IKsin(j8);
IkReal x1625=(pz*sj4);
IkReal x1626=(px*sj3);
IkReal x1627=(cj3*py);
IkReal x1628=(cj6*sj7);
IkReal x1629=(py*sj3);
IkReal x1630=(sj6*sj7);
IkReal x1631=((1.0)*sj4);
IkReal x1632=(cj4*pz);
IkReal x1633=(cj7*sj6);
IkReal x1634=((0.109556)*sj4);
IkReal x1635=((0.056092)*cj4);
IkReal x1636=((1.0)*cj4);
IkReal x1637=((1.0)*cj7);
IkReal x1638=(cj3*px);
IkReal x1639=(sj7*x1624);
IkReal x1640=((0.244642)*x1623);
IkReal x1641=((0.244642)*cj7*x1624);
evalcond[0]=((((-1.0)*x1629))+(((-0.07)*x1628))+(((-1.0)*x1638))+(((-1.0)*cj6*x1641))+(((-1.0)*x1628*x1640)));
evalcond[1]=((0.295136)+(((0.07)*cj7))+(((-0.244642)*x1639))+(((-1.0)*x1632))+((cj7*x1640))+((sj4*x1627))+(((-1.0)*x1626*x1631)));
evalcond[2]=((-0.018046)+(((-1.0)*x1625))+((cj4*x1626))+(((-0.244642)*x1624*x1633))+(((-1.0)*x1630*x1640))+(((-0.07)*x1630))+(((-1.0)*x1627*x1636)));
evalcond[3]=((0.07)+(((0.018046)*x1630))+((cj4*x1627*x1630))+x1640+(((-1.0)*x1626*x1630*x1636))+((x1628*x1638))+((x1628*x1629))+((x1625*x1630))+((cj7*sj4*x1627))+(((-1.0)*cj7*x1626*x1631))+(((-1.0)*x1632*x1637))+(((0.295136)*cj7)));
evalcond[4]=((((-1.0)*x1627*x1633*x1636))+(((-1.0)*cj6*x1637*x1638))+((cj4*x1626*x1633))+((sj4*sj7*x1627))+(((-1.0)*sj7*x1626*x1631))+(((-0.018046)*x1633))+(((-1.0)*sj7*x1632))+(((0.295136)*sj7))+(((-1.0)*cj6*x1629*x1637))+(((-1.0)*x1625*x1633))+(((-0.244642)*x1624)));
evalcond[5]=((0.118834468928)+(((-0.00489284)*x1624*x1633))+(((0.03365012)*cj7))+(((0.117603323672)*cj7*x1623))+(((-0.056092)*x1625))+(((0.03424988)*x1623))+(((-1.0)*pp))+(((-0.00489284)*x1623*x1630))+(((-0.117603323672)*x1639))+(((0.109556)*x1632))+(((-0.0014)*x1630))+(((-1.0)*x1627*x1634))+(((-1.0)*x1627*x1635))+((x1626*x1635))+((x1626*x1634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1642=((500000.0)*cj6);
IkReal x1643=(cj4*pz);
IkReal x1644=(cj3*cj7);
IkReal x1645=((500000.0)*px);
IkReal x1646=(py*sj4);
IkReal x1647=(cj3*sj7);
IkReal x1648=((147568.0)*cj6);
IkReal x1649=(cj7*sj3);
IkReal x1650=(px*sj4);
IkReal x1651=((500000.0)*py);
IkReal x1652=(sj3*sj7);
CheckValue<IkReal> x1653=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal(((((-1.0)*x1644*x1645))+(((-1.0)*x1642*x1650*x1652))+(((-1.0)*x1649*x1651))+((x1642*x1646*x1647))+(((-1.0)*sj7*x1642*x1643))+((sj7*x1648)))),IkReal((((cj7*x1642*x1643))+(((-1.0)*x1642*x1644*x1646))+(((-1.0)*x1645*x1647))+((x1642*x1649*x1650))+(((-35000.0)*cj6))+(((-1.0)*cj7*x1648))+(((-1.0)*x1651*x1652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1653.value)))+(x1654.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1655=IKcos(j8);
IkReal x1656=IKsin(j8);
IkReal x1657=(pz*sj4);
IkReal x1658=(px*sj3);
IkReal x1659=(cj3*py);
IkReal x1660=(cj6*sj7);
IkReal x1661=(py*sj3);
IkReal x1662=(sj6*sj7);
IkReal x1663=((1.0)*sj4);
IkReal x1664=(cj4*pz);
IkReal x1665=(cj7*sj6);
IkReal x1666=((0.109556)*sj4);
IkReal x1667=((0.056092)*cj4);
IkReal x1668=((1.0)*cj4);
IkReal x1669=((1.0)*cj7);
IkReal x1670=(cj3*px);
IkReal x1671=(sj7*x1656);
IkReal x1672=((0.244642)*x1655);
IkReal x1673=((0.244642)*cj7*x1656);
evalcond[0]=((((-1.0)*x1661))+(((-1.0)*cj6*x1673))+(((-1.0)*x1670))+(((-0.07)*x1660))+(((-1.0)*x1660*x1672)));
evalcond[1]=((0.295136)+(((0.07)*cj7))+(((-1.0)*x1664))+(((-0.244642)*x1671))+(((-1.0)*x1658*x1663))+((cj7*x1672))+((sj4*x1659)));
evalcond[2]=((-0.018046)+((cj4*x1658))+(((-1.0)*x1657))+(((-1.0)*x1662*x1672))+(((-0.244642)*x1656*x1665))+(((-0.07)*x1662))+(((-1.0)*x1659*x1668)));
evalcond[3]=((0.07)+((x1660*x1661))+(((-1.0)*cj7*x1658*x1663))+(((0.018046)*x1662))+((cj7*sj4*x1659))+x1672+((cj4*x1659*x1662))+(((-1.0)*x1658*x1662*x1668))+((x1657*x1662))+((x1660*x1670))+(((0.295136)*cj7))+(((-1.0)*x1664*x1669)));
evalcond[4]=((((-1.0)*cj6*x1669*x1670))+(((-1.0)*sj7*x1664))+(((-0.018046)*x1665))+(((0.295136)*sj7))+(((-1.0)*sj7*x1658*x1663))+(((-1.0)*cj6*x1661*x1669))+(((-1.0)*x1659*x1665*x1668))+((sj4*sj7*x1659))+((cj4*x1658*x1665))+(((-0.244642)*x1656))+(((-1.0)*x1657*x1665)));
evalcond[5]=((0.118834468928)+(((0.117603323672)*cj7*x1655))+(((0.03365012)*cj7))+(((0.03424988)*x1655))+(((0.109556)*x1664))+(((-1.0)*pp))+(((-0.117603323672)*x1671))+(((-0.056092)*x1657))+((x1658*x1667))+((x1658*x1666))+(((-0.00489284)*x1655*x1662))+(((-0.00489284)*x1656*x1665))+(((-0.0014)*x1662))+(((-1.0)*x1659*x1667))+(((-1.0)*x1659*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1674=((4.08760556241365)*cj4);
IkReal x1675=(px*sj3);
IkReal x1676=(cj7*pz);
IkReal x1677=(cj3*py);
IkReal x1678=(pz*sj7);
IkReal x1679=((4.08760556241365)*sj4);
if( IKabs((((x1676*x1679))+((cj7*x1674*x1677))+((sj7*x1675*x1679))+((x1674*x1678))+(((0.758577840272725)*sj7))+(((0.15551704122759)*cj7))+(((-1.0)*sj7*x1677*x1679))+(((-1.0)*cj7*x1674*x1675)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((sj7*x1674*x1677))+((x1678*x1679))+(((-0.758577840272725)*cj7))+((cj7*x1677*x1679))+(((-1.0)*cj7*x1675*x1679))+(((-1.0)*sj7*x1674*x1675))+(((-1.0)*x1674*x1676))+(((0.15551704122759)*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1676*x1679))+((cj7*x1674*x1677))+((sj7*x1675*x1679))+((x1674*x1678))+(((0.758577840272725)*sj7))+(((0.15551704122759)*cj7))+(((-1.0)*sj7*x1677*x1679))+(((-1.0)*cj7*x1674*x1675))))+IKsqr(((-0.286132389368955)+((sj7*x1674*x1677))+((x1678*x1679))+(((-0.758577840272725)*cj7))+((cj7*x1677*x1679))+(((-1.0)*cj7*x1675*x1679))+(((-1.0)*sj7*x1674*x1675))+(((-1.0)*x1674*x1676))+(((0.15551704122759)*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1676*x1679))+((cj7*x1674*x1677))+((sj7*x1675*x1679))+((x1674*x1678))+(((0.758577840272725)*sj7))+(((0.15551704122759)*cj7))+(((-1.0)*sj7*x1677*x1679))+(((-1.0)*cj7*x1674*x1675))), ((-0.286132389368955)+((sj7*x1674*x1677))+((x1678*x1679))+(((-0.758577840272725)*cj7))+((cj7*x1677*x1679))+(((-1.0)*cj7*x1675*x1679))+(((-1.0)*sj7*x1674*x1675))+(((-1.0)*x1674*x1676))+(((0.15551704122759)*sj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1680=IKsin(j8);
IkReal x1681=IKcos(j8);
IkReal x1682=(pz*sj4);
IkReal x1683=(cj4*pz);
IkReal x1684=(px*sj3);
IkReal x1685=(cj7*sj4);
IkReal x1686=(cj3*py);
IkReal x1687=(cj4*sj7);
IkReal x1688=((1.0)*sj7);
IkReal x1689=((0.056092)*cj4);
IkReal x1690=(cj4*cj7);
IkReal x1691=((0.109556)*sj4);
IkReal x1692=(cj7*x1680);
IkReal x1693=((0.244642)*x1681);
IkReal x1694=((0.244642)*x1680);
evalcond[0]=((-0.038046)+(((0.244642)*x1692))+((cj4*x1684))+(((-1.0)*x1682))+(((0.07)*sj7))+(((-1.0)*cj4*x1686))+((sj7*x1693)));
evalcond[1]=((-0.18558)+(((-1.0)*sj4*x1684))+(((-1.0)*x1683))+((sj7*x1694))+((sj4*x1686))+(((-1.0)*cj7*x1693))+(((-0.07)*cj7)));
evalcond[2]=((((0.18558)*sj7))+(((-1.0)*x1694))+((sj4*sj7*x1684))+((sj7*x1683))+(((-1.0)*x1684*x1690))+((x1686*x1690))+((cj7*x1682))+(((0.038046)*cj7))+(((-1.0)*sj4*x1686*x1688)));
evalcond[3]=((0.07)+(((-1.0)*x1686*x1687))+(((0.18558)*cj7))+(((-1.0)*x1682*x1688))+x1693+((x1684*x1687))+((x1684*x1685))+((cj7*x1683))+(((-1.0)*x1685*x1686))+(((-0.038046)*sj7)));
evalcond[4]=((0.118834468928)+(((-1.0)*x1686*x1691))+(((-1.0)*x1686*x1689))+(((0.03365012)*cj7))+(((0.109556)*x1683))+(((-0.00489284)*x1692))+(((-0.0014)*sj7))+(((-0.117603323672)*sj7*x1680))+(((0.117603323672)*cj7*x1681))+(((-1.0)*pp))+(((-0.00489284)*sj7*x1681))+(((-0.056092)*x1682))+((x1684*x1689))+(((0.03424988)*x1681))+((x1684*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1695=((4.08760556241365)*cj4);
IkReal x1696=(px*sj3);
IkReal x1697=(cj7*pz);
IkReal x1698=(cj3*py);
IkReal x1699=(pz*sj7);
IkReal x1700=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*cj7*x1695*x1698))+((x1695*x1699))+(((0.758577840272725)*sj7))+(((-1.0)*sj7*x1698*x1700))+((cj7*x1695*x1696))+((sj7*x1696*x1700))+(((-1.0)*x1697*x1700))+(((-0.15551704122759)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*x1699*x1700))+(((-0.758577840272725)*cj7))+(((-1.0)*cj7*x1696*x1700))+(((-1.0)*sj7*x1695*x1698))+((cj7*x1698*x1700))+((sj7*x1695*x1696))+(((-1.0)*x1695*x1697))+(((-0.15551704122759)*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x1695*x1698))+((x1695*x1699))+(((0.758577840272725)*sj7))+(((-1.0)*sj7*x1698*x1700))+((cj7*x1695*x1696))+((sj7*x1696*x1700))+(((-1.0)*x1697*x1700))+(((-0.15551704122759)*cj7))))+IKsqr(((-0.286132389368955)+(((-1.0)*x1699*x1700))+(((-0.758577840272725)*cj7))+(((-1.0)*cj7*x1696*x1700))+(((-1.0)*sj7*x1695*x1698))+((cj7*x1698*x1700))+((sj7*x1695*x1696))+(((-1.0)*x1695*x1697))+(((-0.15551704122759)*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj7*x1695*x1698))+((x1695*x1699))+(((0.758577840272725)*sj7))+(((-1.0)*sj7*x1698*x1700))+((cj7*x1695*x1696))+((sj7*x1696*x1700))+(((-1.0)*x1697*x1700))+(((-0.15551704122759)*cj7))), ((-0.286132389368955)+(((-1.0)*x1699*x1700))+(((-0.758577840272725)*cj7))+(((-1.0)*cj7*x1696*x1700))+(((-1.0)*sj7*x1695*x1698))+((cj7*x1698*x1700))+((sj7*x1695*x1696))+(((-1.0)*x1695*x1697))+(((-0.15551704122759)*sj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1701=IKsin(j8);
IkReal x1702=IKcos(j8);
IkReal x1703=(pz*sj4);
IkReal x1704=(cj4*cj7);
IkReal x1705=(px*sj3);
IkReal x1706=(cj7*sj4);
IkReal x1707=(cj3*py);
IkReal x1708=(cj4*pz);
IkReal x1709=((0.056092)*cj4);
IkReal x1710=((1.0)*sj4);
IkReal x1711=((0.109556)*sj4);
IkReal x1712=(cj4*sj7);
IkReal x1713=(cj7*x1701);
IkReal x1714=((0.244642)*x1702);
IkReal x1715=((0.244642)*x1701);
evalcond[0]=((-0.038046)+(((-1.0)*x1703))+(((-1.0)*sj7*x1714))+(((-0.07)*sj7))+((cj4*x1705))+(((-0.244642)*x1713))+(((-1.0)*cj4*x1707)));
evalcond[1]=((-0.18558)+((sj4*x1707))+(((-1.0)*x1708))+(((-0.07)*cj7))+(((-1.0)*x1705*x1710))+(((-1.0)*cj7*x1714))+((sj7*x1715)));
evalcond[2]=((0.07)+(((0.18558)*cj7))+x1714+(((0.038046)*sj7))+((x1705*x1706))+(((-1.0)*x1705*x1712))+(((-1.0)*x1706*x1707))+((x1707*x1712))+((sj7*x1703))+((pz*x1704)));
evalcond[3]=((((0.18558)*sj7))+(((-0.038046)*cj7))+(((-1.0)*cj7*x1703))+(((-1.0)*x1715))+((sj4*sj7*x1705))+((x1704*x1705))+(((-1.0)*sj7*x1707*x1710))+(((-1.0)*x1704*x1707))+((sj7*x1708)));
evalcond[4]=((0.118834468928)+(((0.03365012)*cj7))+(((-1.0)*x1707*x1711))+(((-1.0)*x1707*x1709))+(((0.0014)*sj7))+(((0.00489284)*sj7*x1702))+(((-0.117603323672)*sj7*x1701))+(((-0.056092)*x1703))+((x1705*x1709))+(((-1.0)*pp))+((x1705*x1711))+(((0.00489284)*x1713))+(((0.03424988)*x1702))+(((0.117603323672)*cj7*x1702))+(((0.109556)*x1708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1716=((4.08760556241365)*cj4);
IkReal x1717=(cj3*py);
IkReal x1718=((4.08760556241365)*cj6);
IkReal x1719=(px*sj3);
IkReal x1720=((4.08760556241365)*sj4);
if( IKabs((((pz*sj6*x1720))+((sj6*x1716*x1717))+(((-1.0)*sj6*x1716*x1719))+(((-1.0)*py*sj3*x1718))+(((0.15551704122759)*sj6))+(((-1.0)*cj3*px*x1718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04471022964168)+((x1717*x1720))+(((-1.0)*x1719*x1720))+(((-1.0)*pz*x1716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((pz*sj6*x1720))+((sj6*x1716*x1717))+(((-1.0)*sj6*x1716*x1719))+(((-1.0)*py*sj3*x1718))+(((0.15551704122759)*sj6))+(((-1.0)*cj3*px*x1718))))+IKsqr(((-1.04471022964168)+((x1717*x1720))+(((-1.0)*x1719*x1720))+(((-1.0)*pz*x1716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((pz*sj6*x1720))+((sj6*x1716*x1717))+(((-1.0)*sj6*x1716*x1719))+(((-1.0)*py*sj3*x1718))+(((0.15551704122759)*sj6))+(((-1.0)*cj3*px*x1718))), ((-1.04471022964168)+((x1717*x1720))+(((-1.0)*x1719*x1720))+(((-1.0)*pz*x1716))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1721=IKsin(j8);
IkReal x1722=IKcos(j8);
IkReal x1723=(pz*sj4);
IkReal x1724=(cj3*py);
IkReal x1725=(cj4*pz);
IkReal x1726=((1.0)*px);
IkReal x1727=(sj3*sj4);
IkReal x1728=((0.244642)*x1721);
IkReal x1729=(cj4*px*sj3);
IkReal x1730=((1.0)*py*sj3);
evalcond[0]=((((-1.0)*cj3*x1726))+(((-1.0)*cj6*x1728))+(((-1.0)*x1730)));
evalcond[1]=((-0.25558)+(((-1.0)*x1726*x1727))+((sj4*x1724))+(((-1.0)*x1725))+(((-0.244642)*x1722)));
evalcond[2]=((-0.038046)+(((-1.0)*cj4*x1724))+x1729+((sj6*x1728))+(((-1.0)*x1723)));
evalcond[3]=(((sj6*x1723))+(((0.038046)*sj6))+(((-1.0)*cj4*sj3*sj6*x1726))+(((-1.0)*cj3*cj6*x1726))+(((-1.0)*cj6*x1730))+(((-1.0)*x1728))+((cj4*sj6*x1724)));
evalcond[4]=((0.152484588928)+(((-0.056092)*x1723))+(((-1.0)*pp))+(((0.056092)*x1729))+(((0.109556)*x1725))+(((-0.109556)*sj4*x1724))+(((0.151853203672)*x1722))+(((-0.056092)*cj4*x1724))+(((0.109556)*px*x1727))+(((-0.00489284)*sj6*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1731=((4.08760556241365)*cj4);
IkReal x1732=(cj3*py);
IkReal x1733=((4.08760556241365)*cj6);
IkReal x1734=(px*sj3);
IkReal x1735=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*pz*sj6*x1735))+((cj3*px*x1733))+((sj6*x1731*x1734))+(((-0.15551704122759)*sj6))+((py*sj3*x1733))+(((-1.0)*sj6*x1731*x1732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.47244545090377)+((pz*x1731))+((x1734*x1735))+(((-1.0)*x1732*x1735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*sj6*x1735))+((cj3*px*x1733))+((sj6*x1731*x1734))+(((-0.15551704122759)*sj6))+((py*sj3*x1733))+(((-1.0)*sj6*x1731*x1732))))+IKsqr(((0.47244545090377)+((pz*x1731))+((x1734*x1735))+(((-1.0)*x1732*x1735))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*pz*sj6*x1735))+((cj3*px*x1733))+((sj6*x1731*x1734))+(((-0.15551704122759)*sj6))+((py*sj3*x1733))+(((-1.0)*sj6*x1731*x1732))), ((0.47244545090377)+((pz*x1731))+((x1734*x1735))+(((-1.0)*x1732*x1735))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1736=IKsin(j8);
IkReal x1737=IKcos(j8);
IkReal x1738=(pz*sj4);
IkReal x1739=(cj3*py);
IkReal x1740=((1.0)*sj6);
IkReal x1741=((1.0)*cj4);
IkReal x1742=(py*sj3);
IkReal x1743=(cj3*px);
IkReal x1744=((0.244642)*x1736);
IkReal x1745=(cj4*px*sj3);
IkReal x1746=(px*sj3*sj4);
evalcond[0]=(((cj6*x1744))+(((-1.0)*x1742))+(((-1.0)*x1743)));
evalcond[1]=((-0.11558)+(((-1.0)*pz*x1741))+((sj4*x1739))+(((-1.0)*x1746))+(((0.244642)*x1737)));
evalcond[2]=((-0.038046)+x1745+(((-1.0)*x1739*x1741))+(((-1.0)*sj6*x1744))+(((-1.0)*x1738)));
evalcond[3]=((((-1.0)*cj4*x1739*x1740))+(((-1.0)*x1738*x1740))+((sj6*x1745))+((cj6*x1742))+((cj6*x1743))+(((-1.0)*x1744))+(((-0.038046)*sj6)));
evalcond[4]=((0.085184348928)+(((0.109556)*cj4*pz))+(((0.00489284)*sj6*x1736))+(((-0.056092)*x1738))+(((0.056092)*x1745))+(((-1.0)*pp))+(((-0.109556)*sj4*x1739))+(((-0.056092)*cj4*x1739))+(((-0.083353443672)*x1737))+(((0.109556)*x1746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1747=((4.08760556241365)*sj7);
IkReal x1748=(py*sj3);
IkReal x1749=(cj4*pz);
IkReal x1750=((4.08760556241365)*cj7);
IkReal x1751=(cj3*px);
IkReal x1752=(cj3*py*sj4);
IkReal x1753=(px*sj3*sj4);
if( IKabs(((((-1.0)*x1748*x1750))+((x1747*x1753))+(((0.758577840272725)*sj7))+((x1747*x1749))+(((-1.0)*x1747*x1752))+(((-1.0)*x1750*x1751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*x1749*x1750))+(((-0.758577840272725)*cj7))+((x1750*x1752))+(((-1.0)*x1747*x1751))+(((-1.0)*x1750*x1753))+(((-1.0)*x1747*x1748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1748*x1750))+((x1747*x1753))+(((0.758577840272725)*sj7))+((x1747*x1749))+(((-1.0)*x1747*x1752))+(((-1.0)*x1750*x1751))))+IKsqr(((-0.286132389368955)+(((-1.0)*x1749*x1750))+(((-0.758577840272725)*cj7))+((x1750*x1752))+(((-1.0)*x1747*x1751))+(((-1.0)*x1750*x1753))+(((-1.0)*x1747*x1748))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1748*x1750))+((x1747*x1753))+(((0.758577840272725)*sj7))+((x1747*x1749))+(((-1.0)*x1747*x1752))+(((-1.0)*x1750*x1751))), ((-0.286132389368955)+(((-1.0)*x1749*x1750))+(((-0.758577840272725)*cj7))+((x1750*x1752))+(((-1.0)*x1747*x1751))+(((-1.0)*x1750*x1753))+(((-1.0)*x1747*x1748))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1754=IKsin(j8);
IkReal x1755=IKcos(j8);
IkReal x1756=(cj4*pz);
IkReal x1757=(cj7*sj4);
IkReal x1758=(cj3*py);
IkReal x1759=(px*sj3);
IkReal x1760=(cj3*px);
IkReal x1761=((1.0)*cj7);
IkReal x1762=(py*sj3);
IkReal x1763=((0.056092)*cj4);
IkReal x1764=((1.0)*sj4);
IkReal x1765=((0.109556)*sj4);
IkReal x1766=((0.244642)*x1755);
IkReal x1767=((0.244642)*x1754);
evalcond[0]=((((-1.0)*x1760))+(((-1.0)*x1762))+(((-0.07)*sj7))+(((-1.0)*sj7*x1766))+(((-1.0)*cj7*x1767)));
evalcond[1]=((-0.18558)+((sj7*x1767))+((sj4*x1758))+(((-1.0)*x1759*x1764))+(((-1.0)*cj7*x1766))+(((-0.07)*cj7))+(((-1.0)*x1756)));
evalcond[2]=((0.07)+((sj7*x1760))+((sj7*x1762))+(((0.18558)*cj7))+x1766+((cj7*x1756))+((x1757*x1759))+(((-1.0)*x1757*x1758)));
evalcond[3]=((((0.18558)*sj7))+(((-1.0)*x1767))+((sj7*x1756))+(((-1.0)*x1761*x1762))+(((-1.0)*sj7*x1758*x1764))+(((-1.0)*x1760*x1761))+((sj4*sj7*x1759)));
evalcond[4]=((0.118834468928)+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+((x1759*x1765))+((x1759*x1763))+(((-1.0)*pp))+(((-1.0)*x1758*x1765))+(((-1.0)*x1758*x1763))+(((0.03424988)*x1755))+(((0.117603323672)*cj7*x1755))+(((0.109556)*x1756))+(((-0.117603323672)*sj7*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1768=(py*sj4);
IkReal x1769=((4.08760556241365)*px);
IkReal x1770=(cj3*cj7);
IkReal x1771=(sj3*sj4);
IkReal x1772=((4.08760556241365)*py*sj3);
IkReal x1773=((4.08760556241365)*cj4*pz);
IkReal x1774=((4.08760556241365)*cj3*sj7);
if( IKabs(((((0.758577840272725)*sj7))+((cj7*x1772))+((sj7*x1769*x1771))+((sj7*x1773))+(((-1.0)*x1768*x1774))+((x1769*x1770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*cj7*x1769*x1771))+(((-0.758577840272725)*cj7))+(((4.08760556241365)*x1768*x1770))+((sj7*x1772))+((cj3*sj7*x1769))+(((-1.0)*cj7*x1773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.758577840272725)*sj7))+((cj7*x1772))+((sj7*x1769*x1771))+((sj7*x1773))+(((-1.0)*x1768*x1774))+((x1769*x1770))))+IKsqr(((-0.286132389368955)+(((-1.0)*cj7*x1769*x1771))+(((-0.758577840272725)*cj7))+(((4.08760556241365)*x1768*x1770))+((sj7*x1772))+((cj3*sj7*x1769))+(((-1.0)*cj7*x1773))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((0.758577840272725)*sj7))+((cj7*x1772))+((sj7*x1769*x1771))+((sj7*x1773))+(((-1.0)*x1768*x1774))+((x1769*x1770))), ((-0.286132389368955)+(((-1.0)*cj7*x1769*x1771))+(((-0.758577840272725)*cj7))+(((4.08760556241365)*x1768*x1770))+((sj7*x1772))+((cj3*sj7*x1769))+(((-1.0)*cj7*x1773))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1775=IKsin(j8);
IkReal x1776=IKcos(j8);
IkReal x1777=(cj4*pz);
IkReal x1778=(cj7*sj4);
IkReal x1779=(cj3*py);
IkReal x1780=(px*sj3);
IkReal x1781=((1.0)*sj7);
IkReal x1782=(py*sj3);
IkReal x1783=(cj3*px);
IkReal x1784=((0.056092)*cj4);
IkReal x1785=((0.109556)*sj4);
IkReal x1786=((0.244642)*x1776);
IkReal x1787=((0.244642)*x1775);
evalcond[0]=(((cj7*x1787))+((sj7*x1786))+(((0.07)*sj7))+(((-1.0)*x1782))+(((-1.0)*x1783)));
evalcond[1]=((-0.18558)+((sj4*x1779))+(((-1.0)*x1777))+(((-1.0)*cj7*x1786))+((sj7*x1787))+(((-0.07)*cj7))+(((-1.0)*sj4*x1780)));
evalcond[2]=((((0.18558)*sj7))+(((-1.0)*x1787))+((cj7*x1783))+((cj7*x1782))+(((-1.0)*sj4*x1779*x1781))+((sj7*x1777))+((sj4*sj7*x1780)));
evalcond[3]=((0.07)+(((0.18558)*cj7))+x1786+(((-1.0)*x1778*x1779))+((x1778*x1780))+((cj7*x1777))+(((-1.0)*x1781*x1782))+(((-1.0)*x1781*x1783)));
evalcond[4]=((0.118834468928)+(((0.109556)*x1777))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-0.117603323672)*sj7*x1775))+(((-1.0)*pp))+(((-1.0)*x1779*x1784))+(((-1.0)*x1779*x1785))+(((0.03424988)*x1776))+((x1780*x1785))+((x1780*x1784))+(((0.117603323672)*cj7*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1788=cj7*cj7;
IkReal x1789=cj6*cj6;
IkReal x1790=((4.08760556241365)*pz);
IkReal x1791=(cj4*sj7);
IkReal x1792=(cj6*sj7);
IkReal x1793=(px*sj3);
IkReal x1794=((500000.0)*cj4);
IkReal x1795=(cj7*sj4);
IkReal x1796=((500000.0)*py);
IkReal x1797=(cj6*cj7);
IkReal x1798=(cj3*px);
IkReal x1799=(cj7*sj6);
IkReal x1800=((500000.0)*pz);
IkReal x1801=(cj3*py);
IkReal x1802=((4.08760556241365)*cj4);
IkReal x1803=((4.08760556241365)*sj4*sj7);
IkReal x1804=(cj6*sj6*x1788);
IkReal x1805=(x1788*x1789);
CheckValue<IkReal> x1806=IKPowWithIntegerCheck(cj6,-1);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(sj7,-1);
if(!x1807.valid){
continue;
}
if( IKabs((((x1799*x1801*x1802))+(((0.758577840272725)*sj7))+(((-1.0)*x1793*x1799*x1802))+(((-1.0)*x1801*x1803))+(((-4.08760556241365)*x1797*x1798))+(((0.15551704122759)*x1799))+((x1793*x1803))+((sj6*x1790*x1795))+((x1790*x1791))+(((-4.08760556241365)*py*sj3*x1797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x1806.value)*(x1807.value)*(((((-1.0)*sj3*x1796))+(((-35000.0)*x1792))+(((-19023.0)*x1804))+(((-500000.0)*x1792*x1793*x1795))+(((-1.0)*x1794*x1801*x1804))+(((-1.0)*sj4*x1800*x1804))+(((-92790.0)*cj7*x1792))+(((500000.0)*x1798*x1805))+((x1793*x1794*x1804))+((cj3*x1792*x1795*x1796))+(((-1.0)*x1791*x1797*x1800))+(((-500000.0)*x1798))+((sj3*x1796*x1805)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1799*x1801*x1802))+(((0.758577840272725)*sj7))+(((-1.0)*x1793*x1799*x1802))+(((-1.0)*x1801*x1803))+(((-4.08760556241365)*x1797*x1798))+(((0.15551704122759)*x1799))+((x1793*x1803))+((sj6*x1790*x1795))+((x1790*x1791))+(((-4.08760556241365)*py*sj3*x1797))))+IKsqr(((8.1752111248273e-6)*(x1806.value)*(x1807.value)*(((((-1.0)*sj3*x1796))+(((-35000.0)*x1792))+(((-19023.0)*x1804))+(((-500000.0)*x1792*x1793*x1795))+(((-1.0)*x1794*x1801*x1804))+(((-1.0)*sj4*x1800*x1804))+(((-92790.0)*cj7*x1792))+(((500000.0)*x1798*x1805))+((x1793*x1794*x1804))+((cj3*x1792*x1795*x1796))+(((-1.0)*x1791*x1797*x1800))+(((-500000.0)*x1798))+((sj3*x1796*x1805))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1799*x1801*x1802))+(((0.758577840272725)*sj7))+(((-1.0)*x1793*x1799*x1802))+(((-1.0)*x1801*x1803))+(((-4.08760556241365)*x1797*x1798))+(((0.15551704122759)*x1799))+((x1793*x1803))+((sj6*x1790*x1795))+((x1790*x1791))+(((-4.08760556241365)*py*sj3*x1797))), ((8.1752111248273e-6)*(x1806.value)*(x1807.value)*(((((-1.0)*sj3*x1796))+(((-35000.0)*x1792))+(((-19023.0)*x1804))+(((-500000.0)*x1792*x1793*x1795))+(((-1.0)*x1794*x1801*x1804))+(((-1.0)*sj4*x1800*x1804))+(((-92790.0)*cj7*x1792))+(((500000.0)*x1798*x1805))+((x1793*x1794*x1804))+((cj3*x1792*x1795*x1796))+(((-1.0)*x1791*x1797*x1800))+(((-500000.0)*x1798))+((sj3*x1796*x1805))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1808=IKsin(j8);
IkReal x1809=IKcos(j8);
IkReal x1810=(cj4*cj7);
IkReal x1811=(px*sj3);
IkReal x1812=(cj7*sj4);
IkReal x1813=(cj3*py);
IkReal x1814=(sj6*sj7);
IkReal x1815=((1.0)*cj4);
IkReal x1816=(cj6*sj7);
IkReal x1817=(py*sj3);
IkReal x1818=((0.056092)*cj4);
IkReal x1819=((1.0)*sj4);
IkReal x1820=(cj4*pz);
IkReal x1821=(cj7*sj6);
IkReal x1822=((0.109556)*sj4);
IkReal x1823=(cj3*px);
IkReal x1824=(pz*x1819);
IkReal x1825=((0.244642)*x1809);
IkReal x1826=((0.244642)*x1808);
IkReal x1827=((1.0)*cj6*cj7);
IkReal x1828=(cj7*x1826);
evalcond[0]=((((-1.0)*x1823))+(((-1.0)*cj6*x1828))+(((-1.0)*x1816*x1825))+(((-0.07)*x1816))+(((-1.0)*x1817)));
evalcond[1]=((-0.18558)+((sj7*x1826))+(((-1.0)*x1811*x1819))+(((-1.0)*cj7*x1825))+(((-0.07)*cj7))+(((-1.0)*pz*x1815))+((sj4*x1813)));
evalcond[2]=((-0.038046)+(((-1.0)*x1824))+(((-1.0)*x1813*x1815))+(((0.07)*x1814))+((x1821*x1826))+((cj4*x1811))+((x1814*x1825)));
evalcond[3]=((0.07)+(((0.18558)*cj7))+((x1816*x1817))+((cj4*x1811*x1814))+(((-1.0)*x1813*x1814*x1815))+((pz*x1810))+(((-1.0)*x1812*x1813))+x1825+(((-0.038046)*x1814))+((x1816*x1823))+((x1811*x1812))+(((-1.0)*x1814*x1824)));
evalcond[4]=(((sj7*x1820))+(((-1.0)*x1826))+(((0.18558)*sj7))+((pz*sj6*x1812))+(((-1.0)*sj7*x1813*x1819))+((sj4*sj7*x1811))+(((-1.0)*x1817*x1827))+(((0.038046)*x1821))+(((-1.0)*sj6*x1810*x1811))+(((-1.0)*x1823*x1827))+((sj6*x1810*x1813)));
evalcond[5]=((0.118834468928)+(((0.109556)*x1820))+(((0.03365012)*cj7))+(((-1.0)*x1813*x1818))+(((-0.056092)*pz*sj4))+(((-1.0)*x1813*x1822))+(((-0.00489284)*x1809*x1814))+(((-0.00489284)*x1808*x1821))+((x1811*x1822))+(((-1.0)*pp))+(((0.117603323672)*cj7*x1809))+(((0.03424988)*x1809))+((x1811*x1818))+(((-0.0014)*x1814))+(((-0.117603323672)*sj7*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1829=(cj4*cj7);
IkReal x1830=(sj6*sj7);
IkReal x1831=(cj4*sj7);
IkReal x1832=((500000.0)*pz);
IkReal x1833=((500000.0)*cj3*py);
IkReal x1834=((500000.0)*px*sj3);
IkReal x1835=(cj7*sj4*sj6);
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x1836.valid){
continue;
}
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal(((((19023.0)*cj7))+((cj7*sj4*x1832))+(((92790.0)*x1830))+((sj4*x1830*x1834))+((x1829*x1833))+((cj4*x1830*x1832))+(((-1.0)*sj4*x1830*x1833))+(((-1.0)*x1829*x1834)))),IkReal(((((-1.0)*x1834*x1835))+(((-1.0)*sj6*x1829*x1832))+(((-35000.0)*sj6))+(((-92790.0)*cj7*sj6))+((sj4*sj7*x1832))+(((19023.0)*sj7))+((x1831*x1833))+(((-1.0)*x1831*x1834))+((x1833*x1835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1836.value)))+(x1837.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1838=IKsin(j8);
IkReal x1839=IKcos(j8);
IkReal x1840=(cj4*cj7);
IkReal x1841=(px*sj3);
IkReal x1842=(cj7*sj4);
IkReal x1843=(cj3*py);
IkReal x1844=(sj6*sj7);
IkReal x1845=((1.0)*cj4);
IkReal x1846=(cj6*sj7);
IkReal x1847=(py*sj3);
IkReal x1848=((0.056092)*cj4);
IkReal x1849=((1.0)*sj4);
IkReal x1850=(cj4*pz);
IkReal x1851=(cj7*sj6);
IkReal x1852=((0.109556)*sj4);
IkReal x1853=(cj3*px);
IkReal x1854=(pz*x1849);
IkReal x1855=((0.244642)*x1839);
IkReal x1856=((0.244642)*x1838);
IkReal x1857=((1.0)*cj6*cj7);
IkReal x1858=(cj7*x1856);
evalcond[0]=((((-1.0)*cj6*x1858))+(((-1.0)*x1853))+(((-1.0)*x1847))+(((-0.07)*x1846))+(((-1.0)*x1846*x1855)));
evalcond[1]=((-0.18558)+((sj7*x1856))+(((-1.0)*x1841*x1849))+(((-1.0)*cj7*x1855))+(((-0.07)*cj7))+(((-1.0)*pz*x1845))+((sj4*x1843)));
evalcond[2]=((-0.038046)+((cj4*x1841))+(((-1.0)*x1843*x1845))+((x1851*x1856))+(((0.07)*x1844))+((x1844*x1855))+(((-1.0)*x1854)));
evalcond[3]=((0.07)+(((0.18558)*cj7))+((x1846*x1853))+(((-1.0)*x1843*x1844*x1845))+((x1846*x1847))+((pz*x1840))+x1855+(((-0.038046)*x1844))+((cj4*x1841*x1844))+(((-1.0)*x1842*x1843))+((x1841*x1842))+(((-1.0)*x1844*x1854)));
evalcond[4]=((((0.18558)*sj7))+((sj7*x1850))+(((0.038046)*x1851))+((sj6*x1840*x1843))+((pz*sj6*x1842))+(((-1.0)*sj6*x1840*x1841))+(((-1.0)*sj7*x1843*x1849))+(((-1.0)*x1847*x1857))+(((-1.0)*x1853*x1857))+(((-1.0)*x1856))+((sj4*sj7*x1841)));
evalcond[5]=((0.118834468928)+(((-0.0014)*x1844))+(((-1.0)*x1843*x1848))+(((0.03365012)*cj7))+(((-0.056092)*pz*sj4))+(((-1.0)*pp))+(((-1.0)*x1843*x1852))+(((-0.00489284)*x1839*x1844))+(((-0.117603323672)*sj7*x1838))+(((0.117603323672)*cj7*x1839))+(((-0.00489284)*x1838*x1851))+((x1841*x1848))+(((0.03424988)*x1839))+((x1841*x1852))+(((0.109556)*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1859=((92790.0)*cj6);
IkReal x1860=((500000.0)*cj3*cj7);
IkReal x1861=(cj6*py*sj4);
IkReal x1862=((500000.0)*cj3*sj7);
IkReal x1863=((500000.0)*cj7*sj3);
IkReal x1864=(cj6*px*sj4);
IkReal x1865=((500000.0)*sj3*sj7);
IkReal x1866=((500000.0)*cj4*cj6*pz);
CheckValue<IkReal> x1867=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1867.valid){
continue;
}
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal((((sj7*x1859))+((x1864*x1865))+(((-1.0)*px*x1860))+((sj7*x1866))+(((-1.0)*x1861*x1862))+(((-1.0)*py*x1863)))),IkReal((((x1860*x1861))+(((-1.0)*cj7*x1866))+(((-1.0)*px*x1862))+(((-1.0)*x1863*x1864))+(((-1.0)*cj7*x1859))+(((-1.0)*py*x1865))+(((-35000.0)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1867.value)))+(x1868.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1869=IKsin(j8);
IkReal x1870=IKcos(j8);
IkReal x1871=(cj4*cj7);
IkReal x1872=(px*sj3);
IkReal x1873=(cj7*sj4);
IkReal x1874=(cj3*py);
IkReal x1875=(sj6*sj7);
IkReal x1876=((1.0)*cj4);
IkReal x1877=(cj6*sj7);
IkReal x1878=(py*sj3);
IkReal x1879=((0.056092)*cj4);
IkReal x1880=((1.0)*sj4);
IkReal x1881=(cj4*pz);
IkReal x1882=(cj7*sj6);
IkReal x1883=((0.109556)*sj4);
IkReal x1884=(cj3*px);
IkReal x1885=(pz*x1880);
IkReal x1886=((0.244642)*x1870);
IkReal x1887=((0.244642)*x1869);
IkReal x1888=((1.0)*cj6*cj7);
IkReal x1889=(cj7*x1887);
evalcond[0]=((((-1.0)*cj6*x1889))+(((-0.07)*x1877))+(((-1.0)*x1884))+(((-1.0)*x1878))+(((-1.0)*x1877*x1886)));
evalcond[1]=((-0.18558)+(((-1.0)*x1872*x1880))+((sj7*x1887))+(((-0.07)*cj7))+(((-1.0)*pz*x1876))+((sj4*x1874))+(((-1.0)*cj7*x1886)));
evalcond[2]=((-0.038046)+(((-1.0)*x1874*x1876))+(((0.07)*x1875))+((x1882*x1887))+((x1875*x1886))+(((-1.0)*x1885))+((cj4*x1872)));
evalcond[3]=((0.07)+(((0.18558)*cj7))+((x1877*x1884))+(((-1.0)*x1875*x1885))+((x1877*x1878))+(((-0.038046)*x1875))+(((-1.0)*x1874*x1875*x1876))+x1886+(((-1.0)*x1873*x1874))+((pz*x1871))+((x1872*x1873))+((cj4*x1872*x1875)));
evalcond[4]=(((sj7*x1881))+((sj4*sj7*x1872))+(((0.18558)*sj7))+(((0.038046)*x1882))+((pz*sj6*x1873))+(((-1.0)*x1878*x1888))+(((-1.0)*x1884*x1888))+((sj6*x1871*x1874))+(((-1.0)*sj6*x1871*x1872))+(((-1.0)*x1887))+(((-1.0)*sj7*x1874*x1880)));
evalcond[5]=((0.118834468928)+(((-0.0014)*x1875))+(((0.03424988)*x1870))+(((-0.117603323672)*sj7*x1869))+(((0.03365012)*cj7))+(((-1.0)*x1874*x1879))+(((-0.056092)*pz*sj4))+(((0.109556)*x1881))+((x1872*x1883))+(((-1.0)*pp))+((x1872*x1879))+(((-0.00489284)*x1870*x1875))+(((-0.00489284)*x1869*x1882))+(((0.117603323672)*cj7*x1870))+(((-1.0)*x1874*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1890=((4.08760556241365)*cj4);
IkReal x1891=(px*sj3);
IkReal x1892=(cj7*pz);
IkReal x1893=(cj3*py);
IkReal x1894=(pz*sj7);
IkReal x1895=((4.08760556241365)*sj4);
if( IKabs(((((-1.0)*cj7*x1891*x1895))+((cj7*x1893*x1895))+(((1.09712968337407)*sj7))+(((0.264786913122031)*cj7))+((sj7*x1890*x1893))+(((-1.0)*x1890*x1892))+((x1894*x1895))+(((-1.0)*sj7*x1890*x1891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*cj7*x1890*x1893))+(((-1.0)*x1892*x1895))+((cj7*x1890*x1891))+((sj7*x1893*x1895))+(((-1.0)*x1890*x1894))+(((-1.0)*sj7*x1891*x1895))+(((0.264786913122031)*sj7))+(((-1.09712968337407)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x1891*x1895))+((cj7*x1893*x1895))+(((1.09712968337407)*sj7))+(((0.264786913122031)*cj7))+((sj7*x1890*x1893))+(((-1.0)*x1890*x1892))+((x1894*x1895))+(((-1.0)*sj7*x1890*x1891))))+IKsqr(((-0.286132389368955)+(((-1.0)*cj7*x1890*x1893))+(((-1.0)*x1892*x1895))+((cj7*x1890*x1891))+((sj7*x1893*x1895))+(((-1.0)*x1890*x1894))+(((-1.0)*sj7*x1891*x1895))+(((0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj7*x1891*x1895))+((cj7*x1893*x1895))+(((1.09712968337407)*sj7))+(((0.264786913122031)*cj7))+((sj7*x1890*x1893))+(((-1.0)*x1890*x1892))+((x1894*x1895))+(((-1.0)*sj7*x1890*x1891))), ((-0.286132389368955)+(((-1.0)*cj7*x1890*x1893))+(((-1.0)*x1892*x1895))+((cj7*x1890*x1891))+((sj7*x1893*x1895))+(((-1.0)*x1890*x1894))+(((-1.0)*sj7*x1891*x1895))+(((0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1896=IKcos(j8);
IkReal x1897=IKsin(j8);
IkReal x1898=(pz*sj4);
IkReal x1899=(px*sj3);
IkReal x1900=(cj3*py);
IkReal x1901=((1.0)*cj7);
IkReal x1902=(cj4*pz);
IkReal x1903=((0.056092)*cj4);
IkReal x1904=((1.0)*sj4);
IkReal x1905=((0.109556)*sj4);
IkReal x1906=(cj4*sj7);
IkReal x1907=((0.244642)*x1896);
IkReal x1908=((0.244642)*x1897);
evalcond[0]=((-0.268404)+((sj7*x1908))+(((-1.0)*cj7*x1907))+((cj4*x1899))+(((-1.0)*cj4*x1900))+(((-1.0)*x1898))+(((-0.07)*cj7)));
evalcond[1]=((0.064778)+(((-1.0)*cj7*x1908))+(((-1.0)*x1899*x1904))+(((-1.0)*sj7*x1907))+(((-0.07)*sj7))+((sj4*x1900))+(((-1.0)*x1902)));
evalcond[2]=((0.07)+((sj7*x1902))+(((-1.0)*cj4*x1899*x1901))+(((0.268404)*cj7))+x1907+((cj4*cj7*x1900))+((sj4*sj7*x1899))+(((-1.0)*sj7*x1900*x1904))+(((-0.064778)*sj7))+((cj7*x1898)));
evalcond[3]=(((sj7*x1898))+(((-1.0)*x1901*x1902))+((x1900*x1906))+(((-1.0)*x1899*x1906))+(((0.064778)*cj7))+((cj7*sj4*x1900))+(((-1.0)*sj4*x1899*x1901))+(((0.268404)*sj7))+(((-1.0)*x1908)));
evalcond[4]=((0.118834468928)+(((-0.00489284)*cj7*x1897))+(((-0.00489284)*sj7*x1896))+(((0.03365012)*cj7))+(((-1.0)*x1900*x1903))+(((-1.0)*x1900*x1905))+(((0.109556)*x1902))+(((-0.0014)*sj7))+(((0.03424988)*x1896))+(((-0.117603323672)*sj7*x1897))+(((-1.0)*pp))+((x1899*x1903))+((x1899*x1905))+(((-0.056092)*x1898))+(((0.117603323672)*cj7*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1909=((4.08760556241365)*cj4);
IkReal x1910=(px*sj3);
IkReal x1911=(cj7*pz);
IkReal x1912=(cj3*py);
IkReal x1913=(pz*sj7);
IkReal x1914=((4.08760556241365)*sj4);
if( IKabs((((x1913*x1914))+(((1.09712968337407)*sj7))+((sj7*x1909*x1912))+((cj7*x1910*x1914))+(((-1.0)*cj7*x1912*x1914))+(((-0.264786913122031)*cj7))+(((-1.0)*sj7*x1909*x1910))+((x1909*x1911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*x1911*x1914))+((sj7*x1910*x1914))+((cj7*x1909*x1910))+(((-1.0)*sj7*x1912*x1914))+((x1909*x1913))+(((-0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))+(((-1.0)*cj7*x1909*x1912)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1913*x1914))+(((1.09712968337407)*sj7))+((sj7*x1909*x1912))+((cj7*x1910*x1914))+(((-1.0)*cj7*x1912*x1914))+(((-0.264786913122031)*cj7))+(((-1.0)*sj7*x1909*x1910))+((x1909*x1911))))+IKsqr(((-0.286132389368955)+(((-1.0)*x1911*x1914))+((sj7*x1910*x1914))+((cj7*x1909*x1910))+(((-1.0)*sj7*x1912*x1914))+((x1909*x1913))+(((-0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))+(((-1.0)*cj7*x1909*x1912))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x1913*x1914))+(((1.09712968337407)*sj7))+((sj7*x1909*x1912))+((cj7*x1910*x1914))+(((-1.0)*cj7*x1912*x1914))+(((-0.264786913122031)*cj7))+(((-1.0)*sj7*x1909*x1910))+((x1909*x1911))), ((-0.286132389368955)+(((-1.0)*x1911*x1914))+((sj7*x1910*x1914))+((cj7*x1909*x1910))+(((-1.0)*sj7*x1912*x1914))+((x1909*x1913))+(((-0.264786913122031)*sj7))+(((-1.09712968337407)*cj7))+(((-1.0)*cj7*x1909*x1912))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1915=IKcos(j8);
IkReal x1916=IKsin(j8);
IkReal x1917=(pz*sj4);
IkReal x1918=(cj4*pz);
IkReal x1919=(px*sj3);
IkReal x1920=(cj7*sj4);
IkReal x1921=(cj3*py);
IkReal x1922=((0.056092)*cj4);
IkReal x1923=((1.0)*sj4);
IkReal x1924=(cj4*cj7);
IkReal x1925=((0.109556)*sj4);
IkReal x1926=((1.0)*sj7);
IkReal x1927=(sj7*x1916);
IkReal x1928=(cj7*x1916);
IkReal x1929=((0.244642)*x1915);
evalcond[0]=((-0.268404)+(((-1.0)*cj4*x1921))+(((-1.0)*x1917))+(((-1.0)*cj7*x1929))+(((-0.07)*cj7))+(((0.244642)*x1927))+((cj4*x1919)));
evalcond[1]=((0.064778)+((sj7*x1929))+((sj4*x1921))+(((0.07)*sj7))+(((-1.0)*x1918))+(((-1.0)*x1919*x1923))+(((0.244642)*x1928)));
evalcond[2]=((((-0.244642)*x1916))+(((-1.0)*cj4*x1919*x1926))+(((-0.064778)*cj7))+(((-1.0)*x1920*x1921))+((cj4*sj7*x1921))+((cj7*x1918))+((x1919*x1920))+((sj7*x1917))+(((0.268404)*sj7)));
evalcond[3]=((0.07)+(((0.064778)*sj7))+((x1921*x1924))+(((-1.0)*x1918*x1926))+((sj4*sj7*x1921))+(((0.268404)*cj7))+(((-1.0)*x1919*x1924))+x1929+((cj7*x1917))+(((-1.0)*sj7*x1919*x1923)));
evalcond[4]=((0.118834468928)+(((0.03424988)*x1915))+(((0.03365012)*cj7))+(((0.00489284)*sj7*x1915))+(((0.0014)*sj7))+(((-0.056092)*x1917))+(((-1.0)*pp))+(((0.109556)*x1918))+(((0.117603323672)*cj7*x1915))+(((-1.0)*x1921*x1922))+(((-1.0)*x1921*x1925))+((x1919*x1925))+((x1919*x1922))+(((0.00489284)*x1928))+(((-0.117603323672)*x1927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1930=((4.08760556241365)*pz);
IkReal x1931=((4.08760556241365)*cj3);
IkReal x1932=((4.08760556241365)*sj3);
IkReal x1933=(sj4*sj6);
if( IKabs(((((-1.0)*cj4*sj6*x1930))+(((-1.0)*px*x1932*x1933))+(((-1.0)*cj6*py*x1932))+((py*x1931*x1933))+(((0.264786913122031)*sj6))+(((-1.0)*cj6*px*x1931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.38326207274303)+((cj4*px*x1932))+(((-1.0)*cj4*py*x1931))+(((-1.0)*sj4*x1930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*sj6*x1930))+(((-1.0)*px*x1932*x1933))+(((-1.0)*cj6*py*x1932))+((py*x1931*x1933))+(((0.264786913122031)*sj6))+(((-1.0)*cj6*px*x1931))))+IKsqr(((-1.38326207274303)+((cj4*px*x1932))+(((-1.0)*cj4*py*x1931))+(((-1.0)*sj4*x1930))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj4*sj6*x1930))+(((-1.0)*px*x1932*x1933))+(((-1.0)*cj6*py*x1932))+((py*x1931*x1933))+(((0.264786913122031)*sj6))+(((-1.0)*cj6*px*x1931))), ((-1.38326207274303)+((cj4*px*x1932))+(((-1.0)*cj4*py*x1931))+(((-1.0)*sj4*x1930))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1934=IKsin(j8);
IkReal x1935=IKcos(j8);
IkReal x1936=(pz*sj4);
IkReal x1937=(cj4*pz);
IkReal x1938=((1.0)*px);
IkReal x1939=(sj3*sj4);
IkReal x1940=(cj4*px*sj3);
IkReal x1941=(cj3*py*sj4);
IkReal x1942=((0.244642)*x1934);
IkReal x1943=((1.0)*py*sj3);
IkReal x1944=(cj3*cj4*py);
evalcond[0]=((((-1.0)*x1943))+(((-1.0)*cj6*x1942))+(((-1.0)*cj3*x1938)));
evalcond[1]=((-0.338404)+(((-0.244642)*x1935))+(((-1.0)*x1936))+x1940+(((-1.0)*x1944)));
evalcond[2]=((0.064778)+(((-1.0)*x1937))+x1941+(((-1.0)*x1938*x1939))+(((-1.0)*sj6*x1942)));
evalcond[3]=((((0.064778)*sj6))+(((-1.0)*sj6*x1938*x1939))+(((-1.0)*x1942))+(((-1.0)*sj6*x1937))+(((-1.0)*cj3*cj6*x1938))+((sj6*x1941))+(((-1.0)*cj6*x1943)));
evalcond[4]=((0.152484588928)+(((-0.00489284)*sj6*x1934))+(((0.151853203672)*x1935))+(((-0.056092)*x1936))+(((-0.109556)*x1941))+(((0.109556)*x1937))+(((-1.0)*pp))+(((-0.056092)*x1944))+(((0.056092)*x1940))+(((0.109556)*px*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1945=((4.08760556241365)*pz);
IkReal x1946=((4.08760556241365)*cj3);
IkReal x1947=((4.08760556241365)*sj3);
IkReal x1948=(sj4*sj6);
if( IKabs((((cj6*px*x1946))+((cj4*sj6*x1945))+(((-1.0)*py*x1946*x1948))+(((-0.264786913122031)*sj6))+((cj6*py*x1947))+((px*x1947*x1948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.810997294005118)+((cj4*py*x1946))+((sj4*x1945))+(((-1.0)*cj4*px*x1947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*px*x1946))+((cj4*sj6*x1945))+(((-1.0)*py*x1946*x1948))+(((-0.264786913122031)*sj6))+((cj6*py*x1947))+((px*x1947*x1948))))+IKsqr(((0.810997294005118)+((cj4*py*x1946))+((sj4*x1945))+(((-1.0)*cj4*px*x1947))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((cj6*px*x1946))+((cj4*sj6*x1945))+(((-1.0)*py*x1946*x1948))+(((-0.264786913122031)*sj6))+((cj6*py*x1947))+((px*x1947*x1948))), ((0.810997294005118)+((cj4*py*x1946))+((sj4*x1945))+(((-1.0)*cj4*px*x1947))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1949=IKsin(j8);
IkReal x1950=IKcos(j8);
IkReal x1951=(pz*sj4);
IkReal x1952=(cj3*py);
IkReal x1953=(cj4*pz);
IkReal x1954=(py*sj3);
IkReal x1955=(cj3*px);
IkReal x1956=(cj4*px*sj3);
IkReal x1957=((0.244642)*x1949);
IkReal x1958=(px*sj3*sj4);
evalcond[0]=(((cj6*x1957))+(((-1.0)*x1955))+(((-1.0)*x1954)));
evalcond[1]=((-0.198404)+(((-1.0)*cj4*x1952))+(((0.244642)*x1950))+x1956+(((-1.0)*x1951)));
evalcond[2]=((0.064778)+((sj6*x1957))+(((-1.0)*x1953))+(((-1.0)*x1958))+((sj4*x1952)));
evalcond[3]=((((-1.0)*x1957))+(((-1.0)*sj4*sj6*x1952))+((cj6*x1955))+((cj6*x1954))+((sj6*x1958))+((sj6*x1953))+(((-0.064778)*sj6)));
evalcond[4]=((0.085184348928)+(((-0.056092)*cj4*x1952))+(((0.00489284)*sj6*x1949))+(((0.109556)*x1958))+(((0.109556)*x1953))+(((-1.0)*pp))+(((-0.056092)*x1951))+(((0.056092)*x1956))+(((-0.083353443672)*x1950))+(((-0.109556)*sj4*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1959=(cj4*px);
IkReal x1960=((4.08760556241365)*py);
IkReal x1961=(cj3*sj7);
IkReal x1962=(cj7*sj3);
IkReal x1963=((4.08760556241365)*px);
IkReal x1964=(cj3*cj7);
IkReal x1965=((4.08760556241365)*sj3*sj7);
IkReal x1966=((4.08760556241365)*pz*sj4);
if( IKabs(((((-1.0)*x1959*x1965))+(((1.09712968337407)*sj7))+((sj7*x1966))+(((-1.0)*x1960*x1962))+(((-1.0)*x1963*x1964))+((cj4*x1960*x1961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((4.08760556241365)*x1959*x1962))+(((-1.0)*sj3*sj7*x1960))+(((-1.0)*cj7*x1966))+(((-1.0)*x1961*x1963))+(((-1.09712968337407)*cj7))+(((-1.0)*cj4*x1960*x1964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1959*x1965))+(((1.09712968337407)*sj7))+((sj7*x1966))+(((-1.0)*x1960*x1962))+(((-1.0)*x1963*x1964))+((cj4*x1960*x1961))))+IKsqr(((-0.286132389368955)+(((4.08760556241365)*x1959*x1962))+(((-1.0)*sj3*sj7*x1960))+(((-1.0)*cj7*x1966))+(((-1.0)*x1961*x1963))+(((-1.09712968337407)*cj7))+(((-1.0)*cj4*x1960*x1964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1959*x1965))+(((1.09712968337407)*sj7))+((sj7*x1966))+(((-1.0)*x1960*x1962))+(((-1.0)*x1963*x1964))+((cj4*x1960*x1961))), ((-0.286132389368955)+(((4.08760556241365)*x1959*x1962))+(((-1.0)*sj3*sj7*x1960))+(((-1.0)*cj7*x1966))+(((-1.0)*x1961*x1963))+(((-1.09712968337407)*cj7))+(((-1.0)*cj4*x1960*x1964))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1967=IKsin(j8);
IkReal x1968=IKcos(j8);
IkReal x1969=(pz*sj4);
IkReal x1970=((1.0)*cj7);
IkReal x1971=(cj3*px);
IkReal x1972=(py*sj3);
IkReal x1973=(cj3*py);
IkReal x1974=((0.109556)*sj4);
IkReal x1975=(cj4*px*sj3);
IkReal x1976=((0.244642)*x1968);
IkReal x1977=((0.244642)*x1967);
evalcond[0]=((((-0.07)*sj7))+(((-1.0)*cj7*x1977))+(((-1.0)*x1972))+(((-1.0)*x1971))+(((-1.0)*sj7*x1976)));
evalcond[1]=((-0.268404)+(((-1.0)*x1969))+(((-1.0)*cj7*x1976))+(((-1.0)*cj4*x1973))+x1975+(((-0.07)*cj7))+((sj7*x1977)));
evalcond[2]=((0.07)+((cj7*x1969))+((cj4*cj7*x1973))+(((0.268404)*cj7))+(((-1.0)*x1970*x1975))+x1976+((sj7*x1971))+((sj7*x1972)));
evalcond[3]=(((cj4*sj7*x1973))+(((-1.0)*sj7*x1975))+(((-1.0)*x1977))+(((-1.0)*x1970*x1971))+(((-1.0)*x1970*x1972))+((sj7*x1969))+(((0.268404)*sj7)));
evalcond[4]=((0.118834468928)+(((-0.056092)*cj4*x1973))+(((0.109556)*cj4*pz))+(((0.117603323672)*cj7*x1968))+(((0.03365012)*cj7))+(((-1.0)*x1973*x1974))+((px*sj3*x1974))+(((-1.0)*pp))+(((-0.056092)*x1969))+(((0.03424988)*x1968))+(((0.056092)*x1975))+(((-0.117603323672)*sj7*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1978=(cj4*px);
IkReal x1979=((4.08760556241365)*py);
IkReal x1980=(cj3*sj7);
IkReal x1981=(cj7*sj3);
IkReal x1982=((4.08760556241365)*px);
IkReal x1983=(cj3*cj7);
IkReal x1984=((4.08760556241365)*sj3*sj7);
IkReal x1985=((4.08760556241365)*pz*sj4);
if( IKabs(((((1.09712968337407)*sj7))+((cj4*x1979*x1980))+((x1979*x1981))+((x1982*x1983))+((sj7*x1985))+(((-1.0)*x1978*x1984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((x1980*x1982))+((sj3*sj7*x1979))+(((4.08760556241365)*x1978*x1981))+(((-1.0)*cj4*x1979*x1983))+(((-1.09712968337407)*cj7))+(((-1.0)*cj7*x1985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.09712968337407)*sj7))+((cj4*x1979*x1980))+((x1979*x1981))+((x1982*x1983))+((sj7*x1985))+(((-1.0)*x1978*x1984))))+IKsqr(((-0.286132389368955)+((x1980*x1982))+((sj3*sj7*x1979))+(((4.08760556241365)*x1978*x1981))+(((-1.0)*cj4*x1979*x1983))+(((-1.09712968337407)*cj7))+(((-1.0)*cj7*x1985))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((1.09712968337407)*sj7))+((cj4*x1979*x1980))+((x1979*x1981))+((x1982*x1983))+((sj7*x1985))+(((-1.0)*x1978*x1984))), ((-0.286132389368955)+((x1980*x1982))+((sj3*sj7*x1979))+(((4.08760556241365)*x1978*x1981))+(((-1.0)*cj4*x1979*x1983))+(((-1.09712968337407)*cj7))+(((-1.0)*cj7*x1985))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1986=IKsin(j8);
IkReal x1987=IKcos(j8);
IkReal x1988=(pz*sj4);
IkReal x1989=((1.0)*sj7);
IkReal x1990=(py*sj3);
IkReal x1991=(cj3*px);
IkReal x1992=(cj3*py);
IkReal x1993=((0.109556)*sj4);
IkReal x1994=(cj4*px*sj3);
IkReal x1995=((0.244642)*x1987);
IkReal x1996=((0.244642)*x1986);
evalcond[0]=(((cj7*x1996))+(((0.07)*sj7))+((sj7*x1995))+(((-1.0)*x1991))+(((-1.0)*x1990)));
evalcond[1]=((-0.268404)+(((-1.0)*cj4*x1992))+((sj7*x1996))+(((-1.0)*cj7*x1995))+x1994+(((-0.07)*cj7))+(((-1.0)*x1988)));
evalcond[2]=(((cj4*sj7*x1992))+((cj7*x1990))+((cj7*x1991))+(((-1.0)*x1989*x1994))+(((-1.0)*x1996))+((sj7*x1988))+(((0.268404)*sj7)));
evalcond[3]=((0.07)+((cj4*cj7*x1992))+(((-1.0)*cj7*x1994))+(((0.268404)*cj7))+(((-1.0)*x1989*x1991))+(((-1.0)*x1989*x1990))+x1995+((cj7*x1988)));
evalcond[4]=((0.118834468928)+(((0.109556)*cj4*pz))+(((0.03365012)*cj7))+(((0.117603323672)*cj7*x1987))+(((-0.056092)*x1988))+(((-1.0)*pp))+(((-0.056092)*cj4*x1992))+(((-1.0)*x1992*x1993))+(((-0.117603323672)*sj7*x1986))+(((0.056092)*x1994))+((px*sj3*x1993))+(((0.03424988)*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1997=cj7*cj7;
IkReal x1998=cj6*cj6;
IkReal x1999=(px*sj3);
IkReal x2000=(cj3*py);
IkReal x2001=(cj7*sj6);
IkReal x2002=((4.08760556241365)*cj4);
IkReal x2003=(cj6*sj7);
IkReal x2004=(pz*sj7);
IkReal x2005=((4.08760556241365)*sj4);
IkReal x2006=(cj3*px);
IkReal x2007=((500000.0)*cj6*sj4);
IkReal x2008=(sj6*x1997);
IkReal x2009=((4.08760556241365)*cj6*cj7);
IkReal x2010=((500000.0)*py*sj3);
IkReal x2011=(x1997*x1998);
IkReal x2012=((500000.0)*cj4*cj7*x2003);
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(cj6,-1);
if(!x2013.valid){
continue;
}
CheckValue<IkReal> x2014=IKPowWithIntegerCheck(sj7,-1);
if(!x2014.valid){
continue;
}
if( IKabs(((((-1.0)*py*sj3*x2009))+(((-1.0)*x2006*x2009))+((sj7*x2000*x2002))+(((-1.0)*x1999*x2001*x2005))+(((1.09712968337407)*sj7))+(((-1.0)*pz*x2001*x2002))+(((0.264786913122031)*x2001))+((x2004*x2005))+(((-1.0)*sj7*x1999*x2002))+((x2000*x2001*x2005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x2013.value)*(x2014.value)*(((((-1.0)*x2010))+(((-32389.0)*cj6*x2008))+(((-134202.0)*cj7*x2003))+(((-500000.0)*cj7*pz*sj4*x2003))+(((-1.0)*x2000*x2007*x2008))+((x1999*x2012))+((x2010*x2011))+(((-500000.0)*x2006))+(((500000.0)*cj4*cj6*pz*x2008))+(((500000.0)*x2006*x2011))+((x1999*x2007*x2008))+(((-1.0)*x2000*x2012))+(((-35000.0)*x2003)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*sj3*x2009))+(((-1.0)*x2006*x2009))+((sj7*x2000*x2002))+(((-1.0)*x1999*x2001*x2005))+(((1.09712968337407)*sj7))+(((-1.0)*pz*x2001*x2002))+(((0.264786913122031)*x2001))+((x2004*x2005))+(((-1.0)*sj7*x1999*x2002))+((x2000*x2001*x2005))))+IKsqr(((8.1752111248273e-6)*(x2013.value)*(x2014.value)*(((((-1.0)*x2010))+(((-32389.0)*cj6*x2008))+(((-134202.0)*cj7*x2003))+(((-500000.0)*cj7*pz*sj4*x2003))+(((-1.0)*x2000*x2007*x2008))+((x1999*x2012))+((x2010*x2011))+(((-500000.0)*x2006))+(((500000.0)*cj4*cj6*pz*x2008))+(((500000.0)*x2006*x2011))+((x1999*x2007*x2008))+(((-1.0)*x2000*x2012))+(((-35000.0)*x2003))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*py*sj3*x2009))+(((-1.0)*x2006*x2009))+((sj7*x2000*x2002))+(((-1.0)*x1999*x2001*x2005))+(((1.09712968337407)*sj7))+(((-1.0)*pz*x2001*x2002))+(((0.264786913122031)*x2001))+((x2004*x2005))+(((-1.0)*sj7*x1999*x2002))+((x2000*x2001*x2005))), ((8.1752111248273e-6)*(x2013.value)*(x2014.value)*(((((-1.0)*x2010))+(((-32389.0)*cj6*x2008))+(((-134202.0)*cj7*x2003))+(((-500000.0)*cj7*pz*sj4*x2003))+(((-1.0)*x2000*x2007*x2008))+((x1999*x2012))+((x2010*x2011))+(((-500000.0)*x2006))+(((500000.0)*cj4*cj6*pz*x2008))+(((500000.0)*x2006*x2011))+((x1999*x2007*x2008))+(((-1.0)*x2000*x2012))+(((-35000.0)*x2003))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2015=IKsin(j8);
IkReal x2016=IKcos(j8);
IkReal x2017=(pz*sj4);
IkReal x2018=(px*sj3);
IkReal x2019=((0.064778)*sj6);
IkReal x2020=(cj7*sj6);
IkReal x2021=((1.0)*sj4);
IkReal x2022=(sj6*sj7);
IkReal x2023=((1.0)*cj4);
IkReal x2024=(cj6*cj7);
IkReal x2025=(cj6*sj7);
IkReal x2026=(py*sj3);
IkReal x2027=((0.056092)*cj4);
IkReal x2028=(cj3*py);
IkReal x2029=(cj4*pz);
IkReal x2030=(cj3*px);
IkReal x2031=(sj4*x2028);
IkReal x2032=((0.244642)*x2015);
IkReal x2033=((0.244642)*x2016);
evalcond[0]=((((-0.07)*x2025))+(((-1.0)*x2026))+(((-1.0)*x2030))+(((-1.0)*x2024*x2032))+(((-1.0)*x2025*x2033)));
evalcond[1]=((-0.268404)+(((-1.0)*x2023*x2028))+(((-0.07)*cj7))+((sj7*x2032))+(((-1.0)*cj7*x2033))+(((-1.0)*x2017))+((cj4*x2018)));
evalcond[2]=((0.064778)+(((-0.07)*x2022))+(((-1.0)*x2020*x2032))+(((-1.0)*x2022*x2033))+x2031+(((-1.0)*pz*x2023))+(((-1.0)*x2018*x2021)));
evalcond[3]=((0.07)+(((-1.0)*x2021*x2022*x2028))+((x2025*x2030))+x2033+((x2025*x2026))+((sj4*x2018*x2022))+((x2022*x2029))+(((0.268404)*cj7))+(((-1.0)*cj7*x2018*x2023))+(((-1.0)*sj7*x2019))+((cj7*x2017))+((cj4*cj7*x2028)));
evalcond[4]=((((-1.0)*sj7*x2018*x2023))+(((-1.0)*x2024*x2026))+(((-1.0)*x2024*x2030))+((sj7*x2017))+(((-1.0)*pz*x2020*x2023))+(((-1.0)*x2032))+((x2020*x2031))+((cj7*x2019))+(((-1.0)*x2018*x2020*x2021))+((cj4*sj7*x2028))+(((0.268404)*sj7)));
evalcond[5]=((0.118834468928)+(((0.117603323672)*cj7*x2016))+(((0.03365012)*cj7))+(((-0.00489284)*x2015*x2020))+((x2018*x2027))+(((-0.056092)*x2017))+(((-0.0014)*x2022))+(((0.03424988)*x2016))+(((-0.109556)*x2031))+(((0.109556)*x2029))+(((-1.0)*pp))+(((0.109556)*sj4*x2018))+(((-0.00489284)*x2016*x2022))+(((-1.0)*x2027*x2028))+(((-0.117603323672)*sj7*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2034=(cj4*sj6);
IkReal x2035=(pz*sj6);
IkReal x2036=(px*sj3);
IkReal x2037=((134202.0)*sj6);
IkReal x2038=(cj7*sj4);
IkReal x2039=((500000.0)*cj4*pz);
IkReal x2040=((500000.0)*sj4*sj7);
IkReal x2041=((500000.0)*cj3*py);
IkReal x2042=((500000.0)*cj7*x2036);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((((32389.0)*cj7))+(((-500000.0)*sj7*x2034*x2036))+((sj7*x2037))+(((-1.0)*cj7*x2039))+(((-500000.0)*x2036*x2038))+((x2035*x2040))+((sj7*x2034*x2041))+((x2038*x2041)))),IkReal(((((-1.0)*cj7*x2034*x2041))+((cj3*py*x2040))+(((-35000.0)*sj6))+(((-1.0)*sj7*x2039))+(((-500000.0)*x2035*x2038))+(((-1.0)*cj7*x2037))+(((-1.0)*x2036*x2040))+((x2034*x2042))+(((32389.0)*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x2044.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2043.value)+(((1.5707963267949)*(x2044.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2045=IKsin(j8);
IkReal x2046=IKcos(j8);
IkReal x2047=(pz*sj4);
IkReal x2048=(px*sj3);
IkReal x2049=((0.064778)*sj6);
IkReal x2050=(cj7*sj6);
IkReal x2051=((1.0)*sj4);
IkReal x2052=(sj6*sj7);
IkReal x2053=((1.0)*cj4);
IkReal x2054=(cj6*cj7);
IkReal x2055=(cj6*sj7);
IkReal x2056=(py*sj3);
IkReal x2057=((0.056092)*cj4);
IkReal x2058=(cj3*py);
IkReal x2059=(cj4*pz);
IkReal x2060=(cj3*px);
IkReal x2061=(sj4*x2058);
IkReal x2062=((0.244642)*x2045);
IkReal x2063=((0.244642)*x2046);
evalcond[0]=((((-0.07)*x2055))+(((-1.0)*x2055*x2063))+(((-1.0)*x2060))+(((-1.0)*x2056))+(((-1.0)*x2054*x2062)));
evalcond[1]=((-0.268404)+((sj7*x2062))+((cj4*x2048))+(((-0.07)*cj7))+(((-1.0)*cj7*x2063))+(((-1.0)*x2047))+(((-1.0)*x2053*x2058)));
evalcond[2]=((0.064778)+(((-1.0)*x2050*x2062))+(((-0.07)*x2052))+x2061+(((-1.0)*pz*x2053))+(((-1.0)*x2052*x2063))+(((-1.0)*x2048*x2051)));
evalcond[3]=((0.07)+((x2055*x2060))+((cj7*x2047))+(((-1.0)*cj7*x2048*x2053))+((x2055*x2056))+((x2052*x2059))+x2063+(((0.268404)*cj7))+(((-1.0)*sj7*x2049))+((sj4*x2048*x2052))+((cj4*cj7*x2058))+(((-1.0)*x2051*x2052*x2058)));
evalcond[4]=(((cj7*x2049))+(((-1.0)*sj7*x2048*x2053))+(((-1.0)*x2054*x2056))+(((-1.0)*x2048*x2050*x2051))+(((-1.0)*x2062))+(((-1.0)*pz*x2050*x2053))+(((-1.0)*x2054*x2060))+((x2050*x2061))+((cj4*sj7*x2058))+(((0.268404)*sj7))+((sj7*x2047)));
evalcond[5]=((0.118834468928)+(((-0.00489284)*x2046*x2052))+(((-0.00489284)*x2045*x2050))+(((0.03424988)*x2046))+(((0.03365012)*cj7))+(((-0.117603323672)*sj7*x2045))+(((-0.0014)*x2052))+(((0.109556)*sj4*x2048))+(((0.109556)*x2059))+(((-1.0)*x2057*x2058))+(((-1.0)*pp))+((x2048*x2057))+(((-0.056092)*x2047))+(((-0.109556)*x2061))+(((0.117603323672)*cj7*x2046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2064=(cj6*sj7);
IkReal x2065=((500000.0)*cj7);
IkReal x2066=(cj3*px);
IkReal x2067=(pz*sj4);
IkReal x2068=((500000.0)*sj7);
IkReal x2069=(py*sj3);
IkReal x2070=(cj3*cj4*py);
IkReal x2071=(cj4*px*sj3);
CheckValue<IkReal> x2072=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x2072.valid){
continue;
}
CheckValue<IkReal> x2073 = IKatan2WithCheck(IkReal(((((134202.0)*x2064))+(((500000.0)*x2064*x2070))+(((500000.0)*x2064*x2067))+(((-1.0)*x2065*x2069))+(((-1.0)*x2065*x2066))+(((-500000.0)*x2064*x2071)))),IkReal((((cj6*x2065*x2071))+(((-134202.0)*cj6*cj7))+(((-1.0)*cj6*x2065*x2070))+(((-1.0)*cj6*x2065*x2067))+(((-35000.0)*cj6))+(((-1.0)*x2066*x2068))+(((-1.0)*x2068*x2069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2073.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2072.value)))+(x2073.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2074=IKsin(j8);
IkReal x2075=IKcos(j8);
IkReal x2076=(pz*sj4);
IkReal x2077=(px*sj3);
IkReal x2078=((0.064778)*sj6);
IkReal x2079=(cj7*sj6);
IkReal x2080=((1.0)*sj4);
IkReal x2081=(sj6*sj7);
IkReal x2082=((1.0)*cj4);
IkReal x2083=(cj6*cj7);
IkReal x2084=(cj6*sj7);
IkReal x2085=(py*sj3);
IkReal x2086=((0.056092)*cj4);
IkReal x2087=(cj3*py);
IkReal x2088=(cj4*pz);
IkReal x2089=(cj3*px);
IkReal x2090=(sj4*x2087);
IkReal x2091=((0.244642)*x2074);
IkReal x2092=((0.244642)*x2075);
evalcond[0]=((((-1.0)*x2083*x2091))+(((-1.0)*x2089))+(((-1.0)*x2085))+(((-0.07)*x2084))+(((-1.0)*x2084*x2092)));
evalcond[1]=((-0.268404)+(((-1.0)*cj7*x2092))+((cj4*x2077))+(((-1.0)*x2076))+(((-0.07)*cj7))+((sj7*x2091))+(((-1.0)*x2082*x2087)));
evalcond[2]=((0.064778)+(((-1.0)*x2081*x2092))+x2090+(((-1.0)*x2077*x2080))+(((-1.0)*x2079*x2091))+(((-0.07)*x2081))+(((-1.0)*pz*x2082)));
evalcond[3]=((0.07)+((cj7*x2076))+((x2084*x2085))+((x2084*x2089))+((sj4*x2077*x2081))+x2092+((x2081*x2088))+(((0.268404)*cj7))+(((-1.0)*sj7*x2078))+(((-1.0)*cj7*x2077*x2082))+((cj4*cj7*x2087))+(((-1.0)*x2080*x2081*x2087)));
evalcond[4]=((((-1.0)*x2091))+(((-1.0)*sj7*x2077*x2082))+((cj7*x2078))+((sj7*x2076))+((cj4*sj7*x2087))+((x2079*x2090))+(((-1.0)*x2083*x2089))+(((-1.0)*x2083*x2085))+(((-1.0)*x2077*x2079*x2080))+(((-1.0)*pz*x2079*x2082))+(((0.268404)*sj7)));
evalcond[5]=((0.118834468928)+(((-0.109556)*x2090))+(((0.03365012)*cj7))+(((-1.0)*x2086*x2087))+(((-0.117603323672)*sj7*x2074))+(((-1.0)*pp))+((x2077*x2086))+(((-0.056092)*x2076))+(((-0.00489284)*x2075*x2081))+(((0.109556)*sj4*x2077))+(((0.109556)*x2088))+(((0.117603323672)*cj7*x2075))+(((-0.00489284)*x2074*x2079))+(((-0.0014)*x2081))+(((0.03424988)*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=IKsign(cj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j8eval[0]=sj6;
j8eval[1]=IKsign(sj6);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j8eval[0]=cj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2093=((4.08760556241365)*cj4);
IkReal x2094=(px*sj3);
IkReal x2095=(cj7*pz);
IkReal x2096=(pz*sj7);
IkReal x2097=((4.08760556241365)*sj4);
IkReal x2098=(cj3*py*sj7);
IkReal x2099=(cj3*cj7*py);
if( IKabs(((((-1.0)*x2096*x2097))+(((-1.0)*x2097*x2099))+(((0.867847712167167)*sj7))+(((-1.0)*x2093*x2098))+((sj7*x2093*x2094))+(((-0.183034801873758)*cj7))+((x2093*x2095))+((cj7*x2094*x2097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-0.183034801873758)*sj7))+(((-1.0)*x2097*x2098))+(((-1.0)*cj7*x2093*x2094))+(((-0.867847712167167)*cj7))+((x2093*x2096))+((x2093*x2099))+((sj7*x2094*x2097))+((x2095*x2097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2096*x2097))+(((-1.0)*x2097*x2099))+(((0.867847712167167)*sj7))+(((-1.0)*x2093*x2098))+((sj7*x2093*x2094))+(((-0.183034801873758)*cj7))+((x2093*x2095))+((cj7*x2094*x2097))))+IKsqr(((-0.286132389368955)+(((-0.183034801873758)*sj7))+(((-1.0)*x2097*x2098))+(((-1.0)*cj7*x2093*x2094))+(((-0.867847712167167)*cj7))+((x2093*x2096))+((x2093*x2099))+((sj7*x2094*x2097))+((x2095*x2097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x2096*x2097))+(((-1.0)*x2097*x2099))+(((0.867847712167167)*sj7))+(((-1.0)*x2093*x2098))+((sj7*x2093*x2094))+(((-0.183034801873758)*cj7))+((x2093*x2095))+((cj7*x2094*x2097))), ((-0.286132389368955)+(((-0.183034801873758)*sj7))+(((-1.0)*x2097*x2098))+(((-1.0)*cj7*x2093*x2094))+(((-0.867847712167167)*cj7))+((x2093*x2096))+((x2093*x2099))+((sj7*x2094*x2097))+((x2095*x2097))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2100=IKcos(j8);
IkReal x2101=IKsin(j8);
IkReal x2102=(pz*sj4);
IkReal x2103=(cj4*cj7);
IkReal x2104=(px*sj3);
IkReal x2105=(cj7*sj4);
IkReal x2106=(cj3*py);
IkReal x2107=(cj4*pz);
IkReal x2108=(cj4*sj7);
IkReal x2109=((1.0)*sj7);
IkReal x2110=((0.056092)*cj4);
IkReal x2111=((0.109556)*sj4);
IkReal x2112=(cj7*x2100);
IkReal x2113=(sj7*x2101);
IkReal x2114=(cj7*x2101);
IkReal x2115=((0.244642)*x2100);
evalcond[0]=((0.212312)+(((0.07)*cj7))+((cj4*x2104))+(((0.244642)*x2112))+(((-0.244642)*x2113))+(((-1.0)*x2102))+(((-1.0)*cj4*x2106)));
evalcond[1]=((0.044778)+((sj7*x2115))+((sj4*x2106))+(((0.244642)*x2114))+(((0.07)*sj7))+(((-1.0)*x2107))+(((-1.0)*sj4*x2104)));
evalcond[2]=((((-1.0)*x2102*x2109))+((x2104*x2105))+((x2104*x2108))+(((-1.0)*x2106*x2108))+(((-1.0)*x2105*x2106))+(((-0.044778)*cj7))+((pz*x2103))+(((0.212312)*sj7))+(((-0.244642)*x2101)));
evalcond[3]=((0.07)+(((-1.0)*x2103*x2106))+(((-1.0)*cj7*x2102))+(((-1.0)*x2107*x2109))+((x2103*x2104))+x2115+(((0.044778)*sj7))+(((0.212312)*cj7))+((sj4*sj7*x2106))+(((-1.0)*sj4*x2104*x2109)));
evalcond[4]=((0.118834468928)+(((0.109556)*x2107))+(((-0.00489284)*sj7*x2100))+(((0.03365012)*cj7))+(((-0.00489284)*x2114))+(((0.117603323672)*x2112))+(((0.03424988)*x2100))+(((-0.0014)*sj7))+(((-1.0)*pp))+(((-0.056092)*x2102))+(((-0.117603323672)*x2113))+((x2104*x2111))+((x2104*x2110))+(((-1.0)*x2106*x2111))+(((-1.0)*x2106*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2116=((4.08760556241365)*cj4);
IkReal x2117=(px*sj3);
IkReal x2118=(cj7*pz);
IkReal x2119=(pz*sj7);
IkReal x2120=((4.08760556241365)*sj4);
IkReal x2121=(cj3*py*sj7);
IkReal x2122=(cj3*cj7*py);
if( IKabs(((((-1.0)*x2116*x2121))+(((-1.0)*x2119*x2120))+(((-1.0)*x2116*x2118))+(((-1.0)*cj7*x2117*x2120))+(((0.867847712167167)*sj7))+((x2120*x2122))+((sj7*x2116*x2117))+(((0.183034801873758)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+(((-1.0)*cj7*x2116*x2117))+(((-1.0)*x2116*x2119))+((x2120*x2121))+(((-0.867847712167167)*cj7))+((x2118*x2120))+(((-1.0)*sj7*x2117*x2120))+(((0.183034801873758)*sj7))+((x2116*x2122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2116*x2121))+(((-1.0)*x2119*x2120))+(((-1.0)*x2116*x2118))+(((-1.0)*cj7*x2117*x2120))+(((0.867847712167167)*sj7))+((x2120*x2122))+((sj7*x2116*x2117))+(((0.183034801873758)*cj7))))+IKsqr(((-0.286132389368955)+(((-1.0)*cj7*x2116*x2117))+(((-1.0)*x2116*x2119))+((x2120*x2121))+(((-0.867847712167167)*cj7))+((x2118*x2120))+(((-1.0)*sj7*x2117*x2120))+(((0.183034801873758)*sj7))+((x2116*x2122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x2116*x2121))+(((-1.0)*x2119*x2120))+(((-1.0)*x2116*x2118))+(((-1.0)*cj7*x2117*x2120))+(((0.867847712167167)*sj7))+((x2120*x2122))+((sj7*x2116*x2117))+(((0.183034801873758)*cj7))), ((-0.286132389368955)+(((-1.0)*cj7*x2116*x2117))+(((-1.0)*x2116*x2119))+((x2120*x2121))+(((-0.867847712167167)*cj7))+((x2118*x2120))+(((-1.0)*sj7*x2117*x2120))+(((0.183034801873758)*sj7))+((x2116*x2122))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2123=IKcos(j8);
IkReal x2124=IKsin(j8);
IkReal x2125=(pz*sj4);
IkReal x2126=(px*sj3);
IkReal x2127=(cj3*py);
IkReal x2128=((1.0)*cj7);
IkReal x2129=(cj4*pz);
IkReal x2130=(cj4*sj7);
IkReal x2131=((1.0)*sj7);
IkReal x2132=((0.056092)*cj4);
IkReal x2133=((0.109556)*sj4);
IkReal x2134=(cj7*x2123);
IkReal x2135=(cj7*x2124);
IkReal x2136=((0.244642)*x2123);
IkReal x2137=((0.244642)*x2124);
evalcond[0]=((0.212312)+(((0.07)*cj7))+(((-1.0)*x2125))+(((0.244642)*x2134))+(((-1.0)*sj7*x2137))+((cj4*x2126))+(((-1.0)*cj4*x2127)));
evalcond[1]=((0.044778)+(((-0.244642)*x2135))+(((-0.07)*sj7))+(((-1.0)*x2129))+((sj4*x2127))+(((-1.0)*sj7*x2136))+(((-1.0)*sj4*x2126)));
evalcond[2]=((0.07)+((cj4*cj7*x2126))+(((-1.0)*cj4*x2127*x2128))+(((-0.044778)*sj7))+(((-1.0)*x2125*x2128))+x2136+((sj4*sj7*x2126))+((sj7*x2129))+(((-1.0)*sj4*x2127*x2131))+(((0.212312)*cj7)));
evalcond[3]=((((-1.0)*x2125*x2131))+(((-1.0)*x2137))+(((-1.0)*sj4*x2126*x2128))+((x2126*x2130))+(((-1.0)*x2128*x2129))+(((-1.0)*x2127*x2130))+((cj7*sj4*x2127))+(((0.044778)*cj7))+(((0.212312)*sj7)));
evalcond[4]=((0.118834468928)+(((0.03424988)*x2123))+(((0.00489284)*x2135))+(((0.03365012)*cj7))+(((0.117603323672)*x2134))+(((0.0014)*sj7))+(((-1.0)*pp))+((x2126*x2133))+((x2126*x2132))+(((-1.0)*x2127*x2133))+(((-1.0)*x2127*x2132))+(((0.00489284)*sj7*x2123))+(((-0.117603323672)*sj7*x2124))+(((0.109556)*x2129))+(((-0.056092)*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2138=((4.08760556241365)*pz);
IkReal x2139=((4.08760556241365)*cj3);
IkReal x2140=((4.08760556241365)*sj3);
IkReal x2141=(sj4*sj6);
if( IKabs(((((-1.0)*py*x2139*x2141))+(((-0.183034801873758)*sj6))+((cj4*sj6*x2138))+(((-1.0)*cj6*px*x2139))+((px*x2140*x2141))+(((-1.0)*cj6*py*x2140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.15398010153612)+(((-1.0)*cj4*px*x2140))+((sj4*x2138))+((cj4*py*x2139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*x2139*x2141))+(((-0.183034801873758)*sj6))+((cj4*sj6*x2138))+(((-1.0)*cj6*px*x2139))+((px*x2140*x2141))+(((-1.0)*cj6*py*x2140))))+IKsqr(((-1.15398010153612)+(((-1.0)*cj4*px*x2140))+((sj4*x2138))+((cj4*py*x2139))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*py*x2139*x2141))+(((-0.183034801873758)*sj6))+((cj4*sj6*x2138))+(((-1.0)*cj6*px*x2139))+((px*x2140*x2141))+(((-1.0)*cj6*py*x2140))), ((-1.15398010153612)+(((-1.0)*cj4*px*x2140))+((sj4*x2138))+((cj4*py*x2139))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2142=IKsin(j8);
IkReal x2143=IKcos(j8);
IkReal x2144=(pz*sj4);
IkReal x2145=(cj4*pz);
IkReal x2146=(cj4*px*sj3);
IkReal x2147=(cj3*py*sj4);
IkReal x2148=((0.244642)*x2142);
IkReal x2149=((1.0)*py*sj3);
IkReal x2150=(px*sj3*sj4);
IkReal x2151=(cj3*cj4*py);
IkReal x2152=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*x2149))+(((-1.0)*x2152))+(((-1.0)*cj6*x2148)));
evalcond[1]=((0.282312)+(((-1.0)*x2144))+x2146+(((0.244642)*x2143))+(((-1.0)*x2151)));
evalcond[2]=((0.044778)+(((-1.0)*x2145))+x2147+((sj6*x2148))+(((-1.0)*x2150)));
evalcond[3]=((((-0.044778)*sj6))+(((-1.0)*x2148))+((sj6*x2145))+((sj6*x2150))+(((-1.0)*cj6*x2152))+(((-1.0)*cj6*x2149))+(((-1.0)*sj6*x2147)));
evalcond[4]=((0.152484588928)+(((0.056092)*x2146))+(((-1.0)*pp))+(((-0.00489284)*sj6*x2142))+(((0.151853203672)*x2143))+(((-0.109556)*x2147))+(((0.109556)*x2145))+(((0.109556)*x2150))+(((-0.056092)*x2144))+(((-0.056092)*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2153=((4.08760556241365)*pz);
IkReal x2154=((4.08760556241365)*cj3);
IkReal x2155=((4.08760556241365)*sj3);
IkReal x2156=(sj4*sj6);
if( IKabs((((py*x2154*x2156))+((cj6*px*x2154))+((cj6*py*x2155))+(((0.183034801873758)*sj6))+(((-1.0)*cj4*sj6*x2153))+(((-1.0)*px*x2155*x2156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.581715322798211)+(((-1.0)*cj4*py*x2154))+((cj4*px*x2155))+(((-1.0)*sj4*x2153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x2154*x2156))+((cj6*px*x2154))+((cj6*py*x2155))+(((0.183034801873758)*sj6))+(((-1.0)*cj4*sj6*x2153))+(((-1.0)*px*x2155*x2156))))+IKsqr(((0.581715322798211)+(((-1.0)*cj4*py*x2154))+((cj4*px*x2155))+(((-1.0)*sj4*x2153))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((py*x2154*x2156))+((cj6*px*x2154))+((cj6*py*x2155))+(((0.183034801873758)*sj6))+(((-1.0)*cj4*sj6*x2153))+(((-1.0)*px*x2155*x2156))), ((0.581715322798211)+(((-1.0)*cj4*py*x2154))+((cj4*px*x2155))+(((-1.0)*sj4*x2153))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2157=IKsin(j8);
IkReal x2158=IKcos(j8);
IkReal x2159=(pz*sj4);
IkReal x2160=((1.0)*cj4);
IkReal x2161=(py*sj3);
IkReal x2162=(cj3*py);
IkReal x2163=(cj3*px);
IkReal x2164=(cj4*px*sj3);
IkReal x2165=(sj4*x2162);
IkReal x2166=((0.244642)*x2157);
IkReal x2167=((1.0)*px*sj3*sj4);
evalcond[0]=(((cj6*x2166))+(((-1.0)*x2163))+(((-1.0)*x2161)));
evalcond[1]=((0.142312)+(((-1.0)*x2160*x2162))+x2164+(((-0.244642)*x2158))+(((-1.0)*x2159)));
evalcond[2]=((0.044778)+(((-1.0)*sj6*x2166))+x2165+(((-1.0)*pz*x2160))+(((-1.0)*x2167)));
evalcond[3]=(((cj6*x2163))+((cj6*x2161))+((sj6*x2165))+(((-1.0)*sj6*x2167))+(((0.044778)*sj6))+(((-1.0)*pz*sj6*x2160))+(((-1.0)*x2166)));
evalcond[4]=((0.085184348928)+(((0.109556)*px*sj3*sj4))+(((0.109556)*cj4*pz))+(((0.00489284)*sj6*x2157))+(((-0.056092)*cj4*x2162))+(((-0.083353443672)*x2158))+(((-1.0)*pp))+(((-0.109556)*x2165))+(((0.056092)*x2164))+(((-0.056092)*x2159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2168=(cj4*px);
IkReal x2169=((4.08760556241365)*py);
IkReal x2170=(cj3*sj7);
IkReal x2171=(cj7*sj3);
IkReal x2172=((4.08760556241365)*px);
IkReal x2173=(cj3*cj7);
IkReal x2174=((4.08760556241365)*sj3*sj7);
IkReal x2175=((4.08760556241365)*pz*sj4);
if( IKabs(((((-1.0)*x2169*x2171))+(((0.867847712167167)*sj7))+(((-1.0)*sj7*x2175))+(((-1.0)*x2172*x2173))+((x2168*x2174))+(((-1.0)*cj4*x2169*x2170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((cj4*x2169*x2173))+(((-1.0)*x2170*x2172))+(((-1.0)*sj3*sj7*x2169))+(((-4.08760556241365)*x2168*x2171))+((cj7*x2175))+(((-0.867847712167167)*cj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2169*x2171))+(((0.867847712167167)*sj7))+(((-1.0)*sj7*x2175))+(((-1.0)*x2172*x2173))+((x2168*x2174))+(((-1.0)*cj4*x2169*x2170))))+IKsqr(((-0.286132389368955)+((cj4*x2169*x2173))+(((-1.0)*x2170*x2172))+(((-1.0)*sj3*sj7*x2169))+(((-4.08760556241365)*x2168*x2171))+((cj7*x2175))+(((-0.867847712167167)*cj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x2169*x2171))+(((0.867847712167167)*sj7))+(((-1.0)*sj7*x2175))+(((-1.0)*x2172*x2173))+((x2168*x2174))+(((-1.0)*cj4*x2169*x2170))), ((-0.286132389368955)+((cj4*x2169*x2173))+(((-1.0)*x2170*x2172))+(((-1.0)*sj3*sj7*x2169))+(((-4.08760556241365)*x2168*x2171))+((cj7*x2175))+(((-0.867847712167167)*cj7))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2176=IKcos(j8);
IkReal x2177=IKsin(j8);
IkReal x2178=(pz*sj4);
IkReal x2179=(cj3*px);
IkReal x2180=((1.0)*cj7);
IkReal x2181=(cj3*py);
IkReal x2182=((1.0)*sj7);
IkReal x2183=(py*sj3);
IkReal x2184=((0.109556)*sj4);
IkReal x2185=(cj4*px*sj3);
IkReal x2186=((0.244642)*x2176);
IkReal x2187=((0.244642)*x2177);
evalcond[0]=((((-1.0)*sj7*x2186))+(((-0.07)*sj7))+(((-1.0)*x2183))+(((-1.0)*cj7*x2187))+(((-1.0)*x2179)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+(((-1.0)*cj4*x2181))+(((-1.0)*sj7*x2187))+x2185+((cj7*x2186))+(((-1.0)*x2178)));
evalcond[2]=((0.07)+((sj7*x2179))+x2186+((sj7*x2183))+(((-1.0)*cj4*x2180*x2181))+(((0.212312)*cj7))+((cj7*x2185))+(((-1.0)*x2178*x2180)));
evalcond[3]=((((-1.0)*cj4*x2181*x2182))+(((-1.0)*x2180*x2183))+((sj7*x2185))+(((-1.0)*x2187))+(((-1.0)*x2179*x2180))+(((-1.0)*x2178*x2182))+(((0.212312)*sj7)));
evalcond[4]=((0.118834468928)+(((-0.056092)*cj4*x2181))+(((0.109556)*cj4*pz))+(((0.117603323672)*cj7*x2176))+(((0.03365012)*cj7))+(((-0.056092)*x2178))+((px*sj3*x2184))+(((0.056092)*x2185))+(((-0.117603323672)*sj7*x2177))+(((-1.0)*pp))+(((-1.0)*x2181*x2184))+(((0.03424988)*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2188=(cj4*px);
IkReal x2189=((4.08760556241365)*py);
IkReal x2190=(cj3*sj7);
IkReal x2191=(cj7*sj3);
IkReal x2192=((4.08760556241365)*px);
IkReal x2193=(cj3*cj7);
IkReal x2194=((4.08760556241365)*sj3*sj7);
IkReal x2195=((4.08760556241365)*pz*sj4);
if( IKabs((((x2192*x2193))+(((-1.0)*sj7*x2195))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x2189*x2190))+((x2189*x2191))+((x2188*x2194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.286132389368955)+((x2190*x2192))+(((-4.08760556241365)*x2188*x2191))+(((-0.867847712167167)*cj7))+((cj7*x2195))+((cj4*x2189*x2193))+((sj3*sj7*x2189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2192*x2193))+(((-1.0)*sj7*x2195))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x2189*x2190))+((x2189*x2191))+((x2188*x2194))))+IKsqr(((-0.286132389368955)+((x2190*x2192))+(((-4.08760556241365)*x2188*x2191))+(((-0.867847712167167)*cj7))+((cj7*x2195))+((cj4*x2189*x2193))+((sj3*sj7*x2189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((x2192*x2193))+(((-1.0)*sj7*x2195))+(((0.867847712167167)*sj7))+(((-1.0)*cj4*x2189*x2190))+((x2189*x2191))+((x2188*x2194))), ((-0.286132389368955)+((x2190*x2192))+(((-4.08760556241365)*x2188*x2191))+(((-0.867847712167167)*cj7))+((cj7*x2195))+((cj4*x2189*x2193))+((sj3*sj7*x2189))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x2196=IKcos(j8);
IkReal x2197=IKsin(j8);
IkReal x2198=(pz*sj4);
IkReal x2199=((1.0)*py);
IkReal x2200=(cj3*cj7);
IkReal x2201=((1.0)*sj7);
IkReal x2202=(cj3*px);
IkReal x2203=(cj3*py);
IkReal x2204=((0.109556)*sj4);
IkReal x2205=(cj3*cj4);
IkReal x2206=(cj4*px*sj3);
IkReal x2207=((0.244642)*x2196);
IkReal x2208=((0.244642)*x2197);
evalcond[0]=((((-1.0)*x2202))+((sj7*x2207))+(((0.07)*sj7))+(((-1.0)*sj3*x2199))+((cj7*x2208)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+x2206+(((-1.0)*x2198))+(((-1.0)*sj7*x2208))+(((-1.0)*x2199*x2205))+((cj7*x2207)));
evalcond[2]=(((sj7*x2206))+(((-1.0)*x2208))+((cj7*py*sj3))+(((-1.0)*sj7*x2199*x2205))+(((-1.0)*x2198*x2201))+((px*x2200))+(((0.212312)*sj7)));
evalcond[3]=((0.07)+x2207+(((-1.0)*sj3*sj7*x2199))+(((-1.0)*cj4*x2199*x2200))+(((0.212312)*cj7))+(((-1.0)*cj7*x2198))+((cj7*x2206))+(((-1.0)*x2201*x2202)));
evalcond[4]=((0.118834468928)+(((-1.0)*x2203*x2204))+(((0.109556)*cj4*pz))+(((-0.056092)*x2198))+(((0.117603323672)*cj7*x2196))+(((0.03365012)*cj7))+((px*sj3*x2204))+(((-1.0)*pp))+(((-0.056092)*cj4*x2203))+(((0.056092)*x2206))+(((0.03424988)*x2196))+(((-0.117603323672)*sj7*x2197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2209=cj7*cj7;
IkReal x2210=cj6*cj6;
IkReal x2211=(px*sj3);
IkReal x2212=(cj3*py);
IkReal x2213=(cj6*sj7);
IkReal x2214=(cj7*sj6);
IkReal x2215=((4.08760556241365)*cj4);
IkReal x2216=((500000.0)*sj4);
IkReal x2217=(cj3*px);
IkReal x2218=((4.08760556241365)*sj4);
IkReal x2219=((500000.0)*py*sj3);
IkReal x2220=((4.08760556241365)*cj6*cj7);
IkReal x2221=(cj6*sj6*x2209);
IkReal x2222=(x2209*x2210);
IkReal x2223=((500000.0)*cj4*cj7*x2213);
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(cj6,-1);
if(!x2224.valid){
continue;
}
CheckValue<IkReal> x2225=IKPowWithIntegerCheck(sj7,-1);
if(!x2225.valid){
continue;
}
if( IKabs((((sj7*x2211*x2215))+(((-1.0)*x2217*x2220))+((x2211*x2214*x2218))+(((-1.0)*sj7*x2212*x2215))+(((-1.0)*pz*sj7*x2218))+(((0.867847712167167)*sj7))+((pz*x2214*x2215))+(((-1.0)*py*sj3*x2220))+(((-0.183034801873758)*x2214))+(((-1.0)*x2212*x2214*x2218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.1752111248273e-6)*(x2224.value)*(x2225.value)*(((((22389.0)*x2221))+((cj7*pz*x2213*x2216))+(((-1.0)*x2211*x2216*x2221))+(((-1.0)*x2219))+(((-500000.0)*cj4*pz*x2221))+(((500000.0)*x2217*x2222))+(((-106156.0)*cj7*x2213))+(((-1.0)*x2211*x2223))+(((-500000.0)*x2217))+((x2219*x2222))+(((-35000.0)*x2213))+((x2212*x2216*x2221))+((x2212*x2223)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj7*x2211*x2215))+(((-1.0)*x2217*x2220))+((x2211*x2214*x2218))+(((-1.0)*sj7*x2212*x2215))+(((-1.0)*pz*sj7*x2218))+(((0.867847712167167)*sj7))+((pz*x2214*x2215))+(((-1.0)*py*sj3*x2220))+(((-0.183034801873758)*x2214))+(((-1.0)*x2212*x2214*x2218))))+IKsqr(((8.1752111248273e-6)*(x2224.value)*(x2225.value)*(((((22389.0)*x2221))+((cj7*pz*x2213*x2216))+(((-1.0)*x2211*x2216*x2221))+(((-1.0)*x2219))+(((-500000.0)*cj4*pz*x2221))+(((500000.0)*x2217*x2222))+(((-106156.0)*cj7*x2213))+(((-1.0)*x2211*x2223))+(((-500000.0)*x2217))+((x2219*x2222))+(((-35000.0)*x2213))+((x2212*x2216*x2221))+((x2212*x2223))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((sj7*x2211*x2215))+(((-1.0)*x2217*x2220))+((x2211*x2214*x2218))+(((-1.0)*sj7*x2212*x2215))+(((-1.0)*pz*sj7*x2218))+(((0.867847712167167)*sj7))+((pz*x2214*x2215))+(((-1.0)*py*sj3*x2220))+(((-0.183034801873758)*x2214))+(((-1.0)*x2212*x2214*x2218))), ((8.1752111248273e-6)*(x2224.value)*(x2225.value)*(((((22389.0)*x2221))+((cj7*pz*x2213*x2216))+(((-1.0)*x2211*x2216*x2221))+(((-1.0)*x2219))+(((-500000.0)*cj4*pz*x2221))+(((500000.0)*x2217*x2222))+(((-106156.0)*cj7*x2213))+(((-1.0)*x2211*x2223))+(((-500000.0)*x2217))+((x2219*x2222))+(((-35000.0)*x2213))+((x2212*x2216*x2221))+((x2212*x2223))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2226=IKcos(j8);
IkReal x2227=IKsin(j8);
IkReal x2228=(pz*sj4);
IkReal x2229=(cj3*py);
IkReal x2230=((1.0)*cj4);
IkReal x2231=(sj6*sj7);
IkReal x2232=(cj6*sj7);
IkReal x2233=(py*sj3);
IkReal x2234=(cj7*sj6);
IkReal x2235=((1.0)*cj7);
IkReal x2236=(cj4*pz);
IkReal x2237=(cj3*px);
IkReal x2238=(cj4*px*sj3);
IkReal x2239=((0.244642)*x2226);
IkReal x2240=(px*sj3*sj4);
IkReal x2241=((0.244642)*x2227);
IkReal x2242=(cj7*x2241);
evalcond[0]=((((-1.0)*x2232*x2239))+(((-1.0)*cj6*x2242))+(((-1.0)*x2233))+(((-1.0)*x2237))+(((-0.07)*x2232)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+x2238+((cj7*x2239))+(((-1.0)*x2229*x2230))+(((-1.0)*x2228))+(((-1.0)*sj7*x2241)));
evalcond[2]=((0.044778)+(((-1.0)*x2240))+((x2234*x2241))+(((-1.0)*pz*x2230))+(((0.07)*x2231))+((x2231*x2239))+((sj4*x2229)));
evalcond[3]=((0.07)+(((0.044778)*x2231))+((x2232*x2233))+((x2232*x2237))+x2239+((cj7*x2238))+(((-1.0)*pz*x2230*x2231))+((sj4*x2229*x2231))+(((-1.0)*x2228*x2235))+(((-1.0)*cj7*x2229*x2230))+(((0.212312)*cj7))+(((-1.0)*x2231*x2240)));
evalcond[4]=(((x2234*x2240))+((sj7*x2238))+(((-1.0)*cj6*x2233*x2235))+(((-1.0)*sj7*x2228))+(((-1.0)*x2241))+(((-1.0)*cj6*x2235*x2237))+(((-1.0)*sj4*x2229*x2234))+(((-1.0)*sj7*x2229*x2230))+(((0.212312)*sj7))+(((-0.044778)*x2234))+((x2234*x2236)));
evalcond[5]=((0.118834468928)+(((0.03424988)*x2226))+(((0.056092)*x2238))+(((0.109556)*x2236))+(((0.03365012)*cj7))+(((-0.00489284)*x2227*x2234))+(((-0.00489284)*x2226*x2231))+(((0.109556)*x2240))+(((-0.056092)*x2228))+(((-1.0)*pp))+(((-0.109556)*sj4*x2229))+(((-0.117603323672)*sj7*x2227))+(((0.117603323672)*cj7*x2226))+(((-0.0014)*x2231))+(((-0.056092)*cj4*x2229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2243=((500000.0)*cj4);
IkReal x2244=(px*sj3);
IkReal x2245=(cj7*sj6);
IkReal x2246=(sj6*sj7);
IkReal x2247=((500000.0)*sj4);
IkReal x2248=(cj3*py);
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(IKsign(sj6),-1);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(((((-22389.0)*cj7))+((cj7*pz*x2243))+(((106156.0)*x2246))+((x2243*x2244*x2246))+(((-1.0)*pz*x2246*x2247))+((cj7*x2244*x2247))+(((-1.0)*cj7*x2247*x2248))+(((-1.0)*x2243*x2246*x2248)))),IkReal(((((-22389.0)*sj7))+(((-106156.0)*x2245))+(((-35000.0)*sj6))+((x2243*x2245*x2248))+((pz*x2245*x2247))+(((-1.0)*sj7*x2247*x2248))+((pz*sj7*x2243))+(((-1.0)*x2243*x2244*x2245))+((sj7*x2244*x2247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2249.value)))+(x2250.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2251=IKcos(j8);
IkReal x2252=IKsin(j8);
IkReal x2253=(pz*sj4);
IkReal x2254=(cj3*py);
IkReal x2255=((1.0)*cj4);
IkReal x2256=(sj6*sj7);
IkReal x2257=(cj6*sj7);
IkReal x2258=(py*sj3);
IkReal x2259=(cj7*sj6);
IkReal x2260=((1.0)*cj7);
IkReal x2261=(cj4*pz);
IkReal x2262=(cj3*px);
IkReal x2263=(cj4*px*sj3);
IkReal x2264=((0.244642)*x2251);
IkReal x2265=(px*sj3*sj4);
IkReal x2266=((0.244642)*x2252);
IkReal x2267=(cj7*x2266);
evalcond[0]=((((-1.0)*x2258))+(((-1.0)*x2257*x2264))+(((-0.07)*x2257))+(((-1.0)*x2262))+(((-1.0)*cj6*x2267)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+x2263+(((-1.0)*x2253))+((cj7*x2264))+(((-1.0)*sj7*x2266))+(((-1.0)*x2254*x2255)));
evalcond[2]=((0.044778)+((x2256*x2264))+((x2259*x2266))+(((-1.0)*pz*x2255))+((sj4*x2254))+(((0.07)*x2256))+(((-1.0)*x2265)));
evalcond[3]=((0.07)+x2264+((x2257*x2262))+(((0.044778)*x2256))+((cj7*x2263))+(((-1.0)*x2256*x2265))+((sj4*x2254*x2256))+((x2257*x2258))+(((-1.0)*x2253*x2260))+(((0.212312)*cj7))+(((-1.0)*pz*x2255*x2256))+(((-1.0)*cj7*x2254*x2255)));
evalcond[4]=((((-1.0)*sj7*x2253))+((x2259*x2265))+((x2259*x2261))+((sj7*x2263))+(((-1.0)*cj6*x2258*x2260))+(((-1.0)*sj4*x2254*x2259))+(((-1.0)*sj7*x2254*x2255))+(((-1.0)*cj6*x2260*x2262))+(((-0.044778)*x2259))+(((-1.0)*x2266))+(((0.212312)*sj7)));
evalcond[5]=((0.118834468928)+(((0.109556)*x2261))+(((0.109556)*x2265))+(((-0.00489284)*x2251*x2256))+(((-0.0014)*x2256))+(((-0.00489284)*x2252*x2259))+(((-0.117603323672)*sj7*x2252))+(((0.03365012)*cj7))+(((0.03424988)*x2251))+(((-0.056092)*x2253))+(((0.056092)*x2263))+(((-0.056092)*cj4*x2254))+(((-1.0)*pp))+(((-0.109556)*sj4*x2254))+(((0.117603323672)*cj7*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2268=(cj6*cj7);
IkReal x2269=((500000.0)*cj3);
IkReal x2270=(cj4*py);
IkReal x2271=(cj6*sj7);
IkReal x2272=((500000.0)*sj3);
IkReal x2273=(cj4*px);
IkReal x2274=((500000.0)*pz*sj4);
CheckValue<IkReal> x2275=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal(((((-1.0)*x2269*x2270*x2271))+(((-1.0)*cj7*py*x2272))+(((-1.0)*cj7*px*x2269))+(((106156.0)*x2271))+((x2271*x2272*x2273))+(((-1.0)*x2271*x2274)))),IkReal((((x2268*x2274))+(((-1.0)*py*sj7*x2272))+(((-106156.0)*x2268))+(((-35000.0)*cj6))+(((-1.0)*x2268*x2272*x2273))+((x2268*x2269*x2270))+(((-1.0)*px*sj7*x2269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2275.value)))+(x2276.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2277=IKcos(j8);
IkReal x2278=IKsin(j8);
IkReal x2279=(pz*sj4);
IkReal x2280=(cj3*py);
IkReal x2281=((1.0)*cj4);
IkReal x2282=(sj6*sj7);
IkReal x2283=(cj6*sj7);
IkReal x2284=(py*sj3);
IkReal x2285=(cj7*sj6);
IkReal x2286=((1.0)*cj7);
IkReal x2287=(cj4*pz);
IkReal x2288=(cj3*px);
IkReal x2289=(cj4*px*sj3);
IkReal x2290=((0.244642)*x2277);
IkReal x2291=(px*sj3*sj4);
IkReal x2292=((0.244642)*x2278);
IkReal x2293=(cj7*x2292);
evalcond[0]=((((-1.0)*x2283*x2290))+(((-1.0)*x2284))+(((-1.0)*x2288))+(((-0.07)*x2283))+(((-1.0)*cj6*x2293)));
evalcond[1]=((0.212312)+(((0.07)*cj7))+(((-1.0)*x2280*x2281))+x2289+((cj7*x2290))+(((-1.0)*sj7*x2292))+(((-1.0)*x2279)));
evalcond[2]=((0.044778)+(((-1.0)*x2291))+((x2282*x2290))+(((-1.0)*pz*x2281))+(((0.07)*x2282))+((x2285*x2292))+((sj4*x2280)));
evalcond[3]=((0.07)+x2290+(((-1.0)*cj7*x2280*x2281))+(((0.044778)*x2282))+(((-1.0)*x2279*x2286))+(((-1.0)*x2282*x2291))+(((-1.0)*pz*x2281*x2282))+(((0.212312)*cj7))+((x2283*x2284))+((x2283*x2288))+((sj4*x2280*x2282))+((cj7*x2289)));
evalcond[4]=((((-1.0)*cj6*x2286*x2288))+(((-1.0)*sj4*x2280*x2285))+(((-1.0)*cj6*x2284*x2286))+(((-1.0)*sj7*x2279))+(((-1.0)*sj7*x2280*x2281))+(((-0.044778)*x2285))+((x2285*x2291))+((sj7*x2289))+(((-1.0)*x2292))+(((0.212312)*sj7))+((x2285*x2287)));
evalcond[5]=((0.118834468928)+(((-0.00489284)*x2277*x2282))+(((0.109556)*x2291))+(((-0.0014)*x2282))+(((0.03365012)*cj7))+(((-0.00489284)*x2278*x2285))+(((-0.056092)*cj4*x2280))+(((0.109556)*x2287))+(((0.117603323672)*cj7*x2277))+(((-0.056092)*x2279))+(((-1.0)*pp))+(((-0.117603323672)*sj7*x2278))+(((0.056092)*x2289))+(((-0.109556)*sj4*x2280))+(((0.03424988)*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2294=(cj6*sj7);
IkReal x2295=((2446.42)*sj6);
IkReal x2296=(py*sj3);
IkReal x2297=((13400.999476)*sj4);
IkReal x2298=(px*sj3);
IkReal x2299=(cj6*cj7);
IkReal x2300=(cj3*py);
IkReal x2301=((122321.0)*pp);
IkReal x2302=((6861.229532)*cj4);
IkReal x2303=(cj3*px);
IkReal x2304=((58801.661836)*cj7);
IkReal x2305=((13400.999476)*cj4*pz);
IkReal x2306=(sj7*x2303);
IkReal x2307=((6861.229532)*pz*sj4);
CheckValue<IkReal> x2308 = IKatan2WithCheck(IkReal((((x2294*x2297*x2298))+((x2294*x2298*x2302))+(((-1.0)*x2303*x2304))+((x2295*x2306))+(((-1.0)*x2296*x2304))+(((-1.0)*x2294*x2297*x2300))+(((-1.0)*x2294*x2301))+(((-1.0)*x2294*x2307))+(((-1.0)*x2294*x2300*x2302))+(((-17124.94)*x2296))+(((13337.2052737419)*x2294))+((sj7*x2295*x2296))+((x2294*x2305))+(((-17124.94)*x2303)))),IkReal(((((-58801.661836)*x2306))+(((-4116.11632852)*cj6))+(((-1.0)*x2297*x2298*x2299))+((x2299*x2300*x2302))+(((-14535.9510737419)*x2299))+(((-58801.661836)*sj7*x2296))+(((-1.0)*x2299*x2305))+(((-1.0)*x2298*x2299*x2302))+(((-1.0)*cj7*x2295*x2303))+(((-1.0)*cj7*x2295*x2296))+((x2299*x2307))+((x2299*x2301))+((x2297*x2299*x2300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(IKsign(((((14385.3561548827)*cj6))+(((4189.47957148)*x2299)))),-1);
if(!x2309.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2308.value)+(((1.5707963267949)*(x2309.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2310=IKsin(j8);
IkReal x2311=IKcos(j8);
IkReal x2312=(cj5*sj7);
IkReal x2313=((0.07)*sj6);
IkReal x2314=((1.0)*pz);
IkReal x2315=(px*sj3);
IkReal x2316=(pz*sj4);
IkReal x2317=(cj3*py);
IkReal x2318=(sj6*sj7);
IkReal x2319=(cj6*sj7);
IkReal x2320=(py*sj3);
IkReal x2321=((0.054778)*sj5);
IkReal x2322=((0.244642)*cj7);
IkReal x2323=((1.0)*sj4);
IkReal x2324=(cj7*sj6);
IkReal x2325=(sj5*sj7);
IkReal x2326=(cj5*cj7);
IkReal x2327=(cj4*sj6);
IkReal x2328=((0.056092)*cj4);
IkReal x2329=(cj3*px);
IkReal x2330=((1.0)*cj4);
IkReal x2331=(cj7*sj5);
IkReal x2332=(sj4*sj5);
IkReal x2333=(cj4*pz);
IkReal x2334=((0.109556)*sj4);
IkReal x2335=(cj5*x2324);
IkReal x2336=(sj7*x2310);
IkReal x2337=((0.244642)*x2311);
IkReal x2338=((0.244642)*x2310);
IkReal x2339=((1.0)*cj6*cj7);
evalcond[0]=((((-0.07)*x2319))+(((-1.0)*x2319*x2337))+(((-1.0)*cj6*x2310*x2322))+(((-1.0)*x2320))+(((-1.0)*x2329)));
evalcond[1]=((-0.028046)+(((-0.07)*x2331))+(((-1.0)*sj5*x2311*x2322))+(((-1.0)*x2312*x2313))+(((0.01)*cj5))+((cj4*x2315))+(((-0.240358)*sj5))+((x2325*x2338))+(((-1.0)*sj6*x2312*x2337))+(((-1.0)*cj5*sj6*x2310*x2322))+(((-1.0)*x2317*x2330))+(((-1.0)*sj4*x2314)));
evalcond[2]=((0.054778)+(((0.240358)*cj5))+(((-1.0)*sj5*sj6*x2310*x2322))+(((-1.0)*sj5*x2318*x2337))+(((-1.0)*x2315*x2323))+(((-1.0)*x2312*x2338))+((sj4*x2317))+(((-1.0)*x2313*x2325))+(((-1.0)*cj4*x2314))+((cj5*x2311*x2322))+(((0.07)*x2326))+(((0.01)*sj5)));
evalcond[3]=((0.118834468928)+((x2315*x2334))+(((-0.00489284)*x2311*x2318))+((x2315*x2328))+(((-0.056092)*x2316))+(((0.03365012)*cj7))+(((0.03424988)*x2311))+(((0.109556)*x2333))+(((-0.00489284)*x2310*x2324))+(((-1.0)*pp))+(((-0.117603323672)*x2336))+(((-0.0014)*x2318))+(((0.117603323672)*cj7*x2311))+(((-1.0)*x2317*x2328))+(((-1.0)*x2317*x2334)));
evalcond[4]=((0.07)+(((0.240358)*cj7))+((sj5*x2318*x2333))+(((-1.0)*x2318*x2321))+(((-1.0)*x2312*x2315*x2327))+((x2319*x2329))+((x2319*x2320))+(((0.028046)*x2331))+x2337+((x2316*x2331))+(((-1.0)*x2315*x2330*x2331))+(((-1.0)*cj4*x2314*x2326))+(((-0.01)*x2318))+(((-1.0)*x2315*x2323*x2326))+((x2312*x2317*x2327))+((cj4*x2317*x2331))+(((-1.0)*sj5*x2317*x2318*x2323))+((sj4*x2317*x2326))+(((0.028046)*sj6*x2312))+((x2315*x2318*x2332))+(((0.054778)*x2326))+((sj6*x2312*x2316)));
evalcond[5]=((((0.028046)*x2325))+((x2316*x2325))+(((-1.0)*x2338))+(((-0.028046)*x2335))+(((0.01)*x2324))+(((-1.0)*x2317*x2330*x2335))+(((-1.0)*x2320*x2339))+((x2321*x2324))+((cj4*x2315*x2335))+((sj4*x2312*x2317))+(((0.240358)*sj7))+((cj4*x2317*x2325))+(((-1.0)*x2315*x2325*x2330))+(((-1.0)*x2329*x2339))+(((-1.0)*sj5*x2315*x2323*x2324))+((x2317*x2324*x2332))+(((-1.0)*x2312*x2315*x2323))+(((0.054778)*x2312))+(((-1.0)*cj4*x2312*x2314))+(((-1.0)*cj4*sj5*x2314*x2324))+(((-1.0)*sj4*x2314*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2340=((122321.0)*sj5);
IkReal x2341=(py*sj3);
IkReal x2342=(cj6*sj5);
IkReal x2343=(cj3*sj7);
IkReal x2344=(cj4*py);
IkReal x2345=(pz*sj4);
IkReal x2346=(cj6*cj7);
IkReal x2347=((1223.21)*cj5);
IkReal x2348=(cj6*sj7);
IkReal x2349=(cj3*cj7*px);
IkReal x2350=((122321.0)*cj5*sj6);
IkReal x2351=((122321.0)*x2346);
IkReal x2352=((122321.0)*cj4*cj6*px*sj3);
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal((((x2340*x2349))+((px*x2343*x2350))+(((-3430.614766)*x2348))+(((-29400.830918)*sj7*x2342))+(((-122321.0)*cj6*x2343*x2344))+((sj7*x2341*x2350))+(((122321.0)*cj4*px*sj3*x2348))+(((-122321.0)*x2345*x2348))+((x2347*x2348))+((cj7*x2340*x2341)))),IkReal((((cj3*x2344*x2351))+(((-1.0)*x2346*x2347))+(((8562.47)*x2342))+(((3430.614766)*x2346))+(((-1.0)*cj4*px*sj3*x2351))+((x2345*x2351))+(((-1.0)*cj7*x2341*x2350))+(((29400.830918)*cj7*x2342))+((px*x2340*x2343))+((sj7*x2340*x2341))+(((-1.0)*x2349*x2350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
CheckValue<IkReal> x2354=IKPowWithIntegerCheck(IKsign(x2342),-1);
if(!x2354.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2353.value)+(((-1.5707963267949)*(x2354.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2355=IKsin(j8);
IkReal x2356=IKcos(j8);
IkReal x2357=(cj5*sj7);
IkReal x2358=((0.07)*sj6);
IkReal x2359=((1.0)*pz);
IkReal x2360=(px*sj3);
IkReal x2361=(pz*sj4);
IkReal x2362=(cj3*py);
IkReal x2363=(sj6*sj7);
IkReal x2364=(cj6*sj7);
IkReal x2365=(py*sj3);
IkReal x2366=((0.054778)*sj5);
IkReal x2367=((0.244642)*cj7);
IkReal x2368=((1.0)*sj4);
IkReal x2369=(cj7*sj6);
IkReal x2370=(sj5*sj7);
IkReal x2371=(cj5*cj7);
IkReal x2372=(cj4*sj6);
IkReal x2373=((0.056092)*cj4);
IkReal x2374=(cj3*px);
IkReal x2375=((1.0)*cj4);
IkReal x2376=(cj7*sj5);
IkReal x2377=(sj4*sj5);
IkReal x2378=(cj4*pz);
IkReal x2379=((0.109556)*sj4);
IkReal x2380=(cj5*x2369);
IkReal x2381=(sj7*x2355);
IkReal x2382=((0.244642)*x2356);
IkReal x2383=((0.244642)*x2355);
IkReal x2384=((1.0)*cj6*cj7);
evalcond[0]=((((-1.0)*x2374))+(((-1.0)*x2365))+(((-0.07)*x2364))+(((-1.0)*cj6*x2355*x2367))+(((-1.0)*x2364*x2382)));
evalcond[1]=((-0.028046)+(((-1.0)*sj5*x2356*x2367))+(((-1.0)*sj4*x2359))+(((-1.0)*x2357*x2358))+((cj4*x2360))+(((-1.0)*cj5*sj6*x2355*x2367))+(((0.01)*cj5))+(((-0.07)*x2376))+(((-0.240358)*sj5))+(((-1.0)*sj6*x2357*x2382))+(((-1.0)*x2362*x2375))+((x2370*x2383)));
evalcond[2]=((0.054778)+(((0.240358)*cj5))+(((-1.0)*x2357*x2383))+(((-1.0)*sj5*sj6*x2355*x2367))+(((0.07)*x2371))+((cj5*x2356*x2367))+(((-1.0)*x2358*x2370))+(((-1.0)*x2360*x2368))+((sj4*x2362))+(((0.01)*sj5))+(((-1.0)*sj5*x2363*x2382))+(((-1.0)*cj4*x2359)));
evalcond[3]=((0.118834468928)+(((-0.00489284)*x2355*x2369))+(((-0.00489284)*x2356*x2363))+(((0.03424988)*x2356))+(((0.03365012)*cj7))+(((0.117603323672)*cj7*x2356))+(((-0.0014)*x2363))+(((0.109556)*x2378))+(((-0.056092)*x2361))+(((-1.0)*pp))+((x2360*x2379))+((x2360*x2373))+(((-1.0)*x2362*x2379))+(((-1.0)*x2362*x2373))+(((-0.117603323672)*x2381)));
evalcond[4]=((0.07)+(((0.240358)*cj7))+(((0.028046)*sj6*x2357))+((x2364*x2365))+((sj5*x2363*x2378))+(((0.054778)*x2371))+(((-0.01)*x2363))+x2382+((x2364*x2374))+((x2360*x2363*x2377))+((x2357*x2362*x2372))+((sj4*x2362*x2371))+(((-1.0)*x2360*x2375*x2376))+((x2361*x2376))+(((0.028046)*x2376))+(((-1.0)*x2360*x2368*x2371))+(((-1.0)*x2357*x2360*x2372))+((cj4*x2362*x2376))+((sj6*x2357*x2361))+(((-1.0)*cj4*x2359*x2371))+(((-1.0)*sj5*x2362*x2363*x2368))+(((-1.0)*x2363*x2366)));
evalcond[5]=((((-1.0)*x2360*x2370*x2375))+(((-1.0)*x2365*x2384))+(((-1.0)*cj4*sj5*x2359*x2369))+(((-1.0)*x2374*x2384))+((cj4*x2360*x2380))+((x2366*x2369))+(((-1.0)*cj4*x2357*x2359))+(((-1.0)*x2383))+(((0.01)*x2369))+(((0.240358)*sj7))+(((-1.0)*x2357*x2360*x2368))+(((-1.0)*sj4*x2359*x2380))+(((-1.0)*sj5*x2360*x2368*x2369))+((x2361*x2370))+(((0.054778)*x2357))+(((0.028046)*x2370))+((sj4*x2357*x2362))+((x2362*x2369*x2377))+((cj4*x2362*x2370))+(((-0.028046)*x2380))+(((-1.0)*x2362*x2375*x2380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2385=(cj6*sj7);
IkReal x2386=((1223.21)*sj5);
IkReal x2387=(cj5*px);
IkReal x2388=(cj6*sj4);
IkReal x2389=(cj6*cj7);
IkReal x2390=((122321.0)*px);
IkReal x2391=(sj5*sj6);
IkReal x2392=(cj3*sj7);
IkReal x2393=(cj7*sj3);
IkReal x2394=((122321.0)*py);
IkReal x2395=(cj5*cj6);
IkReal x2396=((29400.830918)*cj5);
IkReal x2397=(sj3*sj7);
IkReal x2398=((122321.0)*cj3*cj7);
IkReal x2399=((122321.0)*cj4*pz);
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal(((((-1.0)*x2385*x2399))+((x2385*x2386))+((cj3*sj4*x2385*x2394))+((x2385*x2396))+(((-1.0)*cj5*x2393*x2394))+(((6700.499738)*x2385))+((x2390*x2391*x2392))+((x2391*x2394*x2397))+(((-1.0)*sj3*sj4*x2385*x2390))+(((-1.0)*x2387*x2398)))),IkReal(((((-6700.499738)*x2389))+(((-1.0)*x2386*x2389))+(((-1.0)*x2389*x2396))+((x2388*x2390*x2393))+(((-1.0)*x2391*x2393*x2394))+(((-1.0)*cj3*cj7*x2390*x2391))+(((-1.0)*cj3*cj7*x2388*x2394))+((x2389*x2399))+(((-1.0)*cj5*x2394*x2397))+(((-122321.0)*x2387*x2392))+(((-8562.47)*x2395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
CheckValue<IkReal> x2401=IKPowWithIntegerCheck(IKsign(x2395),-1);
if(!x2401.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2400.value)+(((1.5707963267949)*(x2401.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2402=IKsin(j8);
IkReal x2403=IKcos(j8);
IkReal x2404=(cj5*sj7);
IkReal x2405=((0.07)*sj6);
IkReal x2406=((1.0)*pz);
IkReal x2407=(px*sj3);
IkReal x2408=(pz*sj4);
IkReal x2409=(cj3*py);
IkReal x2410=(sj6*sj7);
IkReal x2411=(cj6*sj7);
IkReal x2412=(py*sj3);
IkReal x2413=((0.054778)*sj5);
IkReal x2414=((0.244642)*cj7);
IkReal x2415=((1.0)*sj4);
IkReal x2416=(cj7*sj6);
IkReal x2417=(sj5*sj7);
IkReal x2418=(cj5*cj7);
IkReal x2419=(cj4*sj6);
IkReal x2420=((0.056092)*cj4);
IkReal x2421=(cj3*px);
IkReal x2422=((1.0)*cj4);
IkReal x2423=(cj7*sj5);
IkReal x2424=(sj4*sj5);
IkReal x2425=(cj4*pz);
IkReal x2426=((0.109556)*sj4);
IkReal x2427=(cj5*x2416);
IkReal x2428=(sj7*x2402);
IkReal x2429=((0.244642)*x2403);
IkReal x2430=((0.244642)*x2402);
IkReal x2431=((1.0)*cj6*cj7);
evalcond[0]=((((-1.0)*x2412))+(((-1.0)*x2421))+(((-1.0)*x2411*x2429))+(((-1.0)*cj6*x2402*x2414))+(((-0.07)*x2411)));
evalcond[1]=((-0.028046)+(((-1.0)*x2404*x2405))+(((-1.0)*x2409*x2422))+(((-1.0)*sj6*x2404*x2429))+(((-0.07)*x2423))+(((0.01)*cj5))+(((-1.0)*cj5*sj6*x2402*x2414))+(((-0.240358)*sj5))+((x2417*x2430))+(((-1.0)*sj4*x2406))+(((-1.0)*sj5*x2403*x2414))+((cj4*x2407)));
evalcond[2]=((0.054778)+(((0.240358)*cj5))+((cj5*x2403*x2414))+(((-1.0)*x2407*x2415))+(((-1.0)*sj5*x2410*x2429))+(((-1.0)*x2405*x2417))+(((-1.0)*sj5*sj6*x2402*x2414))+(((-1.0)*cj4*x2406))+(((0.07)*x2418))+(((0.01)*sj5))+(((-1.0)*x2404*x2430))+((sj4*x2409)));
evalcond[3]=((0.118834468928)+(((-1.0)*x2409*x2426))+(((-1.0)*x2409*x2420))+(((0.03365012)*cj7))+((x2407*x2426))+((x2407*x2420))+(((-0.0014)*x2410))+(((-0.00489284)*x2403*x2410))+(((0.117603323672)*cj7*x2403))+(((-0.056092)*x2408))+(((-1.0)*pp))+(((0.03424988)*x2403))+(((0.109556)*x2425))+(((-0.117603323672)*x2428))+(((-0.00489284)*x2402*x2416)));
evalcond[4]=((0.07)+((x2407*x2410*x2424))+(((0.240358)*cj7))+x2429+((sj5*x2410*x2425))+(((0.028046)*sj6*x2404))+(((-1.0)*sj5*x2409*x2410*x2415))+((x2404*x2409*x2419))+((sj4*x2409*x2418))+(((-1.0)*x2407*x2415*x2418))+(((-1.0)*x2407*x2422*x2423))+(((0.028046)*x2423))+(((0.054778)*x2418))+((x2411*x2421))+((x2411*x2412))+((x2408*x2423))+((sj6*x2404*x2408))+(((-1.0)*cj4*x2406*x2418))+(((-1.0)*x2404*x2407*x2419))+(((-0.01)*x2410))+(((-1.0)*x2410*x2413))+((cj4*x2409*x2423)));
evalcond[5]=((((-1.0)*x2409*x2422*x2427))+(((-1.0)*x2412*x2431))+(((-1.0)*x2421*x2431))+(((-1.0)*x2404*x2407*x2415))+((x2408*x2417))+(((0.054778)*x2404))+((cj4*x2409*x2417))+((x2413*x2416))+(((-1.0)*x2430))+(((-1.0)*sj5*x2407*x2415*x2416))+(((-1.0)*x2407*x2417*x2422))+(((0.240358)*sj7))+(((-0.028046)*x2427))+(((-1.0)*cj4*sj5*x2406*x2416))+(((0.01)*x2416))+(((-1.0)*sj4*x2406*x2427))+((cj4*x2407*x2427))+((sj4*x2404*x2409))+((x2409*x2416*x2424))+(((0.028046)*x2417))+(((-1.0)*cj4*x2404*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2432=(cj6*sj7);
IkReal x2433=((2446.42)*sj6);
IkReal x2434=(py*sj3);
IkReal x2435=((13400.999476)*sj4);
IkReal x2436=(px*sj3);
IkReal x2437=(cj6*cj7);
IkReal x2438=(cj3*py);
IkReal x2439=((122321.0)*pp);
IkReal x2440=((6861.229532)*cj4);
IkReal x2441=(cj3*px);
IkReal x2442=((58801.661836)*cj7);
IkReal x2443=((13400.999476)*cj4*pz);
IkReal x2444=(sj7*x2441);
IkReal x2445=((6861.229532)*pz*sj4);
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(IKsign(((((4189.47957148)*x2437))+(((14385.3561548827)*cj6)))),-1);
if(!x2446.valid){
continue;
}
CheckValue<IkReal> x2447 = IKatan2WithCheck(IkReal((((x2433*x2444))+((x2432*x2443))+((x2432*x2436*x2440))+((sj7*x2433*x2434))+(((-17124.94)*x2434))+(((-1.0)*x2441*x2442))+(((-1.0)*x2432*x2439))+(((-1.0)*x2432*x2435*x2438))+(((-1.0)*x2434*x2442))+(((13337.2052737419)*x2432))+(((-17124.94)*x2441))+((x2432*x2435*x2436))+(((-1.0)*x2432*x2438*x2440))+(((-1.0)*x2432*x2445)))),IkReal(((((-4116.11632852)*cj6))+(((-58801.661836)*x2444))+((x2435*x2437*x2438))+(((-1.0)*x2437*x2443))+((x2437*x2439))+((x2437*x2438*x2440))+(((-1.0)*cj7*x2433*x2434))+(((-1.0)*x2436*x2437*x2440))+(((-58801.661836)*sj7*x2434))+(((-1.0)*cj7*x2433*x2441))+(((-1.0)*x2435*x2436*x2437))+(((-14535.9510737419)*x2437))+((x2437*x2445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2447.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2446.value)))+(x2447.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x2448=IKcos(j8);
IkReal x2449=IKsin(j8);
IkReal x2450=((0.109556)*sj4);
IkReal x2451=(px*sj3);
IkReal x2452=(cj3*py);
IkReal x2453=((0.00489284)*sj6);
IkReal x2454=((0.056092)*cj4);
IkReal x2455=(cj6*sj7);
IkReal x2456=(cj7*x2449);
evalcond[0]=((((-0.07)*x2455))+(((-1.0)*cj3*px))+(((-0.244642)*cj6*x2456))+(((-1.0)*py*sj3))+(((-0.244642)*x2448*x2455)));
evalcond[1]=((0.118834468928)+(((-1.0)*x2450*x2452))+(((-1.0)*x2453*x2456))+(((0.109556)*cj4*pz))+(((-0.117603323672)*sj7*x2449))+(((0.03365012)*cj7))+(((-1.0)*x2452*x2454))+(((-0.056092)*pz*sj4))+(((-0.0014)*sj6*sj7))+((x2450*x2451))+(((-1.0)*pp))+(((-1.0)*sj7*x2448*x2453))+(((0.117603323672)*cj7*x2448))+((x2451*x2454))+(((0.03424988)*x2448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x2457=cj6*cj6;
IkReal x2458=cj7*cj7;
IkReal x2459=cj8*cj8;
IkReal x2460=(cj7*sj8);
IkReal x2461=((0.00489284)*sj6);
IkReal x2462=(sj6*sj7);
IkReal x2463=((0.03424988)*cj8);
IkReal x2464=(sj7*sj8);
IkReal x2465=(cj7*cj8);
IkReal x2466=((24.4642)*cj8);
IkReal x2467=(sj7*x2457);
IkReal x2468=(x2457*x2458);
IkReal x2469=(x2457*x2459);
j5eval[0]=((87.5869116628571)+x2466+(((-24.4642)*x2460*x2467))+(((-3.49488571428571)*cj8*x2462))+(((-1.0)*x2457*x2466))+(((-39.2497915457143)*x2468))+(((-85.4995830914286)*cj8*x2460*x2467))+(((-1.0)*x2462))+(((85.4995830914286)*x2459*x2468))+((x2466*x2468))+(((24.0358)*cj7))+(((-42.7497915457143)*x2469))+(((-3.5)*x2457))+(((-84.0023740514286)*x2464))+(((-3.49488571428571)*sj6*x2460))+(((84.0023740514286)*x2465)));
j5eval[1]=IKsign(((0.122621676328)+(((0.117603323672)*x2465))+(((-0.117603323672)*x2464))+x2463+(((-0.03424988)*x2460*x2467))+(((0.03365012)*cj7))+(((-1.0)*cj8*sj7*x2461))+(((-1.0)*x2457*x2463))+(((-0.059849708164)*x2469))+(((0.119699416328)*x2459*x2468))+(((-0.119699416328)*cj8*x2460*x2467))+(((-1.0)*x2460*x2461))+(((-0.0014)*x2462))+(((-0.054949708164)*x2468))+(((-0.0049)*x2457))+((x2463*x2468))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2470=(cj6*sj4);
IkReal x2471=(cj7*pz);
IkReal x2472=(cj6*sj7);
IkReal x2473=(px*sj3);
IkReal x2474=(cj4*cj6);
IkReal x2475=(sj6*sj7);
IkReal x2476=(cj8*sj6);
IkReal x2477=(cj6*cj7);
IkReal x2478=(cj4*pz);
IkReal x2479=(cj4*sj8);
IkReal x2480=(sj6*sj8);
IkReal x2481=((0.244642)*cj8);
IkReal x2482=(cj3*py);
IkReal x2483=((124.61262619574)*cj8);
IkReal x2484=((124.61262619574)*x2482);
IkReal x2485=(cj7*x2480);
IkReal x2486=(cj7*x2482);
IkReal x2487=(pz*sj7*sj8);
j5eval[0]=((((5.09367263984678)*pz*x2474))+(((-122.430496836829)*x2473*x2474))+(((-124.61262619574)*x2470*x2487))+(((-124.61262619574)*x2472*x2476*x2478))+(((-35.6557084789275)*x2470*x2473*x2475))+(((-1.0)*x2470*x2473*x2475*x2483))+(((35.6557084789275)*x2474*x2486))+x2477+(((3.15466451442019)*cj6))+(((35.6557084789275)*x2470*x2475*x2482))+(((6.82603043775023)*x2477*x2480))+(((6.82603043775023)*x2472*x2476))+(((122.430496836829)*x2474*x2482))+(((35.6557084789275)*x2470*x2471))+(((124.61262619574)*x2472*x2473*x2479))+(((-5.09367263984678)*x2470*x2482))+(((122.430496836829)*pz*x2470))+(((-124.61262619574)*x2470*x2473*x2485))+(((-35.6557084789275)*sj6*x2472*x2478))+(((-124.61262619574)*x2471*x2474*x2480))+((x2470*x2475*x2482*x2483))+(((5.09367263984678)*x2470*x2473))+((x2474*x2483*x2486))+(((1.95314839905869)*sj6*x2472))+(((-1.0)*cj7*x2473*x2474*x2483))+(((-3.49488571428571)*sj8*x2472))+(((-35.6557084789275)*cj7*x2473*x2474))+(((-1.0)*x2472*x2479*x2484))+(((3.49488571428571)*cj8*x2477))+((x2470*x2484*x2485))+((x2470*x2471*x2483)));
j5eval[1]=IKsign(((((0.240358)*x2474*x2482))+(((0.01)*pz*x2474))+(((0.013400999476)*x2477*x2480))+(((-0.244642)*x2471*x2474*x2480))+(((-1.0)*x2470*x2473*x2475*x2481))+(((-0.07)*sj6*x2472*x2478))+(((0.01)*x2470*x2473))+(((-0.244642)*x2470*x2473*x2485))+(((-0.244642)*x2472*x2479*x2482))+(((-0.01)*x2470*x2482))+(((0.244642)*x2470*x2482*x2485))+(((-0.244642)*x2472*x2476*x2478))+(((-0.006861229532)*sj8*x2472))+(((-0.07)*x2470*x2473*x2475))+((x2470*x2475*x2481*x2482))+(((0.006861229532)*cj8*x2477))+(((0.07)*x2474*x2486))+(((0.240358)*pz*x2470))+(((0.00383446)*sj6*x2472))+((x2474*x2481*x2486))+(((0.00196322)*x2477))+(((0.07)*x2470*x2471))+(((0.244642)*x2472*x2473*x2479))+(((0.07)*x2470*x2475*x2482))+(((0.006193300468)*cj6))+(((-0.240358)*x2473*x2474))+(((0.013400999476)*x2472*x2476))+(((-0.07)*cj7*x2473*x2474))+(((-0.244642)*x2470*x2487))+(((-1.0)*cj7*x2473*x2474*x2481))+((x2470*x2471*x2481))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2488=(cj4*sj6);
IkReal x2489=((124.61262619574)*sj8);
IkReal x2490=((0.07)*sj4);
IkReal x2491=(cj6*sj7);
IkReal x2492=((0.244642)*sj8);
IkReal x2493=((0.240358)*cj6);
IkReal x2494=(cj3*py);
IkReal x2495=((0.244642)*cj8);
IkReal x2496=(cj6*cj7);
IkReal x2497=((35.6557084789275)*sj4);
IkReal x2498=((0.01)*cj6);
IkReal x2499=(pz*sj4);
IkReal x2500=(cj4*pz);
IkReal x2501=(pz*sj6);
IkReal x2502=(cj8*sj6);
IkReal x2503=(px*sj3);
IkReal x2504=((124.61262619574)*cj8);
IkReal x2505=((5.09367263984678)*cj6);
IkReal x2506=((122.430496836829)*cj6);
IkReal x2507=(sj6*sj8);
IkReal x2508=(sj4*x2503);
IkReal x2509=(sj4*x2504);
IkReal x2510=(x2496*x2503);
j5eval[0]=((((-6.82603043775023)*cj8*x2496))+((x2491*x2497*x2501))+(((-1.0)*sj4*x2494*x2506))+(((-6.84935489858498)*cj6))+((x2497*x2510))+(((-1.0)*x2488*x2489*x2510))+((sj6*x2489*x2496*x2499))+((sj4*x2489*x2491*x2494))+(((3.49488571428571)*x2496*x2507))+((x2488*x2491*x2494*x2504))+(((-1.0)*x2489*x2491*x2508))+(((-1.0)*x2489*x2491*x2500))+((x2500*x2506))+(((-1.0)*x2494*x2496*x2509))+(((35.6557084789275)*x2488*x2491*x2494))+(((124.61262619574)*x2491*x2499*x2502))+((x2506*x2508))+(((-1.0)*cj4*x2494*x2505))+(((35.6557084789275)*x2496*x2500))+(((3.49488571428571)*x2491*x2502))+((sj6*x2491))+(((-1.0)*x2488*x2491*x2503*x2504))+(((-1.0)*x2494*x2496*x2497))+(((-1.0)*x2499*x2505))+(((-35.6557084789275)*x2488*x2491*x2503))+(((6.82603043775023)*sj8*x2491))+(((-1.95314839905869)*x2496))+((cj4*x2503*x2505))+((x2488*x2489*x2494*x2496))+((x2496*x2504*x2508))+((x2496*x2500*x2504)));
j5eval[1]=IKsign((((x2488*x2492*x2494*x2496))+(((-0.00383446)*x2496))+((sj6*x2491*x2495*x2499))+(((-1.0)*cj4*x2494*x2498))+(((-1.0)*sj4*x2494*x2495*x2496))+((x2495*x2496*x2508))+((x2495*x2496*x2500))+(((0.07)*x2488*x2491*x2494))+(((-0.013400999476)*cj8*x2496))+(((0.006861229532)*x2496*x2507))+((x2493*x2500))+((x2493*x2508))+((x2488*x2491*x2494*x2495))+(((-1.0)*sj4*x2493*x2494))+(((-1.0)*x2488*x2492*x2510))+((cj4*x2498*x2503))+(((0.006861229532)*x2491*x2502))+((x2490*x2510))+((x2490*x2491*x2501))+((sj6*x2492*x2496*x2499))+(((-1.0)*x2491*x2492*x2508))+(((-1.0)*x2491*x2492*x2500))+((sj4*x2491*x2492*x2494))+(((-1.0)*x2498*x2499))+(((-1.0)*x2488*x2491*x2495*x2503))+(((0.013400999476)*sj8*x2491))+(((-1.0)*x2490*x2494*x2496))+(((0.07)*x2496*x2500))+(((0.00196322)*sj6*x2491))+(((-0.013446790524)*cj6))+(((-0.07)*x2488*x2491*x2503))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2511=IKPowWithIntegerCheck(IKsign(((((0.244642)*cj6*cj8*pz*sj4*sj6*sj7))+(((0.240358)*cj6*px*sj3*sj4))+(((0.006861229532)*cj6*cj7*sj6*sj8))+(((0.07)*cj6*cj7*px*sj3*sj4))+(((0.006861229532)*cj6*cj8*sj6*sj7))+(((0.01)*cj4*cj6*px*sj3))+(((0.244642)*cj3*cj4*cj6*cj7*py*sj6*sj8))+(((0.244642)*cj3*cj6*py*sj4*sj7*sj8))+(((-0.01)*cj3*cj4*cj6*py))+(((0.244642)*cj6*cj7*pz*sj4*sj6*sj8))+(((-0.01)*cj6*pz*sj4))+(((0.013400999476)*cj6*sj7*sj8))+(((0.07)*cj6*pz*sj4*sj6*sj7))+(((-0.244642)*cj4*cj6*pz*sj7*sj8))+(((-0.244642)*cj4*cj6*cj7*px*sj3*sj6*sj8))+(((-0.244642)*cj4*cj6*cj8*px*sj3*sj6*sj7))+(((0.244642)*cj3*cj4*cj6*cj8*py*sj6*sj7))+(((0.00196322)*cj6*sj6*sj7))+(((0.07)*cj4*cj6*cj7*pz))+(((-0.013400999476)*cj6*cj7*cj8))+(((0.244642)*cj4*cj6*cj7*cj8*pz))+(((-0.07)*cj3*cj6*cj7*py*sj4))+(((0.244642)*cj6*cj7*cj8*px*sj3*sj4))+(((-0.07)*cj4*cj6*px*sj3*sj6*sj7))+(((0.07)*cj3*cj4*cj6*py*sj6*sj7))+(((0.240358)*cj4*cj6*pz))+(((-0.244642)*cj6*px*sj3*sj4*sj7*sj8))+(((-0.244642)*cj3*cj6*cj7*cj8*py*sj4))+(((-0.00383446)*cj6*cj7))+(((-0.013446790524)*cj6))+(((-0.240358)*cj3*cj6*py*sj4)))),-1);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal(((((-2.0)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.244642)*cj3*cj7*cj8*px*sj6))+(((0.028046)*cj3*cj6*py*sj4))+(((0.240358)*py*sj3*sj6))+(((0.240358)*cj3*px*sj6))+(((-0.054778)*cj4*cj6*px*sj3))+(((-0.244642)*cj3*px*sj6*sj7*sj8))+(((-1.0)*cj6*px*pz*sj3))+(((0.07)*cj7*py*sj3*sj6))+(((0.00244642)*cj6*cj7*cj8))+(((0.07)*cj3*cj7*px*sj6))+(((-1.0)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((-1.0)*cj4*cj6*sj4*(pz*pz)))+(((0.054778)*cj6*pz*sj4))+((cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((-0.028046)*cj6*px*sj3*sj4))+(((-2.0)*cj3*cj6*py*pz*(cj4*cj4)))+((cj4*cj6*sj4*(px*px)))+(((0.244642)*cj7*cj8*py*sj3*sj6))+(((0.0007)*cj6*cj7))+((cj3*cj6*py*pz))+(((2.0)*cj6*px*pz*sj3*(cj4*cj4)))+(((0.054778)*cj3*cj4*cj6*py))+(((-0.244642)*py*sj3*sj6*sj7*sj8))+(((0.003939883788)*cj6))+(((-0.028046)*cj4*cj6*pz))+(((-0.00244642)*cj6*sj7*sj8)))),IkReal(((((0.07)*cj3*px*sj7))+(((-0.07)*py*sj3*sj7*(cj6*cj6)))+((cj6*(px*px)))+(((2.0)*cj4*cj6*px*pz*sj3*sj4))+(((-0.244642)*cj3*cj7*px*sj8*(cj6*cj6)))+(((0.00244642)*cj6*cj8*sj6*sj7))+(((-2.0)*cj3*cj6*px*py*sj3))+(((-0.01)*cj3*px*sj6))+(((-0.07)*cj3*px*sj7*(cj6*cj6)))+(((2.0)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.244642)*cj7*py*sj3*sj8))+((cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((0.109556)*cj3*cj6*py*sj4))+((cj6*(cj4*cj4)*(pz*pz)))+(((0.002900629284)*cj6))+(((-0.109556)*cj6*px*sj3*sj4))+(((0.244642)*cj8*py*sj3*sj7))+(((-0.109556)*cj4*cj6*pz))+(((0.07)*py*sj3*sj7))+(((-1.0)*cj6*(cj3*cj3)*(px*px)))+(((-0.244642)*cj7*py*sj3*sj8*(cj6*cj6)))+(((-2.0)*cj3*cj4*cj6*py*pz*sj4))+(((0.244642)*cj3*cj7*px*sj8))+(((0.00244642)*cj6*cj7*sj6*sj8))+(((-1.0)*cj6*(cj4*cj4)*(px*px)))+(((-0.244642)*cj3*cj8*px*sj7*(cj6*cj6)))+(((0.244642)*cj3*cj8*px*sj7))+((cj6*(cj3*cj3)*(py*py)))+(((0.0007)*cj6*sj6*sj7))+(((-0.244642)*cj8*py*sj3*sj7*(cj6*cj6)))+(((-0.01)*py*sj3*sj6))+(((-1.0)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2511.value)))+(x2512.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2513=IKsin(j5);
IkReal x2514=IKcos(j5);
IkReal x2515=(pz*sj4);
IkReal x2516=((1.0)*cj4);
IkReal x2517=((0.02)*sj4);
IkReal x2518=((0.244642)*sj8);
IkReal x2519=(cj7*sj6);
IkReal x2520=(sj6*sj7);
IkReal x2521=(cj4*cj7);
IkReal x2522=(cj4*pz);
IkReal x2523=(cj7*sj4);
IkReal x2524=(px*sj3);
IkReal x2525=((0.02)*cj4);
IkReal x2526=(cj6*sj7);
IkReal x2527=(cj3*px);
IkReal x2528=((1.0)*sj4);
IkReal x2529=(py*sj3);
IkReal x2530=((0.056092)*cj4);
IkReal x2531=((0.14)*cj4);
IkReal x2532=((0.244642)*cj8);
IkReal x2533=((1.0)*sj6);
IkReal x2534=((0.480716)*sj4);
IkReal x2535=(cj3*py);
IkReal x2536=((0.480716)*x2513);
IkReal x2537=((0.054778)*x2513);
IkReal x2538=(cj6*x2513);
IkReal x2539=(cj7*x2513);
IkReal x2540=(sj7*x2513);
IkReal x2541=((0.07)*x2514);
IkReal x2542=((0.14)*x2513);
IkReal x2543=((0.14)*x2514);
IkReal x2544=(sj4*x2535);
IkReal x2545=(cj6*x2514);
IkReal x2546=((1.0)*cj6*cj7);
IkReal x2547=(cj7*x2514);
IkReal x2548=(sj7*x2514);
IkReal x2549=((0.028046)*x2514);
IkReal x2550=(x2514*x2524);
IkReal x2551=(x2513*x2535);
IkReal x2552=(x2514*x2535);
evalcond[0]=((-0.028046)+(((-0.240358)*x2513))+(((-1.0)*x2520*x2541))+(((0.01)*x2514))+(((-1.0)*x2514*x2518*x2519))+((cj4*x2524))+(((-1.0)*x2515))+(((-0.07)*x2539))+(((-1.0)*x2516*x2535))+((x2518*x2540))+(((-1.0)*x2514*x2520*x2532))+(((-1.0)*x2532*x2539)));
evalcond[1]=((0.054778)+(((-1.0)*x2524*x2528))+(((-1.0)*x2518*x2548))+x2544+(((0.01)*x2513))+(((-0.07)*x2513*x2520))+(((-1.0)*x2513*x2520*x2532))+((cj7*x2541))+(((-1.0)*x2513*x2518*x2519))+((x2532*x2547))+(((0.240358)*x2514))+(((-1.0)*pz*x2516)));
evalcond[2]=((((-1.0)*x2516*x2524*x2545))+((x2515*x2545))+(((-0.01)*cj6))+(((0.028046)*x2545))+(((-1.0)*x2527*x2533))+(((-1.0)*x2528*x2535*x2538))+((x2522*x2538))+((sj4*x2524*x2538))+((cj4*x2535*x2545))+(((-1.0)*cj6*x2537))+(((-1.0)*x2529*x2533)));
evalcond[3]=((0.07)+(((0.028046)*x2539))+(((0.240358)*cj7))+x2532+(((-1.0)*pz*x2516*x2547))+(((-1.0)*x2520*x2537))+((x2515*x2539))+(((-1.0)*x2523*x2550))+((x2514*x2515*x2520))+((sj4*x2513*x2520*x2524))+((x2520*x2549))+((x2526*x2529))+((x2526*x2527))+((x2523*x2552))+(((0.054778)*x2547))+(((-1.0)*x2520*x2528*x2551))+(((-0.01)*x2520))+(((-1.0)*x2516*x2524*x2539))+((x2521*x2551))+(((-1.0)*x2516*x2520*x2550))+((cj4*x2520*x2552))+((x2513*x2520*x2522)));
evalcond[4]=((((-1.0)*x2514*x2515*x2519))+(((-1.0)*x2516*x2524*x2540))+(((-1.0)*x2518))+(((-1.0)*x2516*x2519*x2552))+(((-1.0)*pz*x2516*x2548))+((x2515*x2540))+(((-1.0)*x2527*x2546))+(((-1.0)*x2513*x2519*x2524*x2528))+(((0.01)*x2519))+((x2513*x2519*x2544))+(((0.028046)*x2540))+(((-1.0)*x2529*x2546))+(((0.240358)*sj7))+(((-1.0)*pz*x2513*x2516*x2519))+(((0.054778)*x2548))+((x2519*x2537))+((cj4*x2535*x2540))+(((-1.0)*x2519*x2549))+((cj4*x2519*x2550))+((x2544*x2548))+(((-1.0)*x2524*x2528*x2548)));
evalcond[5]=((-0.0067094674)+(((-0.056092)*x2515))+(((-1.0)*(px*px)))+(((-1.0)*x2523*x2535*x2543))+((x2523*x2524*x2543))+((x2520*x2531*x2550))+(((-1.0)*x2520*x2522*x2542))+(((-0.025771741048)*x2514))+(((-0.00766892)*x2547))+(((-0.14)*x2515*x2539))+(((0.109556)*sj4*x2524))+((x2513*x2517*x2524))+(((-1.0)*x2521*x2535*x2542))+((x2534*x2550))+((pz*x2521*x2543))+(((-1.0)*x2530*x2535))+(((-1.0)*sj4*x2520*x2524*x2542))+(((-1.0)*x2515*x2520*x2543))+(((-0.14)*x2526*x2529))+(((-0.14)*x2526*x2527))+(((-1.0)*cj4*x2535*x2536))+((x2524*x2530))+(((-0.109556)*x2544))+(((0.02)*x2514*x2515))+(((-0.014577720936)*x2513))+(((-1.0)*x2517*x2551))+(((-0.00392644)*x2514*x2520))+(((-1.0)*(pz*pz)))+(((-1.0)*x2534*x2552))+((cj4*x2524*x2536))+(((-1.0)*x2515*x2536))+(((0.00766892)*x2513*x2520))+(((0.0014)*x2520))+(((-1.0)*x2525*x2550))+((x2521*x2524*x2542))+((x2520*x2542*x2544))+(((-1.0)*(py*py)))+(((0.02)*x2513*x2522))+((x2525*x2552))+(((0.109556)*x2522))+(((-0.00392644)*x2539))+(((0.480716)*x2514*x2522))+(((-0.03365012)*cj7))+(((-1.0)*x2520*x2531*x2552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((((0.240358)*cj3*cj4*cj6*py))+(((-0.01)*cj3*cj6*py*sj4))+(((-0.07)*cj4*cj6*cj7*px*sj3))+(((0.244642)*cj3*cj6*cj8*py*sj4*sj6*sj7))+(((0.006861229532)*cj6*cj7*cj8))+(((-0.240358)*cj4*cj6*px*sj3))+(((0.00196322)*cj6*cj7))+(((-0.07)*cj4*cj6*pz*sj6*sj7))+(((0.07)*cj3*cj4*cj6*cj7*py))+(((0.01)*cj6*px*sj3*sj4))+(((-0.07)*cj6*px*sj3*sj4*sj6*sj7))+(((-0.244642)*cj4*cj6*cj7*pz*sj6*sj8))+(((0.013400999476)*cj6*cj8*sj6*sj7))+(((-0.006861229532)*cj6*sj7*sj8))+(((-0.244642)*cj4*cj6*cj8*pz*sj6*sj7))+(((0.07)*cj3*cj6*py*sj4*sj6*sj7))+(((0.013400999476)*cj6*cj7*sj6*sj8))+(((-0.244642)*cj6*pz*sj4*sj7*sj8))+(((-0.244642)*cj3*cj4*cj6*py*sj7*sj8))+(((0.07)*cj6*cj7*pz*sj4))+(((0.244642)*cj6*cj7*cj8*pz*sj4))+(((-0.244642)*cj6*cj7*px*sj3*sj4*sj6*sj8))+(((0.006193300468)*cj6))+(((-0.244642)*cj4*cj6*cj7*cj8*px*sj3))+(((0.00383446)*cj6*sj6*sj7))+(((0.244642)*cj3*cj4*cj6*cj7*cj8*py))+(((0.244642)*cj3*cj6*cj7*py*sj4*sj6*sj8))+(((0.240358)*cj6*pz*sj4))+(((0.01)*cj4*cj6*pz))+(((-0.244642)*cj6*cj8*px*sj3*sj4*sj6*sj7))+(((0.244642)*cj4*cj6*px*sj3*sj7*sj8)))),-1);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal(((((-0.244642)*cj7*py*sj3*sj8))+(((0.056092)*cj4*cj6*px*sj3))+(((2.0)*cj4*cj6*px*pz*sj3*sj4))+(((-0.244642)*cj3*cj8*px*sj7))+(((-0.056092)*cj6*pz*sj4))+(((2.0)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((-0.07)*py*sj3*sj7))+((cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+((cj6*(cj4*cj4)*(pz*pz)))+(((-1.0)*cj6*(pz*pz)))+(((0.244642)*cj3*cj7*px*sj8*(cj6*cj6)))+(((-0.244642)*cj3*cj7*px*sj8))+(((-0.056092)*cj3*cj4*cj6*py))+(((-0.244642)*cj8*py*sj3*sj7))+(((-0.0007)*cj6*sj6*sj7))+(((0.244642)*cj7*py*sj3*sj8*(cj6*cj6)))+(((-2.0)*cj3*cj4*cj6*py*pz*sj4))+(((0.244642)*cj8*py*sj3*sj7*(cj6*cj6)))+(((0.01)*cj3*px*sj6))+(((-0.07)*cj3*px*sj7))+(((-1.0)*cj6*(cj4*cj4)*(px*px)))+(((-0.00244642)*cj6*cj8*sj6*sj7))+(((0.01)*py*sj3*sj6))+(((-0.000686578116)*cj6))+(((-0.00244642)*cj6*cj7*sj6*sj8))+(((0.244642)*cj3*cj8*px*sj7*(cj6*cj6)))+(((-1.0)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.07)*py*sj3*sj7*(cj6*cj6)))+(((0.07)*cj3*px*sj7*(cj6*cj6))))),IkReal(((((0.244642)*cj3*cj7*cj8*px*sj6))+(((0.000867276212)*cj6))+(((0.240358)*py*sj3*sj6))+(((0.240358)*cj3*px*sj6))+(((-0.244642)*cj3*px*sj6*sj7*sj8))+(((2.0)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.07)*cj7*py*sj3*sj6))+(((-2.0)*cj6*px*pz*sj3*(cj4*cj4)))+(((0.00244642)*cj6*cj7*cj8))+((cj4*cj6*sj4*(pz*pz)))+(((0.07)*cj3*cj7*px*sj6))+(((0.028046)*cj4*cj6*pz))+(((0.054778)*cj4*cj6*px*sj3))+(((-0.054778)*cj6*pz*sj4))+(((-0.054778)*cj3*cj4*cj6*py))+(((-1.0)*cj3*cj6*py*pz))+((cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((-1.0)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.244642)*cj7*cj8*py*sj3*sj6))+(((0.0007)*cj6*cj7))+((cj6*px*pz*sj3))+(((-0.028046)*cj3*cj6*py*sj4))+(((0.028046)*cj6*px*sj3*sj4))+(((-0.244642)*py*sj3*sj6*sj7*sj8))+(((2.0)*cj3*cj6*py*pz*(cj4*cj4)))+(((-1.0)*cj4*cj6*sj4*(px*px)))+(((-0.00244642)*cj6*sj7*sj8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2553.value)))+(x2554.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2555=IKsin(j5);
IkReal x2556=IKcos(j5);
IkReal x2557=(pz*sj4);
IkReal x2558=((1.0)*cj4);
IkReal x2559=((0.02)*sj4);
IkReal x2560=((0.244642)*sj8);
IkReal x2561=(cj7*sj6);
IkReal x2562=(sj6*sj7);
IkReal x2563=(cj4*cj7);
IkReal x2564=(cj4*pz);
IkReal x2565=(cj7*sj4);
IkReal x2566=(px*sj3);
IkReal x2567=((0.02)*cj4);
IkReal x2568=(cj6*sj7);
IkReal x2569=(cj3*px);
IkReal x2570=((1.0)*sj4);
IkReal x2571=(py*sj3);
IkReal x2572=((0.056092)*cj4);
IkReal x2573=((0.14)*cj4);
IkReal x2574=((0.244642)*cj8);
IkReal x2575=((1.0)*sj6);
IkReal x2576=((0.480716)*sj4);
IkReal x2577=(cj3*py);
IkReal x2578=((0.480716)*x2555);
IkReal x2579=((0.054778)*x2555);
IkReal x2580=(cj6*x2555);
IkReal x2581=(cj7*x2555);
IkReal x2582=(sj7*x2555);
IkReal x2583=((0.07)*x2556);
IkReal x2584=((0.14)*x2555);
IkReal x2585=((0.14)*x2556);
IkReal x2586=(sj4*x2577);
IkReal x2587=(cj6*x2556);
IkReal x2588=((1.0)*cj6*cj7);
IkReal x2589=(cj7*x2556);
IkReal x2590=(sj7*x2556);
IkReal x2591=((0.028046)*x2556);
IkReal x2592=(x2556*x2566);
IkReal x2593=(x2555*x2577);
IkReal x2594=(x2556*x2577);
evalcond[0]=((-0.028046)+(((0.01)*x2556))+(((-0.07)*x2581))+(((-1.0)*x2558*x2577))+(((-1.0)*x2557))+(((-1.0)*x2556*x2560*x2561))+(((-1.0)*x2556*x2562*x2574))+(((-0.240358)*x2555))+(((-1.0)*x2574*x2581))+((x2560*x2582))+((cj4*x2566))+(((-1.0)*x2562*x2583)));
evalcond[1]=((0.054778)+(((0.01)*x2555))+x2586+(((-1.0)*x2566*x2570))+(((-1.0)*x2555*x2562*x2574))+(((0.240358)*x2556))+(((-1.0)*pz*x2558))+((x2574*x2589))+((cj7*x2583))+(((-1.0)*x2560*x2590))+(((-0.07)*x2555*x2562))+(((-1.0)*x2555*x2560*x2561)));
evalcond[2]=((((-1.0)*x2569*x2575))+(((-1.0)*x2571*x2575))+(((-1.0)*x2570*x2577*x2580))+(((-0.01)*cj6))+((x2557*x2587))+(((-1.0)*cj6*x2579))+((sj4*x2566*x2580))+(((-1.0)*x2558*x2566*x2587))+(((0.028046)*x2587))+((cj4*x2577*x2587))+((x2564*x2580)));
evalcond[3]=((0.07)+(((0.240358)*cj7))+(((-0.01)*x2562))+x2574+((x2568*x2571))+(((-1.0)*x2562*x2579))+((x2557*x2581))+((x2562*x2591))+((x2556*x2557*x2562))+((x2565*x2594))+(((-1.0)*x2565*x2592))+(((-1.0)*x2562*x2570*x2593))+((x2563*x2593))+(((0.054778)*x2589))+(((-1.0)*x2558*x2566*x2581))+((x2555*x2562*x2564))+((sj4*x2555*x2562*x2566))+(((0.028046)*x2581))+((x2568*x2569))+(((-1.0)*pz*x2558*x2589))+((cj4*x2562*x2594))+(((-1.0)*x2558*x2562*x2592)));
evalcond[4]=((((-1.0)*x2556*x2557*x2561))+(((-1.0)*pz*x2555*x2558*x2561))+((x2561*x2579))+((x2557*x2582))+(((-1.0)*x2569*x2588))+(((-1.0)*x2561*x2591))+(((-1.0)*x2560))+(((0.240358)*sj7))+((x2586*x2590))+((cj4*x2561*x2592))+(((-1.0)*x2558*x2566*x2582))+(((0.054778)*x2590))+((x2555*x2561*x2586))+(((0.028046)*x2582))+(((-1.0)*x2555*x2561*x2566*x2570))+((cj4*x2577*x2582))+(((-1.0)*x2571*x2588))+(((-1.0)*x2558*x2561*x2594))+(((-1.0)*pz*x2558*x2590))+(((0.01)*x2561))+(((-1.0)*x2566*x2570*x2590)));
evalcond[5]=((-0.0067094674)+(((0.109556)*x2564))+(((-0.00392644)*x2581))+((x2567*x2594))+(((-1.0)*(px*px)))+((x2562*x2573*x2592))+((cj4*x2566*x2578))+(((-1.0)*x2562*x2564*x2584))+(((-1.0)*x2562*x2573*x2594))+((x2563*x2566*x2584))+(((-1.0)*x2563*x2577*x2584))+(((-1.0)*x2557*x2578))+(((-1.0)*sj4*x2562*x2566*x2584))+(((0.02)*x2555*x2564))+((x2562*x2584*x2586))+(((-1.0)*x2565*x2577*x2585))+(((-0.14)*x2568*x2569))+(((0.02)*x2556*x2557))+(((-1.0)*cj4*x2577*x2578))+(((-1.0)*x2559*x2593))+(((-0.025771741048)*x2556))+((x2566*x2572))+(((-0.14)*x2568*x2571))+(((-1.0)*(pz*pz)))+(((-1.0)*x2557*x2562*x2585))+(((-1.0)*x2567*x2592))+(((-0.14)*x2557*x2581))+(((-0.056092)*x2557))+((x2555*x2559*x2566))+(((0.00766892)*x2555*x2562))+(((-1.0)*x2572*x2577))+(((0.109556)*sj4*x2566))+(((-1.0)*x2576*x2594))+(((0.0014)*x2562))+(((-1.0)*(py*py)))+((x2576*x2592))+(((-0.014577720936)*x2555))+((pz*x2563*x2585))+(((-0.109556)*x2586))+(((0.480716)*x2556*x2564))+(((-0.03365012)*cj7))+(((-0.00766892)*x2589))+(((-0.00392644)*x2556*x2562))+((x2565*x2566*x2585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2595=IKPowWithIntegerCheck(IKsign(((0.122621676328)+(((0.03424988)*cj8*(cj6*cj6)*(cj7*cj7)))+(((-0.059849708164)*(cj6*cj6)*(cj8*cj8)))+(((0.03365012)*cj7))+(((-0.00489284)*cj7*sj6*sj8))+(((-0.0014)*sj6*sj7))+(((0.117603323672)*cj7*cj8))+(((-0.054949708164)*(cj6*cj6)*(cj7*cj7)))+(((-0.00489284)*cj8*sj6*sj7))+(((-0.03424988)*cj7*sj7*sj8*(cj6*cj6)))+(((0.119699416328)*(cj6*cj6)*(cj7*cj7)*(cj8*cj8)))+(((-0.0049)*(cj6*cj6)))+(((-0.117603323672)*sj7*sj8))+(((-0.119699416328)*cj7*cj8*sj7*sj8*(cj6*cj6)))+(((0.03424988)*cj8))+(((-0.03424988)*cj8*(cj6*cj6))))),-1);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal(((-0.007288860468)+(((0.244642)*pz*sj4*sj7*sj8))+(((-0.240358)*pz*sj4))+(((-0.07)*px*sj3*sj4*sj6*sj7))+(((-0.244642)*cj7*px*sj3*sj4*sj6*sj8))+(((-0.07)*cj3*cj4*cj7*py))+(((0.244642)*cj3*cj7*py*sj4*sj6*sj8))+(((0.013400999476)*cj8*sj6*sj7))+(((0.240358)*cj4*px*sj3))+(((-0.244642)*cj7*cj8*pz*sj4))+(((0.006861229532)*sj7*sj8))+(((0.07)*cj4*cj7*px*sj3))+(((0.013400999476)*cj7*sj6*sj8))+(((0.01)*px*sj3*sj4))+(((-0.244642)*cj8*px*sj3*sj4*sj6*sj7))+(((0.244642)*cj4*cj7*cj8*px*sj3))+(((-0.07)*cj7*pz*sj4))+(((-0.00196322)*cj7))+(((0.00383446)*sj6*sj7))+(((-0.244642)*cj4*cj7*pz*sj6*sj8))+(((-0.244642)*cj4*px*sj3*sj7*sj8))+(((0.07)*cj3*py*sj4*sj6*sj7))+(((0.01)*cj4*pz))+(((-0.244642)*cj4*cj8*pz*sj6*sj7))+(((-0.006861229532)*cj7*cj8))+(((-0.244642)*cj3*cj4*cj7*cj8*py))+(((-0.07)*cj4*pz*sj6*sj7))+(((0.244642)*cj3*cj4*py*sj7*sj8))+(((-0.01)*cj3*py*sj4))+(((0.244642)*cj3*cj8*py*sj4*sj6*sj7))+(((-0.240358)*cj3*cj4*py)))),IkReal(((-0.012885870524)+(((0.244642)*cj4*cj8*px*sj3*sj6*sj7))+(((0.240358)*cj4*pz))+(((0.07)*cj4*cj7*pz))+(((-0.00383446)*cj7))+(((0.01)*pz*sj4))+(((-0.01)*cj4*px*sj3))+(((0.244642)*cj4*cj7*cj8*pz))+(((-0.006861229532)*cj7*sj6*sj8))+(((-0.240358)*cj3*py*sj4))+(((0.244642)*cj4*cj7*px*sj3*sj6*sj8))+(((-0.244642)*cj3*cj4*cj8*py*sj6*sj7))+(((0.013400999476)*sj7*sj8))+(((0.240358)*px*sj3*sj4))+(((-0.07)*cj3*cj4*py*sj6*sj7))+(((-0.07)*cj3*cj7*py*sj4))+(((0.244642)*cj7*cj8*px*sj3*sj4))+(((0.07)*cj7*px*sj3*sj4))+(((0.01)*cj3*cj4*py))+(((0.07)*cj4*px*sj3*sj6*sj7))+(((-0.07)*pz*sj4*sj6*sj7))+(((-0.244642)*cj7*pz*sj4*sj6*sj8))+(((0.244642)*cj3*py*sj4*sj7*sj8))+(((-0.00196322)*sj6*sj7))+(((-0.244642)*cj3*cj4*cj7*py*sj6*sj8))+(((-0.244642)*cj4*pz*sj7*sj8))+(((-0.013400999476)*cj7*cj8))+(((-0.244642)*cj3*cj7*cj8*py*sj4))+(((-0.006861229532)*cj8*sj6*sj7))+(((-0.244642)*px*sj3*sj4*sj7*sj8))+(((-0.244642)*cj8*pz*sj4*sj6*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2595.value)))+(x2596.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2597=IKsin(j5);
IkReal x2598=IKcos(j5);
IkReal x2599=(pz*sj4);
IkReal x2600=((1.0)*cj4);
IkReal x2601=((0.02)*sj4);
IkReal x2602=((0.244642)*sj8);
IkReal x2603=(cj7*sj6);
IkReal x2604=(sj6*sj7);
IkReal x2605=(cj4*cj7);
IkReal x2606=(cj4*pz);
IkReal x2607=(cj7*sj4);
IkReal x2608=(px*sj3);
IkReal x2609=((0.02)*cj4);
IkReal x2610=(cj6*sj7);
IkReal x2611=(cj3*px);
IkReal x2612=((1.0)*sj4);
IkReal x2613=(py*sj3);
IkReal x2614=((0.056092)*cj4);
IkReal x2615=((0.14)*cj4);
IkReal x2616=((0.244642)*cj8);
IkReal x2617=((1.0)*sj6);
IkReal x2618=((0.480716)*sj4);
IkReal x2619=(cj3*py);
IkReal x2620=((0.480716)*x2597);
IkReal x2621=((0.054778)*x2597);
IkReal x2622=(cj6*x2597);
IkReal x2623=(cj7*x2597);
IkReal x2624=(sj7*x2597);
IkReal x2625=((0.07)*x2598);
IkReal x2626=((0.14)*x2597);
IkReal x2627=((0.14)*x2598);
IkReal x2628=(sj4*x2619);
IkReal x2629=(cj6*x2598);
IkReal x2630=((1.0)*cj6*cj7);
IkReal x2631=(cj7*x2598);
IkReal x2632=(sj7*x2598);
IkReal x2633=((0.028046)*x2598);
IkReal x2634=(x2598*x2608);
IkReal x2635=(x2597*x2619);
IkReal x2636=(x2598*x2619);
evalcond[0]=((-0.028046)+(((-1.0)*x2599))+((x2602*x2624))+((cj4*x2608))+(((-1.0)*x2600*x2619))+(((-0.07)*x2623))+(((-1.0)*x2598*x2602*x2603))+(((-1.0)*x2598*x2604*x2616))+(((-0.240358)*x2597))+(((-1.0)*x2604*x2625))+(((-1.0)*x2616*x2623))+(((0.01)*x2598)));
evalcond[1]=((0.054778)+(((-1.0)*x2602*x2632))+((x2616*x2631))+(((-0.07)*x2597*x2604))+(((-1.0)*x2608*x2612))+(((0.240358)*x2598))+(((-1.0)*x2597*x2602*x2603))+((cj7*x2625))+(((-1.0)*pz*x2600))+(((0.01)*x2597))+(((-1.0)*x2597*x2604*x2616))+x2628);
evalcond[2]=((((-1.0)*cj6*x2621))+(((-1.0)*x2611*x2617))+(((-0.01)*cj6))+(((-1.0)*x2613*x2617))+((x2606*x2622))+((x2599*x2629))+(((0.028046)*x2629))+((cj4*x2619*x2629))+(((-1.0)*x2612*x2619*x2622))+(((-1.0)*x2600*x2608*x2629))+((sj4*x2608*x2622)));
evalcond[3]=((0.07)+(((0.240358)*cj7))+((x2598*x2599*x2604))+((x2605*x2635))+((x2610*x2613))+((x2610*x2611))+((x2604*x2633))+(((-1.0)*x2604*x2612*x2635))+(((-1.0)*x2607*x2634))+(((-1.0)*pz*x2600*x2631))+(((0.054778)*x2631))+((cj4*x2604*x2636))+((x2607*x2636))+((sj4*x2597*x2604*x2608))+((x2597*x2604*x2606))+((x2599*x2623))+(((0.028046)*x2623))+(((-1.0)*x2600*x2604*x2634))+(((-1.0)*x2604*x2621))+(((-1.0)*x2600*x2608*x2623))+(((-0.01)*x2604))+x2616);
evalcond[4]=(((x2597*x2603*x2628))+(((-1.0)*x2608*x2612*x2632))+((x2603*x2621))+((cj4*x2603*x2634))+(((-1.0)*x2597*x2603*x2608*x2612))+(((-1.0)*x2600*x2603*x2636))+(((-1.0)*pz*x2600*x2632))+(((0.054778)*x2632))+(((0.240358)*sj7))+((x2628*x2632))+(((0.01)*x2603))+((x2599*x2624))+(((0.028046)*x2624))+((cj4*x2619*x2624))+(((-1.0)*pz*x2597*x2600*x2603))+(((-1.0)*x2611*x2630))+(((-1.0)*x2600*x2608*x2624))+(((-1.0)*x2613*x2630))+(((-1.0)*x2602))+(((-1.0)*x2598*x2599*x2603))+(((-1.0)*x2603*x2633)));
evalcond[5]=((-0.0067094674)+(((0.109556)*sj4*x2608))+(((0.0014)*x2604))+(((-1.0)*(px*px)))+(((-1.0)*cj4*x2619*x2620))+((x2618*x2634))+(((-0.00766892)*x2631))+(((0.02)*x2598*x2599))+(((-0.014577720936)*x2597))+(((0.109556)*x2606))+((x2609*x2636))+(((-0.00392644)*x2598*x2604))+((x2607*x2608*x2627))+(((-0.00392644)*x2623))+(((0.480716)*x2598*x2606))+(((-1.0)*x2609*x2634))+((x2605*x2608*x2626))+(((-0.056092)*x2599))+(((-0.14)*x2599*x2623))+(((-0.14)*x2610*x2611))+(((-0.14)*x2610*x2613))+((x2604*x2626*x2628))+((x2597*x2601*x2608))+(((-1.0)*x2601*x2635))+((x2608*x2614))+((x2604*x2615*x2634))+(((-1.0)*(pz*pz)))+(((-1.0)*sj4*x2604*x2608*x2626))+((pz*x2605*x2627))+(((-1.0)*x2607*x2619*x2627))+(((-1.0)*x2605*x2619*x2626))+((cj4*x2608*x2620))+(((-1.0)*x2604*x2606*x2626))+(((-1.0)*x2599*x2620))+(((0.02)*x2597*x2606))+(((-1.0)*(py*py)))+(((-1.0)*x2599*x2604*x2627))+(((-0.03365012)*cj7))+(((-0.109556)*x2628))+(((-1.0)*x2618*x2636))+(((0.00766892)*x2597*x2604))+(((-1.0)*x2614*x2619))+(((-1.0)*x2604*x2615*x2636))+(((-0.025771741048)*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x277=(sj5*sj6);
IkReal x278=(cj3*sj6);
IkReal x279=(cj6*sj3);
IkReal x280=(cj6*sj5);
IkReal x281=((1.0)*sj4);
IkReal x282=(cj3*cj6);
IkReal x283=(cj7*sj8);
IkReal x284=((1.0)*sj3);
IkReal x285=(cj5*cj6);
IkReal x286=(cj5*sj6);
IkReal x287=((1.0)*sj7);
IkReal x288=((-1.0)*sj5);
IkReal x289=((-1.0)*sj3);
IkReal x290=((-1.0)*sj4);
IkReal x291=((((-1.0)*sj8*x287))+((cj7*cj8)));
IkReal x292=(((cj8*sj7))+x283);
IkReal x293=(sj5*x291);
IkReal x294=(sj6*x291);
IkReal x295=(cj5*x291);
IkReal x296=(x279*x291);
IkReal x297=(x286*x291);
IkReal x298=(x282*x291);
IkReal x299=((((-1.0)*x280*x281))+((cj4*x285)));
IkReal x300=(((cj4*x280))+((sj4*x285)));
IkReal x301=((((-1.0)*cj8*x287))+(((-1.0)*x283)));
IkReal x302=(cj3*x299);
IkReal x303=(cj6*x301);
IkReal x304=(x282*x301);
IkReal x305=(((sj6*x289))+x302);
IkReal x306=(x297+(((-1.0)*sj5*x292)));
IkReal x307=(((x277*x291))+((cj5*x292)));
IkReal x308=((((-1.0)*x284*x299))+(((-1.0)*x278)));
IkReal x309=(cj4*x307);
IkReal x310=(x297+((x288*x292)));
IkReal x311=(x295+((x277*x301)));
IkReal x312=(((x286*x301))+((x288*x291)));
IkReal x313=(x309+((sj4*x306)));
IkReal x314=(((x290*x307))+((cj4*x306)));
IkReal x315=(((cj4*x310))+(((-1.0)*x281*x307)));
IkReal x316=(((cj4*x311))+((sj4*x312)));
IkReal x317=(((cj4*x312))+((x290*x311)));
IkReal x318=(x296+((cj3*x314)));
IkReal x319=(((x289*x314))+x298);
IkReal x320=(((x279*x301))+((cj3*x317)));
IkReal x321=((((-1.0)*x284*x317))+x304);
new_r00=(((r20*x313))+((r00*x319))+((r10*x318)));
new_r01=(((r11*x318))+((r01*x319))+((r21*x313)));
new_r02=(((r22*((((sj4*x310))+x309))))+((r02*(((((-1.0)*x284*x315))+x298))))+((r12*((x296+((cj3*x315)))))));
new_r10=(((r00*((((x289*x299))+(((-1.0)*x278))))))+((r10*(((((-1.0)*sj6*x284))+x302))))+((r20*x300)));
new_r11=(((r11*x305))+((r21*x300))+((r01*x308)));
new_r12=(((r22*x300))+((r02*x308))+((r12*x305)));
new_r20=(((r00*x321))+((r20*x316))+((r10*x320)));
new_r21=(((r01*((((x289*x317))+x304))))+((r11*x320))+((r21*x316)));
new_r22=(((r02*x321))+((r12*x320))+((r22*x316)));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
cj10array[0]=new_r22;
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj10;
j9eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j9eval[2]=IKsign(sj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=new_r02;
j9eval[1]=sj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j11mul = 1;
j11=0;
j9mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].fmul = j11mul;
vinfos[11].freeind = 0;
vinfos[11].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 11;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j11mul = 1;
j11=0;
j9mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].fmul = j11mul;
vinfos[11].freeind = 0;
vinfos[11].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 11;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x322=new_r22*new_r22;
IkReal x323=((16.0)*new_r10);
IkReal x324=((16.0)*new_r01);
IkReal x325=((16.0)*new_r00);
IkReal x326=(new_r11*new_r22);
IkReal x327=((8.0)*new_r00);
IkReal x328=(x322*x323);
IkReal x329=(x322*x324);
j9eval[0]=((IKabs((((x322*x327))+(((-8.0)*x326)))))+(IKabs(((((-1.0)*x329))+x324)))+(IKabs(((((-1.0)*x323))+x328)))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x326))+(((-1.0)*x322*x325)))))+(IKabs((((new_r22*x325))+(((-32.0)*new_r11*x322))+(((16.0)*new_r11)))))+(IKabs(((((-1.0)*x328))+x323)))+(IKabs((((new_r22*x327))+(((-8.0)*new_r11)))))+(IKabs(((((-1.0)*x324))+x329))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j9, j11]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j9evalpoly[1];
IkReal x330=new_r22*new_r22;
IkReal x331=((16.0)*new_r01);
IkReal x332=(new_r00*new_r22);
IkReal x333=(x330*x331);
IkReal x334=((((8.0)*x332))+(((-8.0)*new_r11)));
op[0]=x334;
op[1]=(x333+(((-1.0)*x331)));
op[2]=((((16.0)*x332))+(((16.0)*new_r11))+(((-32.0)*new_r11*x330)));
op[3]=(x331+(((-1.0)*x333)));
op[4]=x334;
polyroots4(op,zeror,numroots);
IkReal j9array[4], cj9array[4], sj9array[4], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[4]={true,true,true,true};
_nj9 = 4;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

IkReal x335=new_r22*new_r22;
IkReal x336=((16.0)*new_r10);
IkReal x337=(new_r11*new_r22);
IkReal x338=((8.0)*x337);
IkReal x339=(new_r00*x335);
IkReal x340=((8.0)*x339);
IkReal x341=(x335*x336);
j9evalpoly[0]=((((htj9*htj9)*(((((32.0)*new_r00))+(((-16.0)*x337))+(((-16.0)*x339))))))+(((htj9*htj9*htj9*htj9)*((x340+(((-1.0)*x338))))))+((htj9*((x341+(((-1.0)*x336))))))+x340+(((htj9*htj9*htj9)*((x336+(((-1.0)*x341))))))+(((-1.0)*x338)));
if( IKabs(j9evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j11eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x342=new_r22*new_r22;
IkReal x343=cj9*cj9;
IkReal x344=(new_r22*sj9);
IkReal x345=((((-1.0)*x342))+(((-1.0)*x343))+((x342*x343)));
j11eval[0]=x345;
j11eval[1]=((IKabs((((cj9*new_r01))+((new_r00*x344)))))+(IKabs(((((-1.0)*cj9*new_r00))+((new_r01*x344))))));
j11eval[2]=IKsign(x345);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=new_r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x346=IKsin(j11);
IkReal x347=IKcos(j11);
evalcond[0]=(x346+new_r11);
evalcond[1]=((-1.0)*x346);
evalcond[2]=((-1.0)*x347);
evalcond[3]=(new_r10+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x348=IKsin(j11);
IkReal x349=IKcos(j11);
evalcond[0]=((-1.0)*x348);
evalcond[1]=((-1.0)*x349);
evalcond[2]=(x348+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x350=new_r22*new_r22;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(((-1.0)+x350),-1);
if(!x351.valid){
continue;
}
if(((x350*(x351.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x350*(x351.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj9)))))+(IKabs(((((-1.0)*gconst46))+cj9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x352=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
sj9=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
cj9=gconst46;
if( (gconst46) < -1-IKFAST_SINCOS_THRESH || (gconst46) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=IKacos(gconst46);
CheckValue<IkReal> x353=IKPowWithIntegerCheck(((-1.0)+x352),-1);
if(!x353.valid){
continue;
}
if(((x352*(x353.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x352*(x353.value)));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(gconst46,-1);
if(!x354.valid){
continue;
}
if( IKabs(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x354.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))))+IKsqr((new_r00*(x354.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))), (new_r00*(x354.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x355=IKsin(j11);
IkReal x356=IKcos(j11);
IkReal x357=((1.0)*x356);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x358=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
evalcond[0]=((-1.0)*x355);
evalcond[1]=((-1.0)*x356);
evalcond[2]=(((gconst46*x355))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x357))+new_r00);
evalcond[4]=(((x355*x358))+new_r11);
evalcond[5]=((((-1.0)*x357*x358))+new_r10);
evalcond[6]=(((gconst46*new_r01))+x355+((new_r11*x358)));
evalcond[7]=(((gconst46*new_r00))+(((-1.0)*x357))+((new_r10*x358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x359 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x360.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x359.value)+(((1.5707963267949)*(x360.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x361=IKsin(j11);
IkReal x362=IKcos(j11);
IkReal x363=((1.0)*x362);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x364=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
evalcond[0]=((-1.0)*x361);
evalcond[1]=((-1.0)*x362);
evalcond[2]=(((gconst46*x361))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x363))+new_r00);
evalcond[4]=(((x361*x364))+new_r11);
evalcond[5]=((((-1.0)*x363*x364))+new_r10);
evalcond[6]=(((gconst46*new_r01))+x361+((new_r11*x364)));
evalcond[7]=(((gconst46*new_r00))+(((-1.0)*x363))+((new_r10*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x365=new_r22*new_r22;
CheckValue<IkReal> x366=IKPowWithIntegerCheck(((-1.0)+x365),-1);
if(!x366.valid){
continue;
}
if(((x365*(x366.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x365*(x366.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst46))+cj9)))+(IKabs(((1.0)+(IKsign(sj9)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x367=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
sj9=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))))));
cj9=gconst46;
if( (gconst46) < -1-IKFAST_SINCOS_THRESH || (gconst46) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=((-1.0)*(IKacos(gconst46)));
CheckValue<IkReal> x368=IKPowWithIntegerCheck(((-1.0)+x367),-1);
if(!x368.valid){
continue;
}
if(((x367*(x368.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x367*(x368.value)));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(gconst46,-1);
if(!x369.valid){
continue;
}
if( IKabs(((((-1.0)*gconst46*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst46*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))))+IKsqr((new_r00*(x369.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst46*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46))))))))), (new_r00*(x369.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x370=IKsin(j11);
IkReal x371=IKcos(j11);
IkReal x372=((1.0)*x371);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x373=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
IkReal x374=((1.0)*x373);
evalcond[0]=((-1.0)*x370);
evalcond[1]=((-1.0)*x371);
evalcond[2]=(((gconst46*x370))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x372))+new_r00);
evalcond[4]=(new_r10+((x371*x373)));
evalcond[5]=((((-1.0)*x370*x374))+new_r11);
evalcond[6]=(((gconst46*new_r01))+x370+(((-1.0)*new_r11*x374)));
evalcond[7]=(((gconst46*new_r00))+(((-1.0)*x372))+(((-1.0)*new_r10*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
CheckValue<IkReal> x376=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x376.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x375.value)+(((1.5707963267949)*(x376.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x377=IKsin(j11);
IkReal x378=IKcos(j11);
IkReal x379=((1.0)*x378);
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x380=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
IkReal x381=((1.0)*x380);
evalcond[0]=((-1.0)*x377);
evalcond[1]=((-1.0)*x378);
evalcond[2]=(((gconst46*x377))+new_r01);
evalcond[3]=((((-1.0)*gconst46*x379))+new_r00);
evalcond[4]=(((x378*x380))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x377*x381)));
evalcond[6]=(((gconst46*new_r01))+(((-1.0)*new_r11*x381))+x377);
evalcond[7]=((((-1.0)*new_r10*x381))+((gconst46*new_r00))+(((-1.0)*x379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x382=new_r22*new_r22;
CheckValue<IkReal> x383=IKPowWithIntegerCheck(((-1.0)+x382),-1);
if(!x383.valid){
continue;
}
if(((x382*(x383.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x382*(x383.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj9)))))+(IKabs(((((-1.0)*gconst47))+cj9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x384=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
sj9=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
cj9=gconst47;
if( (gconst47) < -1-IKFAST_SINCOS_THRESH || (gconst47) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=IKacos(gconst47);
CheckValue<IkReal> x385=IKPowWithIntegerCheck(((-1.0)+x384),-1);
if(!x385.valid){
continue;
}
if(((x384*(x385.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x384*(x385.value)))));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(gconst47,-1);
if(!x386.valid){
continue;
}
if( IKabs(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x386.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))))+IKsqr((new_r00*(x386.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))), (new_r00*(x386.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x387=IKsin(j11);
IkReal x388=IKcos(j11);
IkReal x389=((1.0)*x388);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x390=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
evalcond[0]=((-1.0)*x387);
evalcond[1]=((-1.0)*x388);
evalcond[2]=(((gconst47*x387))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst47*x389)));
evalcond[4]=(((x387*x390))+new_r11);
evalcond[5]=((((-1.0)*x389*x390))+new_r10);
evalcond[6]=(((new_r11*x390))+x387+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*x389))+((new_r10*x390))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x391 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x391.valid){
continue;
}
CheckValue<IkReal> x392=IKPowWithIntegerCheck(IKsign(gconst47),-1);
if(!x392.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x391.value)+(((1.5707963267949)*(x392.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x393=IKsin(j11);
IkReal x394=IKcos(j11);
IkReal x395=((1.0)*x394);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x396=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
evalcond[0]=((-1.0)*x393);
evalcond[1]=((-1.0)*x394);
evalcond[2]=(((gconst47*x393))+new_r01);
evalcond[3]=((((-1.0)*gconst47*x395))+new_r00);
evalcond[4]=(new_r11+((x393*x396)));
evalcond[5]=((((-1.0)*x395*x396))+new_r10);
evalcond[6]=(((new_r11*x396))+x393+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*x395))+((new_r10*x396))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x397=new_r22*new_r22;
CheckValue<IkReal> x398=IKPowWithIntegerCheck(((-1.0)+x397),-1);
if(!x398.valid){
continue;
}
if(((x397*(x398.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x397*(x398.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst47))+cj9)))+(IKabs(((1.0)+(IKsign(sj9)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x399=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
sj9=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))))));
cj9=gconst47;
if( (gconst47) < -1-IKFAST_SINCOS_THRESH || (gconst47) > 1+IKFAST_SINCOS_THRESH )
    continue;
j9=((-1.0)*(IKacos(gconst47)));
CheckValue<IkReal> x400=IKPowWithIntegerCheck(((-1.0)+x399),-1);
if(!x400.valid){
continue;
}
if(((x399*(x400.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x399*(x400.value)))));
j11eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
CheckValue<IkReal> x401=IKPowWithIntegerCheck(gconst47,-1);
if(!x401.valid){
continue;
}
if( IKabs(((((-1.0)*gconst47*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x401.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst47*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))))+IKsqr((new_r00*(x401.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*gconst47*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47))))))))), (new_r00*(x401.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x402=IKsin(j11);
IkReal x403=IKcos(j11);
IkReal x404=((1.0)*x403);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x405=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
IkReal x406=((1.0)*x405);
evalcond[0]=((-1.0)*x402);
evalcond[1]=((-1.0)*x403);
evalcond[2]=(((gconst47*x402))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst47*x404)));
evalcond[4]=(new_r10+((x403*x405)));
evalcond[5]=((((-1.0)*x402*x406))+new_r11);
evalcond[6]=(x402+(((-1.0)*new_r11*x406))+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x406))+(((-1.0)*x404))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
CheckValue<IkReal> x408=IKPowWithIntegerCheck(IKsign(gconst47),-1);
if(!x408.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x407.value)+(((1.5707963267949)*(x408.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x409=IKsin(j11);
IkReal x410=IKcos(j11);
IkReal x411=((1.0)*x410);
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x412=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
IkReal x413=((1.0)*x412);
evalcond[0]=((-1.0)*x409);
evalcond[1]=((-1.0)*x410);
evalcond[2]=(((gconst47*x409))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst47*x411)));
evalcond[4]=(((x410*x412))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x409*x413)));
evalcond[6]=(x409+(((-1.0)*new_r11*x413))+((gconst47*new_r01)));
evalcond[7]=((((-1.0)*x411))+(((-1.0)*new_r10*x413))+((gconst47*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x414=(new_r11*new_r22);
IkReal x415=((1.0)*cj9*new_r01);
CheckValue<IkReal> x416=IKPowWithIntegerCheck(cj9,-1);
if(!x416.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj9))+(((-1.0)*x415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x416.value)*(((((-1.0)*new_r22*sj9*x415))+new_r00+((x414*(cj9*cj9)))+(((-1.0)*x414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj9))+(((-1.0)*x415))))+IKsqr(((x416.value)*(((((-1.0)*new_r22*sj9*x415))+new_r00+((x414*(cj9*cj9)))+(((-1.0)*x414))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r11*sj9))+(((-1.0)*x415))), ((x416.value)*(((((-1.0)*new_r22*sj9*x415))+new_r00+((x414*(cj9*cj9)))+(((-1.0)*x414))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x417=IKsin(j11);
IkReal x418=IKcos(j11);
IkReal x419=(cj9*new_r10);
IkReal x420=((1.0)*sj9);
IkReal x421=(cj9*new_r11);
IkReal x422=((1.0)*x418);
IkReal x423=(sj9*x417);
IkReal x424=(cj9*x417);
IkReal x425=((1.0)*x417);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x417);
evalcond[1]=(((new_r10*sj9))+(((-1.0)*x422))+((cj9*new_r00)));
evalcond[2]=(x424+new_r01+((new_r22*sj9*x418)));
evalcond[3]=(((new_r22*x423))+(((-1.0)*cj9*x422))+new_r00);
evalcond[4]=((((-1.0)*cj9*new_r22*x422))+x423+new_r11);
evalcond[5]=((((-1.0)*new_r22*x425))+(((-1.0)*new_r00*x420))+x419);
evalcond[6]=((((-1.0)*new_r22*x422))+x421+(((-1.0)*new_r01*x420)));
evalcond[7]=((((-1.0)*new_r22*x424))+(((-1.0)*x418*x420))+new_r10);
evalcond[8]=((((-1.0)*x425))+((new_r22*x419))+(((-1.0)*new_r00*new_r22*x420)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x420))+((new_r22*x421))+(((-1.0)*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x426=((1.0)*new_r01);
CheckValue<IkReal> x427=IKPowWithIntegerCheck(new_r22,-1);
if(!x427.valid){
continue;
}
if( IKabs(((((-1.0)*cj9*x426))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x427.value)*(((((-1.0)*sj9*x426))+((cj9*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*x426))+(((-1.0)*new_r11*sj9))))+IKsqr(((x427.value)*(((((-1.0)*sj9*x426))+((cj9*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*x426))+(((-1.0)*new_r11*sj9))), ((x427.value)*(((((-1.0)*sj9*x426))+((cj9*new_r11))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x428=IKsin(j11);
IkReal x429=IKcos(j11);
IkReal x430=(cj9*new_r10);
IkReal x431=((1.0)*sj9);
IkReal x432=(cj9*new_r11);
IkReal x433=((1.0)*x429);
IkReal x434=(sj9*x428);
IkReal x435=(cj9*x428);
IkReal x436=((1.0)*x428);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x428);
evalcond[1]=((((-1.0)*x433))+((new_r10*sj9))+((cj9*new_r00)));
evalcond[2]=(((new_r22*sj9*x429))+x435+new_r01);
evalcond[3]=((((-1.0)*cj9*x433))+new_r00+((new_r22*x434)));
evalcond[4]=(x434+new_r11+(((-1.0)*cj9*new_r22*x433)));
evalcond[5]=((((-1.0)*new_r00*x431))+x430+(((-1.0)*new_r22*x436)));
evalcond[6]=((((-1.0)*new_r01*x431))+x432+(((-1.0)*new_r22*x433)));
evalcond[7]=((((-1.0)*x429*x431))+(((-1.0)*new_r22*x435))+new_r10);
evalcond[8]=((((-1.0)*x436))+(((-1.0)*new_r00*new_r22*x431))+((new_r22*x430)));
evalcond[9]=((((-1.0)*x433))+(((-1.0)*new_r01*new_r22*x431))+((new_r22*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x437=new_r22*new_r22;
IkReal x438=cj9*cj9;
IkReal x439=(new_r22*sj9);
CheckValue<IkReal> x440=IKPowWithIntegerCheck(IKsign(((((-1.0)*x438))+(((-1.0)*x437))+((x437*x438)))),-1);
if(!x440.valid){
continue;
}
CheckValue<IkReal> x441 = IKatan2WithCheck(IkReal((((new_r00*x439))+((cj9*new_r01)))),IkReal(((((-1.0)*cj9*new_r00))+((new_r01*x439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x441.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x440.value)))+(x441.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x442=IKsin(j11);
IkReal x443=IKcos(j11);
IkReal x444=(cj9*new_r10);
IkReal x445=((1.0)*sj9);
IkReal x446=(cj9*new_r11);
IkReal x447=((1.0)*x443);
IkReal x448=(sj9*x442);
IkReal x449=(cj9*x442);
IkReal x450=((1.0)*x442);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x442);
evalcond[1]=((((-1.0)*x447))+((new_r10*sj9))+((cj9*new_r00)));
evalcond[2]=(x449+new_r01+((new_r22*sj9*x443)));
evalcond[3]=(((new_r22*x448))+(((-1.0)*cj9*x447))+new_r00);
evalcond[4]=(x448+new_r11+(((-1.0)*cj9*new_r22*x447)));
evalcond[5]=((((-1.0)*new_r00*x445))+(((-1.0)*new_r22*x450))+x444);
evalcond[6]=((((-1.0)*new_r01*x445))+x446+(((-1.0)*new_r22*x447)));
evalcond[7]=((((-1.0)*x443*x445))+(((-1.0)*new_r22*x449))+new_r10);
evalcond[8]=(((new_r22*x444))+(((-1.0)*new_r00*new_r22*x445))+(((-1.0)*x450)));
evalcond[9]=(((new_r22*x446))+(((-1.0)*x447))+(((-1.0)*new_r01*new_r22*x445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x452=IKPowWithIntegerCheck(sj10,-1);
if(!x452.valid){
continue;
}
IkReal x451=x452.value;
CheckValue<IkReal> x453=IKPowWithIntegerCheck(new_r02,-1);
if(!x453.valid){
continue;
}
if( IKabs((x451*(x453.value)*(((1.0)+(((-1.0)*(cj10*cj10)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x451)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x451*(x453.value)*(((1.0)+(((-1.0)*(cj10*cj10)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x451))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x451*(x453.value)*(((1.0)+(((-1.0)*(cj10*cj10)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x451));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x454=IKsin(j9);
IkReal x455=IKcos(j9);
IkReal x456=(new_r12*x455);
IkReal x457=(sj10*x454);
IkReal x458=((1.0)*sj10*x455);
IkReal x459=((1.0)*new_r02*x454);
evalcond[0]=(((sj10*x455))+new_r12);
evalcond[1]=((((-1.0)*x457))+new_r02);
evalcond[2]=(((new_r12*x454))+((new_r02*x455)));
evalcond[3]=((((-1.0)*x459))+sj10+x456);
evalcond[4]=(((cj10*x456))+(((-1.0)*cj10*x459))+((new_r22*sj10)));
evalcond[5]=(((cj10*new_r20))+(((-1.0)*new_r10*x458))+((new_r00*x457)));
evalcond[6]=(((cj10*new_r21))+((new_r01*x457))+(((-1.0)*new_r11*x458)));
evalcond[7]=((-1.0)+((cj10*new_r22))+(((-1.0)*sj10*x456))+((new_r02*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=cj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x460=((1.0)*sj9);
if( IKabs(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj9*new_r00))+(((-1.0)*new_r01*x460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x460))))+IKsqr((((cj9*new_r00))+(((-1.0)*new_r01*x460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x460))), (((cj9*new_r00))+(((-1.0)*new_r01*x460))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x461=IKcos(j11);
IkReal x462=IKsin(j11);
IkReal x463=((1.0)*sj9);
IkReal x464=(sj9*x462);
IkReal x465=((1.0)*x461);
IkReal x466=((1.0)*x462);
IkReal x467=(cj9*x465);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x462);
evalcond[1]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x465)));
evalcond[2]=(((cj9*x462))+new_r01+((sj9*x461)));
evalcond[3]=((((-1.0)*x467))+x464+new_r00);
evalcond[4]=((((-1.0)*x467))+x464+new_r11);
evalcond[5]=(((cj9*new_r10))+(((-1.0)*x466))+(((-1.0)*new_r00*x463)));
evalcond[6]=(((cj9*new_r11))+(((-1.0)*new_r01*x463))+(((-1.0)*x465)));
evalcond[7]=((((-1.0)*cj9*x466))+(((-1.0)*x461*x463))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x468=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x468))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x468))+((new_r01*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x468))+(((-1.0)*new_r11*sj9))))+IKsqr(((((-1.0)*new_r11*x468))+((new_r01*sj9))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x468))+(((-1.0)*new_r11*sj9))), ((((-1.0)*new_r11*x468))+((new_r01*sj9))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x469=IKsin(j11);
IkReal x470=IKcos(j11);
IkReal x471=((1.0)*sj9);
IkReal x472=(cj9*x469);
IkReal x473=((1.0)*x470);
IkReal x474=(x470*x471);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x469);
evalcond[1]=((((-1.0)*new_r00*x471))+((cj9*new_r10))+x469);
evalcond[2]=(((cj9*new_r11))+(((-1.0)*new_r01*x471))+x470);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x473)));
evalcond[4]=(((cj9*x470))+new_r11+((sj9*x469)));
evalcond[5]=((((-1.0)*x474))+x472+new_r01);
evalcond[6]=((((-1.0)*x474))+x472+new_r10);
evalcond[7]=((((-1.0)*x469*x471))+(((-1.0)*cj9*x473))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x475=IKsin(j11);
IkReal x476=IKcos(j11);
IkReal x477=((1.0)*x476);
evalcond[0]=((((-1.0)*x475))+new_r20);
evalcond[1]=((((-1.0)*x477))+new_r21);
evalcond[2]=(((cj9*x475))+new_r01);
evalcond[3]=(((sj9*x475))+new_r11);
evalcond[4]=((((-1.0)*cj9*x477))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*sj9*x477)));
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x475);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x478=IKsin(j11);
IkReal x479=IKcos(j11);
IkReal x480=((1.0)*x479);
evalcond[0]=(x478+new_r20);
evalcond[1]=(x479+new_r21);
evalcond[2]=(((cj9*x478))+new_r01);
evalcond[3]=(((sj9*x478))+new_r11);
evalcond[4]=((((-1.0)*cj9*x480))+new_r00);
evalcond[5]=((((-1.0)*sj9*x480))+new_r10);
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x478);
evalcond[7]=(((new_r10*sj9))+(((-1.0)*x480))+((cj9*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x481=IKsin(j11);
IkReal x482=IKcos(j11);
IkReal x483=((1.0)*x482);
IkReal x484=((1.0)*x481);
evalcond[0]=(x481+new_r01);
evalcond[1]=(((new_r12*x481))+new_r20);
evalcond[2]=(((new_r12*x482))+new_r21);
evalcond[3]=((((-1.0)*x483))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj10*x483)));
evalcond[5]=(new_r10+(((-1.0)*cj10*x484)));
evalcond[6]=(((cj10*new_r10))+(((-1.0)*x484))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r11))+(((-1.0)*x483))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x485=IKsin(j11);
IkReal x486=IKcos(j11);
IkReal x487=((1.0)*cj10);
IkReal x488=((1.0)*x486);
IkReal x489=((1.0)*x485);
evalcond[0]=(x485+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+((cj10*x486)));
evalcond[2]=(new_r20+(((-1.0)*new_r12*x489)));
evalcond[3]=(new_r21+(((-1.0)*new_r12*x488)));
evalcond[4]=((((-1.0)*x488))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x485*x487)));
evalcond[6]=((((-1.0)*new_r10*x487))+(((-1.0)*x489))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r11*x487))+(((-1.0)*x488))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x490=IKcos(j11);
IkReal x491=IKsin(j11);
IkReal x492=((1.0)*cj10);
IkReal x493=((1.0)*x490);
IkReal x494=((1.0)*x491);
evalcond[0]=(x491+new_r11);
evalcond[1]=((((-1.0)*x493))+new_r10);
evalcond[2]=(new_r01+((cj10*x490)));
evalcond[3]=(new_r00+((cj10*x491)));
evalcond[4]=((((-1.0)*new_r02*x494))+new_r20);
evalcond[5]=((((-1.0)*new_r02*x493))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x492))+(((-1.0)*x494))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*x493))+(((-1.0)*new_r01*x492))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=IKsign(new_r02);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x495=IKsin(j11);
IkReal x496=((1.0)*(IKcos(j11)));
evalcond[0]=((((-1.0)*x495))+new_r20);
evalcond[1]=((((-1.0)*x496))+new_r21);
evalcond[2]=(x495+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x496))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x497=IKsin(j11);
IkReal x498=IKcos(j11);
evalcond[0]=(x497+new_r20);
evalcond[1]=(x498+new_r21);
evalcond[2]=(x497+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x498))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x499=IKsin(j11);
IkReal x500=IKcos(j11);
IkReal x501=((1.0)*x500);
IkReal x502=((1.0)*x499);
evalcond[0]=(x499+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*cj10*x501))+new_r01);
evalcond[2]=((((-1.0)*cj10*x502))+new_r00);
evalcond[3]=((((-1.0)*x501))+(((-1.0)*new_r10)));
evalcond[4]=(((cj10*new_r00))+(((-1.0)*x502)));
evalcond[5]=(((cj10*new_r01))+(((-1.0)*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x503=IKcos(j11);
IkReal x504=IKsin(j11);
IkReal x505=((-1.0)*x504);
IkReal x506=((-1.0)*x503);
evalcond[0]=x505;
evalcond[1]=x506;
evalcond[2]=(new_r22*x506);
evalcond[3]=(new_r22*x505);
evalcond[4]=(x504+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x507=IKPowWithIntegerCheck(new_r02,-1);
if(!x507.valid){
continue;
}
CheckValue<IkReal> x508=IKPowWithIntegerCheck(cj10,-1);
if(!x508.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x507.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x508.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x507.value)))+IKsqr((new_r01*(x508.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20*(x507.value)), (new_r01*(x508.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x509=IKsin(j11);
IkReal x510=IKcos(j11);
IkReal x511=((1.0)*x510);
IkReal x512=((1.0)*x509);
evalcond[0]=(((new_r02*x509))+new_r20);
evalcond[1]=(((new_r02*x510))+new_r21);
evalcond[2]=(x509+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x511))+new_r01);
evalcond[4]=((((-1.0)*cj10*x512))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x511)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x512))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+((new_r21*sj10))+(((-1.0)*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x513=IKPowWithIntegerCheck(new_r02,-1);
if(!x513.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x513.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x513.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x513.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x514=IKsin(j11);
IkReal x515=IKcos(j11);
IkReal x516=((1.0)*x515);
IkReal x517=((1.0)*x514);
evalcond[0]=(((new_r02*x514))+new_r20);
evalcond[1]=(((new_r02*x515))+new_r21);
evalcond[2]=(x514+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x516))+new_r01);
evalcond[4]=((((-1.0)*cj10*x517))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x516)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x517))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+((new_r21*sj10))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x518=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x519.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x518.value)))+(x519.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x520=IKsin(j11);
IkReal x521=IKcos(j11);
IkReal x522=((1.0)*x521);
IkReal x523=((1.0)*x520);
evalcond[0]=(((new_r02*x520))+new_r20);
evalcond[1]=(((new_r02*x521))+new_r21);
evalcond[2]=(x520+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x522))+new_r01);
evalcond[4]=((((-1.0)*cj10*x523))+new_r00);
evalcond[5]=((((-1.0)*x522))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x523))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x522))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=1.0;
if( IKabs(j11eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j11]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j11array[2], cj11array[2], sj11array[2], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[2]={true,true};
_nj11 = 2;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x525=IKPowWithIntegerCheck(sj10,-1);
if(!x525.valid){
continue;
}
IkReal x524=x525.value;
CheckValue<IkReal> x526=IKPowWithIntegerCheck(cj10,-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527=IKPowWithIntegerCheck(sj9,-1);
if(!x527.valid){
continue;
}
if( IKabs((new_r20*x524)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x524*(x526.value)*(x527.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x524))+IKsqr((x524*(x526.value)*(x527.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x524), (x524*(x526.value)*(x527.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x528=IKsin(j11);
IkReal x529=IKcos(j11);
IkReal x530=((1.0)*sj9);
IkReal x531=(cj10*sj9);
IkReal x532=(cj9*new_r11);
IkReal x533=(cj10*cj9);
IkReal x534=((1.0)*x529);
IkReal x535=((1.0)*x528);
evalcond[0]=((((-1.0)*sj10*x535))+new_r20);
evalcond[1]=((((-1.0)*sj10*x534))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x528);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x534)));
evalcond[4]=(((cj9*x528))+new_r01+((x529*x531)));
evalcond[5]=((((-1.0)*cj9*x534))+new_r00+((x528*x531)));
evalcond[6]=((((-1.0)*x533*x534))+((sj9*x528))+new_r11);
evalcond[7]=((((-1.0)*cj10*x535))+(((-1.0)*new_r00*x530))+((cj9*new_r10)));
evalcond[8]=((((-1.0)*cj10*x534))+(((-1.0)*new_r01*x530))+x532);
evalcond[9]=((((-1.0)*x533*x535))+(((-1.0)*x529*x530))+new_r10);
evalcond[10]=((((-1.0)*cj10*new_r00*x530))+(((-1.0)*x535))+((new_r10*x533))+((new_r20*sj10)));
evalcond[11]=(((cj10*x532))+(((-1.0)*x534))+((new_r21*sj10))+(((-1.0)*cj10*new_r01*x530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x537=IKPowWithIntegerCheck(sj10,-1);
if(!x537.valid){
continue;
}
IkReal x536=x537.value;
CheckValue<IkReal> x538=IKPowWithIntegerCheck(cj9,-1);
if(!x538.valid){
continue;
}
if( IKabs((new_r20*x536)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x536*(x538.value)*((((cj10*new_r20*sj9))+((new_r00*sj10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x536))+IKsqr((x536*(x538.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x536), (x536*(x538.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x539=IKsin(j11);
IkReal x540=IKcos(j11);
IkReal x541=((1.0)*sj9);
IkReal x542=(cj10*sj9);
IkReal x543=(cj9*new_r11);
IkReal x544=(cj10*cj9);
IkReal x545=((1.0)*x540);
IkReal x546=((1.0)*x539);
evalcond[0]=((((-1.0)*sj10*x546))+new_r20);
evalcond[1]=((((-1.0)*sj10*x545))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x539);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x545)));
evalcond[4]=(((x540*x542))+((cj9*x539))+new_r01);
evalcond[5]=(((x539*x542))+(((-1.0)*cj9*x545))+new_r00);
evalcond[6]=((((-1.0)*x544*x545))+((sj9*x539))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x541))+(((-1.0)*cj10*x546))+((cj9*new_r10)));
evalcond[8]=((((-1.0)*cj10*x545))+(((-1.0)*new_r01*x541))+x543);
evalcond[9]=((((-1.0)*x544*x546))+(((-1.0)*x540*x541))+new_r10);
evalcond[10]=(((new_r10*x544))+(((-1.0)*cj10*new_r00*x541))+(((-1.0)*x546))+((new_r20*sj10)));
evalcond[11]=(((cj10*x543))+(((-1.0)*x545))+(((-1.0)*cj10*new_r01*x541))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x547=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x547.value)))+(x548.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x549=IKsin(j11);
IkReal x550=IKcos(j11);
IkReal x551=((1.0)*sj9);
IkReal x552=(cj10*sj9);
IkReal x553=(cj9*new_r11);
IkReal x554=(cj10*cj9);
IkReal x555=((1.0)*x550);
IkReal x556=((1.0)*x549);
evalcond[0]=((((-1.0)*sj10*x556))+new_r20);
evalcond[1]=((((-1.0)*sj10*x555))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x549);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x555)));
evalcond[4]=(((cj9*x549))+((x550*x552))+new_r01);
evalcond[5]=((((-1.0)*cj9*x555))+((x549*x552))+new_r00);
evalcond[6]=((((-1.0)*x554*x555))+((sj9*x549))+new_r11);
evalcond[7]=((((-1.0)*cj10*x556))+((cj9*new_r10))+(((-1.0)*new_r00*x551)));
evalcond[8]=((((-1.0)*cj10*x555))+(((-1.0)*new_r01*x551))+x553);
evalcond[9]=((((-1.0)*x554*x556))+(((-1.0)*x550*x551))+new_r10);
evalcond[10]=((((-1.0)*cj10*new_r00*x551))+((new_r10*x554))+(((-1.0)*x556))+((new_r20*sj10)));
evalcond[11]=(((cj10*x553))+(((-1.0)*x555))+(((-1.0)*cj10*new_r01*x551))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x557=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x557.value)))+(x558.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x559=IKsin(j9);
IkReal x560=IKcos(j9);
IkReal x561=(new_r12*x560);
IkReal x562=(sj10*x559);
IkReal x563=((1.0)*sj10*x560);
IkReal x564=((1.0)*new_r02*x559);
evalcond[0]=(((sj10*x560))+new_r12);
evalcond[1]=((((-1.0)*x562))+new_r02);
evalcond[2]=(((new_r12*x559))+((new_r02*x560)));
evalcond[3]=(sj10+x561+(((-1.0)*x564)));
evalcond[4]=(((new_r22*sj10))+((cj10*x561))+(((-1.0)*cj10*x564)));
evalcond[5]=(((cj10*new_r20))+((new_r00*x562))+(((-1.0)*new_r10*x563)));
evalcond[6]=(((cj10*new_r21))+((new_r01*x562))+(((-1.0)*new_r11*x563)));
evalcond[7]=((-1.0)+(((-1.0)*sj10*x561))+((cj10*new_r22))+((new_r02*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=IKsign(sj10);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=sj10;
j11eval[1]=cj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
j11eval[0]=sj10;
j11eval[1]=cj10;
j11eval[2]=sj9;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x565=((1.0)*sj9);
if( IKabs(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj9*new_r00))+(((-1.0)*new_r01*x565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x565))))+IKsqr((((cj9*new_r00))+(((-1.0)*new_r01*x565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*cj9*new_r01))+(((-1.0)*new_r00*x565))), (((cj9*new_r00))+(((-1.0)*new_r01*x565))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x566=IKcos(j11);
IkReal x567=IKsin(j11);
IkReal x568=((1.0)*sj9);
IkReal x569=(sj9*x567);
IkReal x570=((1.0)*x566);
IkReal x571=((1.0)*x567);
IkReal x572=(cj9*x570);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x567);
evalcond[1]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x570)));
evalcond[2]=(new_r01+((cj9*x567))+((sj9*x566)));
evalcond[3]=((((-1.0)*x572))+x569+new_r00);
evalcond[4]=((((-1.0)*x572))+x569+new_r11);
evalcond[5]=((((-1.0)*new_r00*x568))+((cj9*new_r10))+(((-1.0)*x571)));
evalcond[6]=(((cj9*new_r11))+(((-1.0)*x570))+(((-1.0)*new_r01*x568)));
evalcond[7]=((((-1.0)*x566*x568))+(((-1.0)*cj9*x571))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x573=((1.0)*cj9);
if( IKabs(((((-1.0)*new_r01*x573))+(((-1.0)*new_r11*sj9)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj9))+(((-1.0)*new_r11*x573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x573))+(((-1.0)*new_r11*sj9))))+IKsqr((((new_r01*sj9))+(((-1.0)*new_r11*x573))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((((-1.0)*new_r01*x573))+(((-1.0)*new_r11*sj9))), (((new_r01*sj9))+(((-1.0)*new_r11*x573))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x574=IKsin(j11);
IkReal x575=IKcos(j11);
IkReal x576=((1.0)*sj9);
IkReal x577=(cj9*x574);
IkReal x578=((1.0)*x575);
IkReal x579=(x575*x576);
evalcond[0]=(((new_r11*sj9))+((cj9*new_r01))+x574);
evalcond[1]=(((cj9*new_r10))+x574+(((-1.0)*new_r00*x576)));
evalcond[2]=(((cj9*new_r11))+x575+(((-1.0)*new_r01*x576)));
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x578)));
evalcond[4]=(((sj9*x574))+((cj9*x575))+new_r11);
evalcond[5]=((((-1.0)*x579))+x577+new_r01);
evalcond[6]=((((-1.0)*x579))+x577+new_r10);
evalcond[7]=((((-1.0)*cj9*x578))+(((-1.0)*x574*x576))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x580=IKsin(j11);
IkReal x581=IKcos(j11);
IkReal x582=((1.0)*x581);
evalcond[0]=((((-1.0)*x580))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x582)));
evalcond[2]=(new_r01+((cj9*x580)));
evalcond[3]=(((sj9*x580))+new_r11);
evalcond[4]=((((-1.0)*cj9*x582))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*sj9*x582)));
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x580);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x583=IKsin(j11);
IkReal x584=IKcos(j11);
IkReal x585=((1.0)*x584);
evalcond[0]=(x583+new_r20);
evalcond[1]=(x584+new_r21);
evalcond[2]=(new_r01+((cj9*x583)));
evalcond[3]=(((sj9*x583))+new_r11);
evalcond[4]=((((-1.0)*cj9*x585))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*sj9*x585)));
evalcond[6]=(((new_r11*sj9))+((cj9*new_r01))+x583);
evalcond[7]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x586=IKsin(j11);
IkReal x587=IKcos(j11);
IkReal x588=((1.0)*x587);
IkReal x589=((1.0)*x586);
evalcond[0]=(x586+new_r01);
evalcond[1]=(((new_r12*x586))+new_r20);
evalcond[2]=(((new_r12*x587))+new_r21);
evalcond[3]=(new_r00+(((-1.0)*x588)));
evalcond[4]=((((-1.0)*cj10*x588))+new_r11);
evalcond[5]=((((-1.0)*cj10*x589))+new_r10);
evalcond[6]=(((cj10*new_r10))+(((-1.0)*x589))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r11))+((new_r21*sj10))+(((-1.0)*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x590=IKsin(j11);
IkReal x591=IKcos(j11);
IkReal x592=((1.0)*cj10);
IkReal x593=((1.0)*x591);
IkReal x594=((1.0)*x590);
evalcond[0]=(x590+(((-1.0)*new_r01)));
evalcond[1]=(((cj10*x591))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x594))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x593))+new_r21);
evalcond[4]=((((-1.0)*x593))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x590*x592))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r10*x592))+(((-1.0)*x594))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r11*x592))+(((-1.0)*x593))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x595=IKcos(j11);
IkReal x596=IKsin(j11);
IkReal x597=((1.0)*cj10);
IkReal x598=((1.0)*x595);
IkReal x599=((1.0)*x596);
evalcond[0]=(x596+new_r11);
evalcond[1]=((((-1.0)*x598))+new_r10);
evalcond[2]=(((cj10*x595))+new_r01);
evalcond[3]=(((cj10*x596))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x599))+new_r20);
evalcond[5]=((((-1.0)*new_r02*x598))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x597))+(((-1.0)*x599))+((new_r20*sj10)));
evalcond[7]=((((-1.0)*new_r01*x597))+(((-1.0)*x598))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=IKsign(new_r02);
j11eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=new_r02;
j11eval[1]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r20, new_r21);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x600=IKsin(j11);
IkReal x601=((1.0)*(IKcos(j11)));
evalcond[0]=((((-1.0)*x600))+new_r20);
evalcond[1]=((((-1.0)*x601))+new_r21);
evalcond[2]=(x600+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x602=IKsin(j11);
IkReal x603=IKcos(j11);
evalcond[0]=(x602+new_r20);
evalcond[1]=(x603+new_r21);
evalcond[2]=(x602+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x603))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x604=IKsin(j11);
IkReal x605=IKcos(j11);
IkReal x606=((1.0)*x605);
IkReal x607=((1.0)*x604);
evalcond[0]=(x604+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*cj10*x606))+new_r01);
evalcond[2]=((((-1.0)*cj10*x607))+new_r00);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x606)));
evalcond[4]=(((cj10*new_r00))+(((-1.0)*x607)));
evalcond[5]=(((cj10*new_r01))+(((-1.0)*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x608=IKcos(j11);
IkReal x609=IKsin(j11);
IkReal x610=((-1.0)*x609);
IkReal x611=((-1.0)*x608);
evalcond[0]=x610;
evalcond[1]=x611;
evalcond[2]=(new_r22*x611);
evalcond[3]=(new_r22*x610);
evalcond[4]=(x609+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x608))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x612=IKPowWithIntegerCheck(new_r02,-1);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613=IKPowWithIntegerCheck(cj10,-1);
if(!x613.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x612.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x613.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x612.value)))+IKsqr((new_r01*(x613.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*new_r20*(x612.value)), (new_r01*(x613.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x614=IKsin(j11);
IkReal x615=IKcos(j11);
IkReal x616=((1.0)*x615);
IkReal x617=((1.0)*x614);
evalcond[0]=(((new_r02*x614))+new_r20);
evalcond[1]=(((new_r02*x615))+new_r21);
evalcond[2]=(x614+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x616))+new_r01);
evalcond[4]=((((-1.0)*cj10*x617))+new_r00);
evalcond[5]=((((-1.0)*x616))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x617))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x616))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x618=IKPowWithIntegerCheck(new_r02,-1);
if(!x618.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x618.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x618.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x618.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x619=IKsin(j11);
IkReal x620=IKcos(j11);
IkReal x621=((1.0)*x620);
IkReal x622=((1.0)*x619);
evalcond[0]=(((new_r02*x619))+new_r20);
evalcond[1]=(((new_r02*x620))+new_r21);
evalcond[2]=(x619+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x621))+new_r01);
evalcond[4]=((((-1.0)*cj10*x622))+new_r00);
evalcond[5]=((((-1.0)*x621))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x622))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x621))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x623.value)))+(x624.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x625=IKsin(j11);
IkReal x626=IKcos(j11);
IkReal x627=((1.0)*x626);
IkReal x628=((1.0)*x625);
evalcond[0]=(((new_r02*x625))+new_r20);
evalcond[1]=(((new_r02*x626))+new_r21);
evalcond[2]=(x625+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*cj10*x627))+new_r01);
evalcond[4]=((((-1.0)*cj10*x628))+new_r00);
evalcond[5]=((((-1.0)*x627))+(((-1.0)*new_r10)));
evalcond[6]=(((cj10*new_r00))+(((-1.0)*x628))+((new_r20*sj10)));
evalcond[7]=(((cj10*new_r01))+(((-1.0)*x627))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j11eval[0]=1.0;
if( IKabs(j11eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j11]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j11array[2], cj11array[2], sj11array[2], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[2]={true,true};
_nj11 = 2;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x630=IKPowWithIntegerCheck(sj10,-1);
if(!x630.valid){
continue;
}
IkReal x629=x630.value;
CheckValue<IkReal> x631=IKPowWithIntegerCheck(cj10,-1);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632=IKPowWithIntegerCheck(sj9,-1);
if(!x632.valid){
continue;
}
if( IKabs((new_r20*x629)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x629*(x631.value)*(x632.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x629))+IKsqr((x629*(x631.value)*(x632.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x629), (x629*(x631.value)*(x632.value)*(((((-1.0)*new_r01*sj10))+(((-1.0)*cj9*new_r20))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x633=IKsin(j11);
IkReal x634=IKcos(j11);
IkReal x635=((1.0)*sj9);
IkReal x636=(cj10*sj9);
IkReal x637=(cj9*new_r11);
IkReal x638=(cj10*cj9);
IkReal x639=((1.0)*x634);
IkReal x640=((1.0)*x633);
evalcond[0]=((((-1.0)*sj10*x640))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj10*x639)));
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x633);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x639)));
evalcond[4]=(((x634*x636))+new_r01+((cj9*x633)));
evalcond[5]=(new_r00+((x633*x636))+(((-1.0)*cj9*x639)));
evalcond[6]=(((sj9*x633))+(((-1.0)*x638*x639))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x635))+((cj9*new_r10))+(((-1.0)*cj10*x640)));
evalcond[8]=((((-1.0)*new_r01*x635))+(((-1.0)*cj10*x639))+x637);
evalcond[9]=((((-1.0)*x634*x635))+new_r10+(((-1.0)*x638*x640)));
evalcond[10]=((((-1.0)*x640))+(((-1.0)*cj10*new_r00*x635))+((new_r10*x638))+((new_r20*sj10)));
evalcond[11]=(((cj10*x637))+(((-1.0)*x639))+(((-1.0)*cj10*new_r01*x635))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(sj10,-1);
if(!x642.valid){
continue;
}
IkReal x641=x642.value;
CheckValue<IkReal> x643=IKPowWithIntegerCheck(cj9,-1);
if(!x643.valid){
continue;
}
if( IKabs((new_r20*x641)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x641*(x643.value)*((((cj10*new_r20*sj9))+((new_r00*sj10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x641))+IKsqr((x641*(x643.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((new_r20*x641), (x641*(x643.value)*((((cj10*new_r20*sj9))+((new_r00*sj10))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x644=IKsin(j11);
IkReal x645=IKcos(j11);
IkReal x646=((1.0)*sj9);
IkReal x647=(cj10*sj9);
IkReal x648=(cj9*new_r11);
IkReal x649=(cj10*cj9);
IkReal x650=((1.0)*x645);
IkReal x651=((1.0)*x644);
evalcond[0]=((((-1.0)*sj10*x651))+new_r20);
evalcond[1]=((((-1.0)*sj10*x650))+new_r21);
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x644);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x650)));
evalcond[4]=(((cj9*x644))+((x645*x647))+new_r01);
evalcond[5]=(((x644*x647))+(((-1.0)*cj9*x650))+new_r00);
evalcond[6]=(((sj9*x644))+(((-1.0)*x649*x650))+new_r11);
evalcond[7]=(((cj9*new_r10))+(((-1.0)*cj10*x651))+(((-1.0)*new_r00*x646)));
evalcond[8]=((((-1.0)*cj10*x650))+(((-1.0)*new_r01*x646))+x648);
evalcond[9]=((((-1.0)*x649*x651))+(((-1.0)*x645*x646))+new_r10);
evalcond[10]=((((-1.0)*x651))+(((-1.0)*cj10*new_r00*x646))+((new_r10*x649))+((new_r20*sj10)));
evalcond[11]=((((-1.0)*x650))+((cj10*x648))+(((-1.0)*cj10*new_r01*x646))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x652=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x652.value)))+(x653.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[12];
IkReal x654=IKsin(j11);
IkReal x655=IKcos(j11);
IkReal x656=((1.0)*sj9);
IkReal x657=(cj10*sj9);
IkReal x658=(cj9*new_r11);
IkReal x659=(cj10*cj9);
IkReal x660=((1.0)*x655);
IkReal x661=((1.0)*x654);
evalcond[0]=(new_r20+(((-1.0)*sj10*x661)));
evalcond[1]=(new_r21+(((-1.0)*sj10*x660)));
evalcond[2]=(((new_r11*sj9))+((cj9*new_r01))+x654);
evalcond[3]=(((new_r10*sj9))+((cj9*new_r00))+(((-1.0)*x660)));
evalcond[4]=(((cj9*x654))+((x655*x657))+new_r01);
evalcond[5]=((((-1.0)*cj9*x660))+((x654*x657))+new_r00);
evalcond[6]=((((-1.0)*x659*x660))+new_r11+((sj9*x654)));
evalcond[7]=((((-1.0)*cj10*x661))+((cj9*new_r10))+(((-1.0)*new_r00*x656)));
evalcond[8]=((((-1.0)*cj10*x660))+(((-1.0)*new_r01*x656))+x658);
evalcond[9]=((((-1.0)*x659*x661))+(((-1.0)*x655*x656))+new_r10);
evalcond[10]=((((-1.0)*x661))+((new_r10*x659))+(((-1.0)*cj10*new_r00*x656))+((new_r20*sj10)));
evalcond[11]=((((-1.0)*x660))+((cj10*x658))+(((-1.0)*cj10*new_r01*x656))+((new_r21*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x662=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x662.valid){
continue;
}
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x662.value)))+(x663.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x664=((1.0)*sj10);
evalcond[0]=((((-1.0)*x664*(IKsin(j11))))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x664*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj10;
j9eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j9eval[2]=IKsign(sj10);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=new_r11;
j9eval[1]=sj10;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x665=((1.0)*sj11);
if( IKabs(((((-1.0)*cj11*new_r01))+(((-1.0)*new_r00*x665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x665))+((cj11*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*new_r01))+(((-1.0)*new_r00*x665))))+IKsqr(((((-1.0)*new_r01*x665))+((cj11*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj11*new_r01))+(((-1.0)*new_r00*x665))), ((((-1.0)*new_r01*x665))+((cj11*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x666=IKcos(j9);
IkReal x667=IKsin(j9);
IkReal x668=((1.0)*cj11);
IkReal x669=((1.0)*sj11);
IkReal x670=(sj11*x667);
IkReal x671=((1.0)*x667);
IkReal x672=(x666*x668);
evalcond[0]=(((new_r11*x667))+sj11+((new_r01*x666)));
evalcond[1]=(((cj11*x667))+((sj11*x666))+new_r01);
evalcond[2]=(x670+new_r00+(((-1.0)*x672)));
evalcond[3]=(x670+new_r11+(((-1.0)*x672)));
evalcond[4]=(((new_r10*x667))+(((-1.0)*x668))+((new_r00*x666)));
evalcond[5]=((((-1.0)*x666*x669))+(((-1.0)*x667*x668))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x671))+((new_r10*x666))+(((-1.0)*x669)));
evalcond[7]=((((-1.0)*new_r01*x671))+((new_r11*x666))+(((-1.0)*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x673=(((new_r11*sj11))+((cj11*new_r01)));
j9eval[0]=x673;
j9eval[1]=IKsign(x673);
j9eval[2]=((IKabs(((((-1.0)*cj11*sj11))+(((-1.0)*new_r01*new_r11)))))+(IKabs(((-1.0)+(new_r01*new_r01)+(cj11*cj11)))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x674=((1.0)*sj11);
IkReal x675=(((new_r10*new_r11))+((new_r00*new_r01)));
j9eval[0]=x675;
j9eval[1]=IKsign(x675);
j9eval[2]=((IKabs((((new_r01*sj11))+(((-1.0)*new_r10*x674)))))+(IKabs(((((-1.0)*new_r00*x674))+(((-1.0)*new_r11*x674))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x676=((1.0)*new_r11);
IkReal x677=((new_r01*new_r01)+(new_r11*new_r11));
j9eval[0]=x677;
j9eval[1]=IKsign(x677);
j9eval[2]=((IKabs(((((-1.0)*sj11*x676))+((cj11*new_r01)))))+(IKabs(((((-1.0)*new_r01*sj11))+(((-1.0)*cj11*x676))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
new_r01=0;
new_r11=0;
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
IkReal x678=x679.value;
j9array[0]=((-1.0)*x678);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x678)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j9))))+((new_r10*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x680=IKcos(j9);
IkReal x681=IKsin(j9);
IkReal x682=((1.0)*x681);
evalcond[0]=(x680+new_r11);
evalcond[1]=((((-1.0)*x682))+new_r01);
evalcond[2]=(new_r00+(((-1.0)*x680)));
evalcond[3]=((((-1.0)*x682))+new_r10);
evalcond[4]=(((new_r01*x680))+((new_r11*x681)));
evalcond[5]=((-1.0)+((new_r00*x680))+((new_r10*x681)));
evalcond[6]=(((new_r10*x680))+(((-1.0)*new_r00*x682)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x682))+((new_r11*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x683=IKsin(j9);
IkReal x684=IKcos(j9);
IkReal x685=((1.0)*x683);
evalcond[0]=(x683+new_r01);
evalcond[1]=(x684+new_r00);
evalcond[2]=(x683+new_r10);
evalcond[3]=(new_r11+(((-1.0)*x684)));
evalcond[4]=(((new_r01*x684))+((new_r11*x683)));
evalcond[5]=((1.0)+((new_r00*x684))+((new_r10*x683)));
evalcond[6]=(((new_r10*x684))+(((-1.0)*new_r00*x685)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x685))+((new_r11*x684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x687 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x687)==0){
continue;
}
IkReal x686=pow(x687,-0.5);
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
IkReal gconst40=((-1.0)*(x688.value));
IkReal gconst41=((-1.0)*new_r01*x686);
IkReal gconst42=(new_r11*x686);
CheckValue<IkReal> x689 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x689.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x689.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
IkReal x690=((-1.0)*(x692.value));
IkReal x691=x686;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x690;
IkReal gconst40=x690;
IkReal gconst41=((-1.0)*new_r01*x691);
IkReal gconst42=(new_r11*x691);
IkReal x693=new_r01*new_r01;
IkReal x694=(new_r00*new_r01);
IkReal x695=(((new_r10*new_r11))+x694);
IkReal x696=x686;
IkReal x697=(new_r01*x696);
j9eval[0]=x695;
j9eval[1]=IKsign(x695);
j9eval[2]=((IKabs(((((-1.0)*x693*x696))+((new_r10*x697)))))+(IKabs((((x694*x696))+((new_r11*x697))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
IkReal x698=((-1.0)*(x700.value));
IkReal x699=x686;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x698;
IkReal gconst40=x698;
IkReal gconst41=((-1.0)*new_r01*x699);
IkReal gconst42=(new_r11*x699);
IkReal x701=((new_r01*new_r01)+(new_r11*new_r11));
j9eval[0]=x701;
j9eval[1]=IKsign(x701);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x702=((-1.0)*(x704.value));
IkReal x703=x686;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x702;
IkReal gconst40=x702;
IkReal gconst41=((-1.0)*new_r01*x703);
IkReal gconst42=(new_r11*x703);
j9eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst42*gconst42)+(gconst41*gconst41));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[4], cj9array[4], sj9array[4];
bool j9valid[4]={false};
_nj9 = 4;
j9array[0]=0;
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=1.5707963267949;
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
j9array[2]=3.14159265358979;
sj9array[2]=IKsin(j9array[2]);
cj9array[2]=IKcos(j9array[2]);
j9array[3]=-1.5707963267949;
sj9array[3]=IKsin(j9array[3]);
cj9array[3]=IKcos(j9array[3]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
if( j9array[2] > IKPI )
{
    j9array[2]-=IK2PI;
}
else if( j9array[2] < -IKPI )
{    j9array[2]+=IK2PI;
}
j9valid[2] = true;
if( j9array[3] > IKPI )
{
    j9array[3]-=IK2PI;
}
else if( j9array[3] < -IKPI )
{    j9array[3]+=IK2PI;
}
j9valid[3] = true;
for(int ij9 = 0; ij9 < 4; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 4; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x706 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
IkReal x705=((-1.0)*(x706.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x705;
new_r11=0;
new_r00=0;
IkReal gconst40=x705;
IkReal x707 = new_r01*new_r01;
if(IKabs(x707)==0){
continue;
}
IkReal gconst41=((-1.0)*new_r01*(pow(x707,-0.5)));
IkReal gconst42=0;
j9eval[0]=new_r01;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x708=IKPowWithIntegerCheck(gconst41,-1);
if(!x708.valid){
continue;
}
cj9array[0]=((-1.0)*new_r01*(x708.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x709=IKsin(j9);
IkReal x710=IKcos(j9);
IkReal x711=((-1.0)*x709);
evalcond[0]=(new_r10*x709);
evalcond[1]=(gconst41*x711);
evalcond[2]=(new_r01*x711);
evalcond[3]=(((new_r01*x710))+gconst41);
evalcond[4]=(gconst41+((new_r10*x710)));
evalcond[5]=(((gconst41*x710))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(new_r01,-1);
if(!x712.valid){
continue;
}
cj9array[0]=((-1.0)*gconst41*(x712.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x713=IKsin(j9);
IkReal x714=IKcos(j9);
IkReal x715=(gconst41*x714);
IkReal x716=((-1.0)*x713);
evalcond[0]=(new_r10*x713);
evalcond[1]=(gconst41*x716);
evalcond[2]=(new_r01*x716);
evalcond[3]=(x715+new_r01);
evalcond[4]=(gconst41+((new_r10*x714)));
evalcond[5]=(x715+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst41;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
IkReal x717=((-1.0)*(x718.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x717;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x717;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j9eval[0]=-1.0;
j9eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j9eval[2]=-1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
IkReal x719=((-1.0)*(x720.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x719;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x719;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j9eval[0]=-1.0;
j9eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j9eval[2]=-1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
IkReal x721=((-1.0)*(x722.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x721;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x721;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j9eval[0]=1.0;
j9eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j9eval[2]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x723=((1.0)*gconst41);
CheckValue<IkReal> x724 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x723)))),IkReal(((((-1.0)*gconst42*new_r11))+(((-1.0)*new_r01*x723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x725.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x724.value)+(((1.5707963267949)*(x725.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x726=IKsin(j9);
IkReal x727=IKcos(j9);
IkReal x728=(gconst41*x727);
IkReal x729=((1.0)*x726);
IkReal x730=(gconst42*x727);
IkReal x731=(gconst42*x729);
evalcond[0]=(gconst41+((new_r01*x727))+((new_r11*x726)));
evalcond[1]=(((gconst41*x726))+x730+new_r11);
evalcond[2]=((((-1.0)*x731))+x728);
evalcond[3]=((((-1.0)*x731))+x728+new_r01);
evalcond[4]=((((-1.0)*gconst41*x729))+(((-1.0)*x730)));
evalcond[5]=(gconst42+((new_r11*x727))+(((-1.0)*new_r01*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x732=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst41*gconst41)))+(((-1.0)*(gconst42*gconst42))))),-1);
if(!x732.valid){
continue;
}
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal((gconst41*new_r11)),IkReal((gconst42*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x732.value)))+(x733.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x734=IKsin(j9);
IkReal x735=IKcos(j9);
IkReal x736=(gconst41*x735);
IkReal x737=((1.0)*x734);
IkReal x738=(gconst42*x735);
IkReal x739=(gconst42*x737);
evalcond[0]=(((new_r01*x735))+gconst41+((new_r11*x734)));
evalcond[1]=(((gconst41*x734))+x738+new_r11);
evalcond[2]=((((-1.0)*x739))+x736);
evalcond[3]=((((-1.0)*x739))+x736+new_r01);
evalcond[4]=((((-1.0)*gconst41*x737))+(((-1.0)*x738)));
evalcond[5]=(gconst42+(((-1.0)*new_r01*x737))+((new_r11*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal((gconst41*gconst42)),IkReal(((-1.0)*(gconst41*gconst41))),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741=IKPowWithIntegerCheck(IKsign((((gconst41*new_r01))+(((-1.0)*gconst42*new_r11)))),-1);
if(!x741.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x740.value)+(((1.5707963267949)*(x741.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x742=IKsin(j9);
IkReal x743=IKcos(j9);
IkReal x744=(gconst41*x743);
IkReal x745=((1.0)*x742);
IkReal x746=(gconst42*x743);
IkReal x747=(gconst42*x745);
evalcond[0]=(gconst41+((new_r01*x743))+((new_r11*x742)));
evalcond[1]=(x746+new_r11+((gconst41*x742)));
evalcond[2]=(x744+(((-1.0)*x747)));
evalcond[3]=(x744+new_r01+(((-1.0)*x747)));
evalcond[4]=((((-1.0)*gconst41*x745))+(((-1.0)*x746)));
evalcond[5]=((((-1.0)*new_r01*x745))+gconst42+((new_r11*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(gconst42,-1);
if(!x748.valid){
continue;
}
cj9array[0]=(new_r00*(x748.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x749=IKsin(j9);
IkReal x750=IKcos(j9);
IkReal x751=((-1.0)*x749);
evalcond[0]=(new_r11*x749);
evalcond[1]=(gconst42*x751);
evalcond[2]=(new_r00*x751);
evalcond[3]=(((gconst42*x750))+new_r11);
evalcond[4]=(gconst42+((new_r11*x750)));
evalcond[5]=((((-1.0)*gconst42))+((new_r00*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
IkReal x752=((-1.0)*(x753.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x752;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x752;
IkReal gconst41=0;
IkReal x754 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x754)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x754,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
IkReal x755=((-1.0)*(x756.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x755;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x755;
IkReal gconst41=0;
IkReal x757 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x757)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x757,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal x758=((-1.0)*(x759.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x758;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x758;
IkReal gconst41=0;
IkReal x760 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x760)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x760,-0.5)));
j9eval[0]=new_r10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(new_r10,-1);
if(!x761.valid){
continue;
}
CheckValue<IkReal> x762=IKPowWithIntegerCheck(gconst42,-1);
if(!x762.valid){
continue;
}
if( IKabs((gconst42*(x761.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x762.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst42*(x761.value)))+IKsqr(((-1.0)*new_r11*(x762.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((gconst42*(x761.value)), ((-1.0)*new_r11*(x762.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x763=IKsin(j9);
IkReal x764=IKcos(j9);
IkReal x765=((1.0)*gconst42);
IkReal x766=((-1.0)*gconst42);
evalcond[0]=(new_r11*x763);
evalcond[1]=(new_r10*x764);
evalcond[2]=(x763*x766);
evalcond[3]=(x764*x766);
evalcond[4]=(((gconst42*x764))+new_r11);
evalcond[5]=(((new_r11*x764))+gconst42);
evalcond[6]=((((-1.0)*x763*x765))+new_r10);
evalcond[7]=(((new_r10*x763))+(((-1.0)*x765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(gconst42,-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768=IKPowWithIntegerCheck(new_r11,-1);
if(!x768.valid){
continue;
}
if( IKabs((new_r10*(x767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst42*(x768.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x767.value)))+IKsqr(((-1.0)*gconst42*(x768.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x767.value)), ((-1.0)*gconst42*(x768.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x769=IKsin(j9);
IkReal x770=IKcos(j9);
IkReal x771=((1.0)*gconst42);
IkReal x772=((-1.0)*gconst42);
evalcond[0]=(new_r11*x769);
evalcond[1]=(new_r10*x770);
evalcond[2]=(x769*x772);
evalcond[3]=(x770*x772);
evalcond[4]=(((gconst42*x770))+new_r11);
evalcond[5]=(gconst42+((new_r11*x770)));
evalcond[6]=((((-1.0)*x769*x771))+new_r10);
evalcond[7]=(((new_r10*x769))+(((-1.0)*x771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x773=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x773.value)))+(x774.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x775=IKsin(j9);
IkReal x776=IKcos(j9);
IkReal x777=((1.0)*gconst42);
IkReal x778=((-1.0)*gconst42);
evalcond[0]=(new_r11*x775);
evalcond[1]=(new_r10*x776);
evalcond[2]=(x775*x778);
evalcond[3]=(x776*x778);
evalcond[4]=(((gconst42*x776))+new_r11);
evalcond[5]=(gconst42+((new_r11*x776)));
evalcond[6]=((((-1.0)*x775*x777))+new_r10);
evalcond[7]=(((new_r10*x775))+(((-1.0)*x777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x780 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x780.valid){
continue;
}
IkReal x779=((-1.0)*(x780.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x779;
new_r01=0;
IkReal gconst40=x779;
IkReal gconst41=0;
IkReal x781 = new_r11*new_r11;
if(IKabs(x781)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x781,-0.5)));
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x783 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x783.valid){
continue;
}
IkReal x782=((-1.0)*(x783.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x782;
new_r01=0;
IkReal gconst40=x782;
IkReal gconst41=0;
IkReal x784 = new_r11*new_r11;
if(IKabs(x784)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x784,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x786 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x786.valid){
continue;
}
IkReal x785=((-1.0)*(x786.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst41;
cj11=gconst42;
j11=x785;
new_r01=0;
IkReal gconst40=x785;
IkReal gconst41=0;
IkReal x787 = new_r11*new_r11;
if(IKabs(x787)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x787,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x788=IKPowWithIntegerCheck(gconst42,-1);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789=IKPowWithIntegerCheck(new_r11,-1);
if(!x789.valid){
continue;
}
if( IKabs((new_r10*(x788.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst42*(x789.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x788.value)))+IKsqr(((-1.0)*gconst42*(x789.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x788.value)), ((-1.0)*gconst42*(x789.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x790=IKsin(j9);
IkReal x791=IKcos(j9);
IkReal x792=((1.0)*gconst42);
evalcond[0]=(new_r11*x790);
evalcond[1]=((-1.0)*gconst42*x790);
evalcond[2]=(((gconst42*x791))+new_r11);
evalcond[3]=(((new_r11*x791))+gconst42);
evalcond[4]=((((-1.0)*x791*x792))+new_r00);
evalcond[5]=((((-1.0)*x790*x792))+new_r10);
evalcond[6]=(((new_r10*x791))+(((-1.0)*new_r00*x790)));
evalcond[7]=((((-1.0)*x792))+((new_r10*x790))+((new_r00*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x793=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x793.valid){
continue;
}
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x793.value)))+(x794.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x795=IKsin(j9);
IkReal x796=IKcos(j9);
IkReal x797=((1.0)*gconst42);
evalcond[0]=(new_r11*x795);
evalcond[1]=((-1.0)*gconst42*x795);
evalcond[2]=(((gconst42*x796))+new_r11);
evalcond[3]=(((new_r11*x796))+gconst42);
evalcond[4]=((((-1.0)*x796*x797))+new_r00);
evalcond[5]=((((-1.0)*x795*x797))+new_r10);
evalcond[6]=(((new_r10*x796))+(((-1.0)*new_r00*x795)));
evalcond[7]=((((-1.0)*x797))+((new_r10*x795))+((new_r00*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x798=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x798.valid){
continue;
}
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x798.value)))+(x799.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x800=IKsin(j9);
IkReal x801=IKcos(j9);
IkReal x802=((1.0)*gconst42);
evalcond[0]=(new_r11*x800);
evalcond[1]=((-1.0)*gconst42*x800);
evalcond[2]=(new_r11+((gconst42*x801)));
evalcond[3]=(gconst42+((new_r11*x801)));
evalcond[4]=(new_r00+(((-1.0)*x801*x802)));
evalcond[5]=((((-1.0)*x800*x802))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x800))+((new_r10*x801)));
evalcond[7]=(((new_r00*x801))+((new_r10*x800))+(((-1.0)*x802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x803=((1.0)*gconst41);
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x803)))),IkReal(((((-1.0)*new_r01*x803))+(((-1.0)*gconst42*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
CheckValue<IkReal> x805=IKPowWithIntegerCheck(IKsign(((gconst42*gconst42)+(gconst41*gconst41))),-1);
if(!x805.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x804.value)+(((1.5707963267949)*(x805.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x806=IKsin(j9);
IkReal x807=IKcos(j9);
IkReal x808=((1.0)*gconst42);
IkReal x809=(gconst41*x807);
IkReal x810=((1.0)*x806);
IkReal x811=(x806*x808);
evalcond[0]=(gconst41+((new_r11*x806))+((new_r01*x807)));
evalcond[1]=(new_r11+((gconst41*x806))+((gconst42*x807)));
evalcond[2]=((((-1.0)*x811))+new_r01+x809);
evalcond[3]=(gconst41+(((-1.0)*new_r00*x810))+((new_r10*x807)));
evalcond[4]=(gconst42+(((-1.0)*new_r01*x810))+((new_r11*x807)));
evalcond[5]=((((-1.0)*x811))+new_r10+x809);
evalcond[6]=(((new_r00*x807))+((new_r10*x806))+(((-1.0)*x808)));
evalcond[7]=((((-1.0)*x807*x808))+(((-1.0)*gconst41*x810))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x812=((1.0)*gconst41);
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x812)))),IkReal(((((-1.0)*gconst42*new_r11))+(((-1.0)*new_r01*x812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
CheckValue<IkReal> x814=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x814.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x813.value)+(((1.5707963267949)*(x814.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x815=IKsin(j9);
IkReal x816=IKcos(j9);
IkReal x817=((1.0)*gconst42);
IkReal x818=(gconst41*x816);
IkReal x819=((1.0)*x815);
IkReal x820=(x815*x817);
evalcond[0]=(((new_r11*x815))+((new_r01*x816))+gconst41);
evalcond[1]=(((gconst41*x815))+((gconst42*x816))+new_r11);
evalcond[2]=((((-1.0)*x820))+new_r01+x818);
evalcond[3]=(((new_r10*x816))+gconst41+(((-1.0)*new_r00*x819)));
evalcond[4]=(((new_r11*x816))+gconst42+(((-1.0)*new_r01*x819)));
evalcond[5]=((((-1.0)*x820))+new_r10+x818);
evalcond[6]=(((new_r00*x816))+((new_r10*x815))+(((-1.0)*x817)));
evalcond[7]=((((-1.0)*x816*x817))+(((-1.0)*gconst41*x819))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x821=((1.0)*gconst41);
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal((((gconst41*new_r01))+(((-1.0)*new_r10*x821)))),IkReal(((((-1.0)*new_r11*x821))+(((-1.0)*new_r00*x821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x823.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x822.value)+(((1.5707963267949)*(x823.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x824=IKsin(j9);
IkReal x825=IKcos(j9);
IkReal x826=((1.0)*gconst42);
IkReal x827=(gconst41*x825);
IkReal x828=((1.0)*x824);
IkReal x829=(x824*x826);
evalcond[0]=(((new_r01*x825))+gconst41+((new_r11*x824)));
evalcond[1]=(((gconst42*x825))+((gconst41*x824))+new_r11);
evalcond[2]=((((-1.0)*x829))+new_r01+x827);
evalcond[3]=(((new_r10*x825))+gconst41+(((-1.0)*new_r00*x828)));
evalcond[4]=(gconst42+((new_r11*x825))+(((-1.0)*new_r01*x828)));
evalcond[5]=((((-1.0)*x829))+new_r10+x827);
evalcond[6]=(((new_r10*x824))+(((-1.0)*x826))+((new_r00*x825)));
evalcond[7]=((((-1.0)*gconst41*x828))+new_r00+(((-1.0)*x825*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x831 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x831)==0){
continue;
}
IkReal x830=pow(x831,-0.5);
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+(((-1.0)*(x832.value))));
IkReal gconst44=((1.0)*new_r01*x830);
IkReal gconst45=((-1.0)*new_r11*x830);
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x833.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
CheckValue<IkReal> x836 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
IkReal x834=((1.0)*(x836.value));
IkReal x835=x830;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x834)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x834)));
IkReal gconst44=((1.0)*new_r01*x835);
IkReal gconst45=((-1.0)*new_r11*x835);
IkReal x837=new_r01*new_r01;
IkReal x838=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x839=x830;
IkReal x840=((1.0)*new_r01*x839);
j9eval[0]=x838;
j9eval[1]=((IKabs(((((-1.0)*new_r10*x840))+((x837*x839)))))+(IKabs(((((-1.0)*new_r11*x840))+(((-1.0)*new_r00*x840))))));
j9eval[2]=IKsign(x838);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
IkReal x841=((1.0)*(x843.value));
IkReal x842=x830;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x841)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x841)));
IkReal gconst44=((1.0)*new_r01*x842);
IkReal gconst45=((-1.0)*new_r11*x842);
IkReal x844=((new_r01*new_r01)+(new_r11*new_r11));
j9eval[0]=x844;
j9eval[1]=IKsign(x844);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
IkReal x845=((1.0)*(x847.value));
IkReal x846=x830;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x845)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x845)));
IkReal gconst44=((1.0)*new_r01*x846);
IkReal gconst45=((-1.0)*new_r11*x846);
j9eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst45*gconst45)+(gconst44*gconst44));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[4], cj9array[4], sj9array[4];
bool j9valid[4]={false};
_nj9 = 4;
j9array[0]=0;
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=1.5707963267949;
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
j9array[2]=3.14159265358979;
sj9array[2]=IKsin(j9array[2]);
cj9array[2]=IKcos(j9array[2]);
j9array[3]=-1.5707963267949;
sj9array[3]=IKsin(j9array[3]);
cj9array[3]=IKcos(j9array[3]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
if( j9array[2] > IKPI )
{
    j9array[2]-=IK2PI;
}
else if( j9array[2] < -IKPI )
{    j9array[2]+=IK2PI;
}
j9valid[2] = true;
if( j9array[3] > IKPI )
{
    j9array[3]-=IK2PI;
}
else if( j9array[3] < -IKPI )
{    j9array[3]+=IK2PI;
}
j9valid[3] = true;
for(int ij9 = 0; ij9 < 4; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 4; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=((1.0)*(x849.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x848)));
new_r11=0;
new_r00=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x848)));
IkReal x850 = new_r01*new_r01;
if(IKabs(x850)==0){
continue;
}
IkReal gconst44=((1.0)*new_r01*(pow(x850,-0.5)));
IkReal gconst45=0;
j9eval[0]=new_r01;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x851=IKPowWithIntegerCheck(gconst44,-1);
if(!x851.valid){
continue;
}
cj9array[0]=((-1.0)*new_r01*(x851.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x852=IKsin(j9);
IkReal x853=IKcos(j9);
IkReal x854=((-1.0)*x852);
evalcond[0]=(new_r10*x852);
evalcond[1]=(gconst44*x854);
evalcond[2]=(new_r01*x854);
evalcond[3]=(gconst44+((new_r01*x853)));
evalcond[4]=(gconst44+((new_r10*x853)));
evalcond[5]=(((gconst44*x853))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x855=IKPowWithIntegerCheck(new_r01,-1);
if(!x855.valid){
continue;
}
cj9array[0]=((-1.0)*gconst44*(x855.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x856=IKsin(j9);
IkReal x857=IKcos(j9);
IkReal x858=(gconst44*x857);
IkReal x859=((-1.0)*x856);
evalcond[0]=(new_r10*x856);
evalcond[1]=(gconst44*x859);
evalcond[2]=(new_r01*x859);
evalcond[3]=(new_r01+x858);
evalcond[4]=(gconst44+((new_r10*x857)));
evalcond[5]=(new_r10+x858);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst44;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[4];
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
IkReal x860=((1.0)*(x861.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x860)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x860)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j9eval[0]=1.0;
j9eval[1]=new_r01;
j9eval[2]=1.0;
j9eval[3]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
IkReal x862=((1.0)*(x863.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x862)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x862)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j9eval[0]=-1.0;
j9eval[1]=-1.0;
j9eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
CheckValue<IkReal> x865 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x865.valid){
continue;
}
IkReal x864=((1.0)*(x865.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x864)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x864)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j9eval[0]=1.0;
j9eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j9eval[2]=1.0;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x866=((1.0)*new_r11);
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x866))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst45*x866))+(((-1.0)*gconst44*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
CheckValue<IkReal> x868=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x868.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x867.value)+(((1.5707963267949)*(x868.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x869=IKcos(j9);
IkReal x870=IKsin(j9);
IkReal x871=(gconst44*x869);
IkReal x872=((1.0)*x870);
IkReal x873=(gconst45*x869);
IkReal x874=(gconst45*x872);
evalcond[0]=(((new_r01*x869))+gconst44+((new_r11*x870)));
evalcond[1]=(((gconst44*x870))+new_r11+x873);
evalcond[2]=(x871+(((-1.0)*x874)));
evalcond[3]=(new_r01+x871+(((-1.0)*x874)));
evalcond[4]=((((-1.0)*x873))+(((-1.0)*gconst44*x872)));
evalcond[5]=(gconst45+(((-1.0)*new_r01*x872))+((new_r11*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal((gconst44*new_r11)),IkReal((gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
CheckValue<IkReal> x876=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst44*gconst44))))),-1);
if(!x876.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x875.value)+(((1.5707963267949)*(x876.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x877=IKcos(j9);
IkReal x878=IKsin(j9);
IkReal x879=(gconst44*x877);
IkReal x880=((1.0)*x878);
IkReal x881=(gconst45*x877);
IkReal x882=(gconst45*x880);
evalcond[0]=(((new_r01*x877))+gconst44+((new_r11*x878)));
evalcond[1]=(((gconst44*x878))+new_r11+x881);
evalcond[2]=((((-1.0)*x882))+x879);
evalcond[3]=((((-1.0)*x882))+new_r01+x879);
evalcond[4]=((((-1.0)*x881))+(((-1.0)*gconst44*x880)));
evalcond[5]=(gconst45+(((-1.0)*new_r01*x880))+((new_r11*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal((gconst44*gconst45)),IkReal(((-1.0)*(gconst44*gconst44))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(IKsign((((gconst44*new_r01))+(((-1.0)*gconst45*new_r11)))),-1);
if(!x884.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x883.value)+(((1.5707963267949)*(x884.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x885=IKcos(j9);
IkReal x886=IKsin(j9);
IkReal x887=(gconst44*x885);
IkReal x888=((1.0)*x886);
IkReal x889=(gconst45*x885);
IkReal x890=(gconst45*x888);
evalcond[0]=(((new_r01*x885))+((new_r11*x886))+gconst44);
evalcond[1]=(((gconst44*x886))+new_r11+x889);
evalcond[2]=((((-1.0)*x890))+x887);
evalcond[3]=((((-1.0)*x890))+new_r01+x887);
evalcond[4]=((((-1.0)*x889))+(((-1.0)*gconst44*x888)));
evalcond[5]=(((new_r11*x885))+gconst45+(((-1.0)*new_r01*x888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x891=IKPowWithIntegerCheck(gconst45,-1);
if(!x891.valid){
continue;
}
cj9array[0]=(new_r00*(x891.value));
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x892=IKsin(j9);
IkReal x893=IKcos(j9);
IkReal x894=((-1.0)*x892);
evalcond[0]=(new_r11*x892);
evalcond[1]=(gconst45*x894);
evalcond[2]=(new_r00*x894);
evalcond[3]=(new_r11+((gconst45*x893)));
evalcond[4]=(((new_r11*x893))+gconst45);
evalcond[5]=((((-1.0)*gconst45))+((new_r00*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x896 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x896.valid){
continue;
}
IkReal x895=((1.0)*(x896.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x895)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x895)));
IkReal gconst44=0;
IkReal x897 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x897)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x897,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
IkReal x898=((1.0)*(x899.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x898)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x898)));
IkReal gconst44=0;
IkReal x900 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x900)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x900,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
IkReal x901=((1.0)*(x902.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x901)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x901)));
IkReal gconst44=0;
IkReal x903 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x903)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x903,-0.5)));
j9eval[0]=new_r10;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(new_r10,-1);
if(!x904.valid){
continue;
}
CheckValue<IkReal> x905=IKPowWithIntegerCheck(gconst45,-1);
if(!x905.valid){
continue;
}
if( IKabs((gconst45*(x904.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x905.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst45*(x904.value)))+IKsqr(((-1.0)*new_r11*(x905.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((gconst45*(x904.value)), ((-1.0)*new_r11*(x905.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x906=IKsin(j9);
IkReal x907=IKcos(j9);
IkReal x908=((1.0)*gconst45);
IkReal x909=((-1.0)*gconst45);
evalcond[0]=(new_r11*x906);
evalcond[1]=(new_r10*x907);
evalcond[2]=(x906*x909);
evalcond[3]=(x907*x909);
evalcond[4]=(new_r11+((gconst45*x907)));
evalcond[5]=(gconst45+((new_r11*x907)));
evalcond[6]=(new_r10+(((-1.0)*x906*x908)));
evalcond[7]=((((-1.0)*x908))+((new_r10*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(gconst45,-1);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911=IKPowWithIntegerCheck(new_r11,-1);
if(!x911.valid){
continue;
}
if( IKabs((new_r10*(x910.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x911.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x910.value)))+IKsqr(((-1.0)*gconst45*(x911.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x910.value)), ((-1.0)*gconst45*(x911.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x912=IKsin(j9);
IkReal x913=IKcos(j9);
IkReal x914=((1.0)*gconst45);
IkReal x915=((-1.0)*gconst45);
evalcond[0]=(new_r11*x912);
evalcond[1]=(new_r10*x913);
evalcond[2]=(x912*x915);
evalcond[3]=(x913*x915);
evalcond[4]=(((gconst45*x913))+new_r11);
evalcond[5]=(gconst45+((new_r11*x913)));
evalcond[6]=((((-1.0)*x912*x914))+new_r10);
evalcond[7]=((((-1.0)*x914))+((new_r10*x912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x916 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x917.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x916.value)+(((1.5707963267949)*(x917.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x918=IKsin(j9);
IkReal x919=IKcos(j9);
IkReal x920=((1.0)*gconst45);
IkReal x921=((-1.0)*gconst45);
evalcond[0]=(new_r11*x918);
evalcond[1]=(new_r10*x919);
evalcond[2]=(x918*x921);
evalcond[3]=(x919*x921);
evalcond[4]=(((gconst45*x919))+new_r11);
evalcond[5]=(gconst45+((new_r11*x919)));
evalcond[6]=((((-1.0)*x918*x920))+new_r10);
evalcond[7]=((((-1.0)*x920))+((new_r10*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
CheckValue<IkReal> x923 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x923.valid){
continue;
}
IkReal x922=((1.0)*(x923.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x922)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x922)));
IkReal gconst44=0;
IkReal x924 = new_r11*new_r11;
if(IKabs(x924)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x924,-0.5)));
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x926 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
IkReal x925=((1.0)*(x926.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x925)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x925)));
IkReal gconst44=0;
IkReal x927 = new_r11*new_r11;
if(IKabs(x927)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x927,-0.5)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
CheckValue<IkReal> x929 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x929.valid){
continue;
}
IkReal x928=((1.0)*(x929.value));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=gconst44;
cj11=gconst45;
j11=((3.14159265)+(((-1.0)*x928)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x928)));
IkReal gconst44=0;
IkReal x930 = new_r11*new_r11;
if(IKabs(x930)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x930,-0.5)));
j9eval[0]=new_r11;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(gconst45,-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932=IKPowWithIntegerCheck(new_r11,-1);
if(!x932.valid){
continue;
}
if( IKabs((new_r10*(x931.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x932.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x931.value)))+IKsqr(((-1.0)*gconst45*(x932.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r10*(x931.value)), ((-1.0)*gconst45*(x932.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x933=IKsin(j9);
IkReal x934=IKcos(j9);
IkReal x935=((1.0)*gconst45);
evalcond[0]=(new_r11*x933);
evalcond[1]=((-1.0)*gconst45*x933);
evalcond[2]=(((gconst45*x934))+new_r11);
evalcond[3]=(gconst45+((new_r11*x934)));
evalcond[4]=((((-1.0)*x934*x935))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*x933*x935)));
evalcond[6]=((((-1.0)*new_r00*x933))+((new_r10*x934)));
evalcond[7]=(((new_r00*x934))+((new_r10*x933))+(((-1.0)*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x936 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x936.valid){
continue;
}
CheckValue<IkReal> x937=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x937.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x936.value)+(((1.5707963267949)*(x937.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x938=IKsin(j9);
IkReal x939=IKcos(j9);
IkReal x940=((1.0)*gconst45);
evalcond[0]=(new_r11*x938);
evalcond[1]=((-1.0)*gconst45*x938);
evalcond[2]=(((gconst45*x939))+new_r11);
evalcond[3]=(gconst45+((new_r11*x939)));
evalcond[4]=((((-1.0)*x939*x940))+new_r00);
evalcond[5]=((((-1.0)*x938*x940))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x938))+((new_r10*x939)));
evalcond[7]=((((-1.0)*x940))+((new_r00*x939))+((new_r10*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x941=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x942.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x941.value)))+(x942.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x943=IKsin(j9);
IkReal x944=IKcos(j9);
IkReal x945=((1.0)*gconst45);
evalcond[0]=(new_r11*x943);
evalcond[1]=((-1.0)*gconst45*x943);
evalcond[2]=(((gconst45*x944))+new_r11);
evalcond[3]=(gconst45+((new_r11*x944)));
evalcond[4]=((((-1.0)*x944*x945))+new_r00);
evalcond[5]=((((-1.0)*x943*x945))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x943))+((new_r10*x944)));
evalcond[7]=((((-1.0)*x945))+((new_r00*x944))+((new_r10*x943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x946=((1.0)*new_r11);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((gconst45*gconst45)+(gconst44*gconst44))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x946))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x947.value)))+(x948.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x949=IKcos(j9);
IkReal x950=IKsin(j9);
IkReal x951=((1.0)*gconst45);
IkReal x952=(gconst44*x949);
IkReal x953=((1.0)*x950);
IkReal x954=(x950*x951);
evalcond[0]=(((new_r01*x949))+gconst44+((new_r11*x950)));
evalcond[1]=(((gconst45*x949))+((gconst44*x950))+new_r11);
evalcond[2]=(new_r01+(((-1.0)*x954))+x952);
evalcond[3]=(gconst44+(((-1.0)*new_r00*x953))+((new_r10*x949)));
evalcond[4]=(gconst45+(((-1.0)*new_r01*x953))+((new_r11*x949)));
evalcond[5]=(new_r10+(((-1.0)*x954))+x952);
evalcond[6]=(((new_r10*x950))+((new_r00*x949))+(((-1.0)*x951)));
evalcond[7]=((((-1.0)*gconst44*x953))+(((-1.0)*x949*x951))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x955=((1.0)*new_r11);
CheckValue<IkReal> x956 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x955))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x956.valid){
continue;
}
CheckValue<IkReal> x957=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x957.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x956.value)+(((1.5707963267949)*(x957.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x958=IKcos(j9);
IkReal x959=IKsin(j9);
IkReal x960=((1.0)*gconst45);
IkReal x961=(gconst44*x958);
IkReal x962=((1.0)*x959);
IkReal x963=(x959*x960);
evalcond[0]=(((new_r01*x958))+gconst44+((new_r11*x959)));
evalcond[1]=(((gconst44*x959))+((gconst45*x958))+new_r11);
evalcond[2]=(new_r01+x961+(((-1.0)*x963)));
evalcond[3]=(((new_r10*x958))+gconst44+(((-1.0)*new_r00*x962)));
evalcond[4]=(gconst45+(((-1.0)*new_r01*x962))+((new_r11*x958)));
evalcond[5]=(new_r10+x961+(((-1.0)*x963)));
evalcond[6]=(((new_r10*x959))+((new_r00*x958))+(((-1.0)*x960)));
evalcond[7]=((((-1.0)*gconst44*x962))+(((-1.0)*x958*x960))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x964=((1.0)*gconst44);
CheckValue<IkReal> x965 = IKatan2WithCheck(IkReal((((gconst44*new_r01))+(((-1.0)*new_r10*x964)))),IkReal(((((-1.0)*new_r00*x964))+(((-1.0)*new_r11*x964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x965.valid){
continue;
}
CheckValue<IkReal> x966=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x966.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x965.value)+(((1.5707963267949)*(x966.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x967=IKcos(j9);
IkReal x968=IKsin(j9);
IkReal x969=((1.0)*gconst45);
IkReal x970=(gconst44*x967);
IkReal x971=((1.0)*x968);
IkReal x972=(x968*x969);
evalcond[0]=(((new_r11*x968))+((new_r01*x967))+gconst44);
evalcond[1]=(((gconst44*x968))+((gconst45*x967))+new_r11);
evalcond[2]=(new_r01+x970+(((-1.0)*x972)));
evalcond[3]=(gconst44+(((-1.0)*new_r00*x971))+((new_r10*x967)));
evalcond[4]=(((new_r11*x967))+gconst45+(((-1.0)*new_r01*x971)));
evalcond[5]=(new_r10+x970+(((-1.0)*x972)));
evalcond[6]=(((new_r00*x967))+(((-1.0)*x969))+((new_r10*x968)));
evalcond[7]=((((-1.0)*x967*x969))+(((-1.0)*gconst44*x971))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x974 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x974.valid){
continue;
}
IkReal x973=x974.value;
j9array[0]=((-1.0)*x973);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x973)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j9))))+((new_r10*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x975=((1.0)*new_r11);
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal(((((-1.0)*sj11*x975))+((cj11*new_r01)))),IkReal(((((-1.0)*cj11*x975))+(((-1.0)*new_r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x977.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x976.value)+(((1.5707963267949)*(x977.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x978=IKsin(j9);
IkReal x979=IKcos(j9);
IkReal x980=(sj11*x979);
IkReal x981=((1.0)*x978);
IkReal x982=(cj11*x979);
IkReal x983=(cj11*x981);
evalcond[0]=(((new_r01*x979))+sj11+((new_r11*x978)));
evalcond[1]=(((sj11*x978))+new_r11+x982);
evalcond[2]=((((-1.0)*x983))+new_r01+x980);
evalcond[3]=((((-1.0)*new_r00*x981))+sj11+((new_r10*x979)));
evalcond[4]=((((-1.0)*new_r01*x981))+cj11+((new_r11*x979)));
evalcond[5]=((((-1.0)*x983))+new_r10+x980);
evalcond[6]=((((-1.0)*cj11))+((new_r10*x978))+((new_r00*x979)));
evalcond[7]=((((-1.0)*x982))+new_r00+(((-1.0)*sj11*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x984=((1.0)*sj11);
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x984))+((new_r01*sj11)))),IkReal(((((-1.0)*new_r00*x984))+(((-1.0)*new_r11*x984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x986.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x985.value)+(((1.5707963267949)*(x986.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x987=IKsin(j9);
IkReal x988=IKcos(j9);
IkReal x989=(sj11*x988);
IkReal x990=((1.0)*x987);
IkReal x991=(cj11*x988);
IkReal x992=(cj11*x990);
evalcond[0]=(sj11+((new_r11*x987))+((new_r01*x988)));
evalcond[1]=(((sj11*x987))+new_r11+x991);
evalcond[2]=((((-1.0)*x992))+new_r01+x989);
evalcond[3]=((((-1.0)*new_r00*x990))+sj11+((new_r10*x988)));
evalcond[4]=((((-1.0)*new_r01*x990))+cj11+((new_r11*x988)));
evalcond[5]=((((-1.0)*x992))+new_r10+x989);
evalcond[6]=(((new_r00*x988))+(((-1.0)*cj11))+((new_r10*x987)));
evalcond[7]=((((-1.0)*x991))+(((-1.0)*sj11*x990))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign((((new_r11*sj11))+((cj11*new_r01)))),-1);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj11*cj11))),IkReal(((((-1.0)*cj11*sj11))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x994.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x993.value)))+(x994.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x995=IKsin(j9);
IkReal x996=IKcos(j9);
IkReal x997=(sj11*x996);
IkReal x998=((1.0)*x995);
IkReal x999=(cj11*x996);
IkReal x1000=(cj11*x998);
evalcond[0]=(((new_r11*x995))+sj11+((new_r01*x996)));
evalcond[1]=(((sj11*x995))+new_r11+x999);
evalcond[2]=((((-1.0)*x1000))+new_r01+x997);
evalcond[3]=((((-1.0)*new_r00*x998))+((new_r10*x996))+sj11);
evalcond[4]=(((new_r11*x996))+(((-1.0)*new_r01*x998))+cj11);
evalcond[5]=((((-1.0)*x1000))+new_r10+x997);
evalcond[6]=(((new_r10*x995))+(((-1.0)*cj11))+((new_r00*x996)));
evalcond[7]=((((-1.0)*x999))+(((-1.0)*sj11*x998))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1002 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1002.valid){
continue;
}
IkReal x1001=x1002.value;
j9array[0]=((-1.0)*x1001);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1001)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x1003=IKcos(j9);
IkReal x1004=IKsin(j9);
IkReal x1005=((1.0)*x1004);
IkReal x1006=(new_r11*x1003);
evalcond[0]=(((new_r11*x1004))+((new_r01*x1003)));
evalcond[1]=(((new_r10*x1004))+((new_r00*x1003)));
evalcond[2]=(((new_r10*x1003))+(((-1.0)*new_r00*x1005)));
evalcond[3]=(x1006+(((-1.0)*new_r01*x1005)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1005))+((new_r22*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1008 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1008.valid){
continue;
}
IkReal x1007=x1008.value;
j9array[0]=((-1.0)*x1007);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1007)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x1009=IKcos(j9);
IkReal x1010=IKsin(j9);
IkReal x1011=(new_r22*x1009);
IkReal x1012=((1.0)*x1010);
evalcond[0]=(((new_r11*x1010))+((new_r01*x1009)));
evalcond[1]=(((new_r10*x1009))+(((-1.0)*new_r00*x1012)));
evalcond[2]=(((new_r11*x1009))+(((-1.0)*new_r01*x1012)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1012))+((new_r10*x1011)));
evalcond[4]=(((new_r11*x1011))+(((-1.0)*new_r01*new_r22*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1014 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1014.valid){
continue;
}
IkReal x1013=x1014.value;
j9array[0]=((-1.0)*x1013);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1013)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x1015=IKcos(j9);
IkReal x1016=IKsin(j9);
IkReal x1017=(new_r10*x1015);
IkReal x1018=((1.0)*x1016);
IkReal x1019=(new_r11*x1015);
evalcond[0]=(((new_r10*x1016))+((new_r00*x1015)));
evalcond[1]=(x1017+(((-1.0)*new_r00*x1018)));
evalcond[2]=(x1019+(((-1.0)*new_r01*x1018)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1018))+((new_r22*x1017)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1018))+((new_r22*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(sj10,-1);
if(!x1021.valid){
continue;
}
IkReal x1020=x1021.value;
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(new_r11,-1);
if(!x1022.valid){
continue;
}
if( IKabs((x1020*(x1022.value)*((((new_r01*new_r12))+(((-1.0)*sj10*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x1020)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1020*(x1022.value)*((((new_r01*new_r12))+(((-1.0)*sj10*sj11))))))+IKsqr(((-1.0)*new_r12*x1020))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x1020*(x1022.value)*((((new_r01*new_r12))+(((-1.0)*sj10*sj11))))), ((-1.0)*new_r12*x1020));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x1023=IKsin(j9);
IkReal x1024=IKcos(j9);
IkReal x1025=((1.0)*cj11);
IkReal x1026=((1.0)*sj10);
IkReal x1027=((1.0)*new_r02);
IkReal x1028=((1.0)*sj11);
IkReal x1029=(new_r11*x1024);
IkReal x1030=(sj10*x1023);
IkReal x1031=(cj10*x1023);
IkReal x1032=(new_r12*x1024);
IkReal x1033=((1.0)*x1023);
IkReal x1034=(new_r10*x1024);
IkReal x1035=((1.0)*cj10*x1024);
evalcond[0]=(new_r12+((sj10*x1024)));
evalcond[1]=((((-1.0)*x1023*x1026))+new_r02);
evalcond[2]=(((new_r12*x1023))+((new_r02*x1024)));
evalcond[3]=(((new_r11*x1023))+sj11+((new_r01*x1024)));
evalcond[4]=(x1032+(((-1.0)*x1023*x1027))+sj10);
evalcond[5]=(((sj11*x1024))+((cj11*x1031))+new_r01);
evalcond[6]=(((new_r10*x1023))+(((-1.0)*x1025))+((new_r00*x1024)));
evalcond[7]=(((sj11*x1031))+new_r00+(((-1.0)*x1024*x1025)));
evalcond[8]=(((sj11*x1023))+(((-1.0)*cj10*x1024*x1025))+new_r11);
evalcond[9]=((((-1.0)*x1023*x1025))+(((-1.0)*cj10*x1024*x1028))+new_r10);
evalcond[10]=(x1034+(((-1.0)*cj10*x1028))+(((-1.0)*new_r00*x1033)));
evalcond[11]=(x1029+(((-1.0)*cj10*x1025))+(((-1.0)*new_r01*x1033)));
evalcond[12]=((((-1.0)*x1027*x1031))+((cj10*x1032))+((new_r22*sj10)));
evalcond[13]=(((cj10*new_r20))+(((-1.0)*x1026*x1034))+((new_r00*x1030)));
evalcond[14]=(((cj10*new_r21))+(((-1.0)*x1026*x1029))+((new_r01*x1030)));
evalcond[15]=((-1.0)+((cj10*new_r22))+(((-1.0)*x1026*x1032))+((new_r02*x1030)));
evalcond[16]=(((cj10*x1034))+(((-1.0)*new_r00*x1031))+(((-1.0)*x1028))+((new_r20*sj10)));
evalcond[17]=(((cj10*x1029))+(((-1.0)*x1025))+((new_r21*sj10))+(((-1.0)*new_r01*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign(sj10),-1);
if(!x1036.valid){
continue;
}
CheckValue<IkReal> x1037 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1037.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1036.value)))+(x1037.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[18];
IkReal x1038=IKsin(j9);
IkReal x1039=IKcos(j9);
IkReal x1040=((1.0)*cj11);
IkReal x1041=((1.0)*sj10);
IkReal x1042=((1.0)*new_r02);
IkReal x1043=((1.0)*sj11);
IkReal x1044=(new_r11*x1039);
IkReal x1045=(sj10*x1038);
IkReal x1046=(cj10*x1038);
IkReal x1047=(new_r12*x1039);
IkReal x1048=((1.0)*x1038);
IkReal x1049=(new_r10*x1039);
IkReal x1050=((1.0)*cj10*x1039);
evalcond[0]=(new_r12+((sj10*x1039)));
evalcond[1]=((((-1.0)*x1038*x1041))+new_r02);
evalcond[2]=(((new_r12*x1038))+((new_r02*x1039)));
evalcond[3]=(((new_r11*x1038))+sj11+((new_r01*x1039)));
evalcond[4]=(x1047+(((-1.0)*x1038*x1042))+sj10);
evalcond[5]=(((cj11*x1046))+((sj11*x1039))+new_r01);
evalcond[6]=(((new_r10*x1038))+((new_r00*x1039))+(((-1.0)*x1040)));
evalcond[7]=((((-1.0)*x1039*x1040))+new_r00+((sj11*x1046)));
evalcond[8]=((((-1.0)*cj10*x1039*x1040))+((sj11*x1038))+new_r11);
evalcond[9]=((((-1.0)*cj10*x1039*x1043))+(((-1.0)*x1038*x1040))+new_r10);
evalcond[10]=((((-1.0)*cj10*x1043))+x1049+(((-1.0)*new_r00*x1048)));
evalcond[11]=((((-1.0)*cj10*x1040))+x1044+(((-1.0)*new_r01*x1048)));
evalcond[12]=(((new_r22*sj10))+(((-1.0)*x1042*x1046))+((cj10*x1047)));
evalcond[13]=(((cj10*new_r20))+((new_r00*x1045))+(((-1.0)*x1041*x1049)));
evalcond[14]=(((cj10*new_r21))+(((-1.0)*x1041*x1044))+((new_r01*x1045)));
evalcond[15]=((-1.0)+((cj10*new_r22))+((new_r02*x1045))+(((-1.0)*x1041*x1047)));
evalcond[16]=(((cj10*x1049))+(((-1.0)*new_r00*x1046))+((new_r20*sj10))+(((-1.0)*x1043)));
evalcond[17]=((((-1.0)*new_r01*x1046))+((new_r21*sj10))+((cj10*x1044))+(((-1.0)*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(12);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
vinfos[11].jointtype = 1;
vinfos[11].foffset = j11;
vinfos[11].indices[0] = _ij11[0];
vinfos[11].indices[1] = _ij11[1];
vinfos[11].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (83f3751f560cfb17afd058864a0f280a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

  int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
 double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = free_joint[i];
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
 
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){//seednoidはアームが伸びきった状態の第2関節が，+90°のため
	sol_joint[i][j] = M_PI/2+solvalues[j+1];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==5){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==6){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==7){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==8){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==9){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==10){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==11){
	//std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
	continue;
      }
      else
	sol_joint[i][j] = solvalues[j];

      //std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}

  
#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

