// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "SeedUpperInterface_DataType.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mDoubleSeq = CORBA::TypeCode::PR_alias_tc("IDL:SEED_UPPER/DoubleSeq:1.0", "DoubleSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_DoubleSeq = _0RL_tc_SEED__UPPER_mDoubleSeq;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_DoubleSeq = _0RL_tc_SEED__UPPER_mDoubleSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mJointPos = CORBA::TypeCode::PR_alias_tc("IDL:SEED_UPPER/JointPos:1.0", "JointPos", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_JointPos = _0RL_tc_SEED__UPPER_mJointPos;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_JointPos = _0RL_tc_SEED__UPPER_mJointPos;
#endif

static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mULONG = CORBA::TypeCode::PR_alias_tc("IDL:SEED_UPPER/ULONG:1.0", "ULONG", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_ULONG = _0RL_tc_SEED__UPPER_mULONG;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_ULONG = _0RL_tc_SEED__UPPER_mULONG;
#endif

static CORBA::PR_structMember _0RL_structmember_SEED__UPPER_mLimitValue[] = {
  {"upper", CORBA::TypeCode::PR_double_tc()},
  {"lower", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_SEED__UPPER_mLimitValue
#  undef _0RL_tc_SEED__UPPER_mLimitValue
#endif
static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mLimitValue = CORBA::TypeCode::PR_struct_tc("IDL:SEED_UPPER/LimitValue:1.0", "LimitValue", _0RL_structmember_SEED__UPPER_mLimitValue, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_LimitValue = _0RL_tc_SEED__UPPER_mLimitValue;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_LimitValue = _0RL_tc_SEED__UPPER_mLimitValue;
#endif


static CORBA::PR_structMember _0RL_structmember_SEED__UPPER_mRPY[] = {
  {"roll", CORBA::TypeCode::PR_double_tc()},
  {"pitch", CORBA::TypeCode::PR_double_tc()},
  {"yaw", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_SEED__UPPER_mRPY
#  undef _0RL_tc_SEED__UPPER_mRPY
#endif
static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mRPY = CORBA::TypeCode::PR_struct_tc("IDL:SEED_UPPER/RPY:1.0", "RPY", _0RL_structmember_SEED__UPPER_mRPY, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_RPY = _0RL_tc_SEED__UPPER_mRPY;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_RPY = _0RL_tc_SEED__UPPER_mRPY;
#endif


static CORBA::PR_structMember _0RL_structmember_SEED__UPPER_mLifter[] = {
  {"bottom", CORBA::TypeCode::PR_double_tc()},
  {"top", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_SEED__UPPER_mLifter
#  undef _0RL_tc_SEED__UPPER_mLifter
#endif
static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mLifter = CORBA::TypeCode::PR_struct_tc("IDL:SEED_UPPER/Lifter:1.0", "Lifter", _0RL_structmember_SEED__UPPER_mLifter, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_Lifter = _0RL_tc_SEED__UPPER_mLifter;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_Lifter = _0RL_tc_SEED__UPPER_mLifter;
#endif


static CORBA::PR_structMember _0RL_structmember_SEED__UPPER_mRETURN__ID[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"comment", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_SEED__UPPER_mRETURN__ID
#  undef _0RL_tc_SEED__UPPER_mRETURN__ID
#endif
static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mRETURN__ID = CORBA::TypeCode::PR_struct_tc("IDL:SEED_UPPER/RETURN_ID:1.0", "RETURN_ID", _0RL_structmember_SEED__UPPER_mRETURN__ID, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_RETURN_ID = _0RL_tc_SEED__UPPER_mRETURN__ID;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_RETURN_ID = _0RL_tc_SEED__UPPER_mRETURN__ID;
#endif


static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_SEED__UPPER_mTimedJointPos[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"pos", _0RL_tc_SEED__UPPER_mJointPos}
};

#ifdef _0RL_tc_SEED__UPPER_mTimedJointPos
#  undef _0RL_tc_SEED__UPPER_mTimedJointPos
#endif
static CORBA::TypeCode_ptr _0RL_tc_SEED__UPPER_mTimedJointPos = CORBA::TypeCode::PR_struct_tc("IDL:SEED_UPPER/TimedJointPos:1.0", "TimedJointPos", _0RL_structmember_SEED__UPPER_mTimedJointPos, 2, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace SEED_UPPER { 
  const ::CORBA::TypeCode_ptr _tc_TimedJointPos = _0RL_tc_SEED__UPPER_mTimedJointPos;
} 
#else
const ::CORBA::TypeCode_ptr SEED_UPPER::_tc_TimedJointPos = _0RL_tc_SEED__UPPER_mTimedJointPos;
#endif


static void _0RL_SEED__UPPER_mDoubleSeq_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::DoubleSeq* _p = (SEED_UPPER::DoubleSeq*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mDoubleSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::DoubleSeq* _p = new SEED_UPPER::DoubleSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mDoubleSeq_destructor_fn(void* _v)
{
  SEED_UPPER::DoubleSeq* _p = (SEED_UPPER::DoubleSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::DoubleSeq& _s)
{
  SEED_UPPER::DoubleSeq* _p = new SEED_UPPER::DoubleSeq(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mDoubleSeq,
               _0RL_SEED__UPPER_mDoubleSeq_marshal_fn,
               _0RL_SEED__UPPER_mDoubleSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::DoubleSeq* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mDoubleSeq,
               _0RL_SEED__UPPER_mDoubleSeq_marshal_fn,
               _0RL_SEED__UPPER_mDoubleSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::DoubleSeq*& _sp)
{
  return _a >>= (const SEED_UPPER::DoubleSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::DoubleSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mDoubleSeq,
                    _0RL_SEED__UPPER_mDoubleSeq_unmarshal_fn,
                    _0RL_SEED__UPPER_mDoubleSeq_marshal_fn,
                    _0RL_SEED__UPPER_mDoubleSeq_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::DoubleSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_SEED__UPPER_mJointPos_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::JointPos* _p = (SEED_UPPER::JointPos*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mJointPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::JointPos* _p = new SEED_UPPER::JointPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mJointPos_destructor_fn(void* _v)
{
  SEED_UPPER::JointPos* _p = (SEED_UPPER::JointPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::JointPos& _s)
{
  SEED_UPPER::JointPos* _p = new SEED_UPPER::JointPos(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mJointPos,
               _0RL_SEED__UPPER_mJointPos_marshal_fn,
               _0RL_SEED__UPPER_mJointPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::JointPos* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mJointPos,
               _0RL_SEED__UPPER_mJointPos_marshal_fn,
               _0RL_SEED__UPPER_mJointPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::JointPos*& _sp)
{
  return _a >>= (const SEED_UPPER::JointPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::JointPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mJointPos,
                    _0RL_SEED__UPPER_mJointPos_unmarshal_fn,
                    _0RL_SEED__UPPER_mJointPos_marshal_fn,
                    _0RL_SEED__UPPER_mJointPos_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::JointPos*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_SEED__UPPER_mLimitValue_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::LimitValue* _p = (SEED_UPPER::LimitValue*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mLimitValue_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::LimitValue* _p = new SEED_UPPER::LimitValue;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mLimitValue_destructor_fn(void* _v)
{
  SEED_UPPER::LimitValue* _p = (SEED_UPPER::LimitValue*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::LimitValue& _s)
{
  SEED_UPPER::LimitValue* _p = new SEED_UPPER::LimitValue(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mLimitValue,
               _0RL_SEED__UPPER_mLimitValue_marshal_fn,
               _0RL_SEED__UPPER_mLimitValue_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::LimitValue* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mLimitValue,
               _0RL_SEED__UPPER_mLimitValue_marshal_fn,
               _0RL_SEED__UPPER_mLimitValue_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::LimitValue*& _sp)
{
  return _a >>= (const SEED_UPPER::LimitValue*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::LimitValue*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mLimitValue,
                    _0RL_SEED__UPPER_mLimitValue_unmarshal_fn,
                    _0RL_SEED__UPPER_mLimitValue_marshal_fn,
                    _0RL_SEED__UPPER_mLimitValue_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::LimitValue*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_SEED__UPPER_mRPY_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::RPY* _p = (SEED_UPPER::RPY*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mRPY_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::RPY* _p = new SEED_UPPER::RPY;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mRPY_destructor_fn(void* _v)
{
  SEED_UPPER::RPY* _p = (SEED_UPPER::RPY*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::RPY& _s)
{
  SEED_UPPER::RPY* _p = new SEED_UPPER::RPY(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mRPY,
               _0RL_SEED__UPPER_mRPY_marshal_fn,
               _0RL_SEED__UPPER_mRPY_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::RPY* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mRPY,
               _0RL_SEED__UPPER_mRPY_marshal_fn,
               _0RL_SEED__UPPER_mRPY_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::RPY*& _sp)
{
  return _a >>= (const SEED_UPPER::RPY*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::RPY*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mRPY,
                    _0RL_SEED__UPPER_mRPY_unmarshal_fn,
                    _0RL_SEED__UPPER_mRPY_marshal_fn,
                    _0RL_SEED__UPPER_mRPY_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::RPY*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_SEED__UPPER_mLifter_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::Lifter* _p = (SEED_UPPER::Lifter*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mLifter_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::Lifter* _p = new SEED_UPPER::Lifter;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mLifter_destructor_fn(void* _v)
{
  SEED_UPPER::Lifter* _p = (SEED_UPPER::Lifter*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::Lifter& _s)
{
  SEED_UPPER::Lifter* _p = new SEED_UPPER::Lifter(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mLifter,
               _0RL_SEED__UPPER_mLifter_marshal_fn,
               _0RL_SEED__UPPER_mLifter_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::Lifter* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mLifter,
               _0RL_SEED__UPPER_mLifter_marshal_fn,
               _0RL_SEED__UPPER_mLifter_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::Lifter*& _sp)
{
  return _a >>= (const SEED_UPPER::Lifter*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::Lifter*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mLifter,
                    _0RL_SEED__UPPER_mLifter_unmarshal_fn,
                    _0RL_SEED__UPPER_mLifter_marshal_fn,
                    _0RL_SEED__UPPER_mLifter_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::Lifter*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_SEED__UPPER_mRETURN__ID_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::RETURN_ID* _p = (SEED_UPPER::RETURN_ID*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mRETURN__ID_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::RETURN_ID* _p = new SEED_UPPER::RETURN_ID;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mRETURN__ID_destructor_fn(void* _v)
{
  SEED_UPPER::RETURN_ID* _p = (SEED_UPPER::RETURN_ID*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::RETURN_ID& _s)
{
  SEED_UPPER::RETURN_ID* _p = new SEED_UPPER::RETURN_ID(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mRETURN__ID,
               _0RL_SEED__UPPER_mRETURN__ID_marshal_fn,
               _0RL_SEED__UPPER_mRETURN__ID_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::RETURN_ID* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mRETURN__ID,
               _0RL_SEED__UPPER_mRETURN__ID_marshal_fn,
               _0RL_SEED__UPPER_mRETURN__ID_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::RETURN_ID*& _sp)
{
  return _a >>= (const SEED_UPPER::RETURN_ID*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::RETURN_ID*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mRETURN__ID,
                    _0RL_SEED__UPPER_mRETURN__ID_unmarshal_fn,
                    _0RL_SEED__UPPER_mRETURN__ID_marshal_fn,
                    _0RL_SEED__UPPER_mRETURN__ID_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::RETURN_ID*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_SEED__UPPER_mTimedJointPos_marshal_fn(cdrStream& _s, void* _v)
{
  SEED_UPPER::TimedJointPos* _p = (SEED_UPPER::TimedJointPos*)_v;
  *_p >>= _s;
}
static void _0RL_SEED__UPPER_mTimedJointPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  SEED_UPPER::TimedJointPos* _p = new SEED_UPPER::TimedJointPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_SEED__UPPER_mTimedJointPos_destructor_fn(void* _v)
{
  SEED_UPPER::TimedJointPos* _p = (SEED_UPPER::TimedJointPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const SEED_UPPER::TimedJointPos& _s)
{
  SEED_UPPER::TimedJointPos* _p = new SEED_UPPER::TimedJointPos(_s);
  _a.PR_insert(_0RL_tc_SEED__UPPER_mTimedJointPos,
               _0RL_SEED__UPPER_mTimedJointPos_marshal_fn,
               _0RL_SEED__UPPER_mTimedJointPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, SEED_UPPER::TimedJointPos* _sp)
{
  _a.PR_insert(_0RL_tc_SEED__UPPER_mTimedJointPos,
               _0RL_SEED__UPPER_mTimedJointPos_marshal_fn,
               _0RL_SEED__UPPER_mTimedJointPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, SEED_UPPER::TimedJointPos*& _sp)
{
  return _a >>= (const SEED_UPPER::TimedJointPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const SEED_UPPER::TimedJointPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_SEED__UPPER_mTimedJointPos,
                    _0RL_SEED__UPPER_mTimedJointPos_unmarshal_fn,
                    _0RL_SEED__UPPER_mTimedJointPos_marshal_fn,
                    _0RL_SEED__UPPER_mTimedJointPos_destructor_fn,
                    _v)) {
    _sp = (const SEED_UPPER::TimedJointPos*)_v;
    return 1;
  }
  return 0;
}

