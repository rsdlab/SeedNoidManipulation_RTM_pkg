// -*-C++-*-
/*!
 * @file  ConversionInterfaceSVC_impl.h
 * @brief Service implementation header of ConversionInterface.idl
 *
 */

#include "BasicDataTypeSkel.h"
#include "ExtendedDataTypesSkel.h"

#include "ConversionInterfaceSkel.h"

#include "Conversion_Mat.h"

/*
#include <opencv2/core/core.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
*/
#include<opencv2/opencv.hpp>

#ifndef CONVERSIONINTERFACESVC_IMPL_H
#define CONVERSIONINTERFACESVC_IMPL_H
class Conversion_Mat;

/*!
 * @class ConversionMatrix_conversionInterfaceSVC_impl
 * Example class implementing IDL interface ConversionMatrix::conversionInterface
 */
class ConversionMatrix_conversionInterfaceSVC_impl
 : public virtual POA_ConversionMatrix::conversionInterface,
   public virtual PortableServer::RefCountServantBase
{
 private:
   // Make sure all instances are built on the heap by making the
   // destructor non-public
   //virtual ~ConversionMatrix_conversionInterfaceSVC_impl();
  Conversion_Mat* m_rtcPtr;
 public:
  /*!
   * @brief standard constructor
   */
   ConversionMatrix_conversionInterfaceSVC_impl();
  /*!
   * @brief destructor
   */
   virtual ~ConversionMatrix_conversionInterfaceSVC_impl();

   // attributes and operations
   ::CORBA::Long getConvertionMat(const ConversionMatrix::transformationMat& InMat, ConversionMatrix::transformationMat& OutMat);
  void ConversionIdlMat2cvMat(ConversionMatrix::transformationMat& ConversionIdl_Mat,cv::Mat& OpenCV_Mat);

  void cvMat2ConversionIdlMat(cv::Mat& OpenCV_Mat,ConversionMatrix::transformationMat& ConversionIdl_Mat);
  
  void setCompPtr(Conversion_Mat* ptr){m_rtcPtr=ptr;}
  cv::Mat CalibrationMat;
  
};



#endif // CONVERSIONINTERFACESVC_IMPL_H


