// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __MatrixInterface_hh__
#define __MatrixInterface_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include "ExtendedDataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE TransformationMatrix

_CORBA_MODULE_BEG

  _CORBA_MODULE_VARINT const ::CORBA::Long OK _init_in_decl_( = 0 );

  _CORBA_MODULE_VARINT const ::CORBA::Long NG _init_in_decl_( = -1 );

  struct rotationMat {
    typedef _CORBA_ConstrType_Fix_Var<rotationMat> _var_type;

    
    ::CORBA::Double R11;

    ::CORBA::Double R12;

    ::CORBA::Double R13;

    ::CORBA::Double R21;

    ::CORBA::Double R22;

    ::CORBA::Double R23;

    ::CORBA::Double R31;

    ::CORBA::Double R32;

    ::CORBA::Double R33;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef rotationMat::_var_type rotationMat_var;

  typedef rotationMat& rotationMat_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_rotationMat;

  struct transformationMat {
    typedef _CORBA_ConstrType_Fix_Var<transformationMat> _var_type;

    
    rotationMat rotation;

    RTC::Vector3D translates;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef transformationMat::_var_type transformationMat_var;

  typedef transformationMat& transformationMat_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_transformationMat;

#ifndef __TransformationMatrix_mtransformationInterface__
#define __TransformationMatrix_mtransformationInterface__

  class transformationInterface;
  class _objref_transformationInterface;
  class _impl_transformationInterface;
  
  typedef _objref_transformationInterface* transformationInterface_ptr;
  typedef transformationInterface_ptr transformationInterfaceRef;

  class transformationInterface_Helper {
  public:
    typedef transformationInterface_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_transformationInterface, transformationInterface_Helper> transformationInterface_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_transformationInterface,transformationInterface_Helper > transformationInterface_out;

#endif

  // interface transformationInterface
  class transformationInterface {
  public:
    // Declarations for this interface type.
    typedef transformationInterface_ptr _ptr_type;
    typedef transformationInterface_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_transformationInterface :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Long getMatrix(::TransformationMatrix::transformationMat& Matrix);

    inline _objref_transformationInterface()  { _PR_setobj(0); }  // nil
    _objref_transformationInterface(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_transformationInterface();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_transformationInterface(const _objref_transformationInterface&);
    _objref_transformationInterface& operator = (const _objref_transformationInterface&);
    // not implemented

    friend class transformationInterface;
  };

  class _pof_transformationInterface : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_transformationInterface() : _OMNI_NS(proxyObjectFactory)(transformationInterface::_PD_repoId) {}
    virtual ~_pof_transformationInterface();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_transformationInterface :
    public virtual omniServant
  {
  public:
    virtual ~_impl_transformationInterface();

    virtual ::CORBA::Long getMatrix(::TransformationMatrix::transformationMat& Matrix) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_transformationInterface;

_CORBA_MODULE_END



_CORBA_MODULE POA_TransformationMatrix
_CORBA_MODULE_BEG

  class transformationInterface :
    public virtual TransformationMatrix::_impl_transformationInterface,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~transformationInterface();

    inline ::TransformationMatrix::transformationInterface_ptr _this() {
      return (::TransformationMatrix::transformationInterface_ptr) _do_this(::TransformationMatrix::transformationInterface::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_TransformationMatrix
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const TransformationMatrix::rotationMat& _s);
extern void operator<<=(::CORBA::Any& _a, TransformationMatrix::rotationMat* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TransformationMatrix::rotationMat*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TransformationMatrix::rotationMat*& _sp);

extern void operator<<=(::CORBA::Any& _a, const TransformationMatrix::transformationMat& _s);
extern void operator<<=(::CORBA::Any& _a, TransformationMatrix::transformationMat* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TransformationMatrix::transformationMat*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const TransformationMatrix::transformationMat*& _sp);

void operator<<=(::CORBA::Any& _a, TransformationMatrix::transformationInterface_ptr _s);
void operator<<=(::CORBA::Any& _a, TransformationMatrix::transformationInterface_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, TransformationMatrix::transformationInterface_ptr& _s);



inline void
TransformationMatrix::transformationInterface::_marshalObjRef(::TransformationMatrix::transformationInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MatrixInterface
#endif

#endif  // __MatrixInterface_hh__

