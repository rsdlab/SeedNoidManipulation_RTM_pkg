// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "MatrixInterface.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_TransformationMatrix_mrotationMat[] = {
  {"R11", CORBA::TypeCode::PR_double_tc()},
  {"R12", CORBA::TypeCode::PR_double_tc()},
  {"R13", CORBA::TypeCode::PR_double_tc()},
  {"R21", CORBA::TypeCode::PR_double_tc()},
  {"R22", CORBA::TypeCode::PR_double_tc()},
  {"R23", CORBA::TypeCode::PR_double_tc()},
  {"R31", CORBA::TypeCode::PR_double_tc()},
  {"R32", CORBA::TypeCode::PR_double_tc()},
  {"R33", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_TransformationMatrix_mrotationMat
#  undef _0RL_tc_TransformationMatrix_mrotationMat
#endif
static CORBA::TypeCode_ptr _0RL_tc_TransformationMatrix_mrotationMat = CORBA::TypeCode::PR_struct_tc("IDL:TransformationMatrix/rotationMat:1.0", "rotationMat", _0RL_structmember_TransformationMatrix_mrotationMat, 9, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace TransformationMatrix { 
  const ::CORBA::TypeCode_ptr _tc_rotationMat = _0RL_tc_TransformationMatrix_mrotationMat;
} 
#else
const ::CORBA::TypeCode_ptr TransformationMatrix::_tc_rotationMat = _0RL_tc_TransformationMatrix_mrotationMat;
#endif



static CORBA::PR_structMember _0RL_structmember_RTC_mVector3D[] = {
  {"x", CORBA::TypeCode::PR_double_tc()},
  {"y", CORBA::TypeCode::PR_double_tc()},
  {"z", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_RTC_mVector3D
#  undef _0RL_tc_RTC_mVector3D
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mVector3D = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Vector3D:1.0", "Vector3D", _0RL_structmember_RTC_mVector3D, 3, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_TransformationMatrix_mtransformationMat[] = {
  {"rotation", _0RL_tc_TransformationMatrix_mrotationMat},
  {"translates", _0RL_tc_RTC_mVector3D}
};

#ifdef _0RL_tc_TransformationMatrix_mtransformationMat
#  undef _0RL_tc_TransformationMatrix_mtransformationMat
#endif
static CORBA::TypeCode_ptr _0RL_tc_TransformationMatrix_mtransformationMat = CORBA::TypeCode::PR_struct_tc("IDL:TransformationMatrix/transformationMat:1.0", "transformationMat", _0RL_structmember_TransformationMatrix_mtransformationMat, 2, &_0RL_tcTrack);



#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace TransformationMatrix { 
  const ::CORBA::TypeCode_ptr _tc_transformationMat = _0RL_tc_TransformationMatrix_mtransformationMat;
} 
#else
const ::CORBA::TypeCode_ptr TransformationMatrix::_tc_transformationMat = _0RL_tc_TransformationMatrix_mtransformationMat;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace TransformationMatrix { 
  const ::CORBA::TypeCode_ptr _tc_transformationInterface = CORBA::TypeCode::PR_interface_tc("IDL:TransformationMatrix/transformationInterface:1.0", "transformationInterface", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr TransformationMatrix::_tc_transformationInterface = CORBA::TypeCode::PR_interface_tc("IDL:TransformationMatrix/transformationInterface:1.0", "transformationInterface", &_0RL_tcTrack);
#endif

static void _0RL_TransformationMatrix_mrotationMat_marshal_fn(cdrStream& _s, void* _v)
{
  TransformationMatrix::rotationMat* _p = (TransformationMatrix::rotationMat*)_v;
  *_p >>= _s;
}
static void _0RL_TransformationMatrix_mrotationMat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  TransformationMatrix::rotationMat* _p = new TransformationMatrix::rotationMat;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_TransformationMatrix_mrotationMat_destructor_fn(void* _v)
{
  TransformationMatrix::rotationMat* _p = (TransformationMatrix::rotationMat*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const TransformationMatrix::rotationMat& _s)
{
  TransformationMatrix::rotationMat* _p = new TransformationMatrix::rotationMat(_s);
  _a.PR_insert(_0RL_tc_TransformationMatrix_mrotationMat,
               _0RL_TransformationMatrix_mrotationMat_marshal_fn,
               _0RL_TransformationMatrix_mrotationMat_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, TransformationMatrix::rotationMat* _sp)
{
  _a.PR_insert(_0RL_tc_TransformationMatrix_mrotationMat,
               _0RL_TransformationMatrix_mrotationMat_marshal_fn,
               _0RL_TransformationMatrix_mrotationMat_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TransformationMatrix::rotationMat*& _sp)
{
  return _a >>= (const TransformationMatrix::rotationMat*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const TransformationMatrix::rotationMat*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_TransformationMatrix_mrotationMat,
                    _0RL_TransformationMatrix_mrotationMat_unmarshal_fn,
                    _0RL_TransformationMatrix_mrotationMat_marshal_fn,
                    _0RL_TransformationMatrix_mrotationMat_destructor_fn,
                    _v)) {
    _sp = (const TransformationMatrix::rotationMat*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_TransformationMatrix_mtransformationMat_marshal_fn(cdrStream& _s, void* _v)
{
  TransformationMatrix::transformationMat* _p = (TransformationMatrix::transformationMat*)_v;
  *_p >>= _s;
}
static void _0RL_TransformationMatrix_mtransformationMat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  TransformationMatrix::transformationMat* _p = new TransformationMatrix::transformationMat;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_TransformationMatrix_mtransformationMat_destructor_fn(void* _v)
{
  TransformationMatrix::transformationMat* _p = (TransformationMatrix::transformationMat*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const TransformationMatrix::transformationMat& _s)
{
  TransformationMatrix::transformationMat* _p = new TransformationMatrix::transformationMat(_s);
  _a.PR_insert(_0RL_tc_TransformationMatrix_mtransformationMat,
               _0RL_TransformationMatrix_mtransformationMat_marshal_fn,
               _0RL_TransformationMatrix_mtransformationMat_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, TransformationMatrix::transformationMat* _sp)
{
  _a.PR_insert(_0RL_tc_TransformationMatrix_mtransformationMat,
               _0RL_TransformationMatrix_mtransformationMat_marshal_fn,
               _0RL_TransformationMatrix_mtransformationMat_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TransformationMatrix::transformationMat*& _sp)
{
  return _a >>= (const TransformationMatrix::transformationMat*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const TransformationMatrix::transformationMat*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_TransformationMatrix_mtransformationMat,
                    _0RL_TransformationMatrix_mtransformationMat_unmarshal_fn,
                    _0RL_TransformationMatrix_mtransformationMat_marshal_fn,
                    _0RL_TransformationMatrix_mtransformationMat_destructor_fn,
                    _v)) {
    _sp = (const TransformationMatrix::transformationMat*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_TransformationMatrix_mtransformationInterface_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_TransformationMatrix_mtransformationInterface_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(TransformationMatrix::transformationInterface::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_TransformationMatrix_mtransformationInterface_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, TransformationMatrix::transformationInterface_ptr _o)
{
  TransformationMatrix::transformationInterface_ptr _no = TransformationMatrix::transformationInterface::_duplicate(_o);
  _a.PR_insert(TransformationMatrix::_tc_transformationInterface,
               _0RL_TransformationMatrix_mtransformationInterface_marshal_fn,
               _0RL_TransformationMatrix_mtransformationInterface_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, TransformationMatrix::transformationInterface_ptr* _op)
{
  _a.PR_insert(TransformationMatrix::_tc_transformationInterface,
               _0RL_TransformationMatrix_mtransformationInterface_marshal_fn,
               _0RL_TransformationMatrix_mtransformationInterface_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = TransformationMatrix::transformationInterface::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, TransformationMatrix::transformationInterface_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(TransformationMatrix::_tc_transformationInterface,
                    _0RL_TransformationMatrix_mtransformationInterface_unmarshal_fn,
                    _0RL_TransformationMatrix_mtransformationInterface_marshal_fn,
                    _0RL_TransformationMatrix_mtransformationInterface_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (TransformationMatrix::transformationInterface_ptr)_r->_ptrToObjRef(TransformationMatrix::transformationInterface::_PD_repoId);
    else
      _o = TransformationMatrix::transformationInterface::_nil();
    return 1;
  }
  return 0;
}

