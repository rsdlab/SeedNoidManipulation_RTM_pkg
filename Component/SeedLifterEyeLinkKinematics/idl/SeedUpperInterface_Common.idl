#ifndef SEEDUPPERINTERFACE_COMMON_IDL
#define SEEDUPPERINTERFACE_COMMON_IDL

#include "SeedUpperInterface_DataType.idl"
module SEED_UPPER{

  enum AlarmType {
    FAULT,
    WARNING,
    UNKNOWN
  };
  
  struct Alarm {
    unsigned long code;
    AlarmType type;
    string description;
  };

  typedef sequence<Alarm> AlarmSeq;
  typedef sequence<LimitValue> LimitSeq;
  
  struct ManipInfo {
    string manufactur;
    string type;
    ULONG axisNum;
    ULONG cmdCycle;
    boolean isGripper;
  };
  
  const ULONG CONST_BINARY_00000001 = 0x01; //isServoOn
  const ULONG CONST_BINARY_00000010 = 0x02; //isMoving
  const ULONG CONST_BINARY_00000100 = 0x04; //isAlarmed
  const ULONG CONST_BINARY_00001000 = 0x08; //isBufferFull
  
  //WRArm WaistRightArm
  //WLArm WaistLeftArm
  //LIWARArm LifterWaistRightArm
  //LIWALArm LifterWaistLeftArm
  interface SeedUpperInterface_Common {
    //低レベル
    //RETURN_ID clearAlarms();
    //RETURN_ID getActiveAlarm(out AlarmSeq alarms);
    RETURN_ID getFeedbackPosAllJoint(out Lifter lifterPos, out RPY WaistPos, out RPY NeckPos, out JointPos rightPos, out JointPos leftPos);
    RETURN_ID getFeedbackPosLIWARArm(out JointPos pos);
    RETURN_ID getFeedbackPosLIWALArm(out JointPos pos);
    RETURN_ID getManipInfo(out ManipInfo mInfo);
    RETURN_ID getLIWARArmInfo(out ManipInfo mInfo);
    RETURN_ID getLIWALArmInfo(out ManipInfo mInfo);
    RETURN_ID getSoftLimitJoint(out LimitSeq softLimit);
    RETURN_ID getState(out ULONG state);
    RETURN_ID servoOFF();
    RETURN_ID servoON();
    RETURN_ID setSoftLimitJoint(in LimitSeq softLimit);
  };

};
#endif // SEEDUPPERINTERFACE_COMMON_IDL
