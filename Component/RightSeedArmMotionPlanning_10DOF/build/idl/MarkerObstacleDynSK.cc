// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "MarkerObstacle.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_Obstacle_mPoint3D[] = {
  {"x", CORBA::TypeCode::PR_float_tc()},
  {"y", CORBA::TypeCode::PR_float_tc()},
  {"z", CORBA::TypeCode::PR_float_tc()}
};

#ifdef _0RL_tc_Obstacle_mPoint3D
#  undef _0RL_tc_Obstacle_mPoint3D
#endif
static CORBA::TypeCode_ptr _0RL_tc_Obstacle_mPoint3D = CORBA::TypeCode::PR_struct_tc("IDL:Obstacle/Point3D:1.0", "Point3D", _0RL_structmember_Obstacle_mPoint3D, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Obstacle { 
  const ::CORBA::TypeCode_ptr _tc_Point3D = _0RL_tc_Obstacle_mPoint3D;
} 
#else
const ::CORBA::TypeCode_ptr Obstacle::_tc_Point3D = _0RL_tc_Obstacle_mPoint3D;
#endif



static CORBA::PR_structMember _0RL_structmember_Obstacle_mAABB[] = {
  {"center", _0RL_tc_Obstacle_mPoint3D},
  {"rx", CORBA::TypeCode::PR_float_tc()},
  {"ry", CORBA::TypeCode::PR_float_tc()},
  {"rz", CORBA::TypeCode::PR_float_tc()}
};

#ifdef _0RL_tc_Obstacle_mAABB
#  undef _0RL_tc_Obstacle_mAABB
#endif
static CORBA::TypeCode_ptr _0RL_tc_Obstacle_mAABB = CORBA::TypeCode::PR_struct_tc("IDL:Obstacle/AABB:1.0", "AABB", _0RL_structmember_Obstacle_mAABB, 4, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Obstacle { 
  const ::CORBA::TypeCode_ptr _tc_AABB = _0RL_tc_Obstacle_mAABB;
} 
#else
const ::CORBA::TypeCode_ptr Obstacle::_tc_AABB = _0RL_tc_Obstacle_mAABB;
#endif










static CORBA::TypeCode_ptr _0RL_tc_Obstacle_mAABBSeq = CORBA::TypeCode::PR_alias_tc("IDL:Obstacle/AABBSeq:1.0", "AABBSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Obstacle_mAABB, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Obstacle { 
  const ::CORBA::TypeCode_ptr _tc_AABBSeq = _0RL_tc_Obstacle_mAABBSeq;
} 
#else
const ::CORBA::TypeCode_ptr Obstacle::_tc_AABBSeq = _0RL_tc_Obstacle_mAABBSeq;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Obstacle { 
  const ::CORBA::TypeCode_ptr _tc_ObstacleInterface = CORBA::TypeCode::PR_interface_tc("IDL:Obstacle/ObstacleInterface:1.0", "ObstacleInterface", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr Obstacle::_tc_ObstacleInterface = CORBA::TypeCode::PR_interface_tc("IDL:Obstacle/ObstacleInterface:1.0", "ObstacleInterface", &_0RL_tcTrack);
#endif

static void _0RL_Obstacle_mPoint3D_marshal_fn(cdrStream& _s, void* _v)
{
  Obstacle::Point3D* _p = (Obstacle::Point3D*)_v;
  *_p >>= _s;
}
static void _0RL_Obstacle_mPoint3D_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Obstacle::Point3D* _p = new Obstacle::Point3D;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Obstacle_mPoint3D_destructor_fn(void* _v)
{
  Obstacle::Point3D* _p = (Obstacle::Point3D*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Obstacle::Point3D& _s)
{
  Obstacle::Point3D* _p = new Obstacle::Point3D(_s);
  _a.PR_insert(_0RL_tc_Obstacle_mPoint3D,
               _0RL_Obstacle_mPoint3D_marshal_fn,
               _0RL_Obstacle_mPoint3D_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Obstacle::Point3D* _sp)
{
  _a.PR_insert(_0RL_tc_Obstacle_mPoint3D,
               _0RL_Obstacle_mPoint3D_marshal_fn,
               _0RL_Obstacle_mPoint3D_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::Point3D*& _sp)
{
  return _a >>= (const Obstacle::Point3D*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Obstacle::Point3D*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Obstacle_mPoint3D,
                    _0RL_Obstacle_mPoint3D_unmarshal_fn,
                    _0RL_Obstacle_mPoint3D_marshal_fn,
                    _0RL_Obstacle_mPoint3D_destructor_fn,
                    _v)) {
    _sp = (const Obstacle::Point3D*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Obstacle_mAABB_marshal_fn(cdrStream& _s, void* _v)
{
  Obstacle::AABB* _p = (Obstacle::AABB*)_v;
  *_p >>= _s;
}
static void _0RL_Obstacle_mAABB_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Obstacle::AABB* _p = new Obstacle::AABB;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Obstacle_mAABB_destructor_fn(void* _v)
{
  Obstacle::AABB* _p = (Obstacle::AABB*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Obstacle::AABB& _s)
{
  Obstacle::AABB* _p = new Obstacle::AABB(_s);
  _a.PR_insert(_0RL_tc_Obstacle_mAABB,
               _0RL_Obstacle_mAABB_marshal_fn,
               _0RL_Obstacle_mAABB_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Obstacle::AABB* _sp)
{
  _a.PR_insert(_0RL_tc_Obstacle_mAABB,
               _0RL_Obstacle_mAABB_marshal_fn,
               _0RL_Obstacle_mAABB_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::AABB*& _sp)
{
  return _a >>= (const Obstacle::AABB*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Obstacle::AABB*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Obstacle_mAABB,
                    _0RL_Obstacle_mAABB_unmarshal_fn,
                    _0RL_Obstacle_mAABB_marshal_fn,
                    _0RL_Obstacle_mAABB_destructor_fn,
                    _v)) {
    _sp = (const Obstacle::AABB*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Obstacle_mAABBSeq_marshal_fn(cdrStream& _s, void* _v)
{
  Obstacle::AABBSeq* _p = (Obstacle::AABBSeq*)_v;
  *_p >>= _s;
}
static void _0RL_Obstacle_mAABBSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Obstacle::AABBSeq* _p = new Obstacle::AABBSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Obstacle_mAABBSeq_destructor_fn(void* _v)
{
  Obstacle::AABBSeq* _p = (Obstacle::AABBSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Obstacle::AABBSeq& _s)
{
  Obstacle::AABBSeq* _p = new Obstacle::AABBSeq(_s);
  _a.PR_insert(_0RL_tc_Obstacle_mAABBSeq,
               _0RL_Obstacle_mAABBSeq_marshal_fn,
               _0RL_Obstacle_mAABBSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Obstacle::AABBSeq* _sp)
{
  _a.PR_insert(_0RL_tc_Obstacle_mAABBSeq,
               _0RL_Obstacle_mAABBSeq_marshal_fn,
               _0RL_Obstacle_mAABBSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::AABBSeq*& _sp)
{
  return _a >>= (const Obstacle::AABBSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Obstacle::AABBSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Obstacle_mAABBSeq,
                    _0RL_Obstacle_mAABBSeq_unmarshal_fn,
                    _0RL_Obstacle_mAABBSeq_marshal_fn,
                    _0RL_Obstacle_mAABBSeq_destructor_fn,
                    _v)) {
    _sp = (const Obstacle::AABBSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Obstacle_mObstacleInterface_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_Obstacle_mObstacleInterface_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(Obstacle::ObstacleInterface::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_Obstacle_mObstacleInterface_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, Obstacle::ObstacleInterface_ptr _o)
{
  Obstacle::ObstacleInterface_ptr _no = Obstacle::ObstacleInterface::_duplicate(_o);
  _a.PR_insert(Obstacle::_tc_ObstacleInterface,
               _0RL_Obstacle_mObstacleInterface_marshal_fn,
               _0RL_Obstacle_mObstacleInterface_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, Obstacle::ObstacleInterface_ptr* _op)
{
  _a.PR_insert(Obstacle::_tc_ObstacleInterface,
               _0RL_Obstacle_mObstacleInterface_marshal_fn,
               _0RL_Obstacle_mObstacleInterface_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = Obstacle::ObstacleInterface::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::ObstacleInterface_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(Obstacle::_tc_ObstacleInterface,
                    _0RL_Obstacle_mObstacleInterface_unmarshal_fn,
                    _0RL_Obstacle_mObstacleInterface_marshal_fn,
                    _0RL_Obstacle_mObstacleInterface_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (Obstacle::ObstacleInterface_ptr)_r->_ptrToObjRef(Obstacle::ObstacleInterface::_PD_repoId);
    else
      _o = Obstacle::ObstacleInterface::_nil();
    return 1;
  }
  return 0;
}

