// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "ConversionInterface.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_ConversionMatrix_mrotationMat[] = {
  {"R11", CORBA::TypeCode::PR_double_tc()},
  {"R12", CORBA::TypeCode::PR_double_tc()},
  {"R13", CORBA::TypeCode::PR_double_tc()},
  {"R21", CORBA::TypeCode::PR_double_tc()},
  {"R22", CORBA::TypeCode::PR_double_tc()},
  {"R23", CORBA::TypeCode::PR_double_tc()},
  {"R31", CORBA::TypeCode::PR_double_tc()},
  {"R32", CORBA::TypeCode::PR_double_tc()},
  {"R33", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_ConversionMatrix_mrotationMat
#  undef _0RL_tc_ConversionMatrix_mrotationMat
#endif
static CORBA::TypeCode_ptr _0RL_tc_ConversionMatrix_mrotationMat = CORBA::TypeCode::PR_struct_tc("IDL:ConversionMatrix/rotationMat:1.0", "rotationMat", _0RL_structmember_ConversionMatrix_mrotationMat, 9, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ConversionMatrix { 
  const ::CORBA::TypeCode_ptr _tc_rotationMat = _0RL_tc_ConversionMatrix_mrotationMat;
} 
#else
const ::CORBA::TypeCode_ptr ConversionMatrix::_tc_rotationMat = _0RL_tc_ConversionMatrix_mrotationMat;
#endif



static CORBA::PR_structMember _0RL_structmember_RTC_mVector3D[] = {
  {"x", CORBA::TypeCode::PR_double_tc()},
  {"y", CORBA::TypeCode::PR_double_tc()},
  {"z", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_RTC_mVector3D
#  undef _0RL_tc_RTC_mVector3D
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mVector3D = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Vector3D:1.0", "Vector3D", _0RL_structmember_RTC_mVector3D, 3, &_0RL_tcTrack);

static CORBA::PR_structMember _0RL_structmember_ConversionMatrix_mtransformationMat[] = {
  {"rotation", _0RL_tc_ConversionMatrix_mrotationMat},
  {"translates", _0RL_tc_RTC_mVector3D}
};

#ifdef _0RL_tc_ConversionMatrix_mtransformationMat
#  undef _0RL_tc_ConversionMatrix_mtransformationMat
#endif
static CORBA::TypeCode_ptr _0RL_tc_ConversionMatrix_mtransformationMat = CORBA::TypeCode::PR_struct_tc("IDL:ConversionMatrix/transformationMat:1.0", "transformationMat", _0RL_structmember_ConversionMatrix_mtransformationMat, 2, &_0RL_tcTrack);



#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ConversionMatrix { 
  const ::CORBA::TypeCode_ptr _tc_transformationMat = _0RL_tc_ConversionMatrix_mtransformationMat;
} 
#else
const ::CORBA::TypeCode_ptr ConversionMatrix::_tc_transformationMat = _0RL_tc_ConversionMatrix_mtransformationMat;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace ConversionMatrix { 
  const ::CORBA::TypeCode_ptr _tc_conversionInterface = CORBA::TypeCode::PR_interface_tc("IDL:ConversionMatrix/conversionInterface:1.0", "conversionInterface", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr ConversionMatrix::_tc_conversionInterface = CORBA::TypeCode::PR_interface_tc("IDL:ConversionMatrix/conversionInterface:1.0", "conversionInterface", &_0RL_tcTrack);
#endif

static void _0RL_ConversionMatrix_mrotationMat_marshal_fn(cdrStream& _s, void* _v)
{
  ConversionMatrix::rotationMat* _p = (ConversionMatrix::rotationMat*)_v;
  *_p >>= _s;
}
static void _0RL_ConversionMatrix_mrotationMat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ConversionMatrix::rotationMat* _p = new ConversionMatrix::rotationMat;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_ConversionMatrix_mrotationMat_destructor_fn(void* _v)
{
  ConversionMatrix::rotationMat* _p = (ConversionMatrix::rotationMat*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const ConversionMatrix::rotationMat& _s)
{
  ConversionMatrix::rotationMat* _p = new ConversionMatrix::rotationMat(_s);
  _a.PR_insert(_0RL_tc_ConversionMatrix_mrotationMat,
               _0RL_ConversionMatrix_mrotationMat_marshal_fn,
               _0RL_ConversionMatrix_mrotationMat_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, ConversionMatrix::rotationMat* _sp)
{
  _a.PR_insert(_0RL_tc_ConversionMatrix_mrotationMat,
               _0RL_ConversionMatrix_mrotationMat_marshal_fn,
               _0RL_ConversionMatrix_mrotationMat_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ConversionMatrix::rotationMat*& _sp)
{
  return _a >>= (const ConversionMatrix::rotationMat*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const ConversionMatrix::rotationMat*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ConversionMatrix_mrotationMat,
                    _0RL_ConversionMatrix_mrotationMat_unmarshal_fn,
                    _0RL_ConversionMatrix_mrotationMat_marshal_fn,
                    _0RL_ConversionMatrix_mrotationMat_destructor_fn,
                    _v)) {
    _sp = (const ConversionMatrix::rotationMat*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ConversionMatrix_mtransformationMat_marshal_fn(cdrStream& _s, void* _v)
{
  ConversionMatrix::transformationMat* _p = (ConversionMatrix::transformationMat*)_v;
  *_p >>= _s;
}
static void _0RL_ConversionMatrix_mtransformationMat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  ConversionMatrix::transformationMat* _p = new ConversionMatrix::transformationMat;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_ConversionMatrix_mtransformationMat_destructor_fn(void* _v)
{
  ConversionMatrix::transformationMat* _p = (ConversionMatrix::transformationMat*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const ConversionMatrix::transformationMat& _s)
{
  ConversionMatrix::transformationMat* _p = new ConversionMatrix::transformationMat(_s);
  _a.PR_insert(_0RL_tc_ConversionMatrix_mtransformationMat,
               _0RL_ConversionMatrix_mtransformationMat_marshal_fn,
               _0RL_ConversionMatrix_mtransformationMat_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, ConversionMatrix::transformationMat* _sp)
{
  _a.PR_insert(_0RL_tc_ConversionMatrix_mtransformationMat,
               _0RL_ConversionMatrix_mtransformationMat_marshal_fn,
               _0RL_ConversionMatrix_mtransformationMat_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ConversionMatrix::transformationMat*& _sp)
{
  return _a >>= (const ConversionMatrix::transformationMat*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const ConversionMatrix::transformationMat*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_ConversionMatrix_mtransformationMat,
                    _0RL_ConversionMatrix_mtransformationMat_unmarshal_fn,
                    _0RL_ConversionMatrix_mtransformationMat_marshal_fn,
                    _0RL_ConversionMatrix_mtransformationMat_destructor_fn,
                    _v)) {
    _sp = (const ConversionMatrix::transformationMat*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_ConversionMatrix_mconversionInterface_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_ConversionMatrix_mconversionInterface_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(ConversionMatrix::conversionInterface::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_ConversionMatrix_mconversionInterface_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, ConversionMatrix::conversionInterface_ptr _o)
{
  ConversionMatrix::conversionInterface_ptr _no = ConversionMatrix::conversionInterface::_duplicate(_o);
  _a.PR_insert(ConversionMatrix::_tc_conversionInterface,
               _0RL_ConversionMatrix_mconversionInterface_marshal_fn,
               _0RL_ConversionMatrix_mconversionInterface_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, ConversionMatrix::conversionInterface_ptr* _op)
{
  _a.PR_insert(ConversionMatrix::_tc_conversionInterface,
               _0RL_ConversionMatrix_mconversionInterface_marshal_fn,
               _0RL_ConversionMatrix_mconversionInterface_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = ConversionMatrix::conversionInterface::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, ConversionMatrix::conversionInterface_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(ConversionMatrix::_tc_conversionInterface,
                    _0RL_ConversionMatrix_mconversionInterface_unmarshal_fn,
                    _0RL_ConversionMatrix_mconversionInterface_marshal_fn,
                    _0RL_ConversionMatrix_mconversionInterface_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (ConversionMatrix::conversionInterface_ptr)_r->_ptrToObjRef(ConversionMatrix::conversionInterface::_PD_repoId);
    else
      _o = ConversionMatrix::conversionInterface::_nil();
    return 1;
  }
  return 0;
}

