// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "ManipulationPathGeneratorInterface.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_Manipulation_mRETURN__ID[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"comment", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Manipulation_mRETURN__ID
#  undef _0RL_tc_Manipulation_mRETURN__ID
#endif
static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mRETURN__ID = CORBA::TypeCode::PR_struct_tc("IDL:Manipulation/RETURN_ID:1.0", "RETURN_ID", _0RL_structmember_Manipulation_mRETURN__ID, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_RETURN_ID = _0RL_tc_Manipulation_mRETURN__ID;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_RETURN_ID = _0RL_tc_Manipulation_mRETURN__ID;
#endif


static CORBA::PR_structMember _0RL_structmember_Manipulation_mWaistPos[] = {
  {"roll", CORBA::TypeCode::PR_double_tc()},
  {"pitch", CORBA::TypeCode::PR_double_tc()},
  {"yaw", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_Manipulation_mWaistPos
#  undef _0RL_tc_Manipulation_mWaistPos
#endif
static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mWaistPos = CORBA::TypeCode::PR_struct_tc("IDL:Manipulation/WaistPos:1.0", "WaistPos", _0RL_structmember_Manipulation_mWaistPos, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_WaistPos = _0RL_tc_Manipulation_mWaistPos;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_WaistPos = _0RL_tc_Manipulation_mWaistPos;
#endif


static CORBA::PR_structMember _0RL_structmember_Manipulation_mLifterPos[] = {
  {"bottom", CORBA::TypeCode::PR_double_tc()},
  {"top", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_Manipulation_mLifterPos
#  undef _0RL_tc_Manipulation_mLifterPos
#endif
static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mLifterPos = CORBA::TypeCode::PR_struct_tc("IDL:Manipulation/LifterPos:1.0", "LifterPos", _0RL_structmember_Manipulation_mLifterPos, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_LifterPos = _0RL_tc_Manipulation_mLifterPos;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_LifterPos = _0RL_tc_Manipulation_mLifterPos;
#endif


static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mJointAngleSeq = CORBA::TypeCode::PR_alias_tc("IDL:Manipulation/JointAngleSeq:1.0", "JointAngleSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_JointAngleSeq = _0RL_tc_Manipulation_mJointAngleSeq;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_JointAngleSeq = _0RL_tc_Manipulation_mJointAngleSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mViaPosSeq = CORBA::TypeCode::PR_alias_tc("IDL:Manipulation/ViaPosSeq:1.0", "ViaPosSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Manipulation_mJointAngleSeq, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_ViaPosSeq = _0RL_tc_Manipulation_mViaPosSeq;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_ViaPosSeq = _0RL_tc_Manipulation_mViaPosSeq;
#endif



static CORBA::PR_structMember _0RL_structmember_Manipulation_mDualUpperJoint[] = {
  {"right", _0RL_tc_Manipulation_mJointAngleSeq},
  {"left", _0RL_tc_Manipulation_mJointAngleSeq},
  {"waist", _0RL_tc_Manipulation_mWaistPos},
  {"lifter", _0RL_tc_Manipulation_mLifterPos}
};

#ifdef _0RL_tc_Manipulation_mDualUpperJoint
#  undef _0RL_tc_Manipulation_mDualUpperJoint
#endif
static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mDualUpperJoint = CORBA::TypeCode::PR_struct_tc("IDL:Manipulation/DualUpperJoint:1.0", "DualUpperJoint", _0RL_structmember_Manipulation_mDualUpperJoint, 4, &_0RL_tcTrack);



#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_DualUpperJoint = _0RL_tc_Manipulation_mDualUpperJoint;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_DualUpperJoint = _0RL_tc_Manipulation_mDualUpperJoint;
#endif














static CORBA::TypeCode_ptr _0RL_tc_Manipulation_mViaDualUpperJointSeq = CORBA::TypeCode::PR_alias_tc("IDL:Manipulation/ViaDualUpperJointSeq:1.0", "ViaDualUpperJointSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Manipulation_mDualUpperJoint, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_ViaDualUpperJointSeq = _0RL_tc_Manipulation_mViaDualUpperJointSeq;
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_ViaDualUpperJointSeq = _0RL_tc_Manipulation_mViaDualUpperJointSeq;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Manipulation { 
  const ::CORBA::TypeCode_ptr _tc_PathGeneratorInterface = CORBA::TypeCode::PR_interface_tc("IDL:Manipulation/PathGeneratorInterface:1.0", "PathGeneratorInterface", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr Manipulation::_tc_PathGeneratorInterface = CORBA::TypeCode::PR_interface_tc("IDL:Manipulation/PathGeneratorInterface:1.0", "PathGeneratorInterface", &_0RL_tcTrack);
#endif

static void _0RL_Manipulation_mRETURN__ID_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::RETURN_ID* _p = (Manipulation::RETURN_ID*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mRETURN__ID_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::RETURN_ID* _p = new Manipulation::RETURN_ID;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mRETURN__ID_destructor_fn(void* _v)
{
  Manipulation::RETURN_ID* _p = (Manipulation::RETURN_ID*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::RETURN_ID& _s)
{
  Manipulation::RETURN_ID* _p = new Manipulation::RETURN_ID(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mRETURN__ID,
               _0RL_Manipulation_mRETURN__ID_marshal_fn,
               _0RL_Manipulation_mRETURN__ID_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::RETURN_ID* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mRETURN__ID,
               _0RL_Manipulation_mRETURN__ID_marshal_fn,
               _0RL_Manipulation_mRETURN__ID_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::RETURN_ID*& _sp)
{
  return _a >>= (const Manipulation::RETURN_ID*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::RETURN_ID*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mRETURN__ID,
                    _0RL_Manipulation_mRETURN__ID_unmarshal_fn,
                    _0RL_Manipulation_mRETURN__ID_marshal_fn,
                    _0RL_Manipulation_mRETURN__ID_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::RETURN_ID*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mWaistPos_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::WaistPos* _p = (Manipulation::WaistPos*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mWaistPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::WaistPos* _p = new Manipulation::WaistPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mWaistPos_destructor_fn(void* _v)
{
  Manipulation::WaistPos* _p = (Manipulation::WaistPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::WaistPos& _s)
{
  Manipulation::WaistPos* _p = new Manipulation::WaistPos(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mWaistPos,
               _0RL_Manipulation_mWaistPos_marshal_fn,
               _0RL_Manipulation_mWaistPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::WaistPos* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mWaistPos,
               _0RL_Manipulation_mWaistPos_marshal_fn,
               _0RL_Manipulation_mWaistPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::WaistPos*& _sp)
{
  return _a >>= (const Manipulation::WaistPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::WaistPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mWaistPos,
                    _0RL_Manipulation_mWaistPos_unmarshal_fn,
                    _0RL_Manipulation_mWaistPos_marshal_fn,
                    _0RL_Manipulation_mWaistPos_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::WaistPos*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mLifterPos_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::LifterPos* _p = (Manipulation::LifterPos*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mLifterPos_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::LifterPos* _p = new Manipulation::LifterPos;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mLifterPos_destructor_fn(void* _v)
{
  Manipulation::LifterPos* _p = (Manipulation::LifterPos*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::LifterPos& _s)
{
  Manipulation::LifterPos* _p = new Manipulation::LifterPos(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mLifterPos,
               _0RL_Manipulation_mLifterPos_marshal_fn,
               _0RL_Manipulation_mLifterPos_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::LifterPos* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mLifterPos,
               _0RL_Manipulation_mLifterPos_marshal_fn,
               _0RL_Manipulation_mLifterPos_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::LifterPos*& _sp)
{
  return _a >>= (const Manipulation::LifterPos*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::LifterPos*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mLifterPos,
                    _0RL_Manipulation_mLifterPos_unmarshal_fn,
                    _0RL_Manipulation_mLifterPos_marshal_fn,
                    _0RL_Manipulation_mLifterPos_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::LifterPos*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mJointAngleSeq_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::JointAngleSeq* _p = (Manipulation::JointAngleSeq*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mJointAngleSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::JointAngleSeq* _p = new Manipulation::JointAngleSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mJointAngleSeq_destructor_fn(void* _v)
{
  Manipulation::JointAngleSeq* _p = (Manipulation::JointAngleSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::JointAngleSeq& _s)
{
  Manipulation::JointAngleSeq* _p = new Manipulation::JointAngleSeq(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mJointAngleSeq,
               _0RL_Manipulation_mJointAngleSeq_marshal_fn,
               _0RL_Manipulation_mJointAngleSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::JointAngleSeq* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mJointAngleSeq,
               _0RL_Manipulation_mJointAngleSeq_marshal_fn,
               _0RL_Manipulation_mJointAngleSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::JointAngleSeq*& _sp)
{
  return _a >>= (const Manipulation::JointAngleSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::JointAngleSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mJointAngleSeq,
                    _0RL_Manipulation_mJointAngleSeq_unmarshal_fn,
                    _0RL_Manipulation_mJointAngleSeq_marshal_fn,
                    _0RL_Manipulation_mJointAngleSeq_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::JointAngleSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mViaPosSeq_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::ViaPosSeq* _p = (Manipulation::ViaPosSeq*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mViaPosSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::ViaPosSeq* _p = new Manipulation::ViaPosSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mViaPosSeq_destructor_fn(void* _v)
{
  Manipulation::ViaPosSeq* _p = (Manipulation::ViaPosSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::ViaPosSeq& _s)
{
  Manipulation::ViaPosSeq* _p = new Manipulation::ViaPosSeq(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mViaPosSeq,
               _0RL_Manipulation_mViaPosSeq_marshal_fn,
               _0RL_Manipulation_mViaPosSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::ViaPosSeq* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mViaPosSeq,
               _0RL_Manipulation_mViaPosSeq_marshal_fn,
               _0RL_Manipulation_mViaPosSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::ViaPosSeq*& _sp)
{
  return _a >>= (const Manipulation::ViaPosSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::ViaPosSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mViaPosSeq,
                    _0RL_Manipulation_mViaPosSeq_unmarshal_fn,
                    _0RL_Manipulation_mViaPosSeq_marshal_fn,
                    _0RL_Manipulation_mViaPosSeq_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::ViaPosSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mDualUpperJoint_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::DualUpperJoint* _p = (Manipulation::DualUpperJoint*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mDualUpperJoint_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::DualUpperJoint* _p = new Manipulation::DualUpperJoint;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mDualUpperJoint_destructor_fn(void* _v)
{
  Manipulation::DualUpperJoint* _p = (Manipulation::DualUpperJoint*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::DualUpperJoint& _s)
{
  Manipulation::DualUpperJoint* _p = new Manipulation::DualUpperJoint(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mDualUpperJoint,
               _0RL_Manipulation_mDualUpperJoint_marshal_fn,
               _0RL_Manipulation_mDualUpperJoint_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::DualUpperJoint* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mDualUpperJoint,
               _0RL_Manipulation_mDualUpperJoint_marshal_fn,
               _0RL_Manipulation_mDualUpperJoint_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::DualUpperJoint*& _sp)
{
  return _a >>= (const Manipulation::DualUpperJoint*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::DualUpperJoint*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mDualUpperJoint,
                    _0RL_Manipulation_mDualUpperJoint_unmarshal_fn,
                    _0RL_Manipulation_mDualUpperJoint_marshal_fn,
                    _0RL_Manipulation_mDualUpperJoint_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::DualUpperJoint*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mViaDualUpperJointSeq_marshal_fn(cdrStream& _s, void* _v)
{
  Manipulation::ViaDualUpperJointSeq* _p = (Manipulation::ViaDualUpperJointSeq*)_v;
  *_p >>= _s;
}
static void _0RL_Manipulation_mViaDualUpperJointSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Manipulation::ViaDualUpperJointSeq* _p = new Manipulation::ViaDualUpperJointSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Manipulation_mViaDualUpperJointSeq_destructor_fn(void* _v)
{
  Manipulation::ViaDualUpperJointSeq* _p = (Manipulation::ViaDualUpperJointSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Manipulation::ViaDualUpperJointSeq& _s)
{
  Manipulation::ViaDualUpperJointSeq* _p = new Manipulation::ViaDualUpperJointSeq(_s);
  _a.PR_insert(_0RL_tc_Manipulation_mViaDualUpperJointSeq,
               _0RL_Manipulation_mViaDualUpperJointSeq_marshal_fn,
               _0RL_Manipulation_mViaDualUpperJointSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Manipulation::ViaDualUpperJointSeq* _sp)
{
  _a.PR_insert(_0RL_tc_Manipulation_mViaDualUpperJointSeq,
               _0RL_Manipulation_mViaDualUpperJointSeq_marshal_fn,
               _0RL_Manipulation_mViaDualUpperJointSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::ViaDualUpperJointSeq*& _sp)
{
  return _a >>= (const Manipulation::ViaDualUpperJointSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Manipulation::ViaDualUpperJointSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Manipulation_mViaDualUpperJointSeq,
                    _0RL_Manipulation_mViaDualUpperJointSeq_unmarshal_fn,
                    _0RL_Manipulation_mViaDualUpperJointSeq_marshal_fn,
                    _0RL_Manipulation_mViaDualUpperJointSeq_destructor_fn,
                    _v)) {
    _sp = (const Manipulation::ViaDualUpperJointSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Manipulation_mPathGeneratorInterface_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_Manipulation_mPathGeneratorInterface_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(Manipulation::PathGeneratorInterface::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_Manipulation_mPathGeneratorInterface_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, Manipulation::PathGeneratorInterface_ptr _o)
{
  Manipulation::PathGeneratorInterface_ptr _no = Manipulation::PathGeneratorInterface::_duplicate(_o);
  _a.PR_insert(Manipulation::_tc_PathGeneratorInterface,
               _0RL_Manipulation_mPathGeneratorInterface_marshal_fn,
               _0RL_Manipulation_mPathGeneratorInterface_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, Manipulation::PathGeneratorInterface_ptr* _op)
{
  _a.PR_insert(Manipulation::_tc_PathGeneratorInterface,
               _0RL_Manipulation_mPathGeneratorInterface_marshal_fn,
               _0RL_Manipulation_mPathGeneratorInterface_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = Manipulation::PathGeneratorInterface::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Manipulation::PathGeneratorInterface_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(Manipulation::_tc_PathGeneratorInterface,
                    _0RL_Manipulation_mPathGeneratorInterface_unmarshal_fn,
                    _0RL_Manipulation_mPathGeneratorInterface_marshal_fn,
                    _0RL_Manipulation_mPathGeneratorInterface_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (Manipulation::PathGeneratorInterface_ptr)_r->_ptrToObjRef(Manipulation::PathGeneratorInterface::_PD_repoId);
    else
      _o = Manipulation::PathGeneratorInterface::_nil();
    return 1;
  }
  return 0;
}

