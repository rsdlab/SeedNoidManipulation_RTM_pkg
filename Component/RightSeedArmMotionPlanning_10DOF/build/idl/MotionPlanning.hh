// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __MotionPlanning_hh__
#define __MotionPlanning_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include "ExtendedDataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Planning

_CORBA_MODULE_BEG

  _CORBA_MODULE_VARINT const ::CORBA::Long OK _init_in_decl_( = 0 );

  _CORBA_MODULE_VARINT const ::CORBA::Long NG _init_in_decl_( = -1 );

  struct ManipPos {
    typedef _CORBA_ConstrType_Fix_Var<ManipPos> _var_type;

    
    typedef ::CORBA::Double _0RL_rotation[9];
    typedef ::CORBA::Double _rotation_slice;

    ::CORBA::Double rotation[9];

    typedef ::CORBA::Double _0RL_position[3];
    typedef ::CORBA::Double _position_slice;

    ::CORBA::Double position[3];

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ManipPos::_var_type ManipPos_var;

  typedef ManipPos& ManipPos_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ManipPos;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_theta;

  class theta_var;

  class theta : public _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 >  {
  public:
    typedef theta_var _var_type;
    inline theta() {}
    inline theta(const theta& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_s) {}

    inline theta(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max) {}
    inline theta(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline theta& operator = (const theta& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class theta_out;

  class theta_var {
  public:
    inline theta_var() : _pd_seq(0) {}
    inline theta_var(theta* _s) : _pd_seq(_s) {}
    inline theta_var(const theta_var& _s) {
      if( _s._pd_seq )  _pd_seq = new theta(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~theta_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline theta_var& operator = (theta* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline theta_var& operator = (const theta_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new theta;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline theta* operator -> () { return _pd_seq; }
    inline const theta* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator theta& () const { return *_pd_seq; }
#else
    inline operator const theta& () const { return *_pd_seq; }
    inline operator theta& () { return *_pd_seq; }
#endif
      
    inline const theta& in() const { return *_pd_seq; }
    inline theta&       inout()    { return *_pd_seq; }
    inline theta*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline theta* _retn() { theta* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class theta_out;
    
  private:
    theta* _pd_seq;
  };

  class theta_out {
  public:
    inline theta_out(theta*& _s) : _data(_s) { _data = 0; }
    inline theta_out(theta_var& _s)
      : _data(_s._pd_seq) { _s = (theta*) 0; }
    inline theta_out(const theta_out& _s) : _data(_s._data) {}
    inline theta_out& operator = (const theta_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline theta_out& operator = (theta* _s) {
      _data = _s;
      return *this;
    }
    inline operator theta*&()  { return _data; }
    inline theta*& ptr()       { return _data; }
    inline theta* operator->() { return _data; }

    inline ::CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    theta*& _data;

  private:
    theta_out();
    theta_out& operator=(const theta_var&);
  };

#ifndef __Planning_mMotionPlanningInterface__
#define __Planning_mMotionPlanningInterface__

  class MotionPlanningInterface;
  class _objref_MotionPlanningInterface;
  class _impl_MotionPlanningInterface;
  
  typedef _objref_MotionPlanningInterface* MotionPlanningInterface_ptr;
  typedef MotionPlanningInterface_ptr MotionPlanningInterfaceRef;

  class MotionPlanningInterface_Helper {
  public:
    typedef MotionPlanningInterface_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MotionPlanningInterface, MotionPlanningInterface_Helper> MotionPlanningInterface_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MotionPlanningInterface,MotionPlanningInterface_Helper > MotionPlanningInterface_out;

#endif

  // interface MotionPlanningInterface
  class MotionPlanningInterface {
  public:
    // Declarations for this interface type.
    typedef MotionPlanningInterface_ptr _ptr_type;
    typedef MotionPlanningInterface_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_MotionPlanningInterface :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Long MotionGenerate_Joint(const ::Planning::theta& q_goal);
    ::CORBA::Long MotionGenerate(const ::Planning::ManipPos& EEfPos);

    inline _objref_MotionPlanningInterface()  { _PR_setobj(0); }  // nil
    _objref_MotionPlanningInterface(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MotionPlanningInterface();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MotionPlanningInterface(const _objref_MotionPlanningInterface&);
    _objref_MotionPlanningInterface& operator = (const _objref_MotionPlanningInterface&);
    // not implemented

    friend class MotionPlanningInterface;
  };

  class _pof_MotionPlanningInterface : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MotionPlanningInterface() : _OMNI_NS(proxyObjectFactory)(MotionPlanningInterface::_PD_repoId) {}
    virtual ~_pof_MotionPlanningInterface();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MotionPlanningInterface :
    public virtual omniServant
  {
  public:
    virtual ~_impl_MotionPlanningInterface();

    virtual ::CORBA::Long MotionGenerate_Joint(const ::Planning::theta& q_goal) = 0;
    virtual ::CORBA::Long MotionGenerate(const ::Planning::ManipPos& EEfPos) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MotionPlanningInterface;

_CORBA_MODULE_END



_CORBA_MODULE POA_Planning
_CORBA_MODULE_BEG

  class MotionPlanningInterface :
    public virtual Planning::_impl_MotionPlanningInterface,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~MotionPlanningInterface();

    inline ::Planning::MotionPlanningInterface_ptr _this() {
      return (::Planning::MotionPlanningInterface_ptr) _do_this(::Planning::MotionPlanningInterface::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Planning
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const Planning::ManipPos& _s);
extern void operator<<=(::CORBA::Any& _a, Planning::ManipPos* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Planning::ManipPos*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Planning::ManipPos*& _sp);

void operator<<=(::CORBA::Any& _a, const Planning::theta& _s);
void operator<<=(::CORBA::Any& _a, Planning::theta* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Planning::theta*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Planning::theta*& _sp);

void operator<<=(::CORBA::Any& _a, Planning::MotionPlanningInterface_ptr _s);
void operator<<=(::CORBA::Any& _a, Planning::MotionPlanningInterface_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Planning::MotionPlanningInterface_ptr& _s);



inline void
Planning::MotionPlanningInterface::_marshalObjRef(::Planning::MotionPlanningInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MotionPlanning
#endif

#endif  // __MotionPlanning_hh__

