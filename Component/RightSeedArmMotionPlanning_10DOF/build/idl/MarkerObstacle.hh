// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __MarkerObstacle_hh__
#define __MarkerObstacle_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include "BasicDataType.hh"
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include "ExtendedDataTypes.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE Obstacle

_CORBA_MODULE_BEG

  struct Point3D {
    typedef _CORBA_ConstrType_Fix_Var<Point3D> _var_type;

    
    ::CORBA::Float x;

    ::CORBA::Float y;

    ::CORBA::Float z;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Point3D::_var_type Point3D_var;

  typedef Point3D& Point3D_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Point3D;

  struct AABB {
    typedef _CORBA_ConstrType_Fix_Var<AABB> _var_type;

    
    Point3D center;

    ::CORBA::Float rx;

    ::CORBA::Float ry;

    ::CORBA::Float rz;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef AABB::_var_type AABB_var;

  typedef AABB& AABB_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AABB;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AABBSeq;

  class AABBSeq_var;

  class AABBSeq : public _CORBA_Unbounded_Sequence< AABB >  {
  public:
    typedef AABBSeq_var _var_type;
    inline AABBSeq() {}
    inline AABBSeq(const AABBSeq& _s)
      : _CORBA_Unbounded_Sequence< AABB > (_s) {}

    inline AABBSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< AABB > (_max) {}
    inline AABBSeq(_CORBA_ULong _max, _CORBA_ULong _len, AABB* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< AABB > (_max, _len, _val, _rel) {}

  

    inline AABBSeq& operator = (const AABBSeq& _s) {
      _CORBA_Unbounded_Sequence< AABB > ::operator=(_s);
      return *this;
    }
  };

  class AABBSeq_out;

  class AABBSeq_var {
  public:
    inline AABBSeq_var() : _pd_seq(0) {}
    inline AABBSeq_var(AABBSeq* _s) : _pd_seq(_s) {}
    inline AABBSeq_var(const AABBSeq_var& _s) {
      if( _s._pd_seq )  _pd_seq = new AABBSeq(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~AABBSeq_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline AABBSeq_var& operator = (AABBSeq* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline AABBSeq_var& operator = (const AABBSeq_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new AABBSeq;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline AABB& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline AABBSeq* operator -> () { return _pd_seq; }
    inline const AABBSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator AABBSeq& () const { return *_pd_seq; }
#else
    inline operator const AABBSeq& () const { return *_pd_seq; }
    inline operator AABBSeq& () { return *_pd_seq; }
#endif
      
    inline const AABBSeq& in() const { return *_pd_seq; }
    inline AABBSeq&       inout()    { return *_pd_seq; }
    inline AABBSeq*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline AABBSeq* _retn() { AABBSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class AABBSeq_out;
    
  private:
    AABBSeq* _pd_seq;
  };

  class AABBSeq_out {
  public:
    inline AABBSeq_out(AABBSeq*& _s) : _data(_s) { _data = 0; }
    inline AABBSeq_out(AABBSeq_var& _s)
      : _data(_s._pd_seq) { _s = (AABBSeq*) 0; }
    inline AABBSeq_out(const AABBSeq_out& _s) : _data(_s._data) {}
    inline AABBSeq_out& operator = (const AABBSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline AABBSeq_out& operator = (AABBSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator AABBSeq*&()  { return _data; }
    inline AABBSeq*& ptr()       { return _data; }
    inline AABBSeq* operator->() { return _data; }

    inline AABB& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    AABBSeq*& _data;

  private:
    AABBSeq_out();
    AABBSeq_out& operator=(const AABBSeq_var&);
  };

#ifndef __Obstacle_mObstacleInterface__
#define __Obstacle_mObstacleInterface__

  class ObstacleInterface;
  class _objref_ObstacleInterface;
  class _impl_ObstacleInterface;
  
  typedef _objref_ObstacleInterface* ObstacleInterface_ptr;
  typedef ObstacleInterface_ptr ObstacleInterfaceRef;

  class ObstacleInterface_Helper {
  public:
    typedef ObstacleInterface_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ObstacleInterface, ObstacleInterface_Helper> ObstacleInterface_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ObstacleInterface,ObstacleInterface_Helper > ObstacleInterface_out;

#endif

  // interface ObstacleInterface
  class ObstacleInterface {
  public:
    // Declarations for this interface type.
    typedef ObstacleInterface_ptr _ptr_type;
    typedef ObstacleInterface_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_ObstacleInterface :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void getDisplayShelfObstacle(::Obstacle::AABBSeq_out obastacleData);

    inline _objref_ObstacleInterface()  { _PR_setobj(0); }  // nil
    _objref_ObstacleInterface(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ObstacleInterface();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ObstacleInterface(const _objref_ObstacleInterface&);
    _objref_ObstacleInterface& operator = (const _objref_ObstacleInterface&);
    // not implemented

    friend class ObstacleInterface;
  };

  class _pof_ObstacleInterface : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ObstacleInterface() : _OMNI_NS(proxyObjectFactory)(ObstacleInterface::_PD_repoId) {}
    virtual ~_pof_ObstacleInterface();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ObstacleInterface :
    public virtual omniServant
  {
  public:
    virtual ~_impl_ObstacleInterface();

    virtual void getDisplayShelfObstacle(::Obstacle::AABBSeq_out obastacleData) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ObstacleInterface;

_CORBA_MODULE_END



_CORBA_MODULE POA_Obstacle
_CORBA_MODULE_BEG

  class ObstacleInterface :
    public virtual Obstacle::_impl_ObstacleInterface,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~ObstacleInterface();

    inline ::Obstacle::ObstacleInterface_ptr _this() {
      return (::Obstacle::ObstacleInterface_ptr) _do_this(::Obstacle::ObstacleInterface::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Obstacle
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const Obstacle::Point3D& _s);
extern void operator<<=(::CORBA::Any& _a, Obstacle::Point3D* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::Point3D*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Obstacle::Point3D*& _sp);

extern void operator<<=(::CORBA::Any& _a, const Obstacle::AABB& _s);
extern void operator<<=(::CORBA::Any& _a, Obstacle::AABB* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::AABB*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Obstacle::AABB*& _sp);

void operator<<=(::CORBA::Any& _a, const Obstacle::AABBSeq& _s);
void operator<<=(::CORBA::Any& _a, Obstacle::AABBSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::AABBSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const Obstacle::AABBSeq*& _sp);

void operator<<=(::CORBA::Any& _a, Obstacle::ObstacleInterface_ptr _s);
void operator<<=(::CORBA::Any& _a, Obstacle::ObstacleInterface_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, Obstacle::ObstacleInterface_ptr& _s);



inline void
Obstacle::ObstacleInterface::_marshalObjRef(::Obstacle::ObstacleInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MarkerObstacle
#endif

#endif  // __MarkerObstacle_hh__

