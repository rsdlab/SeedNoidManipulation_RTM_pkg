/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-08-07 17:34:09.881128
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_WL_VIRTUAL {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eerot[1]=((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1])))))))));
eerot[2]=((((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2])))))))));
eetrans[0]=((((-0.134)*(IKcos(j[2]))*(IKsin(j[0]))))+(((((((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((0.279642)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.279642)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((((((0.036)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.036)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))+(((((((0.036)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.036)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((0.275358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.275358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((0.279642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((((((((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((-0.035)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.035)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[6]))))+(((0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.304)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.018)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.134)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.304)*(IKsin(j[0]))*(IKsin(j[2]))))+(((((((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(((((((((0.035)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((((((0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((((((-0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.036)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((-0.275358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.275358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.279642)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.279642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))))+(((((((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(((((-0.028046)*(IKsin(j[4]))))+(((((((0.035)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((0.036)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.036)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((-0.279642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.035)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((0.035)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.279642)*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((0.275358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.054778)*(IKcos(j[4]))))+(((-0.275358)*(IKsin(j[4]))*(IKsin(j[5])))))))));
eerot[3]=((((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eerot[4]=((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[1]))*(IKsin(j[0])))));
eerot[5]=((((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[1]))*(IKsin(j[0])))));
eetrans[1]=((((((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(((((-0.028046)*(IKsin(j[4]))))+(((((((0.035)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((0.036)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.036)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((-0.279642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.035)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((0.035)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.279642)*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((0.275358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.054778)*(IKcos(j[4]))))+(((-0.275358)*(IKsin(j[4]))*(IKsin(j[5]))))))))+(((((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))*(((((((((0.035)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((((((0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((((((-0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.036)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((-0.275358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.275358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.279642)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.279642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))))+(((((((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((0.279642)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.279642)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((((((0.036)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.036)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))+(((((((0.036)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.036)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((0.275358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.275358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((((((-0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((0.279642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((((((((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((-0.035)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.035)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[6]))))+(((0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.018)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.134)*(IKcos(j[0]))*(IKcos(j[2]))))+(((0.134)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.304)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.304)*(IKcos(j[0]))*(IKsin(j[2])))));
eerot[6]=((((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))))+(((((((((((-1.0)*(((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(IKsin(j[1])))));
eerot[7]=((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eerot[8]=((((((((((((-1.0)*(((((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eetrans[2]=((0.1455)+(((((((-0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))*(((((-0.028046)*(IKsin(j[4]))))+(((((((0.035)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((0.036)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.036)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((-0.279642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.035)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((((((-0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((0.035)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.279642)*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((0.275358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.054778)*(IKcos(j[4]))))+(((-0.275358)*(IKsin(j[4]))*(IKsin(j[5]))))))))+(((((((-0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))))*(((((((((0.035)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((((((0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((((((-0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.036)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-0.036)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((-0.275358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.275358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((((((-0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.279642)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.279642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))))+(((0.134)*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.018)*(IKsin(j[1]))))+(((((((-0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((-0.279642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.279642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((0.279642)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.279642)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((-0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((0.036)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.036)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(((((0.036)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.036)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.275358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.275358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[1]))))+(((0.304)*(IKcos(j[1]))*(IKcos(j[2])))));
}

IKFAST_API int GetNumFreeParameters() { return 5; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 4, 6}; return freeparams; }
IKFAST_API int GetNumJoints() { return 11; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij5[2], _nj5,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij4[2], _nj4,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]), htj2=tan(pfree[2]*0.5);
j4=pfree[3]; cj4=cos(pfree[3]); sj4=sin(pfree[3]), htj4=tan(pfree[3]*0.5);
j6=pfree[4]; cj6=cos(pfree[4]); sj6=sin(pfree[4]), htj6=tan(pfree[4]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x0=IKcos(j1);
new_r00=(((r00*x0*(IKcos(j0))))+((r10*x0*(IKsin(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x1=IKcos(j1);
IkReal x2=((1.0)*x1);
new_r01=((((-1.0)*r02*x2*(IKcos(j0))))+(((-1.0)*r12*x2*(IKsin(j0))))+((r22*(IKsin(j1)))));
IkReal x3=IKcos(j1);
new_r02=((((-1.0)*r21*(IKsin(j1))))+((r01*x3*(IKcos(j0))))+((r11*x3*(IKsin(j0)))));
IkReal x4=IKsin(j1);
IkReal x5=IKcos(j1);
IkReal x6=IKcos(j0);
IkReal x7=IKsin(j0);
IkReal x8=(x5*x7);
IkReal x9=(x5*x6);
new_px=((0.018)+(((0.036)*r21*x4))+(((-1.0)*pz*x4))+(((0.1455)*x4))+(((-0.036)*r01*x9))+((py*x8))+((px*x9))+(((-0.036)*r11*x8)));
IkReal x10=IKcos(j2);
IkReal x11=IKcos(j0);
IkReal x12=IKsin(j0);
IkReal x13=IKsin(j2);
IkReal x14=IKcos(j1);
IkReal x15=IKsin(j1);
IkReal x16=((0.173619753017279)*x13);
IkReal x17=(r20*x14);
IkReal x18=(r00*x10);
IkReal x19=(r10*x10);
IkReal x20=((0.984812764621894)*x13);
IkReal x21=(x11*x15);
IkReal x22=(x12*x15);
new_r10=((((-0.173619753017279)*x11*x19))+(((-1.0)*r00*x16*x21))+(((0.173619753017279)*x12*x18))+(((-1.0)*r10*x16*x22))+(((-1.0)*x16*x17))+((r10*x11*x20))+(((-0.984812764621894)*x18*x21))+(((-0.984812764621894)*x19*x22))+(((-1.0)*r00*x12*x20))+(((-0.984812764621894)*x10*x17)));
IkReal x23=IKsin(j2);
IkReal x24=IKsin(j0);
IkReal x25=IKsin(j1);
IkReal x26=IKcos(j0);
IkReal x27=IKcos(j2);
IkReal x28=IKcos(j1);
IkReal x29=(r02*x26);
IkReal x30=(r12*x24);
IkReal x31=(r22*x28);
IkReal x32=(r02*x24);
IkReal x33=((0.173619753017279)*x27);
IkReal x34=((0.984812764621894)*x23);
IkReal x35=(r12*x26);
IkReal x36=((0.173619753017279)*x23*x25);
IkReal x37=((0.984812764621894)*x25*x27);
new_r11=(((x29*x37))+((x29*x36))+(((0.173619753017279)*x23*x31))+(((-1.0)*x32*x33))+(((0.984812764621894)*x27*x31))+((x30*x37))+((x30*x36))+(((-1.0)*x34*x35))+((x32*x34))+((x33*x35)));
IkReal x38=IKcos(j2);
IkReal x39=IKsin(j0);
IkReal x40=IKsin(j2);
IkReal x41=IKcos(j0);
IkReal x42=IKsin(j1);
IkReal x43=IKcos(j1);
IkReal x44=((0.984812764621894)*r11);
IkReal x45=((0.984812764621894)*r01);
IkReal x46=((0.173619753017279)*r01);
IkReal x47=((0.173619753017279)*r11);
IkReal x48=(r21*x43);
IkReal x49=(x38*x39);
IkReal x50=(x40*x41);
IkReal x51=(x39*x40);
IkReal x52=(x38*x41);
new_r12=((((-1.0)*x45*x51))+(((-0.984812764621894)*x38*x48))+(((-1.0)*x42*x45*x52))+((x44*x50))+(((-1.0)*x42*x44*x49))+(((-1.0)*x42*x47*x51))+((x46*x49))+(((-1.0)*x42*x46*x50))+(((-1.0)*x47*x52))+(((-0.173619753017279)*x40*x48)));
IkReal x53=IKsin(j0);
IkReal x54=IKsin(j2);
IkReal x55=IKcos(j1);
IkReal x56=IKsin(j1);
IkReal x57=IKcos(j0);
IkReal x58=IKcos(j2);
IkReal x59=((0.984812764621894)*py);
IkReal x60=((0.984812764621894)*px);
IkReal x61=(r21*x55);
IkReal x62=((0.00625031110862206)*x54);
IkReal x63=((0.0354532595263882)*x58);
IkReal x64=((0.173619753017279)*x54);
IkReal x65=((0.0354532595263882)*x54);
IkReal x66=(r01*x53);
IkReal x67=((0.173619753017279)*x58);
IkReal x68=(r11*x57);
IkReal x69=((0.00625031110862206)*x58);
IkReal x70=(x53*x56);
IkReal x71=(x55*x58);
IkReal x72=(x56*x57);
new_py=((0.322648127349371)+(((-1.0)*x66*x69))+(((-1.0)*pz*x55*x64))+((r11*x62*x70))+(((-0.984812764621894)*pz*x71))+(((0.143290257252486)*x71))+((x54*x57*x59))+((r11*x63*x70))+(((-1.0)*py*x57*x67))+((x61*x62))+((x61*x63))+(((-1.0)*py*x64*x70))+((x68*x69))+(((-1.0)*x58*x60*x72))+((r01*x63*x72))+(((-1.0)*px*x64*x72))+((r01*x62*x72))+(((-1.0)*x65*x68))+(((0.0252616740640142)*x54*x55))+(((-1.0)*x58*x59*x70))+(((-1.0)*x53*x54*x60))+((x65*x66))+((px*x53*x67)));
IkReal x73=IKcos(j0);
IkReal x74=IKsin(j2);
IkReal x75=IKsin(j1);
IkReal x76=IKsin(j0);
IkReal x77=IKcos(j2);
IkReal x78=IKcos(j1);
IkReal x79=(r10*x76);
IkReal x80=((0.984812764621894)*x74);
IkReal x81=(r20*x78);
IkReal x82=(r00*x73);
IkReal x83=(r00*x76);
IkReal x84=((0.984812764621894)*x77);
IkReal x85=((0.173619753017279)*x74);
IkReal x86=(r10*x73);
IkReal x87=((0.173619753017279)*x75*x77);
new_r20=(((x84*x86))+(((-1.0)*x82*x87))+((x75*x80*x82))+(((-1.0)*x83*x85))+(((-1.0)*x83*x84))+((x75*x79*x80))+((x85*x86))+(((-1.0)*x79*x87))+(((-0.173619753017279)*x77*x81))+((x80*x81)));
IkReal x88=IKcos(j2);
IkReal x89=IKsin(j1);
IkReal x90=IKsin(j0);
IkReal x91=IKcos(j0);
IkReal x92=IKsin(j2);
IkReal x93=IKcos(j1);
IkReal x94=(r02*x91);
IkReal x95=(r12*x90);
IkReal x96=(r22*x93);
IkReal x97=(r02*x90);
IkReal x98=((0.984812764621894)*x88);
IkReal x99=((0.173619753017279)*x92);
IkReal x100=(r12*x91);
IkReal x101=((0.984812764621894)*x89*x92);
IkReal x102=((0.173619753017279)*x88*x89);
new_r21=((((-0.984812764621894)*x92*x96))+((x102*x94))+((x102*x95))+(((0.173619753017279)*x88*x96))+((x97*x98))+((x97*x99))+(((-1.0)*x101*x94))+(((-1.0)*x101*x95))+(((-1.0)*x100*x98))+(((-1.0)*x100*x99)));
IkReal x103=IKsin(j1);
IkReal x104=IKsin(j2);
IkReal x105=IKcos(j0);
IkReal x106=IKcos(j2);
IkReal x107=IKsin(j0);
IkReal x108=IKcos(j1);
IkReal x109=((0.173619753017279)*x107);
IkReal x110=(r01*x104);
IkReal x111=(r11*x103);
IkReal x112=((0.984812764621894)*x107);
IkReal x113=(r01*x106);
IkReal x114=(r11*x105);
IkReal x115=(r21*x108);
IkReal x116=(x103*x105);
new_r22=((((0.984812764621894)*x104*x115))+(((-1.0)*x112*x113))+((x104*x111*x112))+(((0.984812764621894)*x106*x114))+(((0.984812764621894)*x110*x116))+(((-1.0)*x109*x110))+(((-0.173619753017279)*x113*x116))+(((-0.173619753017279)*x106*x115))+(((-1.0)*x106*x109*x111))+(((0.173619753017279)*x104*x114)));
IkReal x117=IKsin(j0);
IkReal x118=IKsin(j2);
IkReal x119=IKcos(j2);
IkReal x120=IKcos(j0);
IkReal x121=IKsin(j1);
IkReal x122=IKcos(j1);
IkReal x123=((0.0354532595263882)*r11);
IkReal x124=((0.00625031110862206)*r11);
IkReal x125=((0.0354532595263882)*r01);
IkReal x126=((0.00625031110862206)*r01);
IkReal x127=((0.984812764621894)*x120);
IkReal x128=(py*x119);
IkReal x129=((0.173619753017279)*x119);
IkReal x130=(pz*x122);
IkReal x131=((0.984812764621894)*x117);
IkReal x132=(x118*x121);
IkReal x133=(x118*x120);
IkReal x134=(x119*x120);
IkReal x135=(x119*x122);
IkReal x136=(x117*x121);
IkReal x137=(x118*x122);
IkReal x138=(x117*x118);
new_pz=((-0.0791845055420809)+(((-1.0)*x123*x134))+((px*x127*x132))+(((-0.0354532595263882)*r21*x137))+(((-1.0)*px*x120*x121*x129))+((py*x131*x132))+(((-1.0)*x124*x133))+(((0.984812764621894)*x118*x130))+((x117*x119*x125))+(((0.0252616740640142)*x135))+((x126*x138))+((x119*x124*x136))+(((-1.0)*px*x119*x131))+(((0.00625031110862206)*r21*x135))+(((-1.0)*x117*x123*x132))+(((-1.0)*x129*x130))+((x121*x126*x134))+(((-0.143290257252486)*x137))+(((-0.173619753017279)*px*x138))+(((-0.173619753017279)*x128*x136))+(((0.173619753017279)*py*x133))+((x127*x128))+(((-1.0)*x120*x125*x132)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x139=((1.0)*px);
IkReal x140=((1.0)*pz);
IkReal x141=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x141)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x140)));
rxp0_2=((((-1.0)*r10*x139))+((py*r00)));
rxp1_0=((((-1.0)*r21*x141))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x140)));
rxp1_2=((((-1.0)*r11*x139))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x141)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x140)));
rxp2_2=((((-1.0)*r12*x139))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x142=((1.0)*pp);
IkReal x143=((0.0014)*sj6);
IkReal x144=((0.109556)*cj4*pz);
IkReal x145=((((0.07)*cj6))+(((-1.0)*px)));
IkReal x146=((0.109556)*py*sj4);
IkReal x147=((0.056092)*cj4*py);
IkReal x148=((0.056092)*pz*sj4);
IkReal x149=((0.3043377926)+x144);
IkReal x150=(x142+x148);
IkReal x151=((((0.112184)*cj4*px))+(((0.219112)*px*sj4)));
IkReal x152=((0.001231145256)+x143+x144);
IkReal x153=(x146+x147);
IkReal x154=(x153+x150);
IkReal x155=((((-1.0)*x154))+x149);
IkReal x156=((((-1.0)*x150))+x153+x149);
IkReal x157=((((-1.0)*x154))+x152);
IkReal x158=((((-1.0)*x150))+x153+x152);
IkReal gconst0=x145;
IkReal gconst1=x155;
IkReal gconst2=x157;
IkReal gconst3=x145;
IkReal gconst4=x155;
IkReal gconst5=x157;
IkReal gconst6=x151;
IkReal gconst7=x151;
IkReal gconst8=x151;
IkReal gconst9=x151;
IkReal gconst10=x156;
IkReal gconst11=x158;
IkReal gconst12=x156;
IkReal gconst13=x158;
IkReal x159=px*px;
IkReal x160=cj6*cj6;
IkReal x161=sj6*sj6;
IkReal x162=(px*py);
IkReal x163=((0.00625597185312)*gconst8);
IkReal x164=((0.07)*gconst13);
IkReal x165=((0.14)*gconst12);
IkReal x166=((4.0)*gconst10);
IkReal x167=(cj6*px);
IkReal x168=(gconst0*py);
IkReal x169=(gconst10*gconst12);
IkReal x170=((2.0)*py);
IkReal x171=((0.07)*gconst11);
IkReal x172=(gconst2*gconst8);
IkReal x173=((1.0)*px);
IkReal x174=(cj6*gconst0);
IkReal x175=((0.0434563668)*gconst8);
IkReal x176=(cj6*py);
IkReal x177=(gconst2*gconst4);
IkReal x178=(gconst4*gconst7);
IkReal x179=(gconst1*gconst5);
IkReal x180=(gconst11*gconst12);
IkReal x181=(gconst11*gconst8);
IkReal x182=((0.001738254672)*sj6);
IkReal x183=((0.01251194370624)*sj6);
IkReal x184=((0.003476509344)*sj6);
IkReal x185=(gconst12*gconst7);
IkReal x186=(gconst1*gconst4);
IkReal x187=(gconst0*gconst6);
IkReal x188=(gconst0*px);
IkReal x189=((0.0004379180297184)*sj6);
IkReal x190=(gconst0*gconst1);
IkReal x191=((1.0)*gconst3);
IkReal x192=(gconst10*gconst13);
IkReal x193=(gconst11*gconst13);
IkReal x194=(gconst2*gconst5);
IkReal x195=(sj6*x167);
IkReal x196=(gconst10*x167);
IkReal x197=(gconst6*x159);
IkReal x198=((0.0002502388741248)*x161);
IkReal x199=((1.0)*x159);
IkReal x200=(gconst3*x177);
IkReal x201=(gconst12*x160);
IkReal x202=((0.312798592656)*x160);
IkReal x203=(gconst8*x160);
IkReal x204=((0.0001251194370624)*x161);
IkReal x205=((0.0434563668)*gconst7*x167);
IkReal x206=((0.00625597185312)*gconst7*x195);
IkReal x207=(x206+x205);
op[0]=((((-1.0)*x180*x202))+(((0.0434563668)*gconst11*x167))+(((0.00625597185312)*gconst11*x195))+(((-8.758360594368e-6)*x161*x167))+(((-0.0004226103)*x167))+(((-1.0)*x159*x204))+(((-0.0049)*x160*x169))+((x189*x201))+(((-1.0)*x159*x182))+((x164*x196))+((gconst12*x167*x171))+(((0.0434563668)*gconst12*x167))+(((-0.00012167782704)*x195))+(((0.00625597185312)*gconst12*x195))+(((-1.0)*x169*x199))+(((-1.0)*x165*x196))+(((-0.00603729)*x159))+(((-1.0)*x193*x199))+((x159*x192))+((x159*x180))+(((0.003041945676)*x201)));
op[1]=((((4.0)*x162*x193))+(((-1.0)*gconst11*gconst9*x199))+(((1.7516721188736e-5)*x161*x176))+(((0.0008452206)*x176))+(((-1.0)*gconst6*x165*x167))+(((-1.0)*x185*x202))+((x189*x203))+(((-1.0)*gconst11*x176*x183))+(((-1.0)*gconst13*gconst7*x199))+((gconst6*x164*x167))+(((0.0005004777482496)*x161*x162))+(((-4.0)*x162*x180))+((x167*x175))+x207+(((0.28)*x169*x176))+(((-1.0)*gconst12*x197))+(((-0.0049)*gconst10*x203))+(((-0.0049)*gconst6*x201))+((gconst8*x167*x171))+(((-0.0869127336)*gconst11*x176))+(((-0.14)*x176*x192))+(((-1.0)*gconst12*x176*x183))+(((0.02414916)*x162))+(((-1.0)*x181*x202))+(((-1.0)*gconst13*x162*x166))+(((-0.0869127336)*gconst12*x176))+(((-0.14)*gconst8*x196))+((gconst13*x197))+((gconst12*x162*x166))+(((0.07)*x167*x185))+(((-1.0)*gconst11*x165*x176))+(((0.07)*gconst9*x196))+(((0.006953018688)*sj6*x162))+((gconst10*gconst9*x159))+(((-1.0)*gconst10*gconst8*x199))+((x163*x195))+((x159*x185))+((x159*x181))+(((0.003041945676)*x203))+(((0.00024335565408)*sj6*x176)));
op[2]=((((-1.0)*gconst1*gconst12*(px*px)))+((gconst11*gconst12*gconst3*px))+(((-4.0)*gconst12*gconst7*px*py))+(((-4.0)*gconst11*gconst13*(py*py)))+((gconst12*gconst2*(px*px)))+(((-8.758360594368e-6)*cj6*px*(sj6*sj6)))+(((0.07)*cj6*gconst10*gconst5*px))+(((-0.14)*cj6*gconst12*gconst7*py))+(((-4.0)*gconst10*gconst12*(py*py)))+(((-4.0)*gconst10*gconst9*px*py))+(((0.07)*cj6*gconst11*gconst4*px))+(((-0.00603729)*gconst0*px))+(((0.0434563668)*cj6*gconst4*px))+((gconst7*gconst8*(px*px)))+(((0.0869127336)*cj6*gconst12*px))+(((-1.0)*gconst0*gconst10*gconst12*px))+(((4.0)*gconst13*gconst7*px*py))+(((4.0)*gconst11*gconst9*px*py))+(((-0.006953018688)*sj6*(py*py)))+(((-4.0)*gconst11*gconst8*px*py))+(((0.07)*cj6*gconst7*gconst8*px))+(((4.0)*gconst10*gconst8*px*py))+((gconst1*gconst13*(px*px)))+(((-0.312798592656)*gconst12*gconst2*(cj6*cj6)))+(((0.0004379180297184)*gconst4*sj6*(cj6*cj6)))+(((0.0008758360594368)*gconst12*sj6*(cj6*cj6)))+(((0.0434563668)*cj6*gconst11*px))+((gconst6*gconst9*(px*px)))+(((0.07)*cj6*gconst12*gconst2*px))+(((-0.14)*cj6*gconst11*gconst8*py))+(((4.0)*gconst11*gconst12*(py*py)))+(((0.07)*cj6*gconst1*gconst13*px))+(((-0.14)*cj6*gconst10*gconst4*px))+(((-0.001738254672)*gconst0*px*sj6))+(((-0.14)*cj6*gconst13*gconst6*py))+(((0.00625597185312)*cj6*gconst4*px*sj6))+(((-0.0004226103)*cj6*px))+(((-0.07)*cj6*gconst0*gconst10*gconst12))+(((0.0434563668)*cj6*gconst2*px))+(((-1.0)*gconst7*gconst9*(px*px)))+(((0.28)*cj6*gconst12*gconst6*py))+(((-0.0869127336)*cj6*gconst8*py))+(((-0.0049)*gconst10*gconst4*(cj6*cj6)))+(((2.0)*gconst11*gconst13*(px*px)))+(((-0.07)*cj6*gconst11*gconst12*px))+(((-1.0)*gconst10*gconst4*(px*px)))+((gconst10*gconst5*(px*px)))+(((-0.02414916)*(py*py)))+(((-0.14)*cj6*gconst10*gconst9*py))+(((-0.001738254672)*sj6*(px*px)))+(((4.0)*gconst12*gconst6*px*py))+((gconst0*gconst10*gconst13*px))+(((-1.0)*gconst13*gconst2*(px*px)))+(((-0.0049)*gconst1*gconst12*(cj6*cj6)))+(((0.003041945676)*gconst4*(cj6*cj6)))+(((-0.00012167782704)*cj6*px*sj6))+(((-0.07)*cj6*gconst10*gconst12*gconst3))+(((-0.00603729)*(px*px)))+(((-0.07)*cj6*gconst10*gconst13*px))+(((-1.0)*gconst10*gconst12*gconst3*px))+(((-0.14)*cj6*gconst6*gconst8*px))+(((-0.0049)*gconst6*gconst8*(cj6*cj6)))+(((-1.0)*gconst11*gconst12*(px*px)))+(((0.07)*cj6*gconst6*gconst9*px))+(((-0.312798592656)*gconst7*gconst8*(cj6*cj6)))+(((0.006083891352)*gconst12*(cj6*cj6)))+(((0.00625597185312)*cj6*gconst0*gconst12*sj6))+(((-0.14)*cj6*gconst1*gconst12*px))+(((0.0434563668)*cj6*gconst0*gconst12))+(((-4.0)*gconst13*gconst6*px*py))+(((0.00625597185312)*cj6*gconst2*px*sj6))+(((-0.312798592656)*gconst11*gconst4*(cj6*cj6)))+(((-0.0005004777482496)*(py*py)*(sj6*sj6)))+(((0.28)*cj6*gconst10*gconst8*py))+(((-1.0)*gconst10*gconst13*(px*px)))+(((-1.0)*gconst6*gconst8*(px*px)))+(((-0.0001251194370624)*gconst0*px*(sj6*sj6)))+(((0.00625597185312)*cj6*gconst11*px*sj6))+(((-1.0)*gconst11*gconst5*(px*px)))+(((-0.625597185312)*gconst11*gconst12*(cj6*cj6)))+(((-0.0869127336)*cj6*gconst7*py))+(((-0.01251194370624)*cj6*gconst7*py*sj6))+(((-0.0001251194370624)*(px*px)*(sj6*sj6)))+(((4.0)*gconst10*gconst13*(py*py)))+(((0.01251194370624)*cj6*gconst12*px*sj6))+((gconst11*gconst4*(px*px)))+(((-0.01251194370624)*cj6*gconst8*py*sj6)));
op[3]=((((4.0)*gconst10*gconst9*(py*py)))+(((-1.0)*gconst13*gconst6*(px*px)))+(((0.0007507166223744)*px*py*(sj6*sj6)))+(((0.03622374)*px*py))+(((-1.0)*gconst11*gconst8*(px*px)))+((gconst0*gconst13*gconst6*px))+(((-0.02502388741248)*cj6*gconst11*py*sj6))+(((0.07)*cj6*gconst4*gconst7*px))+(((-0.312798592656)*gconst2*gconst8*(cj6*cj6)))+(((4.0)*gconst13*gconst2*px*py))+((gconst5*gconst6*(px*px)))+(((4.0)*gconst11*gconst8*(py*py)))+(((-0.625597185312)*gconst12*gconst7*(cj6*cj6)))+(((-0.0049)*gconst4*gconst6*(cj6*cj6)))+(((-0.07)*cj6*gconst13*gconst6*px))+(((-4.0)*gconst11*gconst9*(py*py)))+(((-0.0049)*gconst1*gconst8*(cj6*cj6)))+(((-1.0)*gconst0*gconst12*gconst6*px))+(((-4.0)*gconst13*gconst7*(py*py)))+(((0.01207458)*gconst0*py))+(((-0.01251194370624)*cj6*gconst2*py*sj6))+(((0.00625597185312)*cj6*gconst0*gconst8*sj6))+(((-0.0869127336)*cj6*gconst4*py))+(((4.0)*gconst1*gconst12*px*py))+(((4.0)*gconst12*gconst7*(py*py)))+(((2.0)*gconst13*gconst7*(px*px)))+(((-4.0)*gconst10*gconst8*(py*py)))+(((-0.07)*cj6*gconst10*gconst9*px))+(((4.0)*gconst7*gconst9*px*py))+(((2.0)*gconst11*gconst12*px*py))+(((0.0008758360594368)*gconst8*sj6*(cj6*cj6)))+(((-4.0)*gconst7*gconst8*px*py))+(((-2.0)*gconst0*gconst10*gconst13*py))+(((-0.07)*cj6*gconst12*gconst3*gconst6))+(((-0.14)*cj6*gconst10*gconst5*py))+(((-0.14)*cj6*gconst11*gconst4*py))+(((-4.0)*gconst10*gconst5*px*py))+(((0.0002502388741248)*gconst0*py*(sj6*sj6)))+(((-0.14)*cj6*gconst4*gconst6*px))+(((-0.02502388741248)*cj6*gconst12*py*sj6))+(((-0.14)*cj6*gconst12*gconst2*py))+(((-0.14)*cj6*gconst7*gconst8*py))+(((4.0)*gconst10*gconst4*px*py))+(((0.0434563668)*cj6*gconst0*gconst8))+(((0.07)*cj6*gconst2*gconst8*px))+(((-0.07)*cj6*gconst0*gconst10*gconst8))+(((-0.14)*cj6*gconst1*gconst13*py))+(((0.07)*cj6*gconst1*gconst9*px))+(((4.0)*gconst11*gconst5*px*py))+(((0.006083891352)*gconst8*(cj6*cj6)))+(((-4.0)*gconst11*gconst13*px*py))+(((-0.07)*cj6*gconst11*gconst8*px))+((gconst2*gconst8*(px*px)))+((gconst1*gconst9*(px*px)))+(((0.28)*cj6*gconst1*gconst12*py))+(((-2.0)*gconst11*gconst12*gconst3*py))+((gconst0*gconst10*gconst9*px))+(((0.003476509344)*gconst0*py*sj6))+((gconst4*gconst7*(px*px)))+(((0.010429528032)*px*py*sj6))+(((0.01251194370624)*cj6*gconst8*px*sj6))+(((-1.0)*gconst5*gconst7*(px*px)))+(((-4.0)*gconst6*gconst9*px*py))+(((-1.0)*gconst1*gconst8*(px*px)))+(((-0.07)*cj6*gconst10*gconst3*gconst8))+(((-0.14)*cj6*gconst6*gconst9*py))+(((-0.07)*cj6*gconst0*gconst12*gconst6))+(((0.07)*cj6*gconst5*gconst6*px))+(((0.00625597185312)*cj6*gconst7*px*sj6))+((gconst12*gconst3*gconst7*px))+(((-1.0)*gconst2*gconst9*(px*px)))+(((-0.01251194370624)*cj6*gconst4*py*sj6))+(((-1.0)*gconst10*gconst9*(px*px)))+(((-1.0)*gconst4*gconst6*(px*px)))+(((-1.0)*gconst12*gconst3*gconst6*px))+(((0.28)*cj6*gconst10*gconst4*py))+(((2.0)*gconst10*gconst12*gconst3*py))+(((4.0)*gconst6*gconst8*px*py))+(((3.5033442377472e-5)*cj6*py*(sj6*sj6)))+(((-1.0)*gconst0*gconst10*gconst8*px))+(((-0.14)*cj6*gconst1*gconst8*px))+(((0.00048671130816)*cj6*py*sj6))+(((4.0)*gconst13*gconst6*(py*py)))+(((-4.0)*gconst12*gconst2*px*py))+(((0.0434563668)*cj6*gconst7*px))+(((0.28)*cj6*gconst6*gconst8*py))+(((-1.0)*gconst12*gconst7*(px*px)))+(((-4.0)*gconst1*gconst13*px*py))+(((2.0)*gconst11*gconst9*(px*px)))+(((0.0869127336)*cj6*gconst8*px))+(((-0.312798592656)*gconst4*gconst7*(cj6*cj6)))+(((-4.0)*gconst11*gconst4*px*py))+(((-0.0869127336)*cj6*gconst2*py))+(((-0.625597185312)*gconst11*gconst8*(cj6*cj6)))+(((2.0)*gconst10*gconst13*px*py))+(((-0.07)*cj6*gconst12*gconst7*px))+(((-0.1738254672)*cj6*gconst11*py))+(((0.0016904412)*cj6*py))+(((-1.0)*gconst10*gconst3*gconst8*px))+(((-4.0)*gconst12*gconst6*(py*py)))+((gconst11*gconst3*gconst8*px))+(((-0.1738254672)*cj6*gconst12*py))+(((2.0)*gconst0*gconst10*gconst12*py)));
op[4]=((((-1.0)*gconst6*gconst9*(px*px)))+(((-4.0)*gconst1*gconst9*px*py))+(((0.0434563668)*cj6*gconst12*px))+(((-2.0)*gconst0*gconst13*gconst6*py))+(((-1.0)*gconst1*gconst13*(px*px)))+(((-0.14)*cj6*gconst5*gconst6*py))+(((0.003041945676)*gconst12*(cj6*cj6)))+(((-4.0)*gconst11*gconst9*px*py))+(((4.0)*gconst11*gconst4*(py*py)))+(((0.0869127336)*cj6*gconst4*px))+(((4.0)*gconst7*gconst8*(py*py)))+(((-4.0)*gconst5*gconst6*px*py))+(((0.28)*cj6*gconst4*gconst6*py))+(((-0.00603729)*gconst0*px))+(((-1.0)*gconst0*gconst10*gconst12*gconst3))+(((2.0)*gconst7*gconst9*(px*px)))+(((2.0)*gconst12*gconst7*px*py))+(((-4.0)*gconst2*gconst8*px*py))+(((-0.07)*cj6*gconst10*gconst5*px))+(((-0.14)*cj6*gconst4*gconst7*py))+(((-0.07)*cj6*gconst0*gconst1*gconst12))+(((-0.0010009554964992)*(py*py)*(sj6*sj6)))+(((0.28)*cj6*gconst1*gconst8*py))+(((-0.0434563668)*cj6*gconst11*px))+(((-0.625597185312)*gconst11*gconst4*(cj6*cj6)))+(((-0.1738254672)*cj6*gconst7*py))+(((0.00012167782704)*cj6*px*sj6))+(((-0.14)*cj6*gconst2*gconst8*py))+(((-0.07)*cj6*gconst1*gconst12*gconst3))+(((2.0)*gconst0*gconst12*gconst6*py))+(((0.01251194370624)*cj6*gconst0*gconst12*sj6))+(((0.001738254672)*sj6*(px*px)))+(((-0.02502388741248)*cj6*gconst7*py*sj6))+(((4.0)*gconst5*gconst7*px*py))+(((0.0004226103)*cj6*px))+(((-0.00625597185312)*cj6*gconst11*px*sj6))+(((-0.07)*cj6*gconst11*gconst4*px))+(((0.01251194370624)*cj6*gconst4*px*sj6))+(((-1.0)*gconst0*gconst6*gconst8*px))+((gconst3*gconst7*gconst8*px))+((gconst0*gconst10*gconst5*px))+((gconst0*gconst6*gconst9*px))+(((-2.0)*gconst12*gconst3*gconst7*py))+(((-1.0)*gconst12*gconst2*(px*px)))+(((-2.0)*gconst11*gconst3*gconst8*py))+(((4.0)*gconst4*gconst6*px*py))+(((-0.001738254672)*gconst0*px*sj6))+(((2.0)*gconst10*gconst3*gconst8*py))+(((-1.0)*gconst3*gconst6*gconst8*px))+(((0.0434563668)*cj6*gconst0*gconst4))+(((-1.0)*gconst7*gconst8*(px*px)))+(((0.07)*cj6*gconst1*gconst5*px))+(((-4.0)*gconst1*gconst12*(py*py)))+(((-1.0)*gconst0*gconst10*gconst13*px))+(((-0.07)*cj6*gconst0*gconst10*gconst4))+(((-0.07)*cj6*gconst6*gconst9*px))+(((0.0434563668)*cj6*gconst2*px))+(((-0.07)*cj6*gconst0*gconst6*gconst8))+(((0.0001251194370624)*(px*px)*(sj6*sj6)))+(((2.0)*gconst10*gconst9*px*py))+(((4.0)*gconst1*gconst8*px*py))+(((0.07)*cj6*gconst2*gconst4*px))+(((-1.0)*gconst11*gconst4*(px*px)))+(((-0.013906037376)*sj6*(py*py)))+(((4.0)*gconst2*gconst9*px*py))+(((-0.02502388741248)*cj6*gconst8*py*sj6))+(((-4.0)*gconst4*gconst7*px*py))+(((0.00603729)*(px*px)))+(((-0.07)*cj6*gconst12*gconst2*px))+(((2.0)*gconst11*gconst5*(px*px)))+((gconst2*gconst4*(px*px)))+(((2.0)*gconst13*gconst2*(px*px)))+(((0.0869127336)*cj6*gconst0*gconst12))+(((2.0)*gconst13*gconst6*px*py))+(((2.0)*gconst12*gconst3*gconst6*py))+(((-1.0)*gconst11*gconst13*(px*px)))+(((-0.07)*cj6*gconst10*gconst3*gconst4))+((gconst1*gconst5*(px*px)))+(((-0.1738254672)*cj6*gconst8*py))+(((-1.0)*gconst1*gconst4*(px*px)))+(((-4.0)*gconst10*gconst4*(py*py)))+(((-1.0)*gconst10*gconst5*(px*px)))+(((-0.07)*cj6*gconst7*gconst8*px))+(((-4.0)*gconst13*gconst2*(py*py)))+(((-2.0)*gconst0*gconst10*gconst9*py))+(((0.006083891352)*gconst4*(cj6*cj6)))+((gconst0*gconst1*gconst13*px))+(((2.0)*gconst11*gconst8*px*py))+(((4.0)*gconst12*gconst2*(py*py)))+(((-0.312798592656)*gconst2*gconst4*(cj6*cj6)))+(((-0.14)*cj6*gconst1*gconst4*px))+(((-1.0)*gconst0*gconst10*gconst4*px))+(((-0.04829832)*(py*py)))+(((-1.0)*gconst0*gconst1*gconst12*px))+(((-0.07)*cj6*gconst3*gconst6*gconst8))+(((-1.0)*gconst1*gconst12*gconst3*px))+(((0.00625597185312)*cj6*gconst0*gconst4*sj6))+(((4.0)*gconst6*gconst9*(py*py)))+(((2.0)*gconst0*gconst10*gconst8*py))+(((0.0008758360594368)*gconst4*sj6*(cj6*cj6)))+(((-1.0)*gconst2*gconst5*(px*px)))+((gconst11*gconst3*gconst4*px))+(((8.758360594368e-6)*cj6*px*(sj6*sj6)))+(((-0.07)*cj6*gconst1*gconst13*px))+(((-4.0)*gconst11*gconst5*(py*py)))+(((0.00625597185312)*cj6*gconst12*px*sj6))+(((0.00625597185312)*cj6*gconst2*px*sj6))+(((-1.0)*gconst10*gconst3*gconst4*px))+(((-0.14)*cj6*gconst1*gconst9*py))+(((-0.625597185312)*gconst12*gconst2*(cj6*cj6)))+(((-0.0049)*gconst1*gconst4*(cj6*cj6)))+(((-0.0001251194370624)*gconst0*px*(sj6*sj6)))+(((4.0)*gconst1*gconst13*(py*py)))+(((-0.625597185312)*gconst7*gconst8*(cj6*cj6)))+(((0.0004379180297184)*gconst12*sj6*(cj6*cj6)))+(((-1.0)*gconst11*gconst12*gconst3*px))+(((-4.0)*gconst7*gconst9*(py*py)))+((gconst12*gconst2*gconst3*px))+(((4.0)*gconst10*gconst5*(py*py)))+(((-0.312798592656)*gconst11*gconst12*(cj6*cj6)))+(((-4.0)*gconst13*gconst7*px*py))+(((-4.0)*gconst6*gconst8*(py*py))));
op[5]=((((-4.0)*gconst5*gconst7*(py*py)))+(((-1.0)*gconst5*gconst6*(px*px)))+(((0.01251194370624)*cj6*gconst0*gconst8*sj6))+(((-0.312798592656)*gconst12*gconst7*(cj6*cj6)))+(((2.0)*gconst0*gconst1*gconst12*py))+(((2.0)*gconst6*gconst9*px*py))+(((-0.312798592656)*gconst11*gconst8*(cj6*cj6)))+(((2.0)*gconst11*gconst4*px*py))+(((-0.1738254672)*cj6*gconst4*py))+(((2.0)*gconst5*gconst7*(px*px)))+(((-0.625597185312)*gconst2*gconst8*(cj6*cj6)))+(((-0.0869127336)*cj6*gconst11*py))+(((-0.07)*cj6*gconst1*gconst3*gconst8))+((gconst0*gconst1*gconst9*px))+(((-2.0)*gconst0*gconst10*gconst5*py))+(((-0.07)*cj6*gconst4*gconst7*px))+(((-0.00625597185312)*cj6*gconst7*px*sj6))+(((-4.0)*gconst13*gconst2*px*py))+(((2.0)*gconst0*gconst6*gconst8*py))+(((0.0004379180297184)*gconst8*sj6*(cj6*cj6)))+(((-1.0)*gconst1*gconst3*gconst8*px))+(((0.00625597185312)*cj6*gconst8*px*sj6))+(((2.0)*gconst2*gconst9*(px*px)))+(((-4.0)*gconst1*gconst8*(py*py)))+(((-0.01251194370624)*cj6*gconst12*py*sj6))+(((-0.14)*cj6*gconst2*gconst4*py))+(((-4.0)*gconst11*gconst5*px*py))+(((-0.07)*cj6*gconst2*gconst8*px))+(((0.0008452206)*cj6*py))+(((-1.0)*gconst0*gconst10*gconst3*gconst8))+(((-1.0)*gconst0*gconst1*gconst8*px))+((gconst0*gconst5*gconst6*px))+(((0.006953018688)*gconst0*py*sj6))+(((0.00024335565408)*cj6*py*sj6))+(((-0.625597185312)*gconst4*gconst7*(cj6*cj6)))+(((-2.0)*gconst0*gconst1*gconst13*py))+(((-2.0)*gconst12*gconst2*gconst3*py))+(((-4.0)*gconst2*gconst9*(py*py)))+(((2.0)*gconst1*gconst12*gconst3*py))+(((-4.0)*gconst4*gconst6*(py*py)))+(((4.0)*gconst2*gconst5*px*py))+(((-2.0)*gconst11*gconst3*gconst4*py))+(((1.7516721188736e-5)*cj6*py*(sj6*sj6)))+(((-1.0)*gconst3*gconst4*gconst6*px))+(((-1.0)*gconst13*gconst7*(px*px)))+(((2.0)*gconst7*gconst8*px*py))+(((4.0)*gconst4*gconst7*(py*py)))+(((-0.1738254672)*cj6*gconst2*py))+(((-1.0)*gconst11*gconst3*gconst8*px))+(((-2.0)*gconst3*gconst7*gconst8*py))+(((-0.07)*cj6*gconst0*gconst1*gconst8))+(((0.003041945676)*gconst8*(cj6*cj6)))+(((-4.0)*gconst7*gconst9*px*py))+(((2.0)*gconst10*gconst5*px*py))+(((2.0)*gconst10*gconst3*gconst4*py))+(((-4.0)*gconst1*gconst5*px*py))+(((-1.0)*gconst0*gconst4*gconst6*px))+(((-0.14)*cj6*gconst1*gconst5*py))+(((-1.0)*gconst1*gconst9*(px*px)))+(((0.0869127336)*cj6*gconst0*gconst8))+(((4.0)*gconst1*gconst4*px*py))+(((-0.0869127336)*cj6*gconst12*py))+(((-0.07)*cj6*gconst3*gconst4*gconst6))+(((-0.07)*cj6*gconst0*gconst4*gconst6))+(((-2.0)*gconst0*gconst6*gconst9*py))+(((4.0)*gconst1*gconst9*(py*py)))+(((-4.0)*gconst2*gconst4*px*py))+(((0.28)*cj6*gconst1*gconst4*py))+(((-0.01251194370624)*cj6*gconst11*py*sj6))+(((-1.0)*gconst0*gconst10*gconst9*px))+(((2.0)*gconst3*gconst6*gconst8*py))+(((-0.02502388741248)*cj6*gconst2*py*sj6))+(((-0.02502388741248)*cj6*gconst4*py*sj6))+(((-1.0)*gconst2*gconst8*(px*px)))+(((-0.07)*cj6*gconst5*gconst6*px))+(((-1.0)*gconst0*gconst13*gconst6*px))+(((4.0)*gconst2*gconst8*(py*py)))+(((-1.0)*gconst11*gconst9*(px*px)))+(((0.02414916)*gconst0*py))+(((-1.0)*gconst4*gconst7*(px*px)))+(((-1.0)*gconst0*gconst12*gconst3*gconst6))+((gconst3*gconst4*gconst7*px))+((gconst2*gconst3*gconst8*px))+(((-0.0434563668)*cj6*gconst7*px))+(((2.0)*gconst12*gconst2*px*py))+(((2.0)*gconst1*gconst13*px*py))+(((0.0005004777482496)*gconst0*py*(sj6*sj6)))+(((4.0)*gconst5*gconst6*(py*py)))+(((-1.0)*gconst12*gconst3*gconst7*px))+(((2.0)*gconst0*gconst10*gconst4*py))+(((0.0434563668)*cj6*gconst8*px))+(((-0.07)*cj6*gconst1*gconst9*px)));
op[6]=((((0.00603729)*gconst0*px))+(((0.01251194370624)*cj6*gconst0*gconst4*sj6))+(((-1.0)*gconst11*gconst3*gconst4*px))+(((-4.0)*gconst2*gconst9*px*py))+(((-0.07)*cj6*gconst1*gconst3*gconst4))+(((-1.0)*gconst1*gconst3*gconst4*px))+(((0.0434563668)*cj6*gconst4*px))+(((-0.0434563668)*cj6*gconst11*px))+(((0.00012167782704)*cj6*px*sj6))+(((-2.0)*gconst0*gconst1*gconst9*py))+(((-1.0)*gconst0*gconst1*gconst13*px))+(((-0.07)*cj6*gconst1*gconst5*px))+(((-0.006953018688)*sj6*(py*py)))+(((-1.0)*gconst0*gconst10*gconst3*gconst4))+(((-4.0)*gconst1*gconst4*(py*py)))+(((-0.312798592656)*gconst12*gconst2*(cj6*cj6)))+(((0.001738254672)*sj6*(px*px)))+(((0.0004379180297184)*gconst4*sj6*(cj6*cj6)))+(((0.0004226103)*cj6*px))+(((-0.00625597185312)*cj6*gconst11*px*sj6))+(((2.0)*gconst1*gconst9*px*py))+(((-1.0)*gconst2*gconst4*(px*px)))+(((-1.0)*gconst0*gconst1*gconst4*px))+(((-2.0)*gconst2*gconst3*gconst8*py))+(((-0.07)*cj6*gconst2*gconst4*px))+(((-4.0)*gconst5*gconst7*px*py))+(((0.00625597185312)*cj6*gconst4*px*sj6))+(((2.0)*gconst3*gconst4*gconst6*py))+(((-2.0)*gconst0*gconst5*gconst6*py))+(((-1.0)*gconst0*gconst6*gconst9*px))+(((2.0)*gconst2*gconst5*(px*px)))+(((-1.0)*gconst7*gconst9*(px*px)))+(((0.0001251194370624)*(px*px)*(sj6*sj6)))+(((4.0)*gconst1*gconst5*(py*py)))+(((-0.0869127336)*cj6*gconst8*py))+(((2.0)*gconst2*gconst8*px*py))+(((-0.07)*cj6*gconst0*gconst1*gconst4))+(((-1.0)*gconst0*gconst3*gconst6*gconst8))+(((0.00603729)*(px*px)))+(((-0.02414916)*(py*py)))+(((4.0)*gconst2*gconst4*(py*py)))+(((2.0)*gconst4*gconst7*px*py))+(((-4.0)*gconst2*gconst5*(py*py)))+(((2.0)*gconst1*gconst3*gconst8*py))+(((-1.0)*gconst13*gconst2*(px*px)))+(((0.0869127336)*cj6*gconst0*gconst4))+(((0.003041945676)*gconst4*(cj6*cj6)))+(((-1.0)*gconst1*gconst5*(px*px)))+(((0.001738254672)*gconst0*px*sj6))+(((-1.0)*gconst0*gconst10*gconst5*px))+(((-1.0)*gconst12*gconst2*gconst3*px))+((gconst2*gconst3*gconst4*px))+(((-1.0)*gconst0*gconst1*gconst12*gconst3))+(((-0.312798592656)*gconst7*gconst8*(cj6*cj6)))+(((2.0)*gconst5*gconst6*px*py))+(((0.00625597185312)*cj6*gconst0*gconst12*sj6))+(((2.0)*gconst0*gconst4*gconst6*py))+(((0.0434563668)*cj6*gconst0*gconst12))+(((-1.0)*gconst3*gconst7*gconst8*px))+(((-0.0434563668)*cj6*gconst2*px))+(((2.0)*gconst0*gconst1*gconst8*py))+((gconst0*gconst1*gconst5*px))+(((8.758360594368e-6)*cj6*px*(sj6*sj6)))+(((0.0001251194370624)*gconst0*px*(sj6*sj6)))+(((-0.312798592656)*gconst11*gconst4*(cj6*cj6)))+(((-2.0)*gconst3*gconst4*gconst7*py))+(((-0.00625597185312)*cj6*gconst2*px*sj6))+(((-0.0005004777482496)*(py*py)*(sj6*sj6)))+(((-1.0)*gconst11*gconst5*(px*px)))+(((-0.0869127336)*cj6*gconst7*py))+(((-0.625597185312)*gconst2*gconst4*(cj6*cj6)))+(((-0.01251194370624)*cj6*gconst7*py*sj6))+(((-0.01251194370624)*cj6*gconst8*py*sj6)));
op[7]=(((sj6*x163*x174))+(((-1.0)*gconst4*x176*x183))+(((-1.0)*x172*x202))+(((-1.0)*gconst2*gconst9*x199))+((x168*x198))+((x168*x184))+(((0.01207458)*x168))+(((-1.0)*gconst4*x187*x191))+(((-1.0)*x162*x198))+(((2.0)*x162*x177))+(((2.0)*x162*x179))+(((-1.0)*gconst5*gconst7*x199))+(((-1.0)*x162*x184))+(((-1.0)*x207))+((x174*x175))+(((-4.0)*x162*x194))+(((-1.0)*x178*x202))+(((-0.0869127336)*gconst2*x176))+(((-1.0)*gconst3*x172*x173))+(((2.0)*x168*x186))+(((-1.0)*gconst9*x173*x190))+(((-1.0)*gconst5*x173*x187))+(((-1.0)*gconst3*x173*x178))+(((-1.0)*gconst2*x176*x183))+(((-2.0)*x168*x179))+(((-0.01207458)*x162))+(((-1.0)*x170*x200))+((gconst3*x170*x186))+(((-0.0869127336)*gconst4*x176))+(((-1.0)*gconst8*x190*x191)));
op[8]=((((-1.0)*x173*x200))+(((-1.0)*x194*x199))+(((-0.00625597185312)*gconst2*x195))+(((-1.0)*gconst0*x186*x191))+((x188*x204))+(((-0.0434563668)*gconst2*x167))+(((0.00603729)*x188))+(((-1.0)*gconst0*x173*x179))+(((0.0434563668)*gconst4*x174))+((x182*x188))+(((-1.0)*x177*x202))+(((0.00625597185312)*gconst4*sj6*x174)));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x208=px*px;
IkReal x209=cj3*cj3;
IkReal x210=py*py;
IkReal x211=pz*pz;
IkReal x212=(cj6*pz);
IkReal x213=((0.550716)*cj6);
IkReal x214=(cj6*sj4);
IkReal x215=(px*sj3);
IkReal x216=((264.04680134497)*cj6);
IkReal x217=(cj3*py);
IkReal x218=(cj4*cj6);
IkReal x219=(x209*x210);
IkReal x220=(x208*x209);
j5eval[0]=((((-14.8109131810421)*sj4*x212))+((x216*x220))+(((528.09360268994)*cj6*x215*x217))+(((14.8109131810421)*x215*x218))+(((28.9279113681495)*cj4*x212))+(((28.9279113681495)*x214*x215))+(((-1.0)*x211*x216))+(((-1.0)*x208*x216))+(((-1.0)*x216*x219))+(((-14.8109131810421)*x217*x218))+(((-1.0)*cj6))+(((-28.9279113681495)*x214*x217)));
j5eval[1]=IKsign(((((-0.060334242096)*x214*x217))+(((1.101432)*cj6*x215*x217))+(((-0.030890761872)*sj4*x212))+(((-0.0020856757104984)*cj6))+(((0.060334242096)*x214*x215))+((x213*x220))+(((0.060334242096)*cj4*x212))+(((-1.0)*x211*x213))+(((-1.0)*x213*x219))+(((0.030890761872)*x215*x218))+(((-1.0)*x208*x213))+(((-0.030890761872)*x217*x218))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x221=((0.696638549187219)*sj4);
IkReal x222=(px*sj3);
IkReal x223=(cj3*py);
IkReal x224=((0.35667466410794)*cj4);
if( (((-0.975968434013407)+(((-1.0)*x222*x224))+((x223*x224))+((x221*x223))+(((-1.0)*x221*x222))+(((-0.696638549187219)*cj4*pz))+(((0.35667466410794)*pz*sj4))+(((6.35874392262605)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-0.975968434013407)+(((-1.0)*x222*x224))+((x223*x224))+((x221*x223))+(((-1.0)*x221*x222))+(((-0.696638549187219)*cj4*pz))+(((0.35667466410794)*pz*sj4))+(((6.35874392262605)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x225=((-1.0)*(IKasin(((-0.975968434013407)+(((-1.0)*x222*x224))+((x223*x224))+((x221*x223))+(((-1.0)*x221*x222))+(((-0.696638549187219)*cj4*pz))+(((0.35667466410794)*pz*sj4))+(((6.35874392262605)*pp))))));
j7array[0]=((-1.85730050909461)+(((-1.0)*x225)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((1.28429214449518)+x225);
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j5eval[0]=((3.53874046591082)+(((-1.0)*sj7))+(((3.39432231765567)*cj7)));
j5eval[1]=IKsign(((0.157271676328)+(((0.150853323672)*cj7))+(((-0.04444284)*sj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x226=((0.035)*cj7);
IkReal x227=(pz*sj4);
IkReal x228=((28.651640142844)*sj7);
IkReal x229=(cj3*py);
IkReal x230=((3.58604002617468)*sj7);
IkReal x231=((0.279642)*sj7);
IkReal x232=(cj4*pz);
IkReal x233=((28.651640142844)*cj7);
IkReal x234=((3.58604002617468)*cj7);
IkReal x235=((0.035)*sj7);
IkReal x236=((0.279642)*cj7);
IkReal x237=(cj4*px*sj3);
IkReal x238=(px*sj3*sj4);
j5eval[0]=((1.67474529463219)+((x234*x237))+(((-1.0)*x233*x238))+(((-1.0)*cj4*x229*x234))+(((-4.61062289079602)*x237))+(((-1.0)*sj7))+(((-1.0)*x227*x234))+(((-1.0)*x227*x228))+((sj4*x229*x233))+((x228*x237))+(((-1.0)*sj4*x229*x230))+(((4.61062289079602)*cj4*x229))+((x230*x232))+((x230*x238))+(((-28.2127088436402)*x232))+(((-28.2127088436402)*x238))+(((1.46890546517061)*cj7))+(((4.61062289079602)*x227))+(((-1.0)*x232*x233))+(((28.2127088436402)*sj4*x229))+(((-1.0)*cj4*x228*x229)));
j5eval[1]=IKsign(((0.016345630524)+(((-0.275358)*x232))+(((-0.275358)*x238))+(((-1.0)*cj4*x229*x231))+(((-0.045)*x237))+(((-1.0)*x227*x231))+((sj4*x229*x236))+((x232*x235))+(((-1.0)*sj4*x229*x235))+(((-1.0)*cj4*x226*x229))+((x226*x237))+(((0.045)*x227))+((x235*x238))+(((-1.0)*x236*x238))+(((0.275358)*sj4*x229))+(((0.045)*cj4*x229))+(((0.014336619476)*cj7))+(((-1.0)*x226*x227))+((x231*x237))+(((-1.0)*x232*x236))+(((-0.009760069532)*sj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x239=((0.035)*cj7);
IkReal x240=((0.279642)*sj7);
IkReal x241=(cj3*py);
IkReal x242=(cj4*pz);
IkReal x243=(pz*sj4);
IkReal x244=(cj4*cj7);
IkReal x245=((6.65692793866453)*cj7);
IkReal x246=((0.035)*sj7);
IkReal x247=(px*sj3);
IkReal x248=((53.1873326464008)*sj7);
IkReal x249=((6.65692793866453)*sj7);
IkReal x250=(sj4*x247);
IkReal x251=(cj4*x247);
j5eval[0]=((-1.0)+((x245*x250))+((x248*x250))+(((-53.1873326464008)*x241*x244))+(((-2.72679550673676)*sj7))+(((53.1873326464008)*x244*x247))+(((52.3725246667082)*x251))+(((-52.3725246667082)*cj4*x241))+(((-52.3725246667082)*x243))+(((-8.55890734971154)*x250))+((cj4*x241*x249))+(((8.55890734971154)*sj4*x241))+(((-53.1873326464008)*cj7*x243))+(((-1.0)*x249*x251))+((x242*x245))+((x242*x248))+(((-1.85634513002512)*cj7))+(((-8.55890734971154)*x242))+((x243*x249))+(((-1.0)*sj4*x241*x248))+(((-1.0)*sj4*x241*x245)));
j5eval[1]=IKsign(((-0.005257680468)+(((-0.014336619476)*sj7))+(((0.275358)*x251))+(((-0.279642)*cj7*x243))+((x240*x242))+(((-0.275358)*cj4*x241))+(((-0.279642)*x241*x244))+(((0.045)*sj4*x241))+(((-0.009760069532)*cj7))+(((-0.045)*x242))+(((-1.0)*x246*x251))+((x239*x242))+((cj4*x241*x246))+(((-1.0)*sj4*x240*x241))+((x240*x250))+(((-1.0)*sj4*x239*x241))+(((-0.045)*x250))+(((0.279642)*x244*x247))+(((-0.275358)*x243))+((x243*x246))+((x239*x250))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x252=cj4*cj4;
IkReal x253=pz*pz;
IkReal x254=cj3*cj3;
IkReal x255=px*px;
IkReal x256=cj7*cj7;
IkReal x257=py*py;
IkReal x258=(cj7*sj7);
IkReal x259=(pz*sj4);
IkReal x260=(px*sj3);
IkReal x261=(cj3*py);
IkReal x262=((0.035)*sj7);
IkReal x263=((0.035)*cj7);
IkReal x264=((2.0)*cj4);
IkReal x265=(cj4*pz);
IkReal x266=((0.054778)*cj4);
IkReal x267=((0.275358)*cj4);
IkReal x268=(cj4*sj4);
IkReal x269=((0.045)*sj4);
IkReal x270=((0.056092)*cj4);
IkReal x271=((0.028046)*sj4);
IkReal x272=((0.279642)*sj4*sj7);
IkReal x273=((0.279642)*cj4*cj7);
IkReal x274=((1.0)*x253);
IkReal x275=((2.0)*x252);
IkReal x276=((1.0)*x254);
IkReal x277=(x254*x257);
IkReal x278=(x252*x255);
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(((-0.079438070048)+(((-1.0)*x260*x261*x275))+(((-0.01957494)*x258))+(((0.056092)*x259))+((x252*x277))+(((0.02516778)*sj7))+x253+x278+(((-1.0)*x259*x260*x264))+((x259*x261*x264))+(((0.076974648164)*x256))+(((-1.0)*x252*x274))+((x261*x270))+(((-1.0)*x260*x270))+(((-1.0)*x276*x278))+(((0.00315)*cj7)))),IkReal(((-0.020642276212)+(((0.054778)*x259))+(((-1.0)*pz*x260))+((pz*x260*x275))+(((-1.0)*pz*x261*x275))+(((-0.028046)*x265))+((x255*x268))+(((-0.00294636)*cj7))+(((0.078576661836)*sj7))+(((0.076974648164)*x258))+(((-1.0)*x268*x274))+((pz*x261))+((x261*x266))+(((0.01957494)*x256))+(((-1.0)*sj4*x260*x261*x264))+((x261*x271))+(((-1.0)*x260*x271))+(((-1.0)*x260*x266))+(((-1.0)*x255*x268*x276))+((x268*x277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
CheckValue<IkReal> x280=IKPowWithIntegerCheck(IKsign(((-0.005257680468)+(((-0.014336619476)*sj7))+((cj4*x261*x262))+(((0.279642)*sj7*x265))+((x259*x262))+((x260*x267))+((x260*x273))+((x260*x272))+(((-0.279642)*cj7*x259))+((x263*x265))+(((-0.009760069532)*cj7))+(((-0.045)*x265))+(((-0.275358)*x259))+(((-1.0)*x261*x267))+(((-1.0)*x261*x272))+(((-1.0)*x261*x273))+(((-1.0)*cj4*x260*x262))+((x261*x269))+(((-1.0)*sj4*x261*x263))+((sj4*x260*x263))+(((-1.0)*x260*x269)))),-1);
if(!x280.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x279.value)+(((1.5707963267949)*(x280.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x281=IKsin(j5);
IkReal x282=IKcos(j5);
IkReal x283=(pz*sj4);
IkReal x284=((0.279642)*cj7);
IkReal x285=((0.035)*sj7);
IkReal x286=(cj4*pz);
IkReal x287=((0.279642)*sj7);
IkReal x288=((0.035)*cj7);
IkReal x289=(cj4*px*sj3);
IkReal x290=((1.0)*x281);
IkReal x291=(cj3*py*sj4);
IkReal x292=((0.09)*x282);
IkReal x293=(px*sj3*sj4);
IkReal x294=((1.0)*x282);
IkReal x295=((0.550716)*x282);
IkReal x296=(cj3*cj4*py);
IkReal x297=((0.550716)*x281);
IkReal x298=((0.09)*x281);
evalcond[0]=((-0.028046)+(((-1.0)*x296))+(((-1.0)*x281*x284))+x289+(((-1.0)*x282*x288))+(((-1.0)*x282*x287))+(((-1.0)*x283))+(((-0.275358)*x281))+(((0.045)*x282))+((x281*x285)));
evalcond[1]=((0.054778)+(((-1.0)*x293))+(((-1.0)*x281*x287))+(((-1.0)*x281*x288))+x291+(((-1.0)*x282*x285))+(((-1.0)*x286))+(((0.275358)*x282))+(((0.045)*x281))+((x282*x284)));
evalcond[2]=((0.275358)+(((0.028046)*x281))+(((-1.0)*x289*x290))+(((-1.0)*x286*x294))+((x281*x296))+((x282*x291))+(((-1.0)*x293*x294))+x284+(((-1.0)*x285))+(((0.054778)*x282))+((x281*x283)));
evalcond[3]=((0.045)+(((-1.0)*x290*x293))+(((-1.0)*x286*x290))+((x281*x291))+(((-1.0)*x283*x294))+(((-1.0)*x287))+(((-1.0)*x288))+(((0.054778)*x281))+(((-0.028046)*x282))+((x282*x289))+(((-1.0)*x294*x296)));
evalcond[4]=((-0.0022095874)+(((-0.020375400936)*x281))+((x289*x297))+(((-1.0)*(px*px)))+(((-1.0)*x291*x295))+(((-1.0)*x291*x298))+(((-0.056092)*x283))+(((-1.0)*x289*x292))+(((0.056092)*x289))+(((0.109556)*x286))+(((-1.0)*x296*x297))+(((-0.027642981048)*x282))+((x283*x292))+((x286*x295))+((x286*x298))+(((-1.0)*x283*x297))+(((-1.0)*(pz*pz)))+(((-0.056092)*x296))+(((0.109556)*x293))+(((-0.109556)*x291))+((x293*x295))+((x293*x298))+(((-1.0)*(py*py)))+((x292*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1046=px*px;
IkReal x1047=cj3*cj3;
IkReal x1048=cj4*cj4;
IkReal x1049=py*py;
IkReal x1050=pz*pz;
IkReal x1051=cj7*cj7;
IkReal x1052=(cj7*sj7);
IkReal x1053=(pz*sj4);
IkReal x1054=((0.035)*cj7);
IkReal x1055=((0.279642)*sj7);
IkReal x1056=(cj4*pz);
IkReal x1057=((0.279642)*cj7);
IkReal x1058=(cj3*py);
IkReal x1059=((0.035)*sj7);
IkReal x1060=(px*sj3);
IkReal x1061=(cj4*sj4);
IkReal x1062=(cj4*x1060);
IkReal x1063=((2.0)*x1058);
IkReal x1064=(pz*x1048);
IkReal x1065=(cj4*x1058);
IkReal x1066=(sj4*x1060);
IkReal x1067=(x1047*x1049);
IkReal x1068=(x1046*x1048);
CheckValue<IkReal> x1069 = IKatan2WithCheck(IkReal(((-0.023714883788)+(((-1.0)*pz*x1058))+(((0.028046)*x1066))+(((0.028046)*x1056))+((pz*x1060))+((x1060*x1061*x1063))+((x1050*x1061))+(((-0.00294636)*cj7))+(((0.078576661836)*sj7))+(((-0.054778)*x1065))+(((-1.0)*x1061*x1067))+(((0.054778)*x1062))+((x1063*x1064))+((x1046*x1047*x1061))+(((0.076974648164)*x1052))+(((-0.054778)*x1053))+(((-1.0)*x1046*x1061))+(((-0.028046)*sj4*x1058))+(((-2.0)*x1060*x1064))+(((0.01957494)*x1051)))),IkReal(((-0.076260450048)+(((0.01927506)*sj7))+x1050+x1068+(((-0.154003323672)*cj7))+(((-2.0)*x1053*x1062))+((x1048*x1067))+((cj4*x1053*x1063))+(((-1.0)*x1048*x1050))+(((-0.056092)*x1062))+(((0.056092)*x1065))+(((-0.076974648164)*x1051))+(((0.056092)*x1053))+(((-1.0)*x1048*x1060*x1063))+(((0.01957494)*x1052))+(((-1.0)*x1047*x1068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1069.valid){
continue;
}
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(IKsign(((0.016345630524)+(((0.045)*x1065))+((x1055*x1062))+((x1054*x1062))+(((-0.275358)*x1056))+(((0.275358)*sj4*x1058))+((x1056*x1059))+(((-0.275358)*x1066))+(((-1.0)*x1057*x1066))+(((-1.0)*sj4*x1058*x1059))+(((-1.0)*x1056*x1057))+(((-1.0)*x1055*x1065))+(((-1.0)*x1054*x1065))+(((0.014336619476)*cj7))+(((-1.0)*x1053*x1054))+(((-1.0)*x1053*x1055))+((x1059*x1066))+((sj4*x1057*x1058))+(((-0.045)*x1062))+(((0.045)*x1053))+(((-0.009760069532)*sj7)))),-1);
if(!x1070.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1069.value)+(((1.5707963267949)*(x1070.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1071=IKsin(j5);
IkReal x1072=IKcos(j5);
IkReal x1073=(pz*sj4);
IkReal x1074=((0.279642)*cj7);
IkReal x1075=((0.035)*sj7);
IkReal x1076=(cj4*pz);
IkReal x1077=((0.279642)*sj7);
IkReal x1078=((0.035)*cj7);
IkReal x1079=(cj4*px*sj3);
IkReal x1080=((1.0)*x1071);
IkReal x1081=(cj3*py*sj4);
IkReal x1082=((0.09)*x1072);
IkReal x1083=(px*sj3*sj4);
IkReal x1084=((1.0)*x1072);
IkReal x1085=((0.550716)*x1072);
IkReal x1086=(cj3*cj4*py);
IkReal x1087=((0.550716)*x1071);
IkReal x1088=((0.09)*x1071);
evalcond[0]=((-0.028046)+x1079+(((-1.0)*x1071*x1074))+((x1071*x1075))+(((-0.275358)*x1071))+(((-1.0)*x1086))+(((-1.0)*x1073))+(((-1.0)*x1072*x1078))+(((-1.0)*x1072*x1077))+(((0.045)*x1072)));
evalcond[1]=((0.054778)+x1081+(((-1.0)*x1071*x1077))+(((-1.0)*x1071*x1078))+(((-1.0)*x1083))+(((0.275358)*x1072))+(((-1.0)*x1076))+((x1072*x1074))+(((-1.0)*x1072*x1075))+(((0.045)*x1071)));
evalcond[2]=((0.275358)+x1074+((x1071*x1073))+(((-1.0)*x1079*x1080))+(((-1.0)*x1076*x1084))+(((0.054778)*x1072))+((x1071*x1086))+(((-1.0)*x1083*x1084))+(((-1.0)*x1075))+((x1072*x1081))+(((0.028046)*x1071)));
evalcond[3]=((0.045)+(((-0.028046)*x1072))+(((-1.0)*x1080*x1083))+(((-1.0)*x1073*x1084))+(((-1.0)*x1076*x1080))+(((0.054778)*x1071))+((x1071*x1081))+(((-1.0)*x1084*x1086))+((x1072*x1079))+(((-1.0)*x1077))+(((-1.0)*x1078)));
evalcond[4]=((-0.0022095874)+((x1079*x1087))+((x1073*x1082))+((x1082*x1086))+(((-1.0)*(px*px)))+((x1076*x1088))+((x1076*x1085))+(((-0.056092)*x1086))+(((0.109556)*x1076))+(((0.109556)*x1083))+(((-1.0)*x1081*x1085))+(((-1.0)*x1081*x1088))+(((-1.0)*x1073*x1087))+(((-1.0)*x1079*x1082))+(((-0.056092)*x1073))+(((-1.0)*(pz*pz)))+(((-0.109556)*x1081))+(((0.056092)*x1079))+(((-1.0)*(py*py)))+(((-0.027642981048)*x1072))+(((-1.0)*x1086*x1087))+((x1083*x1088))+((x1083*x1085))+(((-0.020375400936)*x1071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1089=((0.035)*cj7);
IkReal x1090=((0.279642)*sj7);
IkReal x1091=(pz*sj4);
IkReal x1092=((0.279642)*cj7);
IkReal x1093=(cj4*pz);
IkReal x1094=((0.035)*sj7);
IkReal x1095=(px*sj3*sj4);
IkReal x1096=(cj3*py*sj4);
IkReal x1097=(cj4*px*sj3);
IkReal x1098=(cj3*cj4*py);
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal(((-0.010187700468)+(((-1.0)*x1091*x1092))+(((0.275358)*x1097))+((x1089*x1096))+(((-1.0)*x1090*x1095))+(((-1.0)*x1090*x1093))+(((-0.005925609532)*cj7))+(((0.016299839476)*sj7))+(((-0.045)*x1096))+((x1094*x1098))+(((-1.0)*x1089*x1095))+(((-1.0)*x1089*x1093))+(((0.045)*x1095))+(((0.045)*x1093))+(((-1.0)*x1094*x1097))+((x1092*x1097))+(((-1.0)*x1092*x1098))+((x1091*x1094))+(((-0.275358)*x1098))+(((-0.275358)*x1091))+((x1090*x1096)))),IkReal(((-0.013821490524)+(((0.275358)*x1093))+(((0.275358)*x1095))+(((-0.005925609532)*sj7))+((x1089*x1097))+(((-1.0)*x1090*x1091))+(((-1.0)*x1090*x1098))+(((-0.016299839476)*cj7))+(((-0.045)*x1097))+((x1094*x1096))+(((-1.0)*x1089*x1091))+(((-1.0)*x1089*x1098))+(((0.045)*x1091))+(((0.045)*x1098))+(((-1.0)*x1094*x1095))+((x1092*x1095))+((x1092*x1093))+(((-1.0)*x1092*x1096))+(((-1.0)*x1093*x1094))+(((-0.275358)*x1096))+((x1090*x1097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(IKsign(((0.157271676328)+(((0.150853323672)*cj7))+(((-0.04444284)*sj7)))),-1);
if(!x1100.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1099.value)+(((1.5707963267949)*(x1100.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1101=IKsin(j5);
IkReal x1102=IKcos(j5);
IkReal x1103=(pz*sj4);
IkReal x1104=((0.279642)*cj7);
IkReal x1105=((0.035)*sj7);
IkReal x1106=(cj4*pz);
IkReal x1107=((0.279642)*sj7);
IkReal x1108=((0.035)*cj7);
IkReal x1109=(cj4*px*sj3);
IkReal x1110=((1.0)*x1101);
IkReal x1111=(cj3*py*sj4);
IkReal x1112=((0.09)*x1102);
IkReal x1113=(px*sj3*sj4);
IkReal x1114=((1.0)*x1102);
IkReal x1115=((0.550716)*x1102);
IkReal x1116=(cj3*cj4*py);
IkReal x1117=((0.550716)*x1101);
IkReal x1118=((0.09)*x1101);
evalcond[0]=((-0.028046)+x1109+(((-1.0)*x1103))+((x1101*x1105))+(((-1.0)*x1116))+(((0.045)*x1102))+(((-0.275358)*x1101))+(((-1.0)*x1102*x1107))+(((-1.0)*x1102*x1108))+(((-1.0)*x1101*x1104)));
evalcond[1]=((0.054778)+x1111+(((0.275358)*x1102))+((x1102*x1104))+(((-1.0)*x1106))+(((-1.0)*x1113))+(((0.045)*x1101))+(((-1.0)*x1102*x1105))+(((-1.0)*x1101*x1107))+(((-1.0)*x1101*x1108)));
evalcond[2]=((0.275358)+x1104+((x1102*x1111))+(((-1.0)*x1109*x1110))+(((0.054778)*x1102))+((x1101*x1103))+((x1101*x1116))+(((-1.0)*x1113*x1114))+(((0.028046)*x1101))+(((-1.0)*x1106*x1114))+(((-1.0)*x1105)));
evalcond[3]=((0.045)+(((-1.0)*x1103*x1114))+(((-1.0)*x1114*x1116))+((x1102*x1109))+(((0.054778)*x1101))+((x1101*x1111))+(((-1.0)*x1106*x1110))+(((-0.028046)*x1102))+(((-1.0)*x1110*x1113))+(((-1.0)*x1107))+(((-1.0)*x1108)));
evalcond[4]=((-0.0022095874)+((x1109*x1117))+(((-1.0)*x1103*x1117))+(((-1.0)*(px*px)))+(((-0.109556)*x1111))+(((-1.0)*x1109*x1112))+((x1113*x1115))+((x1113*x1118))+((x1112*x1116))+(((-1.0)*x1116*x1117))+(((0.056092)*x1109))+(((-1.0)*(pz*pz)))+((x1103*x1112))+(((0.109556)*x1106))+(((-1.0)*(py*py)))+(((0.109556)*x1113))+(((-0.027642981048)*x1102))+(((-0.056092)*x1103))+(((-1.0)*x1111*x1115))+(((-1.0)*x1111*x1118))+(((-0.020375400936)*x1101))+(((-0.056092)*x1116))+((x1106*x1115))+((x1106*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x1119=((0.359925798082159)*cj4);
IkReal x1120=(cj3*py);
IkReal x1121=(px*sj3);
IkReal x1122=((0.70298849630409)*sj4);
if( (((0.975881121279537)+(((0.70298849630409)*cj4*pz))+((x1121*x1122))+((x1119*x1121))+(((-1.0)*x1119*x1120))+(((-1.0)*x1120*x1122))+(((-6.41670466523139)*pp))+(((-0.359925798082159)*pz*sj4)))) < -1-IKFAST_SINCOS_THRESH || (((0.975881121279537)+(((0.70298849630409)*cj4*pz))+((x1121*x1122))+((x1119*x1121))+(((-1.0)*x1119*x1120))+(((-1.0)*x1120*x1122))+(((-6.41670466523139)*pp))+(((-0.359925798082159)*pz*sj4)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1123=IKasin(((0.975881121279537)+(((0.70298849630409)*cj4*pz))+((x1121*x1122))+((x1119*x1121))+(((-1.0)*x1119*x1120))+(((-1.0)*x1120*x1122))+(((-6.41670466523139)*pp))+(((-0.359925798082159)*pz*sj4))));
j7array[0]=((-1.78585154383919)+(((-1.0)*x1123)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((1.3557411097506)+x1123);
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j5eval[0]=((4.6868607039206)+(((-1.0)*sj7))+(((4.57806149629133)*cj7)));
j5eval[1]=IKsign(((0.155871676328)+(((0.152253323672)*cj7))+(((-0.03325716)*sj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1124=((47.1921071562094)*cj7);
IkReal x1125=((0.035)*cj4);
IkReal x1126=((0.279642)*sj4);
IkReal x1127=((5.90656536023677)*sj7);
IkReal x1128=(pz*sj4);
IkReal x1129=((47.1921071562094)*sj7);
IkReal x1130=(px*sj3);
IkReal x1131=((0.279642)*cj4);
IkReal x1132=((0.025)*cj4);
IkReal x1133=(cj3*py);
IkReal x1134=(cj4*pz);
IkReal x1135=((5.90656536023677)*cj4);
IkReal x1136=(pz*sj7);
IkReal x1137=((0.035)*sj7);
IkReal x1138=((4.21897525731198)*cj4);
IkReal x1139=(sj4*x1133);
IkReal x1140=(cj7*x1130);
IkReal x1141=(cj7*x1128);
j5eval[0]=((2.42716136565038)+(((-1.0)*x1135*x1140))+(((2.75074477789604)*cj7))+sj7+((x1130*x1138))+((sj4*x1127*x1130))+(((-4.21897525731198)*x1128))+(((5.90656536023677)*x1141))+(((-1.0)*x1127*x1139))+(((46.4691435561164)*x1139))+((cj7*x1133*x1135))+((x1124*x1139))+(((-46.4691435561164)*sj4*x1130))+((x1128*x1129))+(((-1.0)*cj4*x1129*x1130))+((cj4*x1129*x1133))+(((-1.0)*x1124*x1134))+(((-1.0)*x1133*x1138))+(((-1.0)*sj4*x1124*x1130))+(((-46.4691435561164)*x1134))+((x1127*x1134)));
j5eval[1]=IKsign(((0.014382410524)+(((-1.0)*cj7*pz*x1131))+((x1126*x1136))+(((0.275358)*x1139))+(((0.035)*x1141))+((x1130*x1132))+(((0.005925609532)*sj7))+((sj7*x1131*x1133))+((sj4*x1130*x1137))+(((-0.025)*x1128))+((x1125*x1136))+(((-1.0)*x1125*x1140))+(((0.016299839476)*cj7))+((cj7*x1125*x1133))+(((-1.0)*x1132*x1133))+(((-1.0)*sj7*x1130*x1131))+(((-1.0)*x1126*x1140))+(((-0.275358)*x1134))+((cj7*x1126*x1133))+(((-1.0)*x1137*x1139))+(((-0.275358)*sj4*x1130))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1142=((0.035)*cj7);
IkReal x1143=((0.279642)*sj7);
IkReal x1144=(cj4*sj7);
IkReal x1145=((47.1921071562094)*pz);
IkReal x1146=(px*sj3);
IkReal x1147=(pz*sj4);
IkReal x1148=((46.4691435561164)*cj4);
IkReal x1149=(cj4*cj7);
IkReal x1150=(cj3*py);
IkReal x1151=(cj4*pz);
IkReal x1152=((0.275358)*cj4);
IkReal x1153=((47.1921071562094)*sj7);
IkReal x1154=((5.90656536023677)*cj7);
IkReal x1155=(sj4*x1146);
IkReal x1156=(sj4*x1150);
j5eval[0]=((1.53438062681988)+(((-1.0)*x1154*x1156))+(((46.4691435561164)*x1147))+(((47.1921071562094)*x1149*x1150))+cj7+(((4.21897525731198)*x1156))+(((-47.1921071562094)*x1146*x1149))+(((5.90656536023677)*pz*x1149))+(((-5.90656536023677)*x1144*x1150))+(((-1.0)*x1146*x1148))+((x1153*x1155))+(((-5.90656536023677)*sj7*x1147))+(((-4.21897525731198)*x1155))+(((-4.21897525731198)*x1151))+(((5.90656536023677)*x1144*x1146))+((x1148*x1150))+((x1144*x1145))+(((-1.0)*x1153*x1156))+((cj7*sj4*x1145))+((x1154*x1155))+(((-2.75074477789604)*sj7)));
j5eval[1]=IKsign(((0.009092140468)+(((0.035)*x1144*x1146))+(((-0.035)*sj7*x1147))+(((0.279642)*x1149*x1150))+((x1142*x1151))+((x1142*x1155))+(((-0.025)*x1155))+(((-0.025)*x1151))+((x1143*x1151))+((x1143*x1155))+(((-1.0)*x1143*x1156))+(((-0.035)*x1144*x1150))+(((-1.0)*x1146*x1152))+((x1150*x1152))+(((0.025)*x1156))+(((-0.016299839476)*sj7))+(((0.275358)*x1147))+(((0.005925609532)*cj7))+(((0.279642)*cj7*x1147))+(((-1.0)*x1142*x1156))+(((-0.279642)*x1146*x1149))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1157=cj4*cj4;
IkReal x1158=px*px;
IkReal x1159=pz*pz;
IkReal x1160=cj3*cj3;
IkReal x1161=cj7*cj7;
IkReal x1162=py*py;
IkReal x1163=(cj7*sj7);
IkReal x1164=((0.035)*cj7);
IkReal x1165=((0.279642)*sj7);
IkReal x1166=((2.0)*pz);
IkReal x1167=(px*sj3);
IkReal x1168=(cj4*pz);
IkReal x1169=((0.054778)*cj4);
IkReal x1170=(cj3*py);
IkReal x1171=((0.275358)*cj4);
IkReal x1172=((0.279642)*cj7);
IkReal x1173=(pz*sj4);
IkReal x1174=((0.056092)*cj4);
IkReal x1175=((0.035)*sj7);
IkReal x1176=(cj4*sj4);
IkReal x1177=(sj4*x1167);
IkReal x1178=(sj4*x1170);
IkReal x1179=((1.0)*x1157);
IkReal x1180=(x1160*x1162);
IkReal x1181=(x1158*x1160);
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(IKsign(((0.009092140468)+((x1164*x1177))+(((-1.0)*x1165*x1178))+((x1164*x1168))+(((-1.0)*x1173*x1175))+(((0.025)*x1178))+(((-1.0)*cj4*x1170*x1175))+((x1165*x1168))+((x1165*x1177))+(((0.275358)*x1173))+((cj4*x1170*x1172))+(((-0.025)*x1168))+(((-0.025)*x1177))+((x1172*x1173))+(((-1.0)*x1167*x1171))+(((-1.0)*x1164*x1178))+(((-0.016299839476)*sj7))+(((-1.0)*cj4*x1167*x1172))+((x1170*x1171))+(((0.005925609532)*cj7))+((cj4*x1167*x1175)))),-1);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal(((0.078038070048)+(((0.01957494)*x1163))+((x1166*x1167*x1176))+(((-1.0)*x1158*x1179))+(((-1.0)*x1166*x1170*x1176))+(((-1.0)*x1179*x1180))+(((-0.076974648164)*x1161))+(((-1.0)*x1159))+((x1157*x1181))+(((2.0)*x1157*x1167*x1170))+((x1167*x1174))+(((-1.0)*x1170*x1174))+(((-0.056092)*x1173))+(((-0.00175)*cj7))+(((-0.0139821)*sj7))+((x1157*x1159)))),IkReal(((-0.018207723788)+(((0.01957494)*x1161))+(((-0.028046)*x1178))+(((0.076974648164)*x1163))+(((-0.054778)*x1173))+((x1176*x1181))+(((0.028046)*x1168))+(((0.077876661836)*sj7))+(((0.028046)*x1177))+(((-1.0)*x1157*x1166*x1167))+(((-1.0)*pz*x1170))+((pz*x1167))+(((2.0)*x1167*x1170*x1176))+(((-1.0)*x1158*x1176))+(((-1.0)*x1169*x1170))+((x1167*x1169))+(((0.00264648)*cj7))+(((-1.0)*x1176*x1180))+((x1157*x1166*x1170))+((x1159*x1176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1182.value)))+(x1183.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1184=IKcos(j5);
IkReal x1185=IKsin(j5);
IkReal x1186=(pz*sj4);
IkReal x1187=((0.279642)*cj7);
IkReal x1188=((0.279642)*sj7);
IkReal x1189=((0.035)*sj7);
IkReal x1190=(cj4*pz);
IkReal x1191=((0.05)*sj4);
IkReal x1192=(cj3*py);
IkReal x1193=((0.035)*cj7);
IkReal x1194=(cj4*px*sj3);
IkReal x1195=((1.0)*x1185);
IkReal x1196=(px*sj3*sj4);
IkReal x1197=((1.0)*x1184);
IkReal x1198=((0.05)*x1184);
IkReal x1199=((0.550716)*x1184);
IkReal x1200=((0.550716)*x1185);
IkReal x1201=(x1185*x1192);
IkReal x1202=(sj4*x1184*x1192);
evalcond[0]=((-0.028046)+((x1184*x1193))+x1194+((x1184*x1188))+((x1185*x1189))+(((-0.025)*x1184))+(((-1.0)*x1185*x1187))+(((-1.0)*cj4*x1192))+(((-1.0)*x1186))+(((-0.275358)*x1185)));
evalcond[1]=((0.054778)+((x1184*x1187))+((sj4*x1192))+(((0.275358)*x1184))+((x1185*x1188))+(((-0.025)*x1185))+((x1185*x1193))+(((-1.0)*x1184*x1189))+(((-1.0)*x1190))+(((-1.0)*x1196)));
evalcond[2]=((0.025)+((x1184*x1186))+(((-1.0)*x1194*x1197))+((x1185*x1196))+((x1185*x1190))+(((-1.0)*x1193))+(((-1.0)*sj4*x1192*x1195))+(((-1.0)*x1188))+(((0.028046)*x1184))+((cj4*x1184*x1192))+(((-0.054778)*x1185)));
evalcond[3]=((0.275358)+x1187+x1202+(((-1.0)*x1190*x1197))+(((-1.0)*x1194*x1195))+((x1185*x1186))+(((-1.0)*x1189))+(((0.028046)*x1185))+(((-1.0)*x1196*x1197))+(((0.054778)*x1184))+((cj4*x1201)));
evalcond[4]=((-0.0008095874)+(((-0.109556)*sj4*x1192))+(((-1.0)*(px*px)))+(((-1.0)*px*sj3*x1185*x1191))+(((0.056092)*x1194))+((x1194*x1198))+((x1191*x1201))+(((-1.0)*x1186*x1198))+(((-1.0)*sj4*x1192*x1199))+(((-0.031569421048)*x1184))+((x1194*x1200))+((x1196*x1199))+(((-1.0)*x1186*x1200))+(((-1.0)*(pz*pz)))+(((-0.012706480936)*x1185))+(((-1.0)*cj4*x1192*x1200))+(((-1.0)*cj4*x1192*x1198))+(((-0.056092)*x1186))+(((-0.056092)*cj4*x1192))+(((-0.05)*x1185*x1190))+(((-1.0)*(py*py)))+((x1190*x1199))+(((0.109556)*x1190))+(((0.109556)*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1203=px*px;
IkReal x1204=cj3*cj3;
IkReal x1205=cj4*cj4;
IkReal x1206=py*py;
IkReal x1207=pz*pz;
IkReal x1208=cj7*cj7;
IkReal x1209=(cj7*sj7);
IkReal x1210=(pz*sj4);
IkReal x1211=((0.035)*cj7);
IkReal x1212=(px*sj3);
IkReal x1213=((0.275358)*sj4);
IkReal x1214=(cj4*sj4);
IkReal x1215=(cj4*sj7);
IkReal x1216=(cj4*pz);
IkReal x1217=(cj3*py);
IkReal x1218=((0.028046)*sj4);
IkReal x1219=((0.279642)*sj7);
IkReal x1220=((0.279642)*cj7*sj4);
IkReal x1221=((2.0)*x1217);
IkReal x1222=(pz*x1205);
IkReal x1223=(cj4*x1217);
IkReal x1224=((0.035)*sj4*sj7);
IkReal x1225=(x1203*x1205);
IkReal x1226=(x1204*x1206);
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(IKsign(((0.014382410524)+(((-1.0)*x1212*x1220))+((x1210*x1219))+((x1210*x1211))+((x1217*x1220))+((x1213*x1217))+((x1211*x1223))+(((0.005925609532)*sj7))+(((-1.0)*cj4*x1211*x1212))+(((-0.275358)*x1216))+(((-0.279642)*x1212*x1215))+(((-1.0)*x1212*x1213))+(((-0.025)*x1210))+(((0.016299839476)*cj7))+(((-1.0)*x1217*x1224))+(((0.279642)*x1215*x1217))+(((-0.025)*x1223))+(((0.035)*pz*x1215))+(((0.025)*cj4*x1212))+((x1212*x1224))+(((-0.279642)*cj7*x1216)))),-1);
if(!x1227.valid){
continue;
}
CheckValue<IkReal> x1228 = IKatan2WithCheck(IkReal(((0.015135116212)+((x1212*x1218))+((x1203*x1204*x1214))+(((-1.0)*pz*x1217))+(((0.054778)*cj4*x1212))+(((-0.076974648164)*x1209))+(((-0.077876661836)*sj7))+(((-0.054778)*x1223))+(((-1.0)*x1203*x1214))+((x1207*x1214))+(((-1.0)*x1217*x1218))+(((-1.0)*x1214*x1226))+((x1221*x1222))+(((0.028046)*x1216))+(((-0.00264648)*cj7))+(((-0.01957494)*x1208))+((pz*x1212))+(((-2.0)*x1212*x1222))+(((-0.054778)*x1210))+((x1212*x1214*x1221)))),IkReal(((-0.076260450048)+(((0.056092)*x1223))+((x1205*x1226))+x1207+x1225+(((0.01927506)*sj7))+(((-0.154003323672)*cj7))+(((-0.076974648164)*x1208))+(((-1.0)*x1204*x1225))+(((-0.056092)*cj4*x1212))+(((-1.0)*x1205*x1207))+(((-2.0)*cj4*x1210*x1212))+((cj4*x1210*x1221))+(((0.01957494)*x1209))+(((-1.0)*x1205*x1212*x1221))+(((0.056092)*x1210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1228.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1227.value)))+(x1228.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1229=IKcos(j5);
IkReal x1230=IKsin(j5);
IkReal x1231=(pz*sj4);
IkReal x1232=((0.279642)*cj7);
IkReal x1233=((0.279642)*sj7);
IkReal x1234=((0.035)*sj7);
IkReal x1235=(cj4*pz);
IkReal x1236=((0.05)*sj4);
IkReal x1237=(cj3*py);
IkReal x1238=((0.035)*cj7);
IkReal x1239=(cj4*px*sj3);
IkReal x1240=((1.0)*x1230);
IkReal x1241=(px*sj3*sj4);
IkReal x1242=((1.0)*x1229);
IkReal x1243=((0.05)*x1229);
IkReal x1244=((0.550716)*x1229);
IkReal x1245=((0.550716)*x1230);
IkReal x1246=(x1230*x1237);
IkReal x1247=(sj4*x1229*x1237);
evalcond[0]=((-0.028046)+(((-1.0)*x1231))+x1239+(((-1.0)*x1230*x1232))+(((-0.275358)*x1230))+(((-0.025)*x1229))+(((-1.0)*cj4*x1237))+((x1230*x1234))+((x1229*x1238))+((x1229*x1233)));
evalcond[1]=((0.054778)+(((-1.0)*x1235))+(((-1.0)*x1241))+(((0.275358)*x1229))+((sj4*x1237))+(((-0.025)*x1230))+(((-1.0)*x1229*x1234))+((x1230*x1233))+((x1230*x1238))+((x1229*x1232)));
evalcond[2]=((0.025)+(((-1.0)*x1239*x1242))+(((0.028046)*x1229))+(((-1.0)*x1233))+(((-1.0)*x1238))+(((-0.054778)*x1230))+((cj4*x1229*x1237))+(((-1.0)*sj4*x1237*x1240))+((x1230*x1235))+((x1230*x1241))+((x1229*x1231)));
evalcond[3]=((0.275358)+(((0.028046)*x1230))+(((-1.0)*x1239*x1240))+x1247+x1232+(((0.054778)*x1229))+((cj4*x1246))+(((-1.0)*x1234))+(((-1.0)*x1235*x1242))+(((-1.0)*x1241*x1242))+((x1230*x1231)));
evalcond[4]=((-0.0008095874)+(((-1.0)*cj4*x1237*x1245))+(((-1.0)*cj4*x1237*x1243))+(((-1.0)*x1231*x1245))+(((-1.0)*x1231*x1243))+(((-1.0)*(px*px)))+((x1236*x1246))+((x1239*x1245))+((x1239*x1243))+(((-0.056092)*cj4*x1237))+(((0.109556)*x1241))+(((-0.109556)*sj4*x1237))+(((-1.0)*px*sj3*x1230*x1236))+(((-0.056092)*x1231))+(((-0.031569421048)*x1229))+(((-1.0)*sj4*x1237*x1244))+(((0.109556)*x1235))+(((-0.012706480936)*x1230))+(((-1.0)*(pz*pz)))+((x1241*x1244))+(((-0.05)*x1230*x1235))+(((-1.0)*(py*py)))+((x1235*x1244))+(((0.056092)*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1248=((0.035)*cj7);
IkReal x1249=((0.279642)*sj7);
IkReal x1250=(cj3*py);
IkReal x1251=(cj4*pz);
IkReal x1252=(pz*sj4);
IkReal x1253=((0.279642)*cj7);
IkReal x1254=((0.035)*sj7);
IkReal x1255=(px*sj3*sj4);
IkReal x1256=(cj4*px*sj3);
CheckValue<IkReal> x1257=IKPowWithIntegerCheck(IKsign(((0.155871676328)+(((0.152253323672)*cj7))+(((-0.03325716)*sj7)))),-1);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258 = IKatan2WithCheck(IkReal(((-0.006353240468)+(((-0.014336619476)*sj7))+((cj4*x1250*x1254))+(((-1.0)*sj4*x1249*x1250))+(((0.275358)*x1256))+(((-0.009760069532)*cj7))+(((-1.0)*x1252*x1253))+(((-1.0)*sj4*x1248*x1250))+(((-0.275358)*cj4*x1250))+(((-0.025)*x1255))+(((-0.025)*x1251))+((x1253*x1256))+((x1252*x1254))+(((-1.0)*x1254*x1256))+(((-0.275358)*x1252))+((x1249*x1251))+((x1249*x1255))+(((-1.0)*cj4*x1250*x1253))+((x1248*x1251))+((x1248*x1255))+(((0.025)*sj4*x1250)))),IkReal(((-0.015784710524)+(((-1.0)*sj4*x1250*x1253))+(((-1.0)*x1249*x1256))+(((0.275358)*x1251))+(((0.275358)*x1255))+((cj4*x1248*x1250))+(((0.009760069532)*sj7))+(((-1.0)*x1248*x1256))+(((-0.025)*x1252))+((cj4*x1249*x1250))+((sj4*x1250*x1254))+((x1253*x1255))+(((-1.0)*x1254*x1255))+(((-1.0)*x1251*x1254))+(((-0.275358)*sj4*x1250))+(((-0.025)*cj4*x1250))+((x1251*x1253))+(((0.025)*x1256))+((x1249*x1252))+((x1248*x1252))+(((-0.014336619476)*cj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1258.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1257.value)))+(x1258.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1259=IKcos(j5);
IkReal x1260=IKsin(j5);
IkReal x1261=(pz*sj4);
IkReal x1262=((0.279642)*cj7);
IkReal x1263=((0.279642)*sj7);
IkReal x1264=((0.035)*sj7);
IkReal x1265=(cj4*pz);
IkReal x1266=((0.05)*sj4);
IkReal x1267=(cj3*py);
IkReal x1268=((0.035)*cj7);
IkReal x1269=(cj4*px*sj3);
IkReal x1270=((1.0)*x1260);
IkReal x1271=(px*sj3*sj4);
IkReal x1272=((1.0)*x1259);
IkReal x1273=((0.05)*x1259);
IkReal x1274=((0.550716)*x1259);
IkReal x1275=((0.550716)*x1260);
IkReal x1276=(x1260*x1267);
IkReal x1277=(sj4*x1259*x1267);
evalcond[0]=((-0.028046)+x1269+(((-1.0)*cj4*x1267))+(((-1.0)*x1260*x1262))+(((-0.025)*x1259))+((x1259*x1263))+((x1259*x1268))+((x1260*x1264))+(((-0.275358)*x1260))+(((-1.0)*x1261)));
evalcond[1]=((0.054778)+(((0.275358)*x1259))+((sj4*x1267))+(((-0.025)*x1260))+((x1259*x1262))+((x1260*x1263))+((x1260*x1268))+(((-1.0)*x1271))+(((-1.0)*x1265))+(((-1.0)*x1259*x1264)));
evalcond[2]=((0.025)+(((-0.054778)*x1260))+(((0.028046)*x1259))+(((-1.0)*sj4*x1267*x1270))+((x1260*x1271))+(((-1.0)*x1269*x1272))+((x1259*x1261))+((x1260*x1265))+((cj4*x1259*x1267))+(((-1.0)*x1268))+(((-1.0)*x1263)));
evalcond[3]=((0.275358)+(((0.054778)*x1259))+x1277+x1262+(((0.028046)*x1260))+(((-1.0)*x1271*x1272))+(((-1.0)*x1269*x1270))+((x1260*x1261))+(((-1.0)*x1265*x1272))+((cj4*x1276))+(((-1.0)*x1264)));
evalcond[4]=((-0.0008095874)+((x1269*x1273))+((x1269*x1275))+(((-1.0)*(px*px)))+((x1265*x1274))+(((-0.056092)*x1261))+(((-1.0)*cj4*x1267*x1273))+(((-1.0)*cj4*x1267*x1275))+(((-1.0)*x1261*x1273))+(((-1.0)*x1261*x1275))+(((-1.0)*sj4*x1267*x1274))+(((-0.012706480936)*x1260))+(((-1.0)*px*sj3*x1260*x1266))+(((-0.05)*x1260*x1265))+((x1266*x1276))+(((-0.056092)*cj4*x1267))+(((-0.109556)*sj4*x1267))+(((-1.0)*(pz*pz)))+((x1271*x1274))+(((0.056092)*x1269))+(((0.109556)*x1271))+(((-1.0)*(py*py)))+(((0.109556)*x1265))+(((-0.031569421048)*x1259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1278=IKPowWithIntegerCheck(IKsign(((((-0.030890761872)*cj3*cj4*cj6*py))+(((1.101432)*cj3*cj6*px*py*sj3))+(((-0.0020856757104984)*cj6))+(((-0.550716)*cj6*(pz*pz)))+(((-0.550716)*cj6*(px*px)))+(((-0.550716)*cj6*(cj3*cj3)*(py*py)))+(((-0.060334242096)*cj3*cj6*py*sj4))+(((0.550716)*cj6*(cj3*cj3)*(px*px)))+(((0.060334242096)*cj4*cj6*pz))+(((-0.030890761872)*cj6*pz*sj4))+(((0.060334242096)*cj6*px*sj3*sj4))+(((0.030890761872)*cj4*cj6*px*sj3)))),-1);
if(!x1278.valid){
continue;
}
CheckValue<IkReal> x1279 = IKatan2WithCheck(IkReal(((((0.112184)*cj3*cj4*cj6*py*pz*sj4))+(((-0.109556)*cj4*cj6*sj4*(pz*pz)))+(((-0.056092)*cj6*(cj4*cj4)*(pz*pz)))+(((0.029606201048)*cj3*px*sj6))+(((-0.219112)*cj3*cj4*cj6*px*py*sj3*sj4))+(((0.109556)*cj3*cj6*py*pz))+(((-0.02)*py*pz*sj3*sj4*sj6))+(((0.056092)*cj6*(cj4*cj4)*(px*px)))+(((0.109556)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((-1.0)*cj4*cj6*sj3*(px*px*px)))+(((-0.112184)*cj4*cj6*px*pz*sj3*sj4))+(((0.008579767576)*cj3*cj6*py*sj4))+(((-0.109556)*cj6*px*pz*sj3))+(((-1.0)*cj4*cj6*px*sj3*(py*py)))+(((-0.008579767576)*cj6*px*sj3*sj4))+(((-0.550716)*cj4*py*pz*sj3*sj6))+(((0.07)*cj4*px*py))+(((-0.02)*cj3*cj4*sj3*sj6*(py*py)))+(((-0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.04)*cj4*px*py*sj6*(cj3*cj3)))+(((-0.112184)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((-0.550716)*cj3*sj3*sj4*sj6*(px*px)))+(((0.002882743632)*cj3*cj4*cj6*py))+(((0.084138)*cj6*(pz*pz)))+((cj6*sj4*(pz*pz*pz)))+(((0.02)*cj3*cj4*sj3*sj6*(px*px)))+((cj6*pz*sj4*(py*py)))+(((-0.550716)*px*py*sj4*sj6))+(((0.029606201048)*py*sj3*sj6))+(((0.109556)*cj4*cj6*sj4*(px*px)))+(((-0.00196322)*py*sj3))+((cj3*cj4*cj6*py*(px*px)))+(((-0.07)*py*pz*sj3*sj4))+((cj3*cj4*cj6*py*(pz*pz)))+(((-0.550716)*cj3*cj4*px*pz*sj6))+(((-0.008579767576)*cj4*cj6*pz))+(((0.028046)*cj6*(px*px)))+(((-0.002882743632)*cj4*cj6*px*sj3))+(((0.0003383998987004)*cj6))+(((-0.219112)*cj3*cj6*py*pz*(cj4*cj4)))+(((0.028046)*cj6*(py*py)))+(((0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.07)*cj3*cj4*sj3*(px*px)))+(((-0.14)*cj4*px*py*(cj3*cj3)))+(((0.002882743632)*cj6*pz*sj4))+((cj6*pz*sj4*(px*px)))+(((0.02)*cj4*px*py*sj6))+(((-1.0)*cj4*cj6*px*sj3*(pz*pz)))+(((0.219112)*cj6*px*pz*sj3*(cj4*cj4)))+(((-0.109556)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((-0.07)*cj3*cj4*sj3*(py*py)))+(((0.550716)*cj3*sj3*sj4*sj6*(py*py)))+(((-0.00196322)*cj3*px))+((cj3*cj4*cj6*(py*py*py)))+(((-0.07)*cj3*px*pz*sj4))+(((-0.02)*cj3*px*pz*sj4*sj6))+(((1.101432)*px*py*sj4*sj6*(cj3*cj3))))),IkReal(((((-0.219112)*cj3*cj4*cj6*py*pz*sj4))+(((-1.101432)*cj4*px*py*sj6*(cj3*cj3)))+(((0.054778)*cj6*(pz*pz)))+(((0.002434552424)*cj4*cj6*px*sj3))+(((-8.27172307628e-5)*cj6))+(((-0.00383446)*py*sj3))+(((-0.14)*px*py*sj4*(cj3*cj3)))+(((-0.056092)*cj6*px*pz*sj3))+(((0.02)*cj4*py*pz*sj3*sj6))+(((-0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.054778)*cj6*(py*py)))+(((-0.002434552424)*cj3*cj4*cj6*py))+(((-0.550716)*py*pz*sj3*sj4*sj6))+(((-1.0)*cj4*cj6*pz*(px*px)))+(((-0.056092)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.056092)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.109556)*cj6*(cj3*cj3)*(py*py)))+(((0.02)*cj3*cj4*px*pz*sj6))+(((-0.550716)*cj3*px*pz*sj4*sj6))+(((0.550716)*cj3*cj4*sj3*sj6*(px*px)))+((cj3*cj6*py*sj4*(px*px)))+(((0.07)*cj3*cj4*px*pz))+(((-0.112184)*cj3*cj6*py*pz*(cj4*cj4)))+(((0.109556)*cj6*(cj4*cj4)*(pz*pz)))+(((-0.007310845968)*cj6*px*sj3*sj4))+(((0.07)*cj4*py*pz*sj3))+(((0.164334)*cj6*(px*px)))+(((-0.016540940936)*py*sj3*sj6))+(((-0.219112)*cj3*cj6*px*py*sj3))+(((-1.0)*cj6*sj3*sj4*(px*px*px)))+(((-0.07)*cj3*sj3*sj4*(py*py)))+(((0.056092)*cj4*cj6*sj4*(px*px)))+(((-0.04)*px*py*sj4*sj6*(cj3*cj3)))+(((0.550716)*cj4*px*py*sj6))+((cj3*cj6*py*sj4*(pz*pz)))+(((-0.550716)*cj3*cj4*sj3*sj6*(py*py)))+(((0.112184)*cj6*px*pz*sj3*(cj4*cj4)))+(((-1.0)*cj4*cj6*pz*(py*py)))+(((0.07)*cj3*sj3*sj4*(px*px)))+(((0.02)*cj3*sj3*sj4*sj6*(px*px)))+(((-1.0)*cj4*cj6*(pz*pz*pz)))+(((-0.002434552424)*cj6*pz*sj4))+(((0.056092)*cj3*cj6*py*pz))+(((-0.056092)*cj4*cj6*sj4*(pz*pz)))+((cj3*cj6*sj4*(py*py*py)))+(((-0.007310845968)*cj4*cj6*pz))+(((-0.016540940936)*cj3*px*sj6))+(((0.219112)*cj4*cj6*px*pz*sj3*sj4))+(((0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((0.02)*px*py*sj4*sj6))+(((-0.109556)*cj6*(cj4*cj4)*(px*px)))+(((-1.0)*cj6*px*sj3*sj4*(py*py)))+(((0.07)*px*py*sj4))+(((-1.0)*cj6*px*sj3*sj4*(pz*pz)))+(((-0.02)*cj3*sj3*sj4*sj6*(py*py)))+(((-0.00383446)*cj3*px))+(((-0.109556)*cj6*(cj3*cj3)*(px*px)))+(((0.219112)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.007310845968)*cj3*cj6*py*sj4))+(((-0.112184)*cj3*cj4*cj6*px*py*sj3*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1279.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1278.value)))+(x1279.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1280=IKcos(j5);
IkReal x1281=IKsin(j5);
IkReal x1282=(px*sj3);
IkReal x1283=(pz*sj4);
IkReal x1284=(cj3*py);
IkReal x1285=((0.07)*sj6);
IkReal x1286=(py*sj3);
IkReal x1287=((1.0)*sj6);
IkReal x1288=((0.056092)*cj4);
IkReal x1289=((0.07)*cj6);
IkReal x1290=(cj3*px);
IkReal x1291=((0.109556)*sj4);
IkReal x1292=((0.550716)*pz);
IkReal x1293=(cj6*x1282);
IkReal x1294=(cj4*x1280);
IkReal x1295=(sj4*x1281);
IkReal x1296=(cj6*x1280);
IkReal x1297=(cj4*x1281);
IkReal x1298=((0.550716)*sj4*x1280);
evalcond[0]=((((-0.054778)*cj6*x1281))+(((-1.0)*x1287*x1290))+(((-1.0)*cj6*x1284*x1295))+(((0.028046)*x1296))+(((-0.01)*cj6))+((cj6*x1284*x1294))+((x1293*x1295))+(((-1.0)*x1293*x1294))+(((-1.0)*x1286*x1287))+((cj6*pz*x1297))+((x1283*x1296)));
evalcond[1]=((-0.0015095874)+(((-1.0)*x1284*x1298))+(((-1.0)*x1284*x1291))+(((0.109556)*cj4*pz))+(((0.00196322)*sj6*x1280))+(((0.02)*x1280*x1283))+(((-1.0)*(px*px)))+((pz*x1285*x1297))+(((-0.02)*x1282*x1294))+((x1280*x1283*x1285))+(((0.550716)*x1282*x1297))+((x1282*x1285*x1295))+(((-0.550716)*x1284*x1297))+(((-1.0)*x1282*x1285*x1294))+(((0.02)*x1282*x1295))+((x1282*x1298))+((x1282*x1291))+(((-1.0)*x1284*x1288))+(((-0.550716)*x1281*x1283))+(((-0.0007)*sj6))+(((-0.056092)*x1283))+(((-0.016540940936)*x1281))+(((-0.02)*x1284*x1295))+((x1286*x1289))+(((-1.0)*(pz*pz)))+(((0.02)*pz*x1297))+(((-1.0)*x1284*x1285*x1295))+(((-0.029606201048)*x1280))+((x1282*x1288))+(((-1.0)*(py*py)))+(((0.02)*x1284*x1294))+((x1284*x1285*x1294))+(((-0.00383446)*sj6*x1281))+((x1292*x1294))+((x1289*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[2];
IkReal x1299=(cj5*cj6);
j7eval[0]=x1299;
j7eval[1]=IKsign(x1299);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1300=(cj6*sj5);
j7eval[0]=x1300;
j7eval[1]=IKsign(x1300);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1301=(cj4*cj5);
IkReal x1302=((3.52084656922346)*pz);
IkReal x1303=(cj3*py);
IkReal x1304=(px*sj3);
IkReal x1305=((3.52084656922346)*sj5);
IkReal x1306=(cj5*sj4);
IkReal x1307=((0.440669248263212)*pz);
IkReal x1308=(cj4*sj5);
IkReal x1309=((0.440669248263212)*sj4*sj5);
if( IKabs(((0.279779898478317)+(((0.440669248263212)*x1303*x1306))+(((0.440669248263212)*x1303*x1308))+((sj4*sj5*x1307))+(((0.205223943105713)*sj5))+(((-1.0)*sj4*x1304*x1305))+(((-0.440669248263212)*x1304*x1306))+(((-0.440669248263212)*x1304*x1308))+(((-3.52084656922346)*x1301*x1303))+(((-1.0)*x1301*x1307))+(((-1.0)*x1302*x1308))+(((-1.0)*x1302*x1306))+(((-0.074606682799079)*cj5))+(((3.52084656922346)*x1301*x1304))+((sj4*x1303*x1305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.94966315343639)+(((3.52084656922346)*x1304*x1306))+(((-1.0)*cj4*x1303*x1305))+(((-1.0)*x1307*x1308))+((cj4*x1304*x1305))+(((-1.0)*x1306*x1307))+(((-0.074606682799079)*sj5))+(((-1.0)*sj4*sj5*x1302))+(((-3.52084656922346)*x1303*x1306))+(((-0.440669248263212)*x1301*x1303))+((x1303*x1309))+(((0.440669248263212)*x1301*x1304))+(((-0.205223943105713)*cj5))+((x1301*x1302))+(((-1.0)*x1304*x1309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.279779898478317)+(((0.440669248263212)*x1303*x1306))+(((0.440669248263212)*x1303*x1308))+((sj4*sj5*x1307))+(((0.205223943105713)*sj5))+(((-1.0)*sj4*x1304*x1305))+(((-0.440669248263212)*x1304*x1306))+(((-0.440669248263212)*x1304*x1308))+(((-3.52084656922346)*x1301*x1303))+(((-1.0)*x1301*x1307))+(((-1.0)*x1302*x1308))+(((-1.0)*x1302*x1306))+(((-0.074606682799079)*cj5))+(((3.52084656922346)*x1301*x1304))+((sj4*x1303*x1305))))+IKsqr(((-0.94966315343639)+(((3.52084656922346)*x1304*x1306))+(((-1.0)*cj4*x1303*x1305))+(((-1.0)*x1307*x1308))+((cj4*x1304*x1305))+(((-1.0)*x1306*x1307))+(((-0.074606682799079)*sj5))+(((-1.0)*sj4*sj5*x1302))+(((-3.52084656922346)*x1303*x1306))+(((-0.440669248263212)*x1301*x1303))+((x1303*x1309))+(((0.440669248263212)*x1301*x1304))+(((-0.205223943105713)*cj5))+((x1301*x1302))+(((-1.0)*x1304*x1309))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.279779898478317)+(((0.440669248263212)*x1303*x1306))+(((0.440669248263212)*x1303*x1308))+((sj4*sj5*x1307))+(((0.205223943105713)*sj5))+(((-1.0)*sj4*x1304*x1305))+(((-0.440669248263212)*x1304*x1306))+(((-0.440669248263212)*x1304*x1308))+(((-3.52084656922346)*x1301*x1303))+(((-1.0)*x1301*x1307))+(((-1.0)*x1302*x1308))+(((-1.0)*x1302*x1306))+(((-0.074606682799079)*cj5))+(((3.52084656922346)*x1301*x1304))+((sj4*x1303*x1305))), ((-0.94966315343639)+(((3.52084656922346)*x1304*x1306))+(((-1.0)*cj4*x1303*x1305))+(((-1.0)*x1307*x1308))+((cj4*x1304*x1305))+(((-1.0)*x1306*x1307))+(((-0.074606682799079)*sj5))+(((-1.0)*sj4*sj5*x1302))+(((-3.52084656922346)*x1303*x1306))+(((-0.440669248263212)*x1301*x1303))+((x1303*x1309))+(((0.440669248263212)*x1301*x1304))+(((-0.205223943105713)*cj5))+((x1301*x1302))+(((-1.0)*x1304*x1309))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1310=IKsin(j7);
IkReal x1311=IKcos(j7);
IkReal x1312=(pz*sj4);
IkReal x1313=(px*sj3);
IkReal x1314=((0.035)*sj5);
IkReal x1315=((1.0)*sj4);
IkReal x1316=((0.279642)*sj5);
IkReal x1317=((0.056092)*cj4);
IkReal x1318=(cj4*cj5);
IkReal x1319=((0.035)*cj5);
IkReal x1320=(cj4*sj5);
IkReal x1321=(cj3*py);
IkReal x1322=(sj4*x1321);
IkReal x1323=((1.0)*cj4*pz);
IkReal x1324=((0.279642)*x1311);
IkReal x1325=((0.279642)*x1310);
evalcond[0]=((0.153484468928)+(((0.150853323672)*x1311))+(((0.109556)*cj4*pz))+(((-0.109556)*x1322))+(((0.109556)*sj4*x1313))+((x1313*x1317))+(((-0.056092)*x1312))+(((-1.0)*pp))+(((-0.04444284)*x1310))+(((-1.0)*x1317*x1321)));
evalcond[1]=((-0.028046)+(((-1.0)*x1311*x1319))+(((-1.0)*x1311*x1316))+((x1310*x1314))+(((0.045)*cj5))+((cj4*x1313))+(((-1.0)*x1312))+(((-0.275358)*sj5))+(((-1.0)*cj5*x1325))+(((-1.0)*cj4*x1321)));
evalcond[2]=((0.054778)+x1322+(((-1.0)*x1311*x1314))+(((-1.0)*x1313*x1315))+(((0.275358)*cj5))+((cj5*x1324))+(((-1.0)*x1323))+(((0.045)*sj5))+(((-1.0)*x1310*x1316))+(((-1.0)*x1310*x1319)));
evalcond[3]=((0.275358)+x1324+((x1320*x1321))+(((-1.0)*x1313*x1320))+((cj5*x1322))+((sj5*x1312))+(((-1.0)*pz*x1318))+(((0.028046)*sj5))+(((-1.0)*cj5*x1313*x1315))+(((-0.035)*x1310))+(((0.054778)*cj5)));
evalcond[4]=((0.045)+((x1313*x1318))+(((-1.0)*sj5*x1313*x1315))+((sj5*x1322))+(((-1.0)*x1325))+(((-1.0)*x1318*x1321))+(((-1.0)*pz*x1320))+(((-0.035)*x1311))+(((0.054778)*sj5))+(((-1.0)*cj5*x1312))+(((-0.028046)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1326=(cj4*cj5);
IkReal x1327=((3.52084656922346)*pz);
IkReal x1328=(cj3*py);
IkReal x1329=(px*sj3);
IkReal x1330=((3.52084656922346)*sj5);
IkReal x1331=(cj5*sj4);
IkReal x1332=((0.440669248263212)*pz);
IkReal x1333=(cj4*sj5);
IkReal x1334=((0.440669248263212)*sj4*sj5);
if( IKabs(((0.209362967093848)+(((-1.0)*x1326*x1332))+(((0.122884642961803)*cj5))+(((-1.0)*sj4*x1328*x1330))+(((0.440669248263212)*x1328*x1333))+(((0.440669248263212)*x1328*x1331))+((sj4*sj5*x1332))+(((-0.440669248263212)*x1329*x1331))+(((-0.440669248263212)*x1329*x1333))+((x1327*x1331))+((x1327*x1333))+(((3.52084656922346)*x1326*x1328))+(((-0.180505923632133)*sj5))+((sj4*x1329*x1330))+(((-3.52084656922346)*x1326*x1329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.958476538401654)+((x1329*x1334))+(((0.440669248263212)*x1326*x1328))+(((-0.440669248263212)*x1326*x1329))+(((-1.0)*sj4*sj5*x1327))+((x1331*x1332))+((cj4*x1329*x1330))+(((-1.0)*x1328*x1334))+(((3.52084656922346)*x1329*x1331))+(((-0.180505923632133)*cj5))+(((-0.122884642961803)*sj5))+(((-1.0)*cj4*x1328*x1330))+((x1326*x1327))+(((-3.52084656922346)*x1328*x1331))+((x1332*x1333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.209362967093848)+(((-1.0)*x1326*x1332))+(((0.122884642961803)*cj5))+(((-1.0)*sj4*x1328*x1330))+(((0.440669248263212)*x1328*x1333))+(((0.440669248263212)*x1328*x1331))+((sj4*sj5*x1332))+(((-0.440669248263212)*x1329*x1331))+(((-0.440669248263212)*x1329*x1333))+((x1327*x1331))+((x1327*x1333))+(((3.52084656922346)*x1326*x1328))+(((-0.180505923632133)*sj5))+((sj4*x1329*x1330))+(((-3.52084656922346)*x1326*x1329))))+IKsqr(((-0.958476538401654)+((x1329*x1334))+(((0.440669248263212)*x1326*x1328))+(((-0.440669248263212)*x1326*x1329))+(((-1.0)*sj4*sj5*x1327))+((x1331*x1332))+((cj4*x1329*x1330))+(((-1.0)*x1328*x1334))+(((3.52084656922346)*x1329*x1331))+(((-0.180505923632133)*cj5))+(((-0.122884642961803)*sj5))+(((-1.0)*cj4*x1328*x1330))+((x1326*x1327))+(((-3.52084656922346)*x1328*x1331))+((x1332*x1333))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.209362967093848)+(((-1.0)*x1326*x1332))+(((0.122884642961803)*cj5))+(((-1.0)*sj4*x1328*x1330))+(((0.440669248263212)*x1328*x1333))+(((0.440669248263212)*x1328*x1331))+((sj4*sj5*x1332))+(((-0.440669248263212)*x1329*x1331))+(((-0.440669248263212)*x1329*x1333))+((x1327*x1331))+((x1327*x1333))+(((3.52084656922346)*x1326*x1328))+(((-0.180505923632133)*sj5))+((sj4*x1329*x1330))+(((-3.52084656922346)*x1326*x1329))), ((-0.958476538401654)+((x1329*x1334))+(((0.440669248263212)*x1326*x1328))+(((-0.440669248263212)*x1326*x1329))+(((-1.0)*sj4*sj5*x1327))+((x1331*x1332))+((cj4*x1329*x1330))+(((-1.0)*x1328*x1334))+(((3.52084656922346)*x1329*x1331))+(((-0.180505923632133)*cj5))+(((-0.122884642961803)*sj5))+(((-1.0)*cj4*x1328*x1330))+((x1326*x1327))+(((-3.52084656922346)*x1328*x1331))+((x1332*x1333))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1335=IKsin(j7);
IkReal x1336=IKcos(j7);
IkReal x1337=(pz*sj4);
IkReal x1338=(px*sj3);
IkReal x1339=(cj3*py);
IkReal x1340=((0.035)*sj5);
IkReal x1341=((1.0)*sj4);
IkReal x1342=((0.279642)*sj5);
IkReal x1343=((0.056092)*cj4);
IkReal x1344=((0.035)*cj5);
IkReal x1345=(cj4*pz);
IkReal x1346=(cj4*sj5);
IkReal x1347=((0.109556)*sj4);
IkReal x1348=(cj4*cj5);
IkReal x1349=((1.0)*x1345);
IkReal x1350=((0.279642)*x1336);
IkReal x1351=((0.279642)*x1335);
evalcond[0]=((0.152084468928)+(((0.109556)*x1345))+(((-1.0)*pp))+((x1338*x1347))+((x1338*x1343))+(((-1.0)*x1339*x1343))+(((-1.0)*x1339*x1347))+(((-0.056092)*x1337))+(((-0.03325716)*x1335))+(((0.152253323672)*x1336)));
evalcond[1]=((-0.028046)+((cj4*x1338))+(((-1.0)*x1336*x1342))+(((-0.025)*cj5))+(((-1.0)*cj4*x1339))+(((-1.0)*x1337))+((cj5*x1351))+(((-0.275358)*sj5))+((x1336*x1344))+((x1335*x1340)));
evalcond[2]=((0.054778)+((sj4*x1339))+(((-1.0)*x1338*x1341))+(((0.275358)*cj5))+(((-0.025)*sj5))+(((-1.0)*x1349))+((cj5*x1350))+(((-1.0)*x1335*x1344))+((x1336*x1340))+((x1335*x1342)));
evalcond[3]=((0.025)+(((-1.0)*sj5*x1339*x1341))+(((-1.0)*x1351))+((x1339*x1348))+((sj4*sj5*x1338))+(((-0.035)*x1336))+(((-0.054778)*sj5))+(((0.028046)*cj5))+((sj5*x1345))+((cj5*x1337))+(((-1.0)*x1338*x1348)));
evalcond[4]=((0.275358)+x1350+((cj5*sj4*x1339))+((x1339*x1346))+(((0.028046)*sj5))+((sj5*x1337))+(((-0.035)*x1335))+(((0.054778)*cj5))+(((-1.0)*cj5*x1349))+(((-1.0)*cj5*x1338*x1341))+(((-1.0)*x1338*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1352=((0.440669248263212)*cj4);
IkReal x1353=((3.52084656922346)*cj4);
IkReal x1354=((0.440669248263212)*cj6);
IkReal x1355=(py*sj3);
IkReal x1356=((0.440669248263212)*sj4);
IkReal x1357=(pz*sj6);
IkReal x1358=(cj3*px);
IkReal x1359=(cj3*py);
IkReal x1360=((3.52084656922346)*sj4);
IkReal x1361=((3.52084656922346)*cj6);
IkReal x1362=(px*sj3);
IkReal x1363=(sj6*x1359);
IkReal x1364=(sj6*x1362);
if( IKabs(((0.268710412867445)+(((-1.0)*x1353*x1363))+(((-0.0635371971882066)*sj6))+(((-1.0)*x1355*x1361))+(((-1.0)*x1356*x1362))+(((-1.0)*x1357*x1360))+((x1356*x1359))+(((-1.0)*pz*x1352))+((x1353*x1364))+(((-1.0)*x1358*x1361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14693477928794)+(((-1.0)*x1352*x1363))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1355))+((x1360*x1362))+(((-1.0)*x1359*x1360))+(((-1.0)*x1356*x1357))+((pz*x1353))+(((-0.00795231725415793)*sj6))+((x1352*x1364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.268710412867445)+(((-1.0)*x1353*x1363))+(((-0.0635371971882066)*sj6))+(((-1.0)*x1355*x1361))+(((-1.0)*x1356*x1362))+(((-1.0)*x1357*x1360))+((x1356*x1359))+(((-1.0)*pz*x1352))+((x1353*x1364))+(((-1.0)*x1358*x1361))))+IKsqr(((-1.14693477928794)+(((-1.0)*x1352*x1363))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1355))+((x1360*x1362))+(((-1.0)*x1359*x1360))+(((-1.0)*x1356*x1357))+((pz*x1353))+(((-0.00795231725415793)*sj6))+((x1352*x1364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.268710412867445)+(((-1.0)*x1353*x1363))+(((-0.0635371971882066)*sj6))+(((-1.0)*x1355*x1361))+(((-1.0)*x1356*x1362))+(((-1.0)*x1357*x1360))+((x1356*x1359))+(((-1.0)*pz*x1352))+((x1353*x1364))+(((-1.0)*x1358*x1361))), ((-1.14693477928794)+(((-1.0)*x1352*x1363))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1355))+((x1360*x1362))+(((-1.0)*x1359*x1360))+(((-1.0)*x1356*x1357))+((pz*x1353))+(((-0.00795231725415793)*sj6))+((x1352*x1364))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1365=IKcos(j7);
IkReal x1366=IKsin(j7);
IkReal x1367=(pz*sj4);
IkReal x1368=((0.0007)*sj6);
IkReal x1369=(cj3*py);
IkReal x1370=((1.0)*cj4);
IkReal x1371=((0.035)*cj6);
IkReal x1372=((1.0)*px);
IkReal x1373=(sj3*sj4);
IkReal x1374=(cj4*px*sj3);
IkReal x1375=((0.279642)*x1366);
IkReal x1376=((1.0)*py*sj3);
IkReal x1377=((0.035)*x1365);
evalcond[0]=(x1371+(((-1.0)*x1365*x1371))+(((-1.0)*cj3*x1372))+(((-1.0)*x1376))+(((-1.0)*cj6*x1375)));
evalcond[1]=((0.330136)+((sj4*x1369))+(((-1.0)*x1372*x1373))+(((0.279642)*x1365))+(((-1.0)*pz*x1370))+(((-0.035)*x1366)));
evalcond[2]=((-0.018046)+x1374+(((-1.0)*x1367))+(((-1.0)*x1369*x1370))+(((-1.0)*sj6*x1377))+(((-1.0)*sj6*x1375))+(((0.035)*sj6)));
evalcond[3]=((0.035)+(((-1.0)*cj3*cj6*x1372))+(((-1.0)*sj6*x1369*x1370))+(((-1.0)*sj6*x1367))+(((-1.0)*x1375))+(((-1.0)*x1377))+(((-0.018046)*sj6))+((sj6*x1374))+(((-1.0)*cj6*x1376)));
evalcond[4]=((0.152784468928)+x1368+(((0.109556)*cj4*pz))+(((-0.03885)*x1366))+(((-0.056092)*x1367))+(((-1.0)*pp))+(((-1.0)*x1365*x1368))+(((-0.00559284)*sj6*x1366))+(((-0.056092)*cj4*x1369))+(((0.109556)*px*x1373))+(((-0.109556)*sj4*x1369))+(((0.056092)*x1374))+(((0.151553323672)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1378=((0.440669248263212)*cj4);
IkReal x1379=((3.52084656922346)*pz);
IkReal x1380=((0.440669248263212)*cj6);
IkReal x1381=(py*sj3);
IkReal x1382=(sj4*sj6);
IkReal x1383=((3.52084656922346)*cj4);
IkReal x1384=(cj3*px);
IkReal x1385=((0.440669248263212)*sj4);
IkReal x1386=(cj3*py);
IkReal x1387=((3.52084656922346)*cj6);
IkReal x1388=(px*sj3);
IkReal x1389=((3.52084656922346)*sj4);
IkReal x1390=(sj6*x1386);
IkReal x1391=(sj6*x1388);
if( IKabs(((0.220432452704721)+(((-1.0)*x1384*x1387))+(((-1.0)*x1383*x1391))+((pz*x1378))+(((0.133954128572676)*sj6))+(((-1.0)*x1381*x1387))+((x1379*x1382))+((x1385*x1388))+((x1383*x1390))+(((-1.0)*x1385*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.761204912550099)+(((0.0167657022194222)*sj6))+(((0.440669248263212)*pz*x1382))+(((-1.0)*cj4*x1379))+(((-1.0)*x1380*x1381))+(((-1.0)*x1380*x1384))+((x1386*x1389))+(((-1.0)*x1378*x1391))+(((-1.0)*x1388*x1389))+((x1378*x1390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.220432452704721)+(((-1.0)*x1384*x1387))+(((-1.0)*x1383*x1391))+((pz*x1378))+(((0.133954128572676)*sj6))+(((-1.0)*x1381*x1387))+((x1379*x1382))+((x1385*x1388))+((x1383*x1390))+(((-1.0)*x1385*x1386))))+IKsqr(((-0.761204912550099)+(((0.0167657022194222)*sj6))+(((0.440669248263212)*pz*x1382))+(((-1.0)*cj4*x1379))+(((-1.0)*x1380*x1381))+(((-1.0)*x1380*x1384))+((x1386*x1389))+(((-1.0)*x1378*x1391))+(((-1.0)*x1388*x1389))+((x1378*x1390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.220432452704721)+(((-1.0)*x1384*x1387))+(((-1.0)*x1383*x1391))+((pz*x1378))+(((0.133954128572676)*sj6))+(((-1.0)*x1381*x1387))+((x1379*x1382))+((x1385*x1388))+((x1383*x1390))+(((-1.0)*x1385*x1386))), ((-0.761204912550099)+(((0.0167657022194222)*sj6))+(((0.440669248263212)*pz*x1382))+(((-1.0)*cj4*x1379))+(((-1.0)*x1380*x1381))+(((-1.0)*x1380*x1384))+((x1386*x1389))+(((-1.0)*x1378*x1391))+(((-1.0)*x1388*x1389))+((x1378*x1390))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1392=IKsin(j7);
IkReal x1393=IKcos(j7);
IkReal x1394=(pz*sj4);
IkReal x1395=((0.0007)*sj6);
IkReal x1396=(cj3*py);
IkReal x1397=(cj4*pz);
IkReal x1398=((0.035)*cj6);
IkReal x1399=((1.0)*px);
IkReal x1400=(sj3*sj4);
IkReal x1401=(cj4*px*sj3);
IkReal x1402=((0.279642)*x1392);
IkReal x1403=((1.0)*py*sj3);
IkReal x1404=((0.035)*x1393);
evalcond[0]=(x1398+(((-1.0)*cj6*x1402))+(((-1.0)*x1393*x1398))+(((-1.0)*x1403))+(((-1.0)*cj3*x1399)));
evalcond[1]=((-0.22058)+(((0.035)*x1392))+((sj4*x1396))+(((-1.0)*x1399*x1400))+(((-0.279642)*x1393))+(((-1.0)*x1397)));
evalcond[2]=((-0.038046)+(((-0.035)*sj6))+((sj6*x1402))+((sj6*x1404))+x1401+(((-1.0)*cj4*x1396))+(((-1.0)*x1394)));
evalcond[3]=((0.035)+((sj6*x1394))+(((-1.0)*cj6*x1403))+(((0.038046)*sj6))+(((-1.0)*cj3*cj6*x1399))+(((-1.0)*cj4*sj3*sj6*x1399))+(((-1.0)*x1404))+(((-1.0)*x1402))+((cj4*sj6*x1396)));
evalcond[4]=((0.152784468928)+x1395+(((-0.056092)*x1394))+(((-0.03885)*x1392))+(((-1.0)*x1393*x1395))+(((-0.00559284)*sj6*x1392))+(((-1.0)*pp))+(((0.056092)*x1401))+(((0.109556)*x1397))+(((0.151553323672)*x1393))+(((-0.109556)*sj4*x1396))+(((-0.056092)*cj4*x1396))+(((0.109556)*px*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1405=((3.52084656922346)*pz);
IkReal x1406=(cj3*py);
IkReal x1407=((3.52084656922346)*cj4);
IkReal x1408=(sj4*sj6);
IkReal x1409=(px*sj3);
IkReal x1410=(cj4*sj6);
IkReal x1411=((0.440669248263212)*cj6);
IkReal x1412=(py*sj3);
IkReal x1413=((0.440669248263212)*cj4);
IkReal x1414=(cj3*px);
IkReal x1415=((3.52084656922346)*cj6);
IkReal x1416=((0.440669248263212)*pz);
if( IKabs(((0.256930442522873)+(((0.228073399061157)*sj6))+(((-1.0)*x1412*x1415))+(((3.52084656922346)*x1406*x1408))+(((-1.0)*x1414*x1415))+((sj4*x1416))+((x1406*x1413))+(((-3.52084656922346)*x1408*x1409))+(((-1.0)*x1405*x1410))+(((-1.0)*x1409*x1413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.05281550879946)+(((0.0285456725639944)*sj6))+(((-1.0)*sj4*x1405))+(((-1.0)*x1406*x1407))+(((-1.0)*x1411*x1414))+(((-1.0)*x1411*x1412))+(((-0.440669248263212)*x1408*x1409))+(((-1.0)*x1410*x1416))+(((0.440669248263212)*x1406*x1408))+((x1407*x1409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.256930442522873)+(((0.228073399061157)*sj6))+(((-1.0)*x1412*x1415))+(((3.52084656922346)*x1406*x1408))+(((-1.0)*x1414*x1415))+((sj4*x1416))+((x1406*x1413))+(((-3.52084656922346)*x1408*x1409))+(((-1.0)*x1405*x1410))+(((-1.0)*x1409*x1413))))+IKsqr(((-1.05281550879946)+(((0.0285456725639944)*sj6))+(((-1.0)*sj4*x1405))+(((-1.0)*x1406*x1407))+(((-1.0)*x1411*x1414))+(((-1.0)*x1411*x1412))+(((-0.440669248263212)*x1408*x1409))+(((-1.0)*x1410*x1416))+(((0.440669248263212)*x1406*x1408))+((x1407*x1409))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.256930442522873)+(((0.228073399061157)*sj6))+(((-1.0)*x1412*x1415))+(((3.52084656922346)*x1406*x1408))+(((-1.0)*x1414*x1415))+((sj4*x1416))+((x1406*x1413))+(((-3.52084656922346)*x1408*x1409))+(((-1.0)*x1405*x1410))+(((-1.0)*x1409*x1413))), ((-1.05281550879946)+(((0.0285456725639944)*sj6))+(((-1.0)*sj4*x1405))+(((-1.0)*x1406*x1407))+(((-1.0)*x1411*x1414))+(((-1.0)*x1411*x1412))+(((-0.440669248263212)*x1408*x1409))+(((-1.0)*x1410*x1416))+(((0.440669248263212)*x1406*x1408))+((x1407*x1409))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1417=IKsin(j7);
IkReal x1418=IKcos(j7);
IkReal x1419=(pz*sj4);
IkReal x1420=((0.0007)*sj6);
IkReal x1421=(cj4*pz);
IkReal x1422=((0.035)*cj6);
IkReal x1423=((1.0)*px);
IkReal x1424=(sj3*sj4);
IkReal x1425=(cj4*px*sj3);
IkReal x1426=(cj3*py*sj4);
IkReal x1427=((0.279642)*x1417);
IkReal x1428=((1.0)*py*sj3);
IkReal x1429=((0.035)*x1418);
IkReal x1430=(cj3*cj4*py);
evalcond[0]=((((-1.0)*x1418*x1422))+(((-1.0)*cj6*x1427))+x1422+(((-1.0)*cj3*x1423))+(((-1.0)*x1428)));
evalcond[1]=((-0.303404)+(((-1.0)*x1430))+(((0.035)*x1417))+x1425+(((-0.279642)*x1418))+(((-1.0)*x1419)));
evalcond[2]=((0.064778)+(((-1.0)*sj6*x1429))+(((-1.0)*sj6*x1427))+(((-1.0)*x1423*x1424))+(((-1.0)*x1421))+x1426+(((0.035)*sj6)));
evalcond[3]=((0.035)+(((0.064778)*sj6))+(((-1.0)*sj6*x1423*x1424))+(((-1.0)*cj3*cj6*x1423))+(((-1.0)*cj6*x1428))+((sj6*x1426))+(((-1.0)*sj6*x1421))+(((-1.0)*x1427))+(((-1.0)*x1429)));
evalcond[4]=((0.152784468928)+(((0.056092)*x1425))+(((-0.00559284)*sj6*x1417))+(((0.109556)*px*x1424))+(((-0.056092)*x1430))+(((-1.0)*x1418*x1420))+(((-1.0)*pp))+(((-0.056092)*x1419))+x1420+(((0.151553323672)*x1418))+(((-0.109556)*x1426))+(((0.109556)*x1421))+(((-0.03885)*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1431=((3.52084656922346)*pz);
IkReal x1432=(cj3*py);
IkReal x1433=((3.52084656922346)*cj4);
IkReal x1434=(sj4*sj6);
IkReal x1435=(px*sj3);
IkReal x1436=(cj4*sj6);
IkReal x1437=((0.440669248263212)*cj6);
IkReal x1438=(py*sj3);
IkReal x1439=((0.440669248263212)*cj4);
IkReal x1440=(cj3*px);
IkReal x1441=((3.52084656922346)*cj6);
IkReal x1442=((0.440669248263212)*pz);
if( IKabs(((0.232212423049293)+(((-1.0)*x1438*x1441))+((x1435*x1439))+(((-1.0)*sj4*x1442))+(((3.52084656922346)*x1434*x1435))+(((-1.0)*x1432*x1439))+(((-3.52084656922346)*x1432*x1434))+(((-1.0)*x1440*x1441))+((x1431*x1436))+(((-0.157656467676688)*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.855324183038581)+(((-1.0)*x1437*x1438))+(((-0.0197322875987301)*sj6))+((x1432*x1433))+(((-0.440669248263212)*x1432*x1434))+(((-1.0)*x1437*x1440))+((x1436*x1442))+(((0.440669248263212)*x1434*x1435))+(((-1.0)*x1433*x1435))+((sj4*x1431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.232212423049293)+(((-1.0)*x1438*x1441))+((x1435*x1439))+(((-1.0)*sj4*x1442))+(((3.52084656922346)*x1434*x1435))+(((-1.0)*x1432*x1439))+(((-3.52084656922346)*x1432*x1434))+(((-1.0)*x1440*x1441))+((x1431*x1436))+(((-0.157656467676688)*sj6))))+IKsqr(((-0.855324183038581)+(((-1.0)*x1437*x1438))+(((-0.0197322875987301)*sj6))+((x1432*x1433))+(((-0.440669248263212)*x1432*x1434))+(((-1.0)*x1437*x1440))+((x1436*x1442))+(((0.440669248263212)*x1434*x1435))+(((-1.0)*x1433*x1435))+((sj4*x1431))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.232212423049293)+(((-1.0)*x1438*x1441))+((x1435*x1439))+(((-1.0)*sj4*x1442))+(((3.52084656922346)*x1434*x1435))+(((-1.0)*x1432*x1439))+(((-3.52084656922346)*x1432*x1434))+(((-1.0)*x1440*x1441))+((x1431*x1436))+(((-0.157656467676688)*sj6))), ((-0.855324183038581)+(((-1.0)*x1437*x1438))+(((-0.0197322875987301)*sj6))+((x1432*x1433))+(((-0.440669248263212)*x1432*x1434))+(((-1.0)*x1437*x1440))+((x1436*x1442))+(((0.440669248263212)*x1434*x1435))+(((-1.0)*x1433*x1435))+((sj4*x1431))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1443=IKcos(j7);
IkReal x1444=IKsin(j7);
IkReal x1445=(pz*sj4);
IkReal x1446=(px*sj3);
IkReal x1447=((0.0007)*sj6);
IkReal x1448=(cj4*pz);
IkReal x1449=((0.035)*cj6);
IkReal x1450=((1.0)*cj3);
IkReal x1451=((0.056092)*cj4);
IkReal x1452=(cj3*py*sj4);
IkReal x1453=((0.279642)*x1444);
IkReal x1454=((1.0)*py*sj3);
IkReal x1455=((0.035)*x1443);
evalcond[0]=((((-1.0)*x1454))+(((-1.0)*px*x1450))+(((-1.0)*cj6*x1453))+x1449+(((-1.0)*x1443*x1449)));
evalcond[1]=((0.247312)+((cj4*x1446))+(((-1.0)*cj4*py*x1450))+(((-1.0)*x1445))+(((-0.035)*x1444))+(((0.279642)*x1443)));
evalcond[2]=((0.044778)+(((-0.035)*sj6))+((sj6*x1455))+((sj6*x1453))+(((-1.0)*sj4*x1446))+(((-1.0)*x1448))+x1452);
evalcond[3]=((0.035)+((sj6*x1448))+(((-1.0)*py*sj4*sj6*x1450))+(((-1.0)*x1455))+(((-1.0)*x1453))+(((-0.044778)*sj6))+((sj4*sj6*x1446))+(((-1.0)*cj6*x1454))+(((-1.0)*cj6*px*x1450)));
evalcond[4]=((0.152784468928)+(((-0.00559284)*sj6*x1444))+(((0.151553323672)*x1443))+(((-0.109556)*x1452))+((x1446*x1451))+(((0.109556)*x1448))+(((-0.03885)*x1444))+(((-1.0)*pp))+x1447+(((0.109556)*sj4*x1446))+(((-0.056092)*x1445))+(((-1.0)*x1443*x1447))+(((-1.0)*cj3*py*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1456=(cj6*sj4);
IkReal x1457=((8750000000.0)*sj5);
IkReal x1458=((8750000000.0)*py);
IkReal x1459=(cj3*cj5);
IkReal x1460=(cj6*sj5);
IkReal x1461=(cj3*px);
IkReal x1462=(cj4*cj6);
IkReal x1463=(px*sj3);
IkReal x1464=((69910500000.0)*py);
IkReal x1465=((69910500000.0)*pz);
IkReal x1466=(cj5*cj6);
IkReal x1467=(cj5*x1463);
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1468.valid){
continue;
}
CheckValue<IkReal> x1469 = IKatan2WithCheck(IkReal(((((-1.0)*x1457*x1462*x1463))+((x1456*x1458*x1459))+(((4856250000.0)*cj6))+(((479307500.0)*x1466))+(((-8750000000.0)*x1456*x1467))+((cj3*py*x1457*x1462))+(((-8750000000.0)*cj5*pz*x1462))+(((245402500.0)*x1460))+((pz*x1456*x1457))+(((-1.0)*sj3*x1464))+(((-69910500000.0)*x1461)))),IkReal((((cj5*x1462*x1465))+(((-1.0)*x1456*x1459*x1464))+(((-3829557369.0)*x1466))+(((-1.0)*cj3*cj4*x1460*x1464))+(((-1960709883.0)*x1460))+(((-8750000000.0)*x1461))+(((-18944165459.0)*cj6))+(((-1.0)*sj3*x1458))+(((-1.0)*sj5*x1456*x1465))+(((69910500000.0)*cj4*x1460*x1463))+(((69910500000.0)*x1456*x1467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1469.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1468.value)))+(x1469.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1470=IKcos(j7);
IkReal x1471=IKsin(j7);
IkReal x1472=(pz*sj4);
IkReal x1473=(px*sj3);
IkReal x1474=((0.0007)*sj6);
IkReal x1475=((1.0)*cj5);
IkReal x1476=(cj3*py);
IkReal x1477=(sj5*sj6);
IkReal x1478=((0.035)*cj6);
IkReal x1479=(cj5*sj6);
IkReal x1480=((0.056092)*cj4);
IkReal x1481=((1.0)*sj4);
IkReal x1482=(cj4*pz);
IkReal x1483=(cj4*sj5);
IkReal x1484=((0.109556)*sj4);
IkReal x1485=((0.035)*x1479);
IkReal x1486=((0.279642)*x1471);
IkReal x1487=((0.035)*x1471);
IkReal x1488=((1.0)*x1482);
IkReal x1489=((0.279642)*x1470);
IkReal x1490=((1.0)*py*sj3);
IkReal x1491=((0.035)*x1470);
IkReal x1492=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*cj6*x1486))+(((-1.0)*x1470*x1478))+(((-1.0)*x1492))+(((-1.0)*x1490))+x1478);
evalcond[1]=((0.275358)+((x1476*x1483))+(((-1.0)*x1487))+(((0.028046)*sj5))+((sj5*x1472))+(((-1.0)*sj4*x1473*x1475))+(((0.054778)*cj5))+(((-1.0)*x1475*x1482))+x1489+((cj5*sj4*x1476))+(((-1.0)*x1473*x1483)));
evalcond[2]=((-0.028046)+((cj4*x1473))+(((-1.0)*x1470*x1485))+(((-1.0)*x1479*x1486))+(((0.01)*cj5))+(((-1.0)*sj5*x1489))+(((-1.0)*x1472))+(((-0.275358)*sj5))+(((-1.0)*cj4*x1476))+x1485+((sj5*x1487)));
evalcond[3]=((0.054778)+(((0.035)*x1477))+(((0.275358)*cj5))+((sj4*x1476))+(((-1.0)*x1488))+(((-1.0)*x1477*x1491))+((cj5*x1489))+(((-1.0)*x1477*x1486))+(((-1.0)*cj5*x1487))+(((0.01)*sj5))+(((-1.0)*x1473*x1481)));
evalcond[4]=((0.152784468928)+(((-0.00559284)*sj6*x1471))+(((-1.0)*x1470*x1474))+((x1473*x1484))+((x1473*x1480))+(((-0.03885)*x1471))+(((0.109556)*x1482))+(((-1.0)*pp))+x1474+(((-0.056092)*x1472))+(((-1.0)*x1476*x1480))+(((-1.0)*x1476*x1484))+(((0.151553323672)*x1470)));
evalcond[5]=((0.035)+((sj4*x1476*x1477))+(((-1.0)*cj4*sj6*x1475*x1476))+(((-1.0)*x1486))+(((-1.0)*x1473*x1477*x1481))+(((-1.0)*x1491))+(((-1.0)*sj6*x1472*x1475))+(((-0.028046)*x1479))+(((-1.0)*x1477*x1488))+(((0.054778)*x1477))+((cj4*x1473*x1479))+(((0.01)*sj6))+(((-1.0)*cj6*x1492))+(((-1.0)*cj6*x1490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1493=((139821.0)*px);
IkReal x1494=(cj3*sj5);
IkReal x1495=(cj5*cj6);
IkReal x1496=(cj6*sj5);
IkReal x1497=((17500.0)*px);
IkReal x1498=(cj5*sj6);
IkReal x1499=((139821.0)*cj6);
IkReal x1500=(pz*sj4);
IkReal x1501=((17500.0)*cj6);
IkReal x1502=(cj4*cj6*sj3);
IkReal x1503=((17500.0)*py*sj3);
IkReal x1504=((139821.0)*py*sj3);
IkReal x1505=(cj3*cj4*py);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(x1496),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal((((x1498*x1503))+((sj5*x1504))+(((175.0)*x1495))+(((-1.0)*x1501*x1505))+((cj3*x1497*x1498))+((x1497*x1502))+(((-9712.5)*x1496))+((x1493*x1494))+(((-1.0)*x1500*x1501))+(((-490.805)*cj6)))),IkReal(((((37888.330918)*x1496))+((x1499*x1505))+((x1499*x1500))+(((-1.0)*x1498*x1504))+((sj5*x1503))+(((3921.419766)*cj6))+((x1494*x1497))+(((-1.0)*cj3*x1493*x1498))+(((-1398.21)*x1495))+(((-1.0)*x1493*x1502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1506.value)))+(x1507.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1508=IKcos(j7);
IkReal x1509=IKsin(j7);
IkReal x1510=(pz*sj4);
IkReal x1511=(px*sj3);
IkReal x1512=((0.0007)*sj6);
IkReal x1513=((1.0)*cj5);
IkReal x1514=(cj3*py);
IkReal x1515=(sj5*sj6);
IkReal x1516=((0.035)*cj6);
IkReal x1517=(cj5*sj6);
IkReal x1518=((0.056092)*cj4);
IkReal x1519=((1.0)*sj4);
IkReal x1520=(cj4*pz);
IkReal x1521=(cj4*sj5);
IkReal x1522=((0.109556)*sj4);
IkReal x1523=((0.035)*x1517);
IkReal x1524=((0.279642)*x1509);
IkReal x1525=((0.035)*x1509);
IkReal x1526=((1.0)*x1520);
IkReal x1527=((0.279642)*x1508);
IkReal x1528=((1.0)*py*sj3);
IkReal x1529=((0.035)*x1508);
IkReal x1530=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*x1530))+(((-1.0)*x1528))+x1516+(((-1.0)*cj6*x1524))+(((-1.0)*x1508*x1516)));
evalcond[1]=((0.275358)+(((-1.0)*x1511*x1521))+((sj5*x1510))+(((-1.0)*x1525))+(((0.028046)*sj5))+((cj5*sj4*x1514))+(((-1.0)*x1513*x1520))+x1527+(((-1.0)*sj4*x1511*x1513))+(((0.054778)*cj5))+((x1514*x1521)));
evalcond[2]=((-0.028046)+(((-1.0)*sj5*x1527))+((sj5*x1525))+(((-1.0)*x1510))+(((0.01)*cj5))+(((-0.275358)*sj5))+((cj4*x1511))+x1523+(((-1.0)*x1517*x1524))+(((-1.0)*x1508*x1523))+(((-1.0)*cj4*x1514)));
evalcond[3]=((0.054778)+(((0.275358)*cj5))+(((-1.0)*x1515*x1529))+(((-1.0)*x1515*x1524))+(((-1.0)*x1526))+(((0.035)*x1515))+(((-1.0)*cj5*x1525))+((sj4*x1514))+((cj5*x1527))+(((0.01)*sj5))+(((-1.0)*x1511*x1519)));
evalcond[4]=((0.152784468928)+(((0.151553323672)*x1508))+(((0.109556)*x1520))+(((-1.0)*x1514*x1522))+(((-1.0)*pp))+x1512+(((-1.0)*x1514*x1518))+(((-0.056092)*x1510))+(((-0.00559284)*sj6*x1509))+((x1511*x1522))+(((-1.0)*x1508*x1512))+((x1511*x1518))+(((-0.03885)*x1509)));
evalcond[5]=((0.035)+(((0.054778)*x1515))+(((-0.028046)*x1517))+(((-1.0)*cj4*sj6*x1513*x1514))+(((-1.0)*x1511*x1515*x1519))+(((-1.0)*x1515*x1526))+(((-1.0)*x1524))+(((-1.0)*x1529))+((sj4*x1514*x1515))+(((-1.0)*cj6*x1528))+(((-1.0)*cj6*x1530))+((cj4*x1511*x1517))+(((0.01)*sj6))+(((-1.0)*sj6*x1510*x1513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1531=(px*sj3);
IkReal x1532=(cj3*py);
IkReal x1533=((139821.0)*cj6);
IkReal x1534=(cj4*pz);
IkReal x1535=(cj5*cj6);
IkReal x1536=(sj5*sj6);
IkReal x1537=((17500.0)*cj5);
IkReal x1538=(cj3*px);
IkReal x1539=(cj6*sj5);
IkReal x1540=(py*sj3);
IkReal x1541=((17500.0)*cj6*sj4);
IkReal x1542=((139821.0)*x1540);
IkReal x1543=(x1536*x1538);
CheckValue<IkReal> x1544=IKPowWithIntegerCheck(IKsign(x1535),-1);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(((((-139821.0)*cj5*x1538))+((x1532*x1541))+(((17500.0)*x1543))+(((9712.5)*x1535))+(((-1.0)*cj5*x1542))+(((-1.0)*x1531*x1541))+(((17500.0)*x1536*x1540))+(((175.0)*x1539))+(((958.615)*cj6))+(((-17500.0)*cj6*x1534)))),IkReal(((((-1.0)*sj4*x1532*x1533))+((sj4*x1531*x1533))+(((-1.0)*x1537*x1538))+(((-37888.330918)*x1535))+(((-1.0)*x1536*x1542))+(((-1.0)*x1537*x1540))+(((-7659.114738)*cj6))+((x1533*x1534))+(((-139821.0)*x1543))+(((-1398.21)*x1539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1544.value)))+(x1545.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1546=IKcos(j7);
IkReal x1547=IKsin(j7);
IkReal x1548=(pz*sj4);
IkReal x1549=(px*sj3);
IkReal x1550=((0.0007)*sj6);
IkReal x1551=((1.0)*cj5);
IkReal x1552=(cj3*py);
IkReal x1553=(sj5*sj6);
IkReal x1554=((0.035)*cj6);
IkReal x1555=(cj5*sj6);
IkReal x1556=((0.056092)*cj4);
IkReal x1557=((1.0)*sj4);
IkReal x1558=(cj4*pz);
IkReal x1559=(cj4*sj5);
IkReal x1560=((0.109556)*sj4);
IkReal x1561=((0.035)*x1555);
IkReal x1562=((0.279642)*x1547);
IkReal x1563=((0.035)*x1547);
IkReal x1564=((1.0)*x1558);
IkReal x1565=((0.279642)*x1546);
IkReal x1566=((1.0)*py*sj3);
IkReal x1567=((0.035)*x1546);
IkReal x1568=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*x1546*x1554))+x1554+(((-1.0)*cj6*x1562))+(((-1.0)*x1568))+(((-1.0)*x1566)));
evalcond[1]=((0.275358)+((x1552*x1559))+(((0.028046)*sj5))+((cj5*sj4*x1552))+(((-1.0)*x1549*x1559))+x1565+(((0.054778)*cj5))+((sj5*x1548))+(((-1.0)*x1551*x1558))+(((-1.0)*x1563))+(((-1.0)*sj4*x1549*x1551)));
evalcond[2]=((-0.028046)+(((-1.0)*x1548))+(((-1.0)*x1546*x1561))+((cj4*x1549))+(((-1.0)*x1555*x1562))+(((0.01)*cj5))+(((-0.275358)*sj5))+x1561+(((-1.0)*cj4*x1552))+((sj5*x1563))+(((-1.0)*sj5*x1565)));
evalcond[3]=((0.054778)+((cj5*x1565))+(((0.275358)*cj5))+((sj4*x1552))+(((-1.0)*x1549*x1557))+(((-1.0)*cj5*x1563))+(((-1.0)*x1553*x1567))+(((-1.0)*x1553*x1562))+(((0.035)*x1553))+(((0.01)*sj5))+(((-1.0)*x1564)));
evalcond[4]=((0.152784468928)+(((-0.056092)*x1548))+(((-1.0)*x1552*x1560))+(((-1.0)*x1546*x1550))+(((-0.03885)*x1547))+(((-1.0)*x1552*x1556))+((x1549*x1560))+(((-1.0)*pp))+((x1549*x1556))+(((-0.00559284)*sj6*x1547))+x1550+(((0.109556)*x1558))+(((0.151553323672)*x1546)));
evalcond[5]=((0.035)+((sj4*x1552*x1553))+(((-1.0)*x1549*x1553*x1557))+(((-1.0)*x1553*x1564))+(((-1.0)*sj6*x1548*x1551))+(((-1.0)*cj6*x1568))+(((-1.0)*cj6*x1566))+((cj4*x1549*x1555))+(((0.054778)*x1553))+(((0.01)*sj6))+(((-1.0)*x1567))+(((-1.0)*x1562))+(((-0.028046)*x1555))+(((-1.0)*cj4*sj6*x1551*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1569=(cj3*px);
IkReal x1570=((7842.839532)*cj4);
IkReal x1571=(cj6*pp);
IkReal x1572=((2796.42)*sj6);
IkReal x1573=(py*sj3);
IkReal x1574=((350.0)*sj6);
IkReal x1575=(cj6*sj4);
IkReal x1576=(px*sj3);
IkReal x1577=((981.61)*cj4);
IkReal x1578=(cj3*cj6*py);
IkReal x1579=(cj4*cj6*pz);
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581 = IKatan2WithCheck(IkReal(((((-75776.661836)*x1573))+(((-75776.661836)*x1569))+((x1569*x1574))+(((1917.23)*x1575*x1576))+(((-17500.0)*x1571))+(((-1917.23)*cj3*py*x1575))+((x1573*x1574))+(((1917.23)*x1579))+(((-1.0)*x1577*x1578))+((cj6*x1576*x1577))+(((5325.9113705)*cj6))+(((-981.61)*pz*x1575)))),IkReal(((((-1.0)*x1572*x1573))+(((-20682.6022299819)*cj6))+((x1570*x1578))+(((-1.0)*cj6*x1570*x1576))+(((-15318.229476)*x1579))+(((-19425.0)*x1569))+(((-1.0)*x1569*x1572))+(((-19425.0)*x1573))+(((15318.229476)*cj3*py*x1575))+(((7842.839532)*pz*x1575))+(((139821.0)*x1571))+(((-15318.229476)*x1575*x1576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1581.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1580.value)))+(x1581.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x1582=IKcos(j7);
IkReal x1583=IKsin(j7);
IkReal x1584=(px*sj3);
IkReal x1585=((0.109556)*sj4);
IkReal x1586=((0.0007)*sj6);
IkReal x1587=((0.056092)*cj4);
IkReal x1588=(cj3*py);
IkReal x1589=((0.035)*cj6);
evalcond[0]=((((-0.279642)*cj6*x1583))+(((-1.0)*cj3*px))+x1589+(((-1.0)*py*sj3))+(((-1.0)*x1582*x1589)));
evalcond[1]=((0.152784468928)+(((0.109556)*cj4*pz))+(((-1.0)*x1585*x1588))+(((-0.03885)*x1583))+((x1584*x1587))+((x1584*x1585))+(((-0.056092)*pz*sj4))+(((-1.0)*pp))+x1586+(((-0.00559284)*sj6*x1583))+(((0.151553323672)*x1582))+(((-1.0)*x1582*x1586))+(((-1.0)*x1587*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x1590=cj6*cj6;
IkReal x1591=cj7*cj7;
IkReal x1592=(sj6*sj7);
IkReal x1593=((0.0007)*sj6);
IkReal x1594=(cj7*x1590);
IkReal x1595=(sj7*x1590);
IkReal x1596=(x1590*x1591);
j5eval[0]=((223.673823325714)+(((-7.98977142857143)*x1592))+sj6+(((-27.9642)*sj7*x1594))+(((3.5)*x1594))+(((-55.5)*sj7))+(((-1.0)*cj7*sj6))+(((216.504748102857)*cj7))+(((109.963783091429)*x1596))+(((27.9642)*x1595))+(((-113.463783091429)*x1590)));
j5eval[1]=IKsign(((0.156571676328)+(((0.151553323672)*cj7))+(((-0.00559284)*x1592))+(((-0.079424648164)*x1590))+(((-1.0)*cj7*x1593))+(((0.01957494)*x1595))+x1593+(((0.00245)*x1594))+(((0.076974648164)*x1596))+(((-0.03885)*sj7))+(((-0.01957494)*sj7*x1594))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1597=((35.6557084789275)*pz);
IkReal x1598=(sj4*sj6);
IkReal x1599=(cj7*sj4);
IkReal x1600=(sj6*sj7);
IkReal x1601=(cj4*sj7);
IkReal x1602=(px*sj3);
IkReal x1603=((0.275358)*sj4);
IkReal x1604=(cj7*sj6);
IkReal x1605=(cj4*pz);
IkReal x1606=((10.1873452796936)*cj4);
IkReal x1607=(cj4*sj6);
IkReal x1608=(cj3*py);
IkReal x1609=(pz*sj4);
IkReal x1610=((35.6557084789275)*cj4);
IkReal x1611=((0.035)*cj4);
IkReal x1612=((280.516702152586)*sj4);
IkReal x1613=((0.035)*pz);
IkReal x1614=((0.01)*cj4);
IkReal x1615=(pz*sj7);
IkReal x1616=((0.279642)*x1602);
IkReal x1617=((35.6557084789275)*sj4*sj7);
IkReal x1618=((284.880960870407)*x1608);
IkReal x1619=((0.035)*sj4*sj7);
j5eval[0]=((15.6518581962286)+(((15.6052092745591)*cj7))+(((-1.0)*cj4*x1600*x1618))+(((-1.0)*cj7*x1597*x1598))+sj6+(((-1.95314839905869)*sj7))+(((10.1873452796936)*x1609))+(((-1.0)*x1604))+(((-284.880960870407)*cj7*x1605))+(((-35.6557084789275)*x1602*x1607))+(((-280.516702152586)*x1605))+((x1602*x1604*x1610))+((x1599*x1618))+((x1608*x1612))+(((35.6557084789275)*x1607*x1608))+(((-1.0)*x1602*x1612))+(((-1.0)*x1604*x1608*x1610))+(((-1.0)*x1608*x1617))+(((-1.0)*x1602*x1606))+(((-284.880960870407)*x1599*x1602))+((x1597*x1598))+((x1602*x1617))+(((284.880960870407)*cj4*x1600*x1602))+(((-284.880960870407)*x1598*x1615))+((x1606*x1608))+(((-7.98977142857143)*x1600))+((x1597*x1601)));
j5eval[1]=IKsign(((0.015364020524)+(((-0.279642)*cj7*x1605))+(((0.035)*x1607*x1608))+(((-0.279642)*x1598*x1615))+(((-1.0)*cj7*x1598*x1613))+((x1602*x1604*x1611))+(((0.01)*x1609))+(((0.00098161)*sj6))+((x1601*x1613))+(((-0.275358)*x1605))+((cj4*x1600*x1616))+((x1608*x1614))+(((-0.007842839532)*x1600))+(((-1.0)*x1602*x1614))+((x1598*x1613))+(((-1.0)*x1599*x1616))+(((-1.0)*x1604*x1608*x1611))+(((0.015318229476)*cj7))+((x1603*x1608))+(((-0.00191723)*sj7))+(((-1.0)*x1608*x1619))+(((-0.279642)*cj4*x1600*x1608))+(((-1.0)*x1602*x1603))+((x1602*x1619))+(((-0.035)*x1602*x1607))+(((-0.00098161)*x1604))+(((0.279642)*x1599*x1608))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1620=((35.6557084789275)*pz);
IkReal x1621=(sj4*sj7);
IkReal x1622=(cj7*sj6);
IkReal x1623=(cj4*pz);
IkReal x1624=((0.035)*sj6);
IkReal x1625=(sj6*sj7);
IkReal x1626=((35.6557084789275)*sj4);
IkReal x1627=(px*sj3);
IkReal x1628=((0.035)*sj4);
IkReal x1629=((0.279642)*cj7);
IkReal x1630=((280.516702152586)*cj4);
IkReal x1631=(pz*sj4);
IkReal x1632=(cj3*py);
IkReal x1633=((0.275358)*cj4);
IkReal x1634=((284.880960870407)*cj7);
IkReal x1635=(sj4*x1632);
IkReal x1636=(sj6*x1627);
IkReal x1637=((0.035)*cj4*sj7);
IkReal x1638=((35.6557084789275)*cj4*sj7);
j5eval[0]=((7.30932902884037)+(((1.95314839905869)*x1622))+((x1627*x1638))+(((-1.0)*sj7))+(((-1.95314839905869)*sj6))+(((284.880960870407)*sj6*x1621*x1632))+((cj4*x1632*x1634))+(((280.516702152586)*x1631))+(((-1.0)*cj4*x1620*x1622))+((cj4*sj6*x1620))+(((10.1873452796936)*sj4*x1627))+(((-10.1873452796936)*x1635))+(((-284.880960870407)*x1621*x1636))+(((-1.0)*x1622*x1626*x1627))+(((-1.0)*cj4*x1627*x1634))+((x1622*x1626*x1632))+(((-1.0)*x1620*x1621))+(((-1.0)*sj6*x1626*x1632))+(((15.6052092745591)*x1625))+(((-1.0)*x1632*x1638))+(((-284.880960870407)*x1623*x1625))+((x1631*x1634))+((x1630*x1632))+(((7.98977142857143)*cj7))+(((-1.0)*x1627*x1630))+(((10.1873452796936)*x1623))+((x1626*x1636)));
j5eval[1]=IKsign(((0.007174910468)+((x1627*x1637))+(((0.279642)*sj6*x1621*x1632))+((sj4*x1624*x1627))+(((0.015318229476)*x1625))+(((-0.279642)*x1621*x1636))+((x1623*x1624))+(((-1.0)*x1624*x1635))+(((-0.035)*x1622*x1623))+((x1629*x1631))+(((-1.0)*x1622*x1627*x1628))+(((0.00191723)*x1622))+(((-1.0)*cj4*x1627*x1629))+(((0.01)*x1623))+((x1622*x1628*x1632))+(((-0.035)*pz*x1621))+(((-0.01)*x1635))+(((0.007842839532)*cj7))+((x1632*x1633))+(((0.275358)*x1631))+(((-0.00191723)*sj6))+(((-1.0)*x1632*x1637))+(((-0.00098161)*sj7))+(((0.01)*sj4*x1627))+(((-0.279642)*x1623*x1625))+((cj4*x1629*x1632))+(((-1.0)*x1627*x1633))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1639=cj3*cj3;
IkReal x1640=px*px;
IkReal x1641=cj4*cj4;
IkReal x1642=py*py;
IkReal x1643=pz*pz;
IkReal x1644=cj7*cj7;
IkReal x1645=(cj7*sj7);
IkReal x1646=(cj7*sj6);
IkReal x1647=(px*sj3);
IkReal x1648=((0.035)*pz);
IkReal x1649=((0.035)*sj6);
IkReal x1650=((0.054778)*cj4);
IkReal x1651=(cj3*py);
IkReal x1652=((0.275358)*cj4);
IkReal x1653=((0.279642)*cj7);
IkReal x1654=(pz*sj4);
IkReal x1655=(cj4*pz);
IkReal x1656=(sj6*sj7);
IkReal x1657=(cj4*sj4);
IkReal x1658=((2.0)*cj4);
IkReal x1659=(sj4*x1651);
IkReal x1660=((0.279642)*x1656);
IkReal x1661=((1.0)*x1641);
IkReal x1662=((0.035)*cj4*sj7);
IkReal x1663=((2.0)*pz*x1641);
IkReal x1664=(x1639*x1642);
IkReal x1665=(x1639*x1640);
CheckValue<IkReal> x1666=IKPowWithIntegerCheck(IKsign(((0.007174910468)+(((0.01)*sj4*x1647))+((cj4*x1651*x1653))+(((-0.035)*sj4*x1646*x1647))+(((-1.0)*x1647*x1652))+(((-1.0)*cj4*x1646*x1648))+(((-1.0)*x1655*x1660))+((x1647*x1662))+(((-1.0)*sj4*sj7*x1648))+(((0.015318229476)*x1656))+(((0.275358)*x1654))+(((-1.0)*sj4*x1647*x1660))+(((0.035)*x1646*x1659))+(((0.007842839532)*cj7))+(((-1.0)*x1649*x1659))+(((-1.0)*cj4*x1647*x1653))+(((-0.00191723)*sj6))+(((-0.00098161)*sj7))+(((-0.01)*x1659))+((cj4*sj6*x1648))+((sj4*x1647*x1649))+((x1659*x1660))+((x1651*x1652))+(((0.01)*x1655))+((x1653*x1654))+(((0.00191723)*x1646))+(((-1.0)*x1651*x1662)))),-1);
if(!x1666.valid){
continue;
}
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal(((-0.07404639888)+(((-0.109556)*x1655))+(((0.01927506)*sj7))+(((2.0)*x1641*x1647*x1651))+(((-0.154003323672)*cj7))+(((-1.0)*x1661*x1664))+(((-0.109556)*sj4*x1647))+x1664+x1640+(((-1.0)*x1640*x1661))+(((-1.0)*x1665))+(((-2.0)*x1647*x1651))+((x1647*x1654*x1658))+((x1641*x1643))+(((0.109556)*x1659))+(((-1.0)*x1651*x1654*x1658))+((x1641*x1665))+(((-0.076974648164)*x1644))+(((0.01957494)*x1645)))),IkReal(((0.001217276212)+(((-0.028046)*x1659))+(((0.028046)*sj4*x1647))+(((-1.0)*pz*x1651))+(((-1.0)*x1640*x1657))+(((0.019425)*sj6))+(((-0.01957494)*sj6*x1644))+(((0.00014994)*x1646))+(((-0.054778)*x1654))+(((0.00279642)*cj7))+(((-1.0)*x1647*x1663))+((pz*x1647))+(((-0.00035)*sj7))+(((0.028046)*x1655))+(((-1.0)*x1650*x1651))+((x1647*x1650))+(((-0.078226661836)*x1656))+(((-0.076974648164)*sj6*x1645))+(((2.0)*x1647*x1651*x1657))+((x1643*x1657))+((x1657*x1665))+((x1651*x1663))+(((-1.0)*x1657*x1664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1666.value)))+(x1667.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1668=IKcos(j5);
IkReal x1669=IKsin(j5);
IkReal x1670=((1.0)*pz);
IkReal x1671=(cj4*cj6);
IkReal x1672=((1.0)*px);
IkReal x1673=((0.035)*sj7);
IkReal x1674=((0.279642)*cj7);
IkReal x1675=((0.07)*sj6);
IkReal x1676=(pz*sj4);
IkReal x1677=((0.07)*cj6);
IkReal x1678=(py*sj3);
IkReal x1679=(cj4*pz);
IkReal x1680=(cj4*px);
IkReal x1681=(px*sj4);
IkReal x1682=((1.0)*cj6);
IkReal x1683=(cj3*py);
IkReal x1684=((1.0)*sj6);
IkReal x1685=((0.279642)*sj7);
IkReal x1686=((0.035)*cj7);
IkReal x1687=(sj3*x1668);
IkReal x1688=(sj4*x1683);
IkReal x1689=((0.02)*x1669);
IkReal x1690=((0.550716)*x1668);
IkReal x1691=(pz*x1669);
IkReal x1692=(cj4*x1668);
IkReal x1693=(sj3*x1669);
IkReal x1694=(sj6*x1669);
IkReal x1695=((0.550716)*x1669);
IkReal x1696=(sj6*x1668);
IkReal x1697=(cj6*x1668);
evalcond[0]=((-0.028046)+(((-1.0)*x1686*x1696))+(((-1.0)*x1669*x1674))+(((-1.0)*sj4*x1670))+(((-1.0)*cj4*x1683))+((x1669*x1673))+(((0.035)*x1696))+(((0.01)*x1668))+((sj3*x1680))+(((-0.275358)*x1669))+(((-1.0)*x1685*x1696)));
evalcond[1]=((0.054778)+(((-1.0)*x1686*x1694))+(((-1.0)*sj3*sj4*x1672))+(((-1.0)*x1668*x1673))+x1688+((x1668*x1674))+(((0.275358)*x1668))+(((0.035)*x1694))+(((0.01)*x1669))+(((-1.0)*cj4*x1670))+(((-1.0)*x1685*x1694)));
evalcond[2]=((0.275358)+(((0.028046)*x1669))+x1674+((x1668*x1688))+((cj4*x1669*x1683))+((x1669*x1676))+(((-1.0)*sj4*x1672*x1687))+(((0.054778)*x1668))+(((-1.0)*cj4*x1672*x1693))+(((-1.0)*x1670*x1692))+(((-1.0)*x1673)));
evalcond[3]=((((-1.0)*x1671*x1672*x1687))+((x1671*x1691))+(((0.028046)*x1697))+((cj6*x1681*x1693))+((x1668*x1671*x1683))+(((-0.01)*cj6))+(((-1.0)*x1669*x1682*x1688))+(((-1.0)*x1678*x1684))+((x1676*x1697))+(((-1.0)*cj3*sj6*x1672))+(((-0.054778)*cj6*x1669)));
evalcond[4]=((0.035)+(((0.054778)*x1694))+(((-1.0)*x1685))+(((-1.0)*x1686))+(((-1.0)*sj4*sj6*x1672*x1693))+(((-1.0)*x1678*x1682))+((sj6*x1680*x1687))+(((-1.0)*cj4*x1670*x1694))+((x1688*x1694))+(((-0.028046)*x1696))+(((0.01)*sj6))+(((-1.0)*cj3*cj6*x1672))+(((-1.0)*sj4*x1670*x1696))+(((-1.0)*x1683*x1684*x1692)));
evalcond[5]=((-0.0015095874)+(((-1.0)*x1688*x1690))+(((-1.0)*x1676*x1695))+(((-0.00383446)*x1694))+(((0.109556)*sj3*x1681))+(((-0.016540940936)*x1669))+(((-1.0)*px*x1672))+((x1675*x1681*x1693))+(((-0.056092)*x1676))+((x1669*x1675*x1679))+(((-0.02)*x1680*x1687))+(((-1.0)*x1675*x1680*x1687))+(((0.02)*x1683*x1692))+(((-0.0007)*sj6))+(((0.109556)*x1679))+((x1675*x1683*x1692))+((x1679*x1690))+(((-1.0)*pz*x1670))+(((0.056092)*sj3*x1680))+((x1679*x1689))+(((0.00196322)*x1696))+(((0.550716)*x1681*x1687))+(((-0.029606201048)*x1668))+(((-1.0)*x1669*x1675*x1688))+(((0.02)*x1668*x1676))+(((-1.0)*cj4*x1683*x1695))+(((-1.0)*(py*py)))+((x1668*x1675*x1676))+(((-0.109556)*x1688))+((cj3*px*x1677))+((x1677*x1678))+(((0.550716)*x1680*x1693))+((sj3*x1681*x1689))+(((-1.0)*x1688*x1689))+(((-0.056092)*cj4*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1698=px*px;
IkReal x1699=cj3*cj3;
IkReal x1700=cj4*cj4;
IkReal x1701=py*py;
IkReal x1702=pz*pz;
IkReal x1703=cj7*cj7;
IkReal x1704=(cj7*sj7);
IkReal x1705=(pz*sj4);
IkReal x1706=(cj7*sj4);
IkReal x1707=(cj3*py);
IkReal x1708=((0.028046)*sj4);
IkReal x1709=(sj6*sj7);
IkReal x1710=(px*sj3);
IkReal x1711=((0.054778)*cj4);
IkReal x1712=((0.275358)*sj4);
IkReal x1713=(cj4*sj4);
IkReal x1714=(cj7*sj6);
IkReal x1715=((0.01)*cj4);
IkReal x1716=(cj4*pz);
IkReal x1717=((0.056092)*cj4);
IkReal x1718=((0.035)*cj4);
IkReal x1719=((0.035)*sj7);
IkReal x1720=((2.0)*cj4);
IkReal x1721=((0.279642)*x1710);
IkReal x1722=(sj6*x1718);
IkReal x1723=((2.0)*pz*x1700);
IkReal x1724=(x1698*x1700);
IkReal x1725=(x1699*x1701);
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(IKsign(((0.015364020524)+(((-1.0)*x1710*x1712))+(((-1.0)*x1710*x1715))+((x1710*x1714*x1718))+(((-0.035)*x1705*x1714))+(((-1.0)*x1706*x1721))+((x1716*x1719))+(((-0.279642)*cj4*x1707*x1709))+(((0.00098161)*sj6))+(((-0.275358)*x1716))+(((-1.0)*x1707*x1714*x1718))+((x1707*x1722))+(((0.01)*x1705))+(((-0.007842839532)*x1709))+(((-0.279642)*x1705*x1709))+(((-0.00098161)*x1714))+(((-1.0)*x1710*x1722))+(((0.035)*sj6*x1705))+((sj4*x1710*x1719))+(((0.279642)*x1706*x1707))+(((0.015318229476)*cj7))+(((-0.00191723)*sj7))+(((-0.279642)*cj7*x1716))+((x1707*x1712))+((x1707*x1715))+(((-1.0)*sj4*x1707*x1719))+((cj4*x1709*x1721)))),-1);
if(!x1726.valid){
continue;
}
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal(((-0.004289883788)+(((-1.0)*pz*x1707))+((x1710*x1711))+(((0.00035)*sj7))+(((-1.0)*x1707*x1711))+(((-1.0)*x1707*x1708))+(((0.078226661836)*x1709))+((x1707*x1723))+(((0.01957494)*sj6*x1703))+(((-0.00279642)*cj7))+((x1702*x1713))+(((0.076974648164)*sj6*x1704))+(((2.0)*x1707*x1710*x1713))+(((-1.0)*x1710*x1723))+(((-0.054778)*x1705))+(((0.028046)*x1716))+(((-0.019425)*sj6))+((x1698*x1699*x1713))+(((-1.0)*x1713*x1725))+((pz*x1710))+((x1708*x1710))+(((-1.0)*x1698*x1713))+(((-0.00014994)*x1714)))),IkReal(((-0.076260450048)+(((0.01957494)*x1704))+(((-1.0)*x1710*x1717))+((x1705*x1707*x1720))+(((0.01927506)*sj7))+(((-2.0)*x1700*x1707*x1710))+(((0.056092)*x1705))+(((-0.154003323672)*cj7))+x1724+x1702+(((-0.076974648164)*x1703))+(((-1.0)*x1705*x1710*x1720))+(((-1.0)*x1699*x1724))+(((-1.0)*x1700*x1702))+((x1700*x1725))+((x1707*x1717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1726.value)))+(x1727.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1728=IKcos(j5);
IkReal x1729=IKsin(j5);
IkReal x1730=((1.0)*pz);
IkReal x1731=(cj4*cj6);
IkReal x1732=((1.0)*px);
IkReal x1733=((0.035)*sj7);
IkReal x1734=((0.279642)*cj7);
IkReal x1735=((0.07)*sj6);
IkReal x1736=(pz*sj4);
IkReal x1737=((0.07)*cj6);
IkReal x1738=(py*sj3);
IkReal x1739=(cj4*pz);
IkReal x1740=(cj4*px);
IkReal x1741=(px*sj4);
IkReal x1742=((1.0)*cj6);
IkReal x1743=(cj3*py);
IkReal x1744=((1.0)*sj6);
IkReal x1745=((0.279642)*sj7);
IkReal x1746=((0.035)*cj7);
IkReal x1747=(sj3*x1728);
IkReal x1748=(sj4*x1743);
IkReal x1749=((0.02)*x1729);
IkReal x1750=((0.550716)*x1728);
IkReal x1751=(pz*x1729);
IkReal x1752=(cj4*x1728);
IkReal x1753=(sj3*x1729);
IkReal x1754=(sj6*x1729);
IkReal x1755=((0.550716)*x1729);
IkReal x1756=(sj6*x1728);
IkReal x1757=(cj6*x1728);
evalcond[0]=((-0.028046)+(((-1.0)*cj4*x1743))+(((-1.0)*x1729*x1734))+((x1729*x1733))+(((0.035)*x1756))+(((-1.0)*x1746*x1756))+(((-1.0)*x1745*x1756))+(((-1.0)*sj4*x1730))+(((0.01)*x1728))+((sj3*x1740))+(((-0.275358)*x1729)));
evalcond[1]=((0.054778)+((x1728*x1734))+(((-1.0)*x1728*x1733))+x1748+(((0.035)*x1754))+(((0.275358)*x1728))+(((-1.0)*x1746*x1754))+(((-1.0)*x1745*x1754))+(((0.01)*x1729))+(((-1.0)*cj4*x1730))+(((-1.0)*sj3*sj4*x1732)));
evalcond[2]=((0.275358)+(((-1.0)*sj4*x1732*x1747))+x1734+(((0.028046)*x1729))+((x1729*x1736))+((cj4*x1729*x1743))+(((-1.0)*x1730*x1752))+(((-1.0)*cj4*x1732*x1753))+(((0.054778)*x1728))+((x1728*x1748))+(((-1.0)*x1733)));
evalcond[3]=((((-1.0)*x1731*x1732*x1747))+(((-0.054778)*cj6*x1729))+(((-1.0)*x1738*x1744))+(((-0.01)*cj6))+((x1731*x1751))+((x1728*x1731*x1743))+(((0.028046)*x1757))+(((-1.0)*x1729*x1742*x1748))+((cj6*x1741*x1753))+(((-1.0)*cj3*sj6*x1732))+((x1736*x1757)));
evalcond[4]=((0.035)+(((-1.0)*x1743*x1744*x1752))+((sj6*x1740*x1747))+(((-1.0)*x1738*x1742))+(((-0.028046)*x1756))+(((-1.0)*cj3*cj6*x1732))+((x1748*x1754))+(((0.054778)*x1754))+(((-1.0)*sj4*x1730*x1756))+(((-1.0)*x1746))+(((-1.0)*x1745))+(((-1.0)*cj4*x1730*x1754))+(((-1.0)*sj4*sj6*x1732*x1753))+(((0.01)*sj6)));
evalcond[5]=((-0.0015095874)+(((-0.029606201048)*x1728))+((x1739*x1749))+((x1729*x1735*x1739))+(((-0.056092)*x1736))+(((-1.0)*x1748*x1750))+(((-1.0)*x1748*x1749))+(((-1.0)*x1735*x1740*x1747))+((sj3*x1741*x1749))+((cj3*px*x1737))+(((0.550716)*x1741*x1747))+(((-0.016540940936)*x1729))+((x1737*x1738))+(((-1.0)*pz*x1730))+(((0.02)*x1743*x1752))+(((0.109556)*sj3*x1741))+(((-1.0)*x1736*x1755))+(((-0.00383446)*x1754))+(((-0.0007)*sj6))+((x1728*x1735*x1736))+(((0.550716)*x1740*x1753))+(((-0.109556)*x1748))+(((0.109556)*x1739))+(((-1.0)*px*x1732))+(((0.056092)*sj3*x1740))+((x1735*x1743*x1752))+(((0.00196322)*x1756))+(((-1.0)*cj4*x1743*x1755))+(((0.02)*x1728*x1736))+(((-1.0)*x1729*x1735*x1748))+(((-1.0)*(py*py)))+(((-0.02)*x1740*x1747))+(((-0.056092)*cj4*x1743))+((x1735*x1741*x1753))+((x1739*x1750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1758=cj6*cj6;
IkReal x1759=((0.0007)*sj6);
IkReal x1760=(cj7*sj4);
IkReal x1761=(cj7*sj6);
IkReal x1762=(sj6*sj7);
IkReal x1763=(cj3*py);
IkReal x1764=((0.01)*sj4);
IkReal x1765=(cj4*pz);
IkReal x1766=((0.035)*sj6);
IkReal x1767=((0.01)*cj4);
IkReal x1768=((0.279642)*pz);
IkReal x1769=((0.01957494)*sj7);
IkReal x1770=(px*sj3);
IkReal x1771=(cj4*cj7);
IkReal x1772=((0.035)*cj4);
IkReal x1773=((0.275358)*sj4);
IkReal x1774=((0.035)*sj7);
IkReal x1775=(pz*sj4);
IkReal x1776=((0.279642)*x1770);
IkReal x1777=((0.275358)*x1770);
IkReal x1778=(cj7*x1758);
IkReal x1779=(sj7*x1772);
CheckValue<IkReal> x1780=IKPowWithIntegerCheck(IKsign(((0.156571676328)+(((0.151553323672)*cj7))+(((-0.079424648164)*x1758))+x1759+(((-0.00559284)*x1762))+((x1758*x1769))+(((0.076974648164)*cj7*x1778))+(((-0.03885)*sj7))+(((-1.0)*x1769*x1778))+(((0.00245)*x1778))+(((-1.0)*cj7*x1759)))),-1);
if(!x1780.valid){
continue;
}
CheckValue<IkReal> x1781 = IKatan2WithCheck(IkReal(((-0.008270470468)+(((0.01)*x1765))+(((0.279642)*sj4*x1762*x1763))+(((-1.0)*pz*x1773))+((x1763*x1779))+((x1771*x1776))+((x1764*x1770))+(((0.00191723)*x1761))+(((-0.007842839532)*cj7))+(((-1.0)*sj4*x1762*x1776))+((x1765*x1766))+(((0.00098161)*sj7))+(((-1.0)*x1763*x1764))+(((-0.279642)*x1763*x1771))+((cj4*x1777))+(((-0.275358)*cj4*x1763))+(((-1.0)*x1760*x1768))+(((-1.0)*x1770*x1779))+(((-1.0)*x1760*x1766*x1770))+(((-0.00191723)*sj6))+(((-0.279642)*x1762*x1765))+((sj4*x1766*x1770))+((x1774*x1775))+((x1760*x1763*x1766))+(((-0.035)*x1761*x1765))+(((0.015318229476)*x1762))+(((-1.0)*sj4*x1763*x1766)))),IkReal(((-0.014803100524)+(((-1.0)*x1761*x1763*x1772))+(((-1.0)*sj4*x1762*x1768))+((x1761*x1770*x1772))+(((-0.015318229476)*cj7))+((x1760*x1776))+((cj4*x1762*x1776))+((x1770*x1773))+(((-1.0)*x1767*x1770))+(((-1.0)*x1763*x1773))+(((-1.0)*sj4*x1770*x1774))+(((0.00098161)*sj6))+((x1766*x1775))+(((0.00191723)*sj7))+((pz*x1764))+(((-0.279642)*cj4*x1762*x1763))+(((-0.279642)*x1760*x1763))+(((-1.0)*x1765*x1774))+(((-0.00098161)*x1761))+(((0.279642)*cj7*x1765))+((cj4*x1763*x1766))+(((-1.0)*cj4*x1766*x1770))+((sj4*x1763*x1774))+(((0.275358)*x1765))+(((-1.0)*pz*x1760*x1766))+(((-0.007842839532)*x1762))+((x1763*x1767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1781.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1780.value)))+(x1781.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1782=IKcos(j5);
IkReal x1783=IKsin(j5);
IkReal x1784=((1.0)*pz);
IkReal x1785=(cj4*cj6);
IkReal x1786=((1.0)*px);
IkReal x1787=((0.035)*sj7);
IkReal x1788=((0.279642)*cj7);
IkReal x1789=((0.07)*sj6);
IkReal x1790=(pz*sj4);
IkReal x1791=((0.07)*cj6);
IkReal x1792=(py*sj3);
IkReal x1793=(cj4*pz);
IkReal x1794=(cj4*px);
IkReal x1795=(px*sj4);
IkReal x1796=((1.0)*cj6);
IkReal x1797=(cj3*py);
IkReal x1798=((1.0)*sj6);
IkReal x1799=((0.279642)*sj7);
IkReal x1800=((0.035)*cj7);
IkReal x1801=(sj3*x1782);
IkReal x1802=(sj4*x1797);
IkReal x1803=((0.02)*x1783);
IkReal x1804=((0.550716)*x1782);
IkReal x1805=(pz*x1783);
IkReal x1806=(cj4*x1782);
IkReal x1807=(sj3*x1783);
IkReal x1808=(sj6*x1783);
IkReal x1809=((0.550716)*x1783);
IkReal x1810=(sj6*x1782);
IkReal x1811=(cj6*x1782);
evalcond[0]=((-0.028046)+(((-1.0)*x1783*x1788))+((x1783*x1787))+((sj3*x1794))+(((-1.0)*cj4*x1797))+(((0.035)*x1810))+(((-0.275358)*x1783))+(((-1.0)*x1800*x1810))+(((0.01)*x1782))+(((-1.0)*x1799*x1810))+(((-1.0)*sj4*x1784)));
evalcond[1]=((0.054778)+((x1782*x1788))+(((-1.0)*cj4*x1784))+(((-1.0)*x1799*x1808))+(((0.275358)*x1782))+(((-1.0)*x1800*x1808))+x1802+(((0.01)*x1783))+(((-1.0)*x1782*x1787))+(((-1.0)*sj3*sj4*x1786))+(((0.035)*x1808)));
evalcond[2]=((0.275358)+((x1782*x1802))+((x1783*x1790))+(((-1.0)*x1787))+x1788+(((0.028046)*x1783))+((cj4*x1783*x1797))+(((-1.0)*cj4*x1786*x1807))+(((-1.0)*x1784*x1806))+(((-1.0)*sj4*x1786*x1801))+(((0.054778)*x1782)));
evalcond[3]=((((-1.0)*x1792*x1798))+((x1785*x1805))+(((-0.054778)*cj6*x1783))+(((-0.01)*cj6))+((x1790*x1811))+(((-1.0)*cj3*sj6*x1786))+(((-1.0)*x1785*x1786*x1801))+((cj6*x1795*x1807))+(((-1.0)*x1783*x1796*x1802))+(((0.028046)*x1811))+((x1782*x1785*x1797)));
evalcond[4]=((0.035)+(((-1.0)*x1792*x1796))+(((-1.0)*x1799))+((sj6*x1794*x1801))+((x1802*x1808))+(((-1.0)*sj4*sj6*x1786*x1807))+(((-1.0)*sj4*x1784*x1810))+(((-1.0)*x1797*x1798*x1806))+(((-1.0)*x1800))+(((-0.028046)*x1810))+(((-1.0)*cj3*cj6*x1786))+(((0.054778)*x1808))+(((0.01)*sj6))+(((-1.0)*cj4*x1784*x1808)));
evalcond[5]=((-0.0015095874)+((x1789*x1795*x1807))+(((0.00196322)*x1810))+(((-0.029606201048)*x1782))+(((-0.109556)*x1802))+((x1782*x1789*x1790))+(((0.550716)*x1794*x1807))+(((-0.016540940936)*x1783))+(((0.109556)*sj3*x1795))+((cj3*px*x1791))+(((-1.0)*pz*x1784))+(((-1.0)*x1802*x1803))+(((-1.0)*x1802*x1804))+(((0.109556)*x1793))+(((-0.0007)*sj6))+((x1789*x1797*x1806))+(((-0.00383446)*x1808))+(((0.056092)*sj3*x1794))+((x1783*x1789*x1793))+(((0.02)*x1782*x1790))+((x1793*x1804))+((x1793*x1803))+(((-1.0)*x1789*x1794*x1801))+(((-0.02)*x1794*x1801))+(((0.02)*x1797*x1806))+(((-1.0)*x1783*x1789*x1802))+(((-0.056092)*cj4*x1797))+(((0.550716)*x1795*x1801))+((sj3*x1795*x1803))+(((-1.0)*(py*py)))+((x1791*x1792))+(((-1.0)*px*x1786))+(((-1.0)*x1790*x1809))+(((-1.0)*cj4*x1797*x1809))+(((-0.056092)*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x299=(cj7*sj5);
IkReal x300=(cj3*cj6);
IkReal x301=((1.0)*sj4);
IkReal x302=(cj5*sj7);
IkReal x303=(cj5*cj7);
IkReal x304=(cj4*cj6);
IkReal x305=((1.0)*sj6);
IkReal x306=((1.0)*sj3);
IkReal x307=(cj6*sj3);
IkReal x308=((1.0)*sj7);
IkReal x309=(cj7*x300);
IkReal x310=(cj7*x307);
IkReal x311=((-1.0)*sj7);
IkReal x312=((-1.0)*sj3);
IkReal x313=((-1.0)*sj4);
IkReal x314=(((sj6*x303))+(((-1.0)*sj5*x308)));
IkReal x315=(x302+((sj6*x299)));
IkReal x316=((((-1.0)*sj5*sj7*x305))+x303);
IkReal x317=(x300*x311);
IkReal x318=(x307*x311);
IkReal x319=(cj4*x314);
IkReal x320=((((-1.0)*cj6*sj5*x301))+((cj5*x304)));
IkReal x321=(((sj5*x304))+((cj5*cj6*sj4)));
IkReal x322=(cj3*x320);
IkReal x323=((((-1.0)*x299))+(((-1.0)*x302*x305)));
IkReal x324=(cj4*x323);
IkReal x325=(((sj6*x312))+x322);
IkReal x326=((((-1.0)*cj3*x305))+(((-1.0)*x306*x320)));
IkReal x327=(((cj4*x315))+((sj4*x314)));
IkReal x328=(x319+(((-1.0)*x301*x315)));
IkReal x329=(x319+((x313*x315)));
IkReal x330=(x324+(((-1.0)*x301*x316)));
IkReal x331=(((sj4*x323))+((cj4*x316)));
IkReal x332=(x324+((x313*x316)));
IkReal x333=(cj3*x330);
IkReal x334=((((-1.0)*x306*x328))+x309);
IkReal x335=(x310+((cj3*x328)));
new_r00=(((r20*x327))+((r10*((x310+((cj3*x329))))))+((r00*((((x312*x329))+x309)))));
new_r01=(((r01*x334))+((r11*x335))+((r21*x327)));
new_r02=(((r12*x335))+((r02*x334))+((r22*x327)));
new_r10=(((r20*x321))+((r00*((((x312*x320))+(((-1.0)*cj3*sj6))))))+((r10*(((((-1.0)*sj3*x305))+x322)))));
new_r11=(((r21*x321))+((r11*x325))+((r01*x326)));
new_r12=(((r02*x326))+((r12*x325))+((r22*x321)));
new_r20=(((r10*(((((-1.0)*cj6*sj7*x306))+x333))))+((r20*x331))+((r00*((x317+((x312*x330)))))));
new_r21=(((r11*((((cj3*x332))+x318))))+((r01*((x317+((x312*x332))))))+((r21*x331)));
new_r22=(((r22*x331))+((r12*((x333+x318))))+((r02*(((((-1.0)*x306*x330))+(((-1.0)*x300*x308)))))));
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
cj9array[0]=new_r22;
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
j10eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=sj9;
j8eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j8eval[2]=IKsign(sj9);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=new_r02;
j8eval[1]=sj9;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j10mul = 1;
j10=0;
j8mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].fmul = j8mul;
vinfos[8].freeind = 0;
vinfos[8].maxsolutions = 0;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].fmul = j10mul;
vinfos[10].freeind = 0;
vinfos[10].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 10;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j10mul = 1;
j10=0;
j8mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].fmul = j8mul;
vinfos[8].freeind = 0;
vinfos[8].maxsolutions = 0;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].fmul = j10mul;
vinfos[10].freeind = 0;
vinfos[10].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 10;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x336=new_r22*new_r22;
IkReal x337=((16.0)*new_r10);
IkReal x338=((16.0)*new_r01);
IkReal x339=((16.0)*new_r00);
IkReal x340=(new_r11*new_r22);
IkReal x341=((8.0)*new_r00);
IkReal x342=(x336*x337);
IkReal x343=(x336*x338);
j8eval[0]=((IKabs((((new_r22*x341))+(((-8.0)*new_r11)))))+(IKabs((x338+(((-1.0)*x343)))))+(IKabs((x337+(((-1.0)*x342)))))+(IKabs((((x336*x341))+(((-8.0)*x340)))))+(IKabs((((new_r22*x339))+(((16.0)*new_r11))+(((-32.0)*new_r11*x336)))))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x340))+(((-1.0)*x336*x339)))))+(IKabs((x342+(((-1.0)*x337)))))+(IKabs((x343+(((-1.0)*x338))))));
if( IKabs(j8eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j8, j10]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j8evalpoly[1];
IkReal x344=new_r22*new_r22;
IkReal x345=((16.0)*new_r01);
IkReal x346=(new_r00*new_r22);
IkReal x347=(x344*x345);
IkReal x348=((((8.0)*x346))+(((-8.0)*new_r11)));
op[0]=x348;
op[1]=(x347+(((-1.0)*x345)));
op[2]=((((-32.0)*new_r11*x344))+(((16.0)*new_r11))+(((16.0)*x346)));
op[3]=(x345+(((-1.0)*x347)));
op[4]=x348;
polyroots4(op,zeror,numroots);
IkReal j8array[4], cj8array[4], sj8array[4], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[4]={true,true,true,true};
_nj8 = 4;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

IkReal x349=new_r22*new_r22;
IkReal x350=((16.0)*new_r10);
IkReal x351=(new_r11*new_r22);
IkReal x352=((8.0)*x351);
IkReal x353=(new_r00*x349);
IkReal x354=((8.0)*x353);
IkReal x355=(x349*x350);
j8evalpoly[0]=((((htj8*htj8*htj8)*(((((-1.0)*x355))+x350))))+(((-1.0)*x352))+(((htj8*htj8)*(((((32.0)*new_r00))+(((-16.0)*x353))+(((-16.0)*x351))))))+x354+((htj8*(((((-1.0)*x350))+x355))))+(((htj8*htj8*htj8*htj8)*(((((-1.0)*x352))+x354)))));
if( IKabs(j8evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
IkReal j10eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x356=cj8*cj8;
IkReal x357=new_r22*new_r22;
IkReal x358=(new_r22*sj8);
IkReal x359=(((x356*x357))+(((-1.0)*x357))+(((-1.0)*x356)));
j10eval[0]=x359;
j10eval[1]=((IKabs((((cj8*new_r01))+((new_r00*x358)))))+(IKabs((((new_r01*x358))+(((-1.0)*cj8*new_r00))))));
j10eval[2]=IKsign(x359);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=new_r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=cj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x360=IKsin(j10);
IkReal x361=IKcos(j10);
evalcond[0]=(x360+new_r11);
evalcond[1]=((-1.0)*x360);
evalcond[2]=((-1.0)*x361);
evalcond[3]=((((-1.0)*x361))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x362=IKsin(j10);
IkReal x363=IKcos(j10);
evalcond[0]=((-1.0)*x362);
evalcond[1]=((-1.0)*x363);
evalcond[2]=(x362+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x363))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x364=new_r22*new_r22;
CheckValue<IkReal> x365=IKPowWithIntegerCheck(((-1.0)+x364),-1);
if(!x365.valid){
continue;
}
if(((x364*(x365.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x364*(x365.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj8+(((-1.0)*gconst36)))))+(IKabs(((-1.0)+(IKsign(sj8)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x366=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
sj8=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
cj8=gconst36;
if( (gconst36) < -1-IKFAST_SINCOS_THRESH || (gconst36) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=IKacos(gconst36);
CheckValue<IkReal> x367=IKPowWithIntegerCheck(((-1.0)+x366),-1);
if(!x367.valid){
continue;
}
if(((x366*(x367.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x366*(x367.value)));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
CheckValue<IkReal> x368=IKPowWithIntegerCheck(gconst36,-1);
if(!x368.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x368.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))))+IKsqr((new_r00*(x368.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))), (new_r00*(x368.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x369=IKsin(j10);
IkReal x370=IKcos(j10);
IkReal x371=((1.0)*x370);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x372=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
evalcond[0]=((-1.0)*x369);
evalcond[1]=((-1.0)*x370);
evalcond[2]=(new_r01+((gconst36*x369)));
evalcond[3]=((((-1.0)*gconst36*x371))+new_r00);
evalcond[4]=(((x369*x372))+new_r11);
evalcond[5]=((((-1.0)*x371*x372))+new_r10);
evalcond[6]=(x369+((gconst36*new_r01))+((new_r11*x372)));
evalcond[7]=((((-1.0)*x371))+((gconst36*new_r00))+((new_r10*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x373 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x373.valid){
continue;
}
CheckValue<IkReal> x374=IKPowWithIntegerCheck(IKsign(gconst36),-1);
if(!x374.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x373.value)+(((1.5707963267949)*(x374.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x375=IKsin(j10);
IkReal x376=IKcos(j10);
IkReal x377=((1.0)*x376);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x378=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
evalcond[0]=((-1.0)*x375);
evalcond[1]=((-1.0)*x376);
evalcond[2]=(new_r01+((gconst36*x375)));
evalcond[3]=((((-1.0)*gconst36*x377))+new_r00);
evalcond[4]=(((x375*x378))+new_r11);
evalcond[5]=((((-1.0)*x377*x378))+new_r10);
evalcond[6]=(x375+((gconst36*new_r01))+((new_r11*x378)));
evalcond[7]=((((-1.0)*x377))+((gconst36*new_r00))+((new_r10*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x379=new_r22*new_r22;
CheckValue<IkReal> x380=IKPowWithIntegerCheck(((-1.0)+x379),-1);
if(!x380.valid){
continue;
}
if(((x379*(x380.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x379*(x380.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj8)))))+(IKabs((cj8+(((-1.0)*gconst36)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x381=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
sj8=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))))));
cj8=gconst36;
if( (gconst36) < -1-IKFAST_SINCOS_THRESH || (gconst36) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=((-1.0)*(IKacos(gconst36)));
CheckValue<IkReal> x382=IKPowWithIntegerCheck(((-1.0)+x381),-1);
if(!x382.valid){
continue;
}
if(((x381*(x382.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x381*(x382.value)));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
CheckValue<IkReal> x383=IKPowWithIntegerCheck(gconst36,-1);
if(!x383.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x383.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))))+IKsqr((new_r00*(x383.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))), (new_r00*(x383.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x384=IKsin(j10);
IkReal x385=IKcos(j10);
IkReal x386=((1.0)*x385);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x387=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
IkReal x388=((1.0)*x387);
evalcond[0]=((-1.0)*x384);
evalcond[1]=((-1.0)*x385);
evalcond[2]=(((gconst36*x384))+new_r01);
evalcond[3]=((((-1.0)*gconst36*x386))+new_r00);
evalcond[4]=(((x385*x387))+new_r10);
evalcond[5]=((((-1.0)*x384*x388))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x388))+x384+((gconst36*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x388))+((gconst36*new_r00))+(((-1.0)*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x389 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x389.valid){
continue;
}
CheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(gconst36),-1);
if(!x390.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x389.value)+(((1.5707963267949)*(x390.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x391=IKsin(j10);
IkReal x392=IKcos(j10);
IkReal x393=((1.0)*x392);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x394=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
IkReal x395=((1.0)*x394);
evalcond[0]=((-1.0)*x391);
evalcond[1]=((-1.0)*x392);
evalcond[2]=(new_r01+((gconst36*x391)));
evalcond[3]=(new_r00+(((-1.0)*gconst36*x393)));
evalcond[4]=(new_r10+((x392*x394)));
evalcond[5]=((((-1.0)*x391*x395))+new_r11);
evalcond[6]=(x391+((gconst36*new_r01))+(((-1.0)*new_r11*x395)));
evalcond[7]=((((-1.0)*x393))+((gconst36*new_r00))+(((-1.0)*new_r10*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x396=new_r22*new_r22;
CheckValue<IkReal> x397=IKPowWithIntegerCheck(((-1.0)+x396),-1);
if(!x397.valid){
continue;
}
if(((x396*(x397.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x396*(x397.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj8+(((-1.0)*gconst37)))))+(IKabs(((-1.0)+(IKsign(sj8)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x398=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
sj8=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
cj8=gconst37;
if( (gconst37) < -1-IKFAST_SINCOS_THRESH || (gconst37) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=IKacos(gconst37);
CheckValue<IkReal> x399=IKPowWithIntegerCheck(((-1.0)+x398),-1);
if(!x399.valid){
continue;
}
if(((x398*(x399.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x398*(x399.value)))));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(gconst37,-1);
if(!x400.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x400.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))))+IKsqr((new_r00*(x400.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))), (new_r00*(x400.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x401=IKsin(j10);
IkReal x402=IKcos(j10);
IkReal x403=((1.0)*x402);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x404=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
evalcond[0]=((-1.0)*x401);
evalcond[1]=((-1.0)*x402);
evalcond[2]=(new_r01+((gconst37*x401)));
evalcond[3]=(new_r00+(((-1.0)*gconst37*x403)));
evalcond[4]=(new_r11+((x401*x404)));
evalcond[5]=((((-1.0)*x403*x404))+new_r10);
evalcond[6]=(x401+((gconst37*new_r01))+((new_r11*x404)));
evalcond[7]=(((gconst37*new_r00))+((new_r10*x404))+(((-1.0)*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x405 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x405.valid){
continue;
}
CheckValue<IkReal> x406=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x406.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x405.value)+(((1.5707963267949)*(x406.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x407=IKsin(j10);
IkReal x408=IKcos(j10);
IkReal x409=((1.0)*x408);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x410=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
evalcond[0]=((-1.0)*x407);
evalcond[1]=((-1.0)*x408);
evalcond[2]=(new_r01+((gconst37*x407)));
evalcond[3]=(new_r00+(((-1.0)*gconst37*x409)));
evalcond[4]=(((x407*x410))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x409*x410)));
evalcond[6]=(x407+((gconst37*new_r01))+((new_r11*x410)));
evalcond[7]=(((gconst37*new_r00))+((new_r10*x410))+(((-1.0)*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x411=new_r22*new_r22;
CheckValue<IkReal> x412=IKPowWithIntegerCheck(((-1.0)+x411),-1);
if(!x412.valid){
continue;
}
if(((x411*(x412.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x411*(x412.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj8)))))+(IKabs((cj8+(((-1.0)*gconst37)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x413=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
sj8=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))))));
cj8=gconst37;
if( (gconst37) < -1-IKFAST_SINCOS_THRESH || (gconst37) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=((-1.0)*(IKacos(gconst37)));
CheckValue<IkReal> x414=IKPowWithIntegerCheck(((-1.0)+x413),-1);
if(!x414.valid){
continue;
}
if(((x413*(x414.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x413*(x414.value)))));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
CheckValue<IkReal> x415=IKPowWithIntegerCheck(gconst37,-1);
if(!x415.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x415.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))))+IKsqr((new_r00*(x415.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))), (new_r00*(x415.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x416=IKsin(j10);
IkReal x417=IKcos(j10);
IkReal x418=((1.0)*x417);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x419=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
IkReal x420=((1.0)*x419);
evalcond[0]=((-1.0)*x416);
evalcond[1]=((-1.0)*x417);
evalcond[2]=(new_r01+((gconst37*x416)));
evalcond[3]=(new_r00+(((-1.0)*gconst37*x418)));
evalcond[4]=(((x417*x419))+new_r10);
evalcond[5]=((((-1.0)*x416*x420))+new_r11);
evalcond[6]=(x416+(((-1.0)*new_r11*x420))+((gconst37*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x420))+((gconst37*new_r00))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x422.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x421.value)+(((1.5707963267949)*(x422.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x423=IKsin(j10);
IkReal x424=IKcos(j10);
IkReal x425=((1.0)*x424);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x426=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
IkReal x427=((1.0)*x426);
evalcond[0]=((-1.0)*x423);
evalcond[1]=((-1.0)*x424);
evalcond[2]=(((gconst37*x423))+new_r01);
evalcond[3]=((((-1.0)*gconst37*x425))+new_r00);
evalcond[4]=(((x424*x426))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x423*x427)));
evalcond[6]=(x423+(((-1.0)*new_r11*x427))+((gconst37*new_r01)));
evalcond[7]=((((-1.0)*x425))+(((-1.0)*new_r10*x427))+((gconst37*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x428=((1.0)*new_r11);
IkReal x429=((1.0)*cj8*new_r01);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(cj8,-1);
if(!x430.valid){
continue;
}
if( IKabs(((((-1.0)*x429))+(((-1.0)*sj8*x428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x430.value)*(((((-1.0)*new_r22*x428))+((new_r11*new_r22*(cj8*cj8)))+(((-1.0)*new_r22*sj8*x429))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x429))+(((-1.0)*sj8*x428))))+IKsqr(((x430.value)*(((((-1.0)*new_r22*x428))+((new_r11*new_r22*(cj8*cj8)))+(((-1.0)*new_r22*sj8*x429))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x429))+(((-1.0)*sj8*x428))), ((x430.value)*(((((-1.0)*new_r22*x428))+((new_r11*new_r22*(cj8*cj8)))+(((-1.0)*new_r22*sj8*x429))+new_r00))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[10];
IkReal x431=IKcos(j10);
IkReal x432=IKsin(j10);
IkReal x433=((1.0)*new_r22);
IkReal x434=(new_r01*sj8);
IkReal x435=(cj8*new_r22);
IkReal x436=(new_r00*sj8);
IkReal x437=((1.0)*x431);
IkReal x438=(cj8*x432);
IkReal x439=(sj8*x432);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x432);
evalcond[1]=((((-1.0)*x437))+((new_r10*sj8))+((cj8*new_r00)));
evalcond[2]=(x438+((new_r22*sj8*x431))+new_r01);
evalcond[3]=((((-1.0)*cj8*x437))+new_r00+((new_r22*x439)));
evalcond[4]=((((-1.0)*cj8*x431*x433))+x439+new_r11);
evalcond[5]=((((-1.0)*x436))+(((-1.0)*x432*x433))+((cj8*new_r10)));
evalcond[6]=((((-1.0)*x434))+(((-1.0)*x431*x433))+((cj8*new_r11)));
evalcond[7]=((((-1.0)*x433*x438))+(((-1.0)*sj8*x437))+new_r10);
evalcond[8]=((((-1.0)*x433*x436))+(((-1.0)*x432))+((new_r10*x435)));
evalcond[9]=((((-1.0)*x437))+(((-1.0)*x433*x434))+((new_r11*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x440=((1.0)*new_r01);
CheckValue<IkReal> x441=IKPowWithIntegerCheck(new_r22,-1);
if(!x441.valid){
continue;
}
if( IKabs(((((-1.0)*cj8*x440))+(((-1.0)*new_r11*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x441.value)*(((((-1.0)*sj8*x440))+((cj8*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x440))+(((-1.0)*new_r11*sj8))))+IKsqr(((x441.value)*(((((-1.0)*sj8*x440))+((cj8*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x440))+(((-1.0)*new_r11*sj8))), ((x441.value)*(((((-1.0)*sj8*x440))+((cj8*new_r11))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[10];
IkReal x442=IKcos(j10);
IkReal x443=IKsin(j10);
IkReal x444=((1.0)*new_r22);
IkReal x445=(new_r01*sj8);
IkReal x446=(cj8*new_r22);
IkReal x447=(new_r00*sj8);
IkReal x448=((1.0)*x442);
IkReal x449=(cj8*x443);
IkReal x450=(sj8*x443);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x443);
evalcond[1]=((((-1.0)*x448))+((new_r10*sj8))+((cj8*new_r00)));
evalcond[2]=(x449+new_r01+((new_r22*sj8*x442)));
evalcond[3]=((((-1.0)*cj8*x448))+((new_r22*x450))+new_r00);
evalcond[4]=(x450+(((-1.0)*cj8*x442*x444))+new_r11);
evalcond[5]=((((-1.0)*x447))+((cj8*new_r10))+(((-1.0)*x443*x444)));
evalcond[6]=((((-1.0)*x445))+((cj8*new_r11))+(((-1.0)*x442*x444)));
evalcond[7]=((((-1.0)*x444*x449))+(((-1.0)*sj8*x448))+new_r10);
evalcond[8]=((((-1.0)*x444*x447))+(((-1.0)*x443))+((new_r10*x446)));
evalcond[9]=((((-1.0)*x448))+(((-1.0)*x444*x445))+((new_r11*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x451=cj8*cj8;
IkReal x452=new_r22*new_r22;
IkReal x453=(new_r22*sj8);
CheckValue<IkReal> x454=IKPowWithIntegerCheck(IKsign(((((-1.0)*x452))+(((-1.0)*x451))+((x451*x452)))),-1);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455 = IKatan2WithCheck(IkReal((((new_r00*x453))+((cj8*new_r01)))),IkReal((((new_r01*x453))+(((-1.0)*cj8*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x455.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x454.value)))+(x455.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[10];
IkReal x456=IKcos(j10);
IkReal x457=IKsin(j10);
IkReal x458=((1.0)*new_r22);
IkReal x459=(new_r01*sj8);
IkReal x460=(cj8*new_r22);
IkReal x461=(new_r00*sj8);
IkReal x462=((1.0)*x456);
IkReal x463=(cj8*x457);
IkReal x464=(sj8*x457);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x457);
evalcond[1]=(((new_r10*sj8))+(((-1.0)*x462))+((cj8*new_r00)));
evalcond[2]=(((new_r22*sj8*x456))+x463+new_r01);
evalcond[3]=((((-1.0)*cj8*x462))+new_r00+((new_r22*x464)));
evalcond[4]=((((-1.0)*cj8*x456*x458))+x464+new_r11);
evalcond[5]=((((-1.0)*x461))+((cj8*new_r10))+(((-1.0)*x457*x458)));
evalcond[6]=((((-1.0)*x459))+(((-1.0)*x456*x458))+((cj8*new_r11)));
evalcond[7]=((((-1.0)*sj8*x462))+(((-1.0)*x458*x463))+new_r10);
evalcond[8]=(((new_r10*x460))+(((-1.0)*x457))+(((-1.0)*x458*x461)));
evalcond[9]=(((new_r11*x460))+(((-1.0)*x462))+(((-1.0)*x458*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x466=IKPowWithIntegerCheck(sj9,-1);
if(!x466.valid){
continue;
}
IkReal x465=x466.value;
CheckValue<IkReal> x467=IKPowWithIntegerCheck(new_r02,-1);
if(!x467.valid){
continue;
}
if( IKabs((x465*(x467.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x465)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x465*(x467.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x465))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x465*(x467.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x465));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x468=IKsin(j8);
IkReal x469=IKcos(j8);
IkReal x470=((1.0)*sj9);
IkReal x471=(new_r02*x468);
IkReal x472=(new_r12*x469);
IkReal x473=(sj9*x468);
evalcond[0]=(new_r12+((sj9*x469)));
evalcond[1]=((((-1.0)*x468*x470))+new_r02);
evalcond[2]=(((new_r12*x468))+((new_r02*x469)));
evalcond[3]=(sj9+(((-1.0)*x471))+x472);
evalcond[4]=((((-1.0)*cj9*x471))+((cj9*x472))+((new_r22*sj9)));
evalcond[5]=(((cj9*new_r20))+((new_r00*x473))+(((-1.0)*new_r10*x469*x470)));
evalcond[6]=((((-1.0)*new_r11*x469*x470))+((cj9*new_r21))+((new_r01*x473)));
evalcond[7]=((-1.0)+((cj9*new_r22))+((sj9*x471))+(((-1.0)*x470*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
j10eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
j10eval[0]=sj9;
j10eval[1]=cj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=cj9;
j10eval[2]=sj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x474=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x474))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj8*new_r00))+(((-1.0)*sj8*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x474))+(((-1.0)*new_r00*sj8))))+IKsqr((((cj8*new_r00))+(((-1.0)*sj8*x474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x474))+(((-1.0)*new_r00*sj8))), (((cj8*new_r00))+(((-1.0)*sj8*x474))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x475=IKcos(j10);
IkReal x476=IKsin(j10);
IkReal x477=((1.0)*sj8);
IkReal x478=(sj8*x476);
IkReal x479=((1.0)*x475);
IkReal x480=(cj8*x476);
IkReal x481=(cj8*x479);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x476);
evalcond[1]=(((new_r10*sj8))+(((-1.0)*x479))+((cj8*new_r00)));
evalcond[2]=(x480+((sj8*x475))+new_r01);
evalcond[3]=((((-1.0)*x481))+x478+new_r00);
evalcond[4]=((((-1.0)*x481))+x478+new_r11);
evalcond[5]=((((-1.0)*new_r00*x477))+((cj8*new_r10))+(((-1.0)*x476)));
evalcond[6]=((((-1.0)*x479))+(((-1.0)*new_r01*x477))+((cj8*new_r11)));
evalcond[7]=((((-1.0)*x475*x477))+(((-1.0)*x480))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x482=((1.0)*cj8);
if( IKabs(((((-1.0)*new_r01*x482))+(((-1.0)*new_r11*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x482))+((new_r01*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x482))+(((-1.0)*new_r11*sj8))))+IKsqr(((((-1.0)*new_r11*x482))+((new_r01*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r01*x482))+(((-1.0)*new_r11*sj8))), ((((-1.0)*new_r11*x482))+((new_r01*sj8))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x483=IKsin(j10);
IkReal x484=IKcos(j10);
IkReal x485=((1.0)*sj8);
IkReal x486=(cj8*x483);
IkReal x487=((1.0)*x484);
IkReal x488=(sj8*x483);
IkReal x489=(x484*x485);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x483);
evalcond[1]=((((-1.0)*new_r00*x485))+((cj8*new_r10))+x483);
evalcond[2]=((((-1.0)*new_r01*x485))+((cj8*new_r11))+x484);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x487))+((cj8*new_r00)));
evalcond[4]=(x488+new_r11+((cj8*x484)));
evalcond[5]=((((-1.0)*x489))+x486+new_r01);
evalcond[6]=((((-1.0)*x489))+x486+new_r10);
evalcond[7]=((((-1.0)*x483*x485))+(((-1.0)*cj8*x487))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r20, new_r21);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x490=IKsin(j10);
IkReal x491=IKcos(j10);
IkReal x492=((1.0)*x491);
evalcond[0]=((((-1.0)*x490))+new_r20);
evalcond[1]=((((-1.0)*x492))+new_r21);
evalcond[2]=(((cj8*x490))+new_r01);
evalcond[3]=(((sj8*x490))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj8*x492)));
evalcond[5]=(new_r10+(((-1.0)*sj8*x492)));
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x490);
evalcond[7]=((((-1.0)*x492))+((new_r10*sj8))+((cj8*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x493=IKsin(j10);
IkReal x494=IKcos(j10);
IkReal x495=((1.0)*x494);
evalcond[0]=(x493+new_r20);
evalcond[1]=(x494+new_r21);
evalcond[2]=(((cj8*x493))+new_r01);
evalcond[3]=(((sj8*x493))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*cj8*x495)));
evalcond[5]=(new_r10+(((-1.0)*sj8*x495)));
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x493);
evalcond[7]=((((-1.0)*x495))+((new_r10*sj8))+((cj8*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x496=IKsin(j10);
IkReal x497=IKcos(j10);
IkReal x498=((1.0)*x497);
IkReal x499=((1.0)*x496);
evalcond[0]=(x496+new_r01);
evalcond[1]=((((-1.0)*x498))+new_r00);
evalcond[2]=((((-1.0)*sj9*x499))+new_r20);
evalcond[3]=((((-1.0)*sj9*x498))+new_r21);
evalcond[4]=((((-1.0)*cj9*x498))+new_r11);
evalcond[5]=((((-1.0)*cj9*x499))+new_r10);
evalcond[6]=((((-1.0)*x499))+((new_r20*sj9))+((cj9*new_r10)));
evalcond[7]=((((-1.0)*x498))+((cj9*new_r11))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x500=IKsin(j10);
IkReal x501=IKcos(j10);
IkReal x502=((1.0)*new_r10);
IkReal x503=((1.0)*x501);
IkReal x504=((1.0)*x500);
evalcond[0]=(x500+(((-1.0)*new_r01)));
evalcond[1]=(((cj9*x501))+new_r11);
evalcond[2]=((((-1.0)*sj9*x504))+new_r20);
evalcond[3]=((((-1.0)*sj9*x503))+new_r21);
evalcond[4]=((((-1.0)*x503))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x502))+(((-1.0)*cj9*x504)));
evalcond[6]=(((new_r20*sj9))+(((-1.0)*x504))+(((-1.0)*cj9*x502)));
evalcond[7]=((((-1.0)*x503))+((new_r21*sj9))+(((-1.0)*cj9*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x505=IKcos(j10);
IkReal x506=IKsin(j10);
IkReal x507=((1.0)*cj9);
IkReal x508=((1.0)*x505);
IkReal x509=((1.0)*x506);
evalcond[0]=(x506+new_r11);
evalcond[1]=((((-1.0)*x508))+new_r10);
evalcond[2]=(((cj9*x505))+new_r01);
evalcond[3]=(((cj9*x506))+new_r00);
evalcond[4]=((((-1.0)*sj9*x509))+new_r20);
evalcond[5]=((((-1.0)*sj9*x508))+new_r21);
evalcond[6]=(((new_r20*sj9))+(((-1.0)*new_r00*x507))+(((-1.0)*x509)));
evalcond[7]=((((-1.0)*new_r01*x507))+(((-1.0)*x508))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x510=IKsin(j10);
IkReal x511=IKcos(j10);
IkReal x512=((1.0)*x511);
IkReal x513=((1.0)*x510);
evalcond[0]=(x510+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*sj9*x513))+new_r20);
evalcond[2]=((((-1.0)*sj9*x512))+new_r21);
evalcond[3]=((((-1.0)*cj9*x512))+new_r01);
evalcond[4]=((((-1.0)*cj9*x513))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x512)));
evalcond[6]=(((new_r20*sj9))+((cj9*new_r00))+(((-1.0)*x513)));
evalcond[7]=(((cj9*new_r01))+((new_r21*sj9))+(((-1.0)*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=IKabs(new_r22);
if( IKabs(j10eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j10]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[2]={true,true};
_nj10 = 2;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(sj9,-1);
if(!x515.valid){
continue;
}
IkReal x514=x515.value;
CheckValue<IkReal> x516=IKPowWithIntegerCheck(cj9,-1);
if(!x516.valid){
continue;
}
CheckValue<IkReal> x517=IKPowWithIntegerCheck(sj8,-1);
if(!x517.valid){
continue;
}
if( IKabs((new_r20*x514)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x514*(x516.value)*(x517.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x514))+IKsqr((x514*(x516.value)*(x517.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x514), (x514*(x516.value)*(x517.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x518=IKsin(j10);
IkReal x519=IKcos(j10);
IkReal x520=(cj9*sj8);
IkReal x521=(cj8*new_r10);
IkReal x522=((1.0)*new_r01);
IkReal x523=(cj8*new_r11);
IkReal x524=((1.0)*new_r00);
IkReal x525=((1.0)*x519);
IkReal x526=(cj8*x518);
IkReal x527=((1.0)*x518);
IkReal x528=(cj9*x525);
evalcond[0]=((((-1.0)*sj9*x527))+new_r20);
evalcond[1]=((((-1.0)*sj9*x525))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x518);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x525))+((cj8*new_r00)));
evalcond[4]=(((x519*x520))+x526+new_r01);
evalcond[5]=((((-1.0)*cj8*x525))+((x518*x520))+new_r00);
evalcond[6]=(((sj8*x518))+(((-1.0)*cj8*x528))+new_r11);
evalcond[7]=((((-1.0)*cj9*x527))+x521+(((-1.0)*sj8*x524)));
evalcond[8]=((((-1.0)*x528))+x523+(((-1.0)*sj8*x522)));
evalcond[9]=((((-1.0)*cj9*x526))+new_r10+(((-1.0)*sj8*x525)));
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x520*x524))+(((-1.0)*x527))+((cj9*x521)));
evalcond[11]=((((-1.0)*x520*x522))+(((-1.0)*x525))+((cj9*x523))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x530=IKPowWithIntegerCheck(sj9,-1);
if(!x530.valid){
continue;
}
IkReal x529=x530.value;
CheckValue<IkReal> x531=IKPowWithIntegerCheck(cj8,-1);
if(!x531.valid){
continue;
}
if( IKabs((new_r20*x529)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x529*(x531.value)*((((cj9*new_r20*sj8))+((new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x529))+IKsqr((x529*(x531.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x529), (x529*(x531.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x532=IKsin(j10);
IkReal x533=IKcos(j10);
IkReal x534=(cj9*sj8);
IkReal x535=(cj8*new_r10);
IkReal x536=((1.0)*new_r01);
IkReal x537=(cj8*new_r11);
IkReal x538=((1.0)*new_r00);
IkReal x539=((1.0)*x533);
IkReal x540=(cj8*x532);
IkReal x541=((1.0)*x532);
IkReal x542=(cj9*x539);
evalcond[0]=((((-1.0)*sj9*x541))+new_r20);
evalcond[1]=((((-1.0)*sj9*x539))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x532);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x539))+((cj8*new_r00)));
evalcond[4]=(x540+new_r01+((x533*x534)));
evalcond[5]=((((-1.0)*cj8*x539))+new_r00+((x532*x534)));
evalcond[6]=(((sj8*x532))+(((-1.0)*cj8*x542))+new_r11);
evalcond[7]=((((-1.0)*cj9*x541))+x535+(((-1.0)*sj8*x538)));
evalcond[8]=((((-1.0)*x542))+x537+(((-1.0)*sj8*x536)));
evalcond[9]=((((-1.0)*cj9*x540))+new_r10+(((-1.0)*sj8*x539)));
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x534*x538))+(((-1.0)*x541))+((cj9*x535)));
evalcond[11]=((((-1.0)*x534*x536))+(((-1.0)*x539))+((cj9*x537))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x543.value)))+(x544.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x545=IKsin(j10);
IkReal x546=IKcos(j10);
IkReal x547=(cj9*sj8);
IkReal x548=(cj8*new_r10);
IkReal x549=((1.0)*new_r01);
IkReal x550=(cj8*new_r11);
IkReal x551=((1.0)*new_r00);
IkReal x552=((1.0)*x546);
IkReal x553=(cj8*x545);
IkReal x554=((1.0)*x545);
IkReal x555=(cj9*x552);
evalcond[0]=((((-1.0)*sj9*x554))+new_r20);
evalcond[1]=((((-1.0)*sj9*x552))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x545);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x552))+((cj8*new_r00)));
evalcond[4]=(x553+new_r01+((x546*x547)));
evalcond[5]=((((-1.0)*cj8*x552))+new_r00+((x545*x547)));
evalcond[6]=((((-1.0)*cj8*x555))+new_r11+((sj8*x545)));
evalcond[7]=((((-1.0)*sj8*x551))+(((-1.0)*cj9*x554))+x548);
evalcond[8]=((((-1.0)*x555))+x550+(((-1.0)*sj8*x549)));
evalcond[9]=((((-1.0)*sj8*x552))+(((-1.0)*cj9*x553))+new_r10);
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x547*x551))+(((-1.0)*x554))+((cj9*x548)));
evalcond[11]=(((cj9*x550))+(((-1.0)*x552))+(((-1.0)*x547*x549))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x556=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x556.valid){
continue;
}
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x556.value)))+(x557.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x558=IKsin(j8);
IkReal x559=IKcos(j8);
IkReal x560=((1.0)*sj9);
IkReal x561=(new_r02*x558);
IkReal x562=(new_r12*x559);
IkReal x563=(sj9*x558);
evalcond[0]=(((sj9*x559))+new_r12);
evalcond[1]=((((-1.0)*x558*x560))+new_r02);
evalcond[2]=(((new_r02*x559))+((new_r12*x558)));
evalcond[3]=(sj9+x562+(((-1.0)*x561)));
evalcond[4]=((((-1.0)*cj9*x561))+((new_r22*sj9))+((cj9*x562)));
evalcond[5]=(((cj9*new_r20))+((new_r00*x563))+(((-1.0)*new_r10*x559*x560)));
evalcond[6]=(((cj9*new_r21))+((new_r01*x563))+(((-1.0)*new_r11*x559*x560)));
evalcond[7]=((-1.0)+((cj9*new_r22))+(((-1.0)*x560*x562))+((sj9*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
j10eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
j10eval[0]=sj9;
j10eval[1]=cj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=cj9;
j10eval[2]=sj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x564=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x564))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x564))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x564))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x564))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x564))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x564))+((cj8*new_r00))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x565=IKcos(j10);
IkReal x566=IKsin(j10);
IkReal x567=((1.0)*sj8);
IkReal x568=(sj8*x566);
IkReal x569=((1.0)*x565);
IkReal x570=(cj8*x566);
IkReal x571=(cj8*x569);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x566);
evalcond[1]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x569)));
evalcond[2]=(x570+((sj8*x565))+new_r01);
evalcond[3]=((((-1.0)*x571))+x568+new_r00);
evalcond[4]=((((-1.0)*x571))+x568+new_r11);
evalcond[5]=((((-1.0)*new_r00*x567))+((cj8*new_r10))+(((-1.0)*x566)));
evalcond[6]=(((cj8*new_r11))+(((-1.0)*x569))+(((-1.0)*new_r01*x567)));
evalcond[7]=((((-1.0)*x570))+new_r10+(((-1.0)*x565*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x572=((1.0)*cj8);
if( IKabs(((((-1.0)*new_r01*x572))+(((-1.0)*new_r11*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj8))+(((-1.0)*new_r11*x572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x572))+(((-1.0)*new_r11*sj8))))+IKsqr((((new_r01*sj8))+(((-1.0)*new_r11*x572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r01*x572))+(((-1.0)*new_r11*sj8))), (((new_r01*sj8))+(((-1.0)*new_r11*x572))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x573=IKsin(j10);
IkReal x574=IKcos(j10);
IkReal x575=((1.0)*sj8);
IkReal x576=(cj8*x573);
IkReal x577=((1.0)*x574);
IkReal x578=(sj8*x573);
IkReal x579=(x574*x575);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x573);
evalcond[1]=(((cj8*new_r10))+x573+(((-1.0)*new_r00*x575)));
evalcond[2]=(((cj8*new_r11))+x574+(((-1.0)*new_r01*x575)));
evalcond[3]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x577)));
evalcond[4]=(x578+((cj8*x574))+new_r11);
evalcond[5]=((((-1.0)*x579))+x576+new_r01);
evalcond[6]=((((-1.0)*x579))+x576+new_r10);
evalcond[7]=((((-1.0)*x573*x575))+(((-1.0)*cj8*x577))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r20, new_r21);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x580=IKsin(j10);
IkReal x581=IKcos(j10);
IkReal x582=((1.0)*x581);
evalcond[0]=((((-1.0)*x580))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x582)));
evalcond[2]=(new_r01+((cj8*x580)));
evalcond[3]=(((sj8*x580))+new_r11);
evalcond[4]=((((-1.0)*cj8*x582))+new_r00);
evalcond[5]=((((-1.0)*sj8*x582))+new_r10);
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x580);
evalcond[7]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x583=IKsin(j10);
IkReal x584=IKcos(j10);
IkReal x585=((1.0)*x584);
evalcond[0]=(x583+new_r20);
evalcond[1]=(x584+new_r21);
evalcond[2]=(new_r01+((cj8*x583)));
evalcond[3]=(((sj8*x583))+new_r11);
evalcond[4]=((((-1.0)*cj8*x585))+new_r00);
evalcond[5]=((((-1.0)*sj8*x585))+new_r10);
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x583);
evalcond[7]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x586=IKsin(j10);
IkReal x587=IKcos(j10);
IkReal x588=((1.0)*x587);
IkReal x589=((1.0)*x586);
evalcond[0]=(x586+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x588)));
evalcond[2]=(new_r20+(((-1.0)*sj9*x589)));
evalcond[3]=(new_r21+(((-1.0)*sj9*x588)));
evalcond[4]=((((-1.0)*cj9*x588))+new_r11);
evalcond[5]=((((-1.0)*cj9*x589))+new_r10);
evalcond[6]=(((new_r20*sj9))+((cj9*new_r10))+(((-1.0)*x589)));
evalcond[7]=(((cj9*new_r11))+((new_r21*sj9))+(((-1.0)*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x590=IKsin(j10);
IkReal x591=IKcos(j10);
IkReal x592=((1.0)*new_r10);
IkReal x593=((1.0)*x591);
IkReal x594=((1.0)*x590);
evalcond[0]=(x590+(((-1.0)*new_r01)));
evalcond[1]=(((cj9*x591))+new_r11);
evalcond[2]=((((-1.0)*sj9*x594))+new_r20);
evalcond[3]=((((-1.0)*sj9*x593))+new_r21);
evalcond[4]=((((-1.0)*x593))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*cj9*x594))+(((-1.0)*x592)));
evalcond[6]=(((new_r20*sj9))+(((-1.0)*cj9*x592))+(((-1.0)*x594)));
evalcond[7]=((((-1.0)*x593))+((new_r21*sj9))+(((-1.0)*cj9*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x595=IKcos(j10);
IkReal x596=IKsin(j10);
IkReal x597=((1.0)*cj9);
IkReal x598=((1.0)*x595);
IkReal x599=((1.0)*x596);
evalcond[0]=(x596+new_r11);
evalcond[1]=((((-1.0)*x598))+new_r10);
evalcond[2]=(((cj9*x595))+new_r01);
evalcond[3]=(((cj9*x596))+new_r00);
evalcond[4]=((((-1.0)*sj9*x599))+new_r20);
evalcond[5]=((((-1.0)*sj9*x598))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x597))+((new_r20*sj9))+(((-1.0)*x599)));
evalcond[7]=((((-1.0)*new_r01*x597))+(((-1.0)*x598))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x600=IKsin(j10);
IkReal x601=IKcos(j10);
IkReal x602=((1.0)*x601);
IkReal x603=((1.0)*x600);
evalcond[0]=(x600+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*sj9*x603))+new_r20);
evalcond[2]=((((-1.0)*sj9*x602))+new_r21);
evalcond[3]=((((-1.0)*cj9*x602))+new_r01);
evalcond[4]=((((-1.0)*cj9*x603))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x602)));
evalcond[6]=(((new_r20*sj9))+((cj9*new_r00))+(((-1.0)*x603)));
evalcond[7]=(((cj9*new_r01))+(((-1.0)*x602))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=IKabs(new_r22);
if( IKabs(j10eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j10]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[2]={true,true};
_nj10 = 2;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x605=IKPowWithIntegerCheck(sj9,-1);
if(!x605.valid){
continue;
}
IkReal x604=x605.value;
CheckValue<IkReal> x606=IKPowWithIntegerCheck(cj9,-1);
if(!x606.valid){
continue;
}
CheckValue<IkReal> x607=IKPowWithIntegerCheck(sj8,-1);
if(!x607.valid){
continue;
}
if( IKabs((new_r20*x604)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x604*(x606.value)*(x607.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x604))+IKsqr((x604*(x606.value)*(x607.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x604), (x604*(x606.value)*(x607.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x608=IKsin(j10);
IkReal x609=IKcos(j10);
IkReal x610=(cj9*sj8);
IkReal x611=(cj8*new_r10);
IkReal x612=((1.0)*new_r01);
IkReal x613=(cj8*new_r11);
IkReal x614=((1.0)*new_r00);
IkReal x615=((1.0)*x609);
IkReal x616=(cj8*x608);
IkReal x617=((1.0)*x608);
IkReal x618=(cj9*x615);
evalcond[0]=((((-1.0)*sj9*x617))+new_r20);
evalcond[1]=((((-1.0)*sj9*x615))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x608);
evalcond[3]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x615)));
evalcond[4]=(x616+((x609*x610))+new_r01);
evalcond[5]=(((x608*x610))+(((-1.0)*cj8*x615))+new_r00);
evalcond[6]=((((-1.0)*cj8*x618))+((sj8*x608))+new_r11);
evalcond[7]=((((-1.0)*cj9*x617))+(((-1.0)*sj8*x614))+x611);
evalcond[8]=((((-1.0)*sj8*x612))+(((-1.0)*x618))+x613);
evalcond[9]=((((-1.0)*sj8*x615))+(((-1.0)*cj9*x616))+new_r10);
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x610*x614))+(((-1.0)*x617))+((cj9*x611)));
evalcond[11]=((((-1.0)*x610*x612))+(((-1.0)*x615))+((cj9*x613))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x620=IKPowWithIntegerCheck(sj9,-1);
if(!x620.valid){
continue;
}
IkReal x619=x620.value;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(cj8,-1);
if(!x621.valid){
continue;
}
if( IKabs((new_r20*x619)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x619*(x621.value)*((((cj9*new_r20*sj8))+((new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x619))+IKsqr((x619*(x621.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x619), (x619*(x621.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x622=IKsin(j10);
IkReal x623=IKcos(j10);
IkReal x624=(cj9*sj8);
IkReal x625=(cj8*new_r10);
IkReal x626=((1.0)*new_r01);
IkReal x627=(cj8*new_r11);
IkReal x628=((1.0)*new_r00);
IkReal x629=((1.0)*x623);
IkReal x630=(cj8*x622);
IkReal x631=((1.0)*x622);
IkReal x632=(cj9*x629);
evalcond[0]=((((-1.0)*sj9*x631))+new_r20);
evalcond[1]=((((-1.0)*sj9*x629))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x622);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x629))+((cj8*new_r00)));
evalcond[4]=(x630+new_r01+((x623*x624)));
evalcond[5]=((((-1.0)*cj8*x629))+new_r00+((x622*x624)));
evalcond[6]=((((-1.0)*cj8*x632))+((sj8*x622))+new_r11);
evalcond[7]=((((-1.0)*sj8*x628))+x625+(((-1.0)*cj9*x631)));
evalcond[8]=((((-1.0)*sj8*x626))+(((-1.0)*x632))+x627);
evalcond[9]=((((-1.0)*sj8*x629))+new_r10+(((-1.0)*cj9*x630)));
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x631))+(((-1.0)*x624*x628))+((cj9*x625)));
evalcond[11]=((((-1.0)*x629))+(((-1.0)*x624*x626))+((new_r21*sj9))+((cj9*x627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x633=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x633.value)))+(x634.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x635=IKsin(j10);
IkReal x636=IKcos(j10);
IkReal x637=(cj9*sj8);
IkReal x638=(cj8*new_r10);
IkReal x639=((1.0)*new_r01);
IkReal x640=(cj8*new_r11);
IkReal x641=((1.0)*new_r00);
IkReal x642=((1.0)*x636);
IkReal x643=(cj8*x635);
IkReal x644=((1.0)*x635);
IkReal x645=(cj9*x642);
evalcond[0]=((((-1.0)*sj9*x644))+new_r20);
evalcond[1]=((((-1.0)*sj9*x642))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x635);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x642))+((cj8*new_r00)));
evalcond[4]=(((x636*x637))+x643+new_r01);
evalcond[5]=(((x635*x637))+(((-1.0)*cj8*x642))+new_r00);
evalcond[6]=((((-1.0)*cj8*x645))+new_r11+((sj8*x635)));
evalcond[7]=((((-1.0)*sj8*x641))+(((-1.0)*cj9*x644))+x638);
evalcond[8]=((((-1.0)*sj8*x639))+(((-1.0)*x645))+x640);
evalcond[9]=((((-1.0)*sj8*x642))+(((-1.0)*cj9*x643))+new_r10);
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x644))+(((-1.0)*x637*x641))+((cj9*x638)));
evalcond[11]=((((-1.0)*x637*x639))+((cj9*x640))+(((-1.0)*x642))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x646=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x646.valid){
continue;
}
CheckValue<IkReal> x647 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x647.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x646.value)))+(x647.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x648=((1.0)*sj9);
evalcond[0]=((((-1.0)*x648*(IKsin(j10))))+new_r20);
evalcond[1]=((((-1.0)*x648*(IKcos(j10))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=sj9;
j8eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j8eval[2]=IKsign(sj9);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=new_r11;
j8eval[1]=sj9;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x649=((1.0)*sj10);
if( IKabs(((((-1.0)*cj10*new_r01))+(((-1.0)*new_r00*x649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj10*new_r00))+(((-1.0)*new_r01*x649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj10*new_r01))+(((-1.0)*new_r00*x649))))+IKsqr((((cj10*new_r00))+(((-1.0)*new_r01*x649))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj10*new_r01))+(((-1.0)*new_r00*x649))), (((cj10*new_r00))+(((-1.0)*new_r01*x649))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x650=IKsin(j8);
IkReal x651=IKcos(j8);
IkReal x652=((1.0)*cj10);
IkReal x653=((1.0)*sj10);
IkReal x654=(sj10*x650);
IkReal x655=((1.0)*x650);
IkReal x656=(x651*x652);
evalcond[0]=(sj10+((new_r01*x651))+((new_r11*x650)));
evalcond[1]=(((sj10*x651))+((cj10*x650))+new_r01);
evalcond[2]=((((-1.0)*x656))+x654+new_r00);
evalcond[3]=((((-1.0)*x656))+x654+new_r11);
evalcond[4]=((((-1.0)*x652))+((new_r10*x650))+((new_r00*x651)));
evalcond[5]=((((-1.0)*x651*x653))+(((-1.0)*x650*x652))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x655))+(((-1.0)*x653))+((new_r10*x651)));
evalcond[7]=((((-1.0)*x652))+(((-1.0)*new_r01*x655))+((new_r11*x651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x657=(((cj10*new_r01))+((new_r11*sj10)));
j8eval[0]=x657;
j8eval[1]=IKsign(x657);
j8eval[2]=((IKabs(((-1.0)+(cj10*cj10)+(new_r01*new_r01))))+(IKabs(((((-1.0)*cj10*sj10))+(((-1.0)*new_r01*new_r11))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x658=((1.0)*sj10);
IkReal x659=(((new_r10*new_r11))+((new_r00*new_r01)));
j8eval[0]=x659;
j8eval[1]=IKsign(x659);
j8eval[2]=((IKabs(((((-1.0)*new_r00*x658))+(((-1.0)*new_r11*x658)))))+(IKabs(((((-1.0)*new_r10*x658))+((new_r01*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x660=((1.0)*sj10);
IkReal x661=((new_r01*new_r01)+(new_r11*new_r11));
j8eval[0]=x661;
j8eval[1]=IKsign(x661);
j8eval[2]=((IKabs((((cj10*new_r01))+(((-1.0)*new_r11*x660)))))+(IKabs(((((-1.0)*cj10*new_r11))+(((-1.0)*new_r01*x660))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
new_r01=0;
new_r11=0;
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
IkReal x662=x663.value;
j8array[0]=((-1.0)*x662);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x662)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j8))))+(((-1.0)*new_r00*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x664=IKcos(j8);
IkReal x665=IKsin(j8);
IkReal x666=((1.0)*x665);
evalcond[0]=(x664+new_r11);
evalcond[1]=((((-1.0)*x666))+new_r01);
evalcond[2]=((((-1.0)*x664))+new_r00);
evalcond[3]=((((-1.0)*x666))+new_r10);
evalcond[4]=(((new_r11*x665))+((new_r01*x664)));
evalcond[5]=((-1.0)+((new_r10*x665))+((new_r00*x664)));
evalcond[6]=(((new_r10*x664))+(((-1.0)*new_r00*x666)));
evalcond[7]=((1.0)+((new_r11*x664))+(((-1.0)*new_r01*x666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x667=IKsin(j8);
IkReal x668=IKcos(j8);
IkReal x669=((1.0)*x667);
evalcond[0]=(x667+new_r01);
evalcond[1]=(x668+new_r00);
evalcond[2]=(x667+new_r10);
evalcond[3]=((((-1.0)*x668))+new_r11);
evalcond[4]=(((new_r11*x667))+((new_r01*x668)));
evalcond[5]=((1.0)+((new_r10*x667))+((new_r00*x668)));
evalcond[6]=(((new_r10*x668))+(((-1.0)*new_r00*x669)));
evalcond[7]=((-1.0)+((new_r11*x668))+(((-1.0)*new_r01*x669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x671 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x671)==0){
continue;
}
IkReal x670=pow(x671,-0.5);
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
IkReal gconst30=((-1.0)*(x672.value));
IkReal gconst31=((-1.0)*new_r01*x670);
IkReal gconst32=(new_r11*x670);
CheckValue<IkReal> x673 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x673.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j10+(x673.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
IkReal x674=((-1.0)*(x676.value));
IkReal x675=x670;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x674;
IkReal gconst30=x674;
IkReal gconst31=((-1.0)*new_r01*x675);
IkReal gconst32=(new_r11*x675);
IkReal x677=new_r01*new_r01;
IkReal x678=(new_r00*new_r01);
IkReal x679=(((new_r10*new_r11))+x678);
IkReal x680=x670;
IkReal x681=(new_r01*x680);
j8eval[0]=x679;
j8eval[1]=IKsign(x679);
j8eval[2]=((IKabs((((x678*x680))+((new_r11*x681)))))+(IKabs(((((-1.0)*x677*x680))+((new_r10*x681))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x684 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x684.valid){
continue;
}
IkReal x682=((-1.0)*(x684.value));
IkReal x683=x670;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x682;
IkReal gconst30=x682;
IkReal gconst31=((-1.0)*new_r01*x683);
IkReal gconst32=(new_r11*x683);
IkReal x685=((new_r01*new_r01)+(new_r11*new_r11));
j8eval[0]=x685;
j8eval[1]=IKsign(x685);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
IkReal x686=((-1.0)*(x688.value));
IkReal x687=x670;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x686;
IkReal gconst30=x686;
IkReal gconst31=((-1.0)*new_r01*x687);
IkReal gconst32=(new_r11*x687);
j8eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst32*gconst32)+(gconst31*gconst31));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
IkReal x689=((-1.0)*(x690.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x689;
new_r11=0;
new_r00=0;
IkReal gconst30=x689;
IkReal x691 = new_r01*new_r01;
if(IKabs(x691)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r01*(pow(x691,-0.5)));
IkReal gconst32=0;
j8eval[0]=new_r01;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x692=IKPowWithIntegerCheck(gconst31,-1);
if(!x692.valid){
continue;
}
cj8array[0]=((-1.0)*new_r01*(x692.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x693=IKsin(j8);
IkReal x694=IKcos(j8);
IkReal x695=((-1.0)*x693);
evalcond[0]=(new_r10*x693);
evalcond[1]=(gconst31*x695);
evalcond[2]=(new_r01*x695);
evalcond[3]=(gconst31+((new_r01*x694)));
evalcond[4]=(gconst31+((new_r10*x694)));
evalcond[5]=(((gconst31*x694))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x696=IKPowWithIntegerCheck(new_r01,-1);
if(!x696.valid){
continue;
}
cj8array[0]=((-1.0)*gconst31*(x696.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x697=IKsin(j8);
IkReal x698=IKcos(j8);
IkReal x699=(gconst31*x698);
IkReal x700=((-1.0)*x697);
evalcond[0]=(new_r10*x697);
evalcond[1]=(gconst31*x700);
evalcond[2]=(new_r01*x700);
evalcond[3]=(x699+new_r01);
evalcond[4]=(gconst31+((new_r10*x698)));
evalcond[5]=(x699+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst31;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
IkReal x701=((-1.0)*(x702.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x701;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst30=x701;
IkReal gconst31=((-1.0)*new_r01);
IkReal gconst32=new_r11;
j8eval[0]=-1.0;
j8eval[1]=-1.0;
j8eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x703=((-1.0)*(x704.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x703;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst30=x703;
IkReal gconst31=((-1.0)*new_r01);
IkReal gconst32=new_r11;
j8eval[0]=-1.0;
j8eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j8eval[2]=-1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x706 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
IkReal x705=((-1.0)*(x706.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x705;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst30=x705;
IkReal gconst31=((-1.0)*new_r01);
IkReal gconst32=new_r11;
j8eval[0]=1.0;
j8eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j8eval[2]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x707=((1.0)*gconst31);
CheckValue<IkReal> x708 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x707))+((gconst32*new_r01)))),IkReal(((((-1.0)*gconst32*new_r11))+(((-1.0)*new_r01*x707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x709.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x708.value)+(((1.5707963267949)*(x709.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x710=IKcos(j8);
IkReal x711=IKsin(j8);
IkReal x712=(gconst31*x710);
IkReal x713=((1.0)*x711);
IkReal x714=(gconst32*x710);
IkReal x715=(gconst32*x713);
evalcond[0]=(((new_r01*x710))+gconst31+((new_r11*x711)));
evalcond[1]=(((gconst31*x711))+x714+new_r11);
evalcond[2]=((((-1.0)*x715))+x712);
evalcond[3]=((((-1.0)*x715))+x712+new_r01);
evalcond[4]=((((-1.0)*x714))+(((-1.0)*gconst31*x713)));
evalcond[5]=(gconst32+((new_r11*x710))+(((-1.0)*new_r01*x713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x716 = IKatan2WithCheck(IkReal((gconst31*new_r11)),IkReal((gconst32*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x716.valid){
continue;
}
CheckValue<IkReal> x717=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst32*gconst32)))+(((-1.0)*(gconst31*gconst31))))),-1);
if(!x717.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x716.value)+(((1.5707963267949)*(x717.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x718=IKcos(j8);
IkReal x719=IKsin(j8);
IkReal x720=(gconst31*x718);
IkReal x721=((1.0)*x719);
IkReal x722=(gconst32*x718);
IkReal x723=(gconst32*x721);
evalcond[0]=(((new_r01*x718))+gconst31+((new_r11*x719)));
evalcond[1]=(((gconst31*x719))+x722+new_r11);
evalcond[2]=((((-1.0)*x723))+x720);
evalcond[3]=((((-1.0)*x723))+x720+new_r01);
evalcond[4]=((((-1.0)*gconst31*x721))+(((-1.0)*x722)));
evalcond[5]=(gconst32+((new_r11*x718))+(((-1.0)*new_r01*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x724 = IKatan2WithCheck(IkReal((gconst31*gconst32)),IkReal(((-1.0)*(gconst31*gconst31))),IKFAST_ATAN2_MAGTHRESH);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*new_r11))+((gconst31*new_r01)))),-1);
if(!x725.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x724.value)+(((1.5707963267949)*(x725.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x726=IKcos(j8);
IkReal x727=IKsin(j8);
IkReal x728=(gconst31*x726);
IkReal x729=((1.0)*x727);
IkReal x730=(gconst32*x726);
IkReal x731=(gconst32*x729);
evalcond[0]=(gconst31+((new_r01*x726))+((new_r11*x727)));
evalcond[1]=(x730+new_r11+((gconst31*x727)));
evalcond[2]=((((-1.0)*x731))+x728);
evalcond[3]=((((-1.0)*x731))+x728+new_r01);
evalcond[4]=((((-1.0)*gconst31*x729))+(((-1.0)*x730)));
evalcond[5]=(gconst32+((new_r11*x726))+(((-1.0)*new_r01*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x732=IKPowWithIntegerCheck(gconst32,-1);
if(!x732.valid){
continue;
}
cj8array[0]=(new_r00*(x732.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x733=IKsin(j8);
IkReal x734=IKcos(j8);
IkReal x735=((-1.0)*x733);
evalcond[0]=(new_r11*x733);
evalcond[1]=(gconst32*x735);
evalcond[2]=(new_r00*x735);
evalcond[3]=(new_r11+((gconst32*x734)));
evalcond[4]=(gconst32+((new_r11*x734)));
evalcond[5]=(((new_r00*x734))+(((-1.0)*gconst32)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x736=((-1.0)*(x737.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x736;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst30=x736;
IkReal gconst31=0;
IkReal x738 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x738)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x738,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
IkReal x739=((-1.0)*(x740.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x739;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst30=x739;
IkReal gconst31=0;
IkReal x741 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x741)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x741,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
IkReal x742=((-1.0)*(x743.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x742;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst30=x742;
IkReal gconst31=0;
IkReal x744 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x744)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x744,-0.5)));
j8eval[0]=new_r10;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(new_r10,-1);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746=IKPowWithIntegerCheck(gconst32,-1);
if(!x746.valid){
continue;
}
if( IKabs((gconst32*(x745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst32*(x745.value)))+IKsqr(((-1.0)*new_r11*(x746.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((gconst32*(x745.value)), ((-1.0)*new_r11*(x746.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x747=IKsin(j8);
IkReal x748=IKcos(j8);
IkReal x749=((1.0)*gconst32);
IkReal x750=((-1.0)*gconst32);
evalcond[0]=(new_r11*x747);
evalcond[1]=(new_r10*x748);
evalcond[2]=(x747*x750);
evalcond[3]=(x748*x750);
evalcond[4]=(((gconst32*x748))+new_r11);
evalcond[5]=(gconst32+((new_r11*x748)));
evalcond[6]=((((-1.0)*x747*x749))+new_r10);
evalcond[7]=(((new_r10*x747))+(((-1.0)*x749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x751=IKPowWithIntegerCheck(gconst32,-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(new_r11,-1);
if(!x752.valid){
continue;
}
if( IKabs((new_r10*(x751.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst32*(x752.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x751.value)))+IKsqr(((-1.0)*gconst32*(x752.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x751.value)), ((-1.0)*gconst32*(x752.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x753=IKsin(j8);
IkReal x754=IKcos(j8);
IkReal x755=((1.0)*gconst32);
IkReal x756=((-1.0)*gconst32);
evalcond[0]=(new_r11*x753);
evalcond[1]=(new_r10*x754);
evalcond[2]=(x753*x756);
evalcond[3]=(x754*x756);
evalcond[4]=(((gconst32*x754))+new_r11);
evalcond[5]=(gconst32+((new_r11*x754)));
evalcond[6]=((((-1.0)*x753*x755))+new_r10);
evalcond[7]=(((new_r10*x753))+(((-1.0)*x755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x758.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x757.value)+(((1.5707963267949)*(x758.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x759=IKsin(j8);
IkReal x760=IKcos(j8);
IkReal x761=((1.0)*gconst32);
IkReal x762=((-1.0)*gconst32);
evalcond[0]=(new_r11*x759);
evalcond[1]=(new_r10*x760);
evalcond[2]=(x759*x762);
evalcond[3]=(x760*x762);
evalcond[4]=(((gconst32*x760))+new_r11);
evalcond[5]=(((new_r11*x760))+gconst32);
evalcond[6]=(new_r10+(((-1.0)*x759*x761)));
evalcond[7]=((((-1.0)*x761))+((new_r10*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
IkReal x763=((-1.0)*(x764.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x763;
new_r01=0;
IkReal gconst30=x763;
IkReal gconst31=0;
IkReal x765 = new_r11*new_r11;
if(IKabs(x765)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x765,-0.5)));
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
IkReal x766=((-1.0)*(x767.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x766;
new_r01=0;
IkReal gconst30=x766;
IkReal gconst31=0;
IkReal x768 = new_r11*new_r11;
if(IKabs(x768)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x768,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
IkReal x769=((-1.0)*(x770.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x769;
new_r01=0;
IkReal gconst30=x769;
IkReal gconst31=0;
IkReal x771 = new_r11*new_r11;
if(IKabs(x771)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x771,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x772=IKPowWithIntegerCheck(gconst32,-1);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773=IKPowWithIntegerCheck(new_r11,-1);
if(!x773.valid){
continue;
}
if( IKabs((new_r10*(x772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst32*(x773.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x772.value)))+IKsqr(((-1.0)*gconst32*(x773.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x772.value)), ((-1.0)*gconst32*(x773.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x774=IKsin(j8);
IkReal x775=IKcos(j8);
IkReal x776=((1.0)*gconst32);
evalcond[0]=(new_r11*x774);
evalcond[1]=((-1.0)*gconst32*x774);
evalcond[2]=(((gconst32*x775))+new_r11);
evalcond[3]=(gconst32+((new_r11*x775)));
evalcond[4]=((((-1.0)*x775*x776))+new_r00);
evalcond[5]=((((-1.0)*x774*x776))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x774))+((new_r10*x775)));
evalcond[7]=(((new_r00*x775))+((new_r10*x774))+(((-1.0)*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x778.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x777.value)+(((1.5707963267949)*(x778.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x779=IKsin(j8);
IkReal x780=IKcos(j8);
IkReal x781=((1.0)*gconst32);
evalcond[0]=(new_r11*x779);
evalcond[1]=((-1.0)*gconst32*x779);
evalcond[2]=(((gconst32*x780))+new_r11);
evalcond[3]=(((new_r11*x780))+gconst32);
evalcond[4]=(new_r00+(((-1.0)*x780*x781)));
evalcond[5]=(new_r10+(((-1.0)*x779*x781)));
evalcond[6]=((((-1.0)*new_r00*x779))+((new_r10*x780)));
evalcond[7]=((((-1.0)*x781))+((new_r00*x780))+((new_r10*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x782=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x782.valid){
continue;
}
CheckValue<IkReal> x783 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x783.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x782.value)))+(x783.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x784=IKsin(j8);
IkReal x785=IKcos(j8);
IkReal x786=((1.0)*gconst32);
evalcond[0]=(new_r11*x784);
evalcond[1]=((-1.0)*gconst32*x784);
evalcond[2]=(((gconst32*x785))+new_r11);
evalcond[3]=(((new_r11*x785))+gconst32);
evalcond[4]=(new_r00+(((-1.0)*x785*x786)));
evalcond[5]=((((-1.0)*x784*x786))+new_r10);
evalcond[6]=(((new_r10*x785))+(((-1.0)*new_r00*x784)));
evalcond[7]=(((new_r10*x784))+(((-1.0)*x786))+((new_r00*x785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x787=((1.0)*gconst31);
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x787))+((gconst32*new_r01)))),IkReal(((((-1.0)*new_r01*x787))+(((-1.0)*gconst32*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789=IKPowWithIntegerCheck(IKsign(((gconst32*gconst32)+(gconst31*gconst31))),-1);
if(!x789.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x788.value)+(((1.5707963267949)*(x789.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x790=IKcos(j8);
IkReal x791=IKsin(j8);
IkReal x792=((1.0)*gconst32);
IkReal x793=(gconst31*x790);
IkReal x794=((1.0)*x791);
IkReal x795=(x791*x792);
evalcond[0]=(((new_r11*x791))+gconst31+((new_r01*x790)));
evalcond[1]=(((gconst31*x791))+((gconst32*x790))+new_r11);
evalcond[2]=((((-1.0)*x795))+x793+new_r01);
evalcond[3]=(((new_r10*x790))+gconst31+(((-1.0)*new_r00*x794)));
evalcond[4]=((((-1.0)*new_r01*x794))+((new_r11*x790))+gconst32);
evalcond[5]=((((-1.0)*x795))+x793+new_r10);
evalcond[6]=((((-1.0)*x792))+((new_r10*x791))+((new_r00*x790)));
evalcond[7]=((((-1.0)*gconst31*x794))+(((-1.0)*x790*x792))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x796=((1.0)*gconst31);
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x796))+((gconst32*new_r01)))),IkReal(((((-1.0)*new_r01*x796))+(((-1.0)*gconst32*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x797.value)))+(x798.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x799=IKcos(j8);
IkReal x800=IKsin(j8);
IkReal x801=((1.0)*gconst32);
IkReal x802=(gconst31*x799);
IkReal x803=((1.0)*x800);
IkReal x804=(x800*x801);
evalcond[0]=(gconst31+((new_r01*x799))+((new_r11*x800)));
evalcond[1]=(((gconst32*x799))+new_r11+((gconst31*x800)));
evalcond[2]=(new_r01+x802+(((-1.0)*x804)));
evalcond[3]=(((new_r10*x799))+(((-1.0)*new_r00*x803))+gconst31);
evalcond[4]=((((-1.0)*new_r01*x803))+((new_r11*x799))+gconst32);
evalcond[5]=(new_r10+x802+(((-1.0)*x804)));
evalcond[6]=(((new_r00*x799))+((new_r10*x800))+(((-1.0)*x801)));
evalcond[7]=((((-1.0)*gconst31*x803))+(((-1.0)*x799*x801))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x805=((1.0)*gconst31);
CheckValue<IkReal> x806 = IKatan2WithCheck(IkReal((((gconst31*new_r01))+(((-1.0)*new_r10*x805)))),IkReal(((((-1.0)*new_r00*x805))+(((-1.0)*new_r11*x805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x807.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x806.value)+(((1.5707963267949)*(x807.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x808=IKcos(j8);
IkReal x809=IKsin(j8);
IkReal x810=((1.0)*gconst32);
IkReal x811=(gconst31*x808);
IkReal x812=((1.0)*x809);
IkReal x813=(x809*x810);
evalcond[0]=(gconst31+((new_r11*x809))+((new_r01*x808)));
evalcond[1]=(((gconst32*x808))+new_r11+((gconst31*x809)));
evalcond[2]=((((-1.0)*x813))+new_r01+x811);
evalcond[3]=(gconst31+(((-1.0)*new_r00*x812))+((new_r10*x808)));
evalcond[4]=(gconst32+(((-1.0)*new_r01*x812))+((new_r11*x808)));
evalcond[5]=((((-1.0)*x813))+new_r10+x811);
evalcond[6]=((((-1.0)*x810))+((new_r00*x808))+((new_r10*x809)));
evalcond[7]=((((-1.0)*x808*x810))+(((-1.0)*gconst31*x812))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x815 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x815)==0){
continue;
}
IkReal x814=pow(x815,-0.5);
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x816.value))));
IkReal gconst34=((1.0)*new_r01*x814);
IkReal gconst35=((-1.0)*new_r11*x814);
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10+(x817.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
IkReal x818=((1.0)*(x820.value));
IkReal x819=x814;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x818)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x818)));
IkReal gconst34=((1.0)*new_r01*x819);
IkReal gconst35=((-1.0)*new_r11*x819);
IkReal x821=new_r01*new_r01;
IkReal x822=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x823=x814;
IkReal x824=((1.0)*new_r01*x823);
j8eval[0]=x822;
j8eval[1]=((IKabs(((((-1.0)*new_r11*x824))+(((-1.0)*new_r00*x824)))))+(IKabs((((x821*x823))+(((-1.0)*new_r10*x824))))));
j8eval[2]=IKsign(x822);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
IkReal x825=((1.0)*(x827.value));
IkReal x826=x814;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x825)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x825)));
IkReal gconst34=((1.0)*new_r01*x826);
IkReal gconst35=((-1.0)*new_r11*x826);
IkReal x828=((new_r01*new_r01)+(new_r11*new_r11));
j8eval[0]=x828;
j8eval[1]=IKsign(x828);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
IkReal x829=((1.0)*(x831.value));
IkReal x830=x814;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x829)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x829)));
IkReal gconst34=((1.0)*new_r01*x830);
IkReal gconst35=((-1.0)*new_r11*x830);
j8eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst35*gconst35)+(gconst34*gconst34));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
IkReal x832=((1.0)*(x833.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x832)));
new_r11=0;
new_r00=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x832)));
IkReal x834 = new_r01*new_r01;
if(IKabs(x834)==0){
continue;
}
IkReal gconst34=((1.0)*new_r01*(pow(x834,-0.5)));
IkReal gconst35=0;
j8eval[0]=new_r01;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(gconst34,-1);
if(!x835.valid){
continue;
}
cj8array[0]=((-1.0)*new_r01*(x835.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x836=IKsin(j8);
IkReal x837=IKcos(j8);
IkReal x838=((-1.0)*x836);
evalcond[0]=(new_r10*x836);
evalcond[1]=(gconst34*x838);
evalcond[2]=(new_r01*x838);
evalcond[3]=(((new_r01*x837))+gconst34);
evalcond[4]=(gconst34+((new_r10*x837)));
evalcond[5]=(((gconst34*x837))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x839=IKPowWithIntegerCheck(new_r01,-1);
if(!x839.valid){
continue;
}
cj8array[0]=((-1.0)*gconst34*(x839.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x840=IKsin(j8);
IkReal x841=IKcos(j8);
IkReal x842=(gconst34*x841);
IkReal x843=((-1.0)*x840);
evalcond[0]=(new_r10*x840);
evalcond[1]=(gconst34*x843);
evalcond[2]=(new_r01*x843);
evalcond[3]=(new_r01+x842);
evalcond[4]=(((new_r10*x841))+gconst34);
evalcond[5]=(new_r10+x842);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst34;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
IkReal x844=((1.0)*(x845.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x844)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x844)));
IkReal gconst34=((1.0)*new_r01);
IkReal gconst35=((-1.0)*new_r11);
j8eval[0]=1.0;
j8eval[1]=1.0;
j8eval[2]=new_r01;
j8eval[3]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
IkReal x846=((1.0)*(x847.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x846)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x846)));
IkReal gconst34=((1.0)*new_r01);
IkReal gconst35=((-1.0)*new_r11);
j8eval[0]=-1.0;
j8eval[1]=-1.0;
j8eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=((1.0)*(x849.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x848)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x848)));
IkReal gconst34=((1.0)*new_r01);
IkReal gconst35=((-1.0)*new_r11);
j8eval[0]=1.0;
j8eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j8eval[2]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x850=((1.0)*gconst34);
CheckValue<IkReal> x851 = IKatan2WithCheck(IkReal((((gconst35*new_r01))+(((-1.0)*new_r11*x850)))),IkReal(((((-1.0)*new_r01*x850))+(((-1.0)*gconst35*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x852.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x851.value)+(((1.5707963267949)*(x852.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x853=IKcos(j8);
IkReal x854=IKsin(j8);
IkReal x855=(gconst34*x853);
IkReal x856=(gconst34*x854);
IkReal x857=(gconst35*x853);
IkReal x858=((1.0)*x854);
IkReal x859=(gconst35*x858);
evalcond[0]=(gconst34+((new_r11*x854))+((new_r01*x853)));
evalcond[1]=(new_r11+x856+x857);
evalcond[2]=((((-1.0)*x859))+x855);
evalcond[3]=((((-1.0)*x859))+new_r01+x855);
evalcond[4]=((((-1.0)*x856))+(((-1.0)*x857)));
evalcond[5]=((((-1.0)*new_r01*x858))+gconst35+((new_r11*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x860=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst34*gconst34)))+(((-1.0)*(gconst35*gconst35))))),-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal((gconst34*new_r11)),IkReal((gconst35*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x860.value)))+(x861.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x862=IKcos(j8);
IkReal x863=IKsin(j8);
IkReal x864=(gconst34*x862);
IkReal x865=(gconst34*x863);
IkReal x866=(gconst35*x862);
IkReal x867=((1.0)*x863);
IkReal x868=(gconst35*x867);
evalcond[0]=(((new_r01*x862))+gconst34+((new_r11*x863)));
evalcond[1]=(new_r11+x866+x865);
evalcond[2]=((((-1.0)*x868))+x864);
evalcond[3]=((((-1.0)*x868))+new_r01+x864);
evalcond[4]=((((-1.0)*x866))+(((-1.0)*x865)));
evalcond[5]=((((-1.0)*new_r01*x867))+gconst35+((new_r11*x862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x869=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*new_r11))+((gconst34*new_r01)))),-1);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal((gconst34*gconst35)),IkReal(((-1.0)*(gconst34*gconst34))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x869.value)))+(x870.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x871=IKcos(j8);
IkReal x872=IKsin(j8);
IkReal x873=(gconst34*x871);
IkReal x874=(gconst34*x872);
IkReal x875=(gconst35*x871);
IkReal x876=((1.0)*x872);
IkReal x877=(gconst35*x876);
evalcond[0]=(((new_r01*x871))+gconst34+((new_r11*x872)));
evalcond[1]=(new_r11+x874+x875);
evalcond[2]=(x873+(((-1.0)*x877)));
evalcond[3]=(new_r01+x873+(((-1.0)*x877)));
evalcond[4]=((((-1.0)*x874))+(((-1.0)*x875)));
evalcond[5]=(gconst35+(((-1.0)*new_r01*x876))+((new_r11*x871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x878=IKPowWithIntegerCheck(gconst35,-1);
if(!x878.valid){
continue;
}
cj8array[0]=(new_r00*(x878.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x879=IKsin(j8);
IkReal x880=IKcos(j8);
IkReal x881=((-1.0)*x879);
evalcond[0]=(new_r11*x879);
evalcond[1]=(gconst35*x881);
evalcond[2]=(new_r00*x881);
evalcond[3]=(((gconst35*x880))+new_r11);
evalcond[4]=(((new_r11*x880))+gconst35);
evalcond[5]=(((new_r00*x880))+(((-1.0)*gconst35)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
IkReal x882=((1.0)*(x883.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x882)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x882)));
IkReal gconst34=0;
IkReal x884 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x884)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x884,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
IkReal x885=((1.0)*(x886.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x885)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x885)));
IkReal gconst34=0;
IkReal x887 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x887)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x887,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
IkReal x888=((1.0)*(x889.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x888)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x888)));
IkReal gconst34=0;
IkReal x890 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x890)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x890,-0.5)));
j8eval[0]=new_r10;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x891=IKPowWithIntegerCheck(new_r10,-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892=IKPowWithIntegerCheck(gconst35,-1);
if(!x892.valid){
continue;
}
if( IKabs((gconst35*(x891.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x892.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst35*(x891.value)))+IKsqr(((-1.0)*new_r11*(x892.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((gconst35*(x891.value)), ((-1.0)*new_r11*(x892.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x893=IKsin(j8);
IkReal x894=IKcos(j8);
IkReal x895=((1.0)*gconst35);
IkReal x896=(gconst35*x894);
evalcond[0]=(new_r11*x893);
evalcond[1]=(new_r10*x894);
evalcond[2]=((-1.0)*gconst35*x893);
evalcond[3]=((-1.0)*x896);
evalcond[4]=(new_r11+x896);
evalcond[5]=(((new_r11*x894))+gconst35);
evalcond[6]=((((-1.0)*x893*x895))+new_r10);
evalcond[7]=(((new_r10*x893))+(((-1.0)*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(gconst35,-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898=IKPowWithIntegerCheck(new_r11,-1);
if(!x898.valid){
continue;
}
if( IKabs((new_r10*(x897.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst35*(x898.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x897.value)))+IKsqr(((-1.0)*gconst35*(x898.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x897.value)), ((-1.0)*gconst35*(x898.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x899=IKsin(j8);
IkReal x900=IKcos(j8);
IkReal x901=((1.0)*gconst35);
IkReal x902=(gconst35*x900);
evalcond[0]=(new_r11*x899);
evalcond[1]=(new_r10*x900);
evalcond[2]=((-1.0)*gconst35*x899);
evalcond[3]=((-1.0)*x902);
evalcond[4]=(new_r11+x902);
evalcond[5]=(gconst35+((new_r11*x900)));
evalcond[6]=(new_r10+(((-1.0)*x899*x901)));
evalcond[7]=(((new_r10*x899))+(((-1.0)*x901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904=IKPowWithIntegerCheck(IKsign(gconst35),-1);
if(!x904.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x903.value)+(((1.5707963267949)*(x904.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x905=IKsin(j8);
IkReal x906=IKcos(j8);
IkReal x907=((1.0)*gconst35);
IkReal x908=(gconst35*x906);
evalcond[0]=(new_r11*x905);
evalcond[1]=(new_r10*x906);
evalcond[2]=((-1.0)*gconst35*x905);
evalcond[3]=((-1.0)*x908);
evalcond[4]=(new_r11+x908);
evalcond[5]=(gconst35+((new_r11*x906)));
evalcond[6]=(new_r10+(((-1.0)*x905*x907)));
evalcond[7]=((((-1.0)*x907))+((new_r10*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
IkReal x909=((1.0)*(x910.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x909)));
new_r01=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x909)));
IkReal gconst34=0;
IkReal x911 = new_r11*new_r11;
if(IKabs(x911)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x911,-0.5)));
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
IkReal x912=((1.0)*(x913.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x912)));
new_r01=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x912)));
IkReal gconst34=0;
IkReal x914 = new_r11*new_r11;
if(IKabs(x914)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x914,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x916 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x916.valid){
continue;
}
IkReal x915=((1.0)*(x916.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x915)));
new_r01=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x915)));
IkReal gconst34=0;
IkReal x917 = new_r11*new_r11;
if(IKabs(x917)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x917,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x918=IKPowWithIntegerCheck(gconst35,-1);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919=IKPowWithIntegerCheck(new_r11,-1);
if(!x919.valid){
continue;
}
if( IKabs((new_r10*(x918.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst35*(x919.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x918.value)))+IKsqr(((-1.0)*gconst35*(x919.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x918.value)), ((-1.0)*gconst35*(x919.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x920=IKsin(j8);
IkReal x921=IKcos(j8);
IkReal x922=((1.0)*gconst35);
IkReal x923=(gconst35*x921);
evalcond[0]=(new_r11*x920);
evalcond[1]=((-1.0)*gconst35*x920);
evalcond[2]=(new_r11+x923);
evalcond[3]=(gconst35+((new_r11*x921)));
evalcond[4]=((((-1.0)*x921*x922))+new_r00);
evalcond[5]=((((-1.0)*x920*x922))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x920))+((new_r10*x921)));
evalcond[7]=((((-1.0)*x922))+((new_r00*x921))+((new_r10*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
CheckValue<IkReal> x925=IKPowWithIntegerCheck(IKsign(gconst35),-1);
if(!x925.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x924.value)+(((1.5707963267949)*(x925.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x926=IKsin(j8);
IkReal x927=IKcos(j8);
IkReal x928=((1.0)*gconst35);
IkReal x929=(gconst35*x927);
evalcond[0]=(new_r11*x926);
evalcond[1]=((-1.0)*gconst35*x926);
evalcond[2]=(new_r11+x929);
evalcond[3]=(gconst35+((new_r11*x927)));
evalcond[4]=((((-1.0)*x927*x928))+new_r00);
evalcond[5]=((((-1.0)*x926*x928))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x926))+((new_r10*x927)));
evalcond[7]=((((-1.0)*x928))+((new_r00*x927))+((new_r10*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
CheckValue<IkReal> x931=IKPowWithIntegerCheck(IKsign(gconst35),-1);
if(!x931.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x930.value)+(((1.5707963267949)*(x931.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x932=IKsin(j8);
IkReal x933=IKcos(j8);
IkReal x934=((1.0)*gconst35);
IkReal x935=(gconst35*x933);
evalcond[0]=(new_r11*x932);
evalcond[1]=((-1.0)*gconst35*x932);
evalcond[2]=(new_r11+x935);
evalcond[3]=(gconst35+((new_r11*x933)));
evalcond[4]=(new_r00+(((-1.0)*x933*x934)));
evalcond[5]=((((-1.0)*x932*x934))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x932))+((new_r10*x933)));
evalcond[7]=(((new_r00*x933))+((new_r10*x932))+(((-1.0)*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x936=((1.0)*gconst34);
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal((((gconst35*new_r01))+(((-1.0)*new_r11*x936)))),IkReal(((((-1.0)*new_r01*x936))+(((-1.0)*gconst35*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
CheckValue<IkReal> x938=IKPowWithIntegerCheck(IKsign(((gconst35*gconst35)+(gconst34*gconst34))),-1);
if(!x938.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x937.value)+(((1.5707963267949)*(x938.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x939=IKcos(j8);
IkReal x940=IKsin(j8);
IkReal x941=(gconst34*x939);
IkReal x942=(gconst34*x940);
IkReal x943=(gconst35*x939);
IkReal x944=((1.0)*x940);
IkReal x945=(gconst35*x944);
evalcond[0]=(gconst34+((new_r01*x939))+((new_r11*x940)));
evalcond[1]=(new_r11+x942+x943);
evalcond[2]=((((-1.0)*x945))+new_r01+x941);
evalcond[3]=(gconst34+((new_r10*x939))+(((-1.0)*new_r00*x944)));
evalcond[4]=(gconst35+(((-1.0)*new_r01*x944))+((new_r11*x939)));
evalcond[5]=((((-1.0)*x945))+new_r10+x941);
evalcond[6]=(((new_r00*x939))+((new_r10*x940))+(((-1.0)*gconst35)));
evalcond[7]=((((-1.0)*x942))+(((-1.0)*x943))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x946=((1.0)*gconst34);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal((((gconst35*new_r01))+(((-1.0)*new_r11*x946)))),IkReal(((((-1.0)*new_r01*x946))+(((-1.0)*gconst35*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x947.value)))+(x948.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x949=IKcos(j8);
IkReal x950=IKsin(j8);
IkReal x951=(gconst34*x949);
IkReal x952=(gconst34*x950);
IkReal x953=(gconst35*x949);
IkReal x954=((1.0)*x950);
IkReal x955=(gconst35*x954);
evalcond[0]=(((new_r01*x949))+gconst34+((new_r11*x950)));
evalcond[1]=(new_r11+x953+x952);
evalcond[2]=(new_r01+(((-1.0)*x955))+x951);
evalcond[3]=(gconst34+(((-1.0)*new_r00*x954))+((new_r10*x949)));
evalcond[4]=(gconst35+(((-1.0)*new_r01*x954))+((new_r11*x949)));
evalcond[5]=(new_r10+(((-1.0)*x955))+x951);
evalcond[6]=(((new_r10*x950))+((new_r00*x949))+(((-1.0)*gconst35)));
evalcond[7]=((((-1.0)*x952))+(((-1.0)*x953))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x956=((1.0)*gconst34);
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x956))+((gconst34*new_r01)))),IkReal(((((-1.0)*new_r00*x956))+(((-1.0)*new_r11*x956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
CheckValue<IkReal> x958=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x958.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x957.value)+(((1.5707963267949)*(x958.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x959=IKcos(j8);
IkReal x960=IKsin(j8);
IkReal x961=(gconst34*x959);
IkReal x962=(gconst34*x960);
IkReal x963=(gconst35*x959);
IkReal x964=((1.0)*x960);
IkReal x965=(gconst35*x964);
evalcond[0]=(((new_r11*x960))+((new_r01*x959))+gconst34);
evalcond[1]=(new_r11+x962+x963);
evalcond[2]=(new_r01+x961+(((-1.0)*x965)));
evalcond[3]=(((new_r10*x959))+gconst34+(((-1.0)*new_r00*x964)));
evalcond[4]=(gconst35+(((-1.0)*new_r01*x964))+((new_r11*x959)));
evalcond[5]=(new_r10+x961+(((-1.0)*x965)));
evalcond[6]=(((new_r00*x959))+(((-1.0)*gconst35))+((new_r10*x960)));
evalcond[7]=((((-1.0)*x963))+(((-1.0)*x962))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
IkReal x966=x967.value;
j8array[0]=((-1.0)*x966);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x966)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j8))))+(((-1.0)*new_r00*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x968=((1.0)*sj10);
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal((((cj10*new_r01))+(((-1.0)*new_r11*x968)))),IkReal(((((-1.0)*cj10*new_r11))+(((-1.0)*new_r01*x968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x970.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x969.value)+(((1.5707963267949)*(x970.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x971=IKcos(j8);
IkReal x972=IKsin(j8);
IkReal x973=((1.0)*cj10);
IkReal x974=(sj10*x971);
IkReal x975=(sj10*x972);
IkReal x976=((1.0)*x972);
IkReal x977=(x972*x973);
evalcond[0]=(((new_r01*x971))+sj10+((new_r11*x972)));
evalcond[1]=(((cj10*x971))+new_r11+x975);
evalcond[2]=(new_r01+x974+(((-1.0)*x977)));
evalcond[3]=(sj10+(((-1.0)*new_r00*x976))+((new_r10*x971)));
evalcond[4]=((((-1.0)*new_r01*x976))+cj10+((new_r11*x971)));
evalcond[5]=(new_r10+x974+(((-1.0)*x977)));
evalcond[6]=(((new_r10*x972))+(((-1.0)*x973))+((new_r00*x971)));
evalcond[7]=((((-1.0)*x975))+(((-1.0)*x971*x973))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x978=((1.0)*sj10);
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x978))+((new_r01*sj10)))),IkReal(((((-1.0)*new_r11*x978))+(((-1.0)*new_r00*x978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x980.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x979.value)+(((1.5707963267949)*(x980.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x981=IKcos(j8);
IkReal x982=IKsin(j8);
IkReal x983=((1.0)*cj10);
IkReal x984=(sj10*x981);
IkReal x985=(sj10*x982);
IkReal x986=((1.0)*x982);
IkReal x987=(x982*x983);
evalcond[0]=(sj10+((new_r11*x982))+((new_r01*x981)));
evalcond[1]=(((cj10*x981))+new_r11+x985);
evalcond[2]=((((-1.0)*x987))+new_r01+x984);
evalcond[3]=((((-1.0)*new_r00*x986))+sj10+((new_r10*x981)));
evalcond[4]=((((-1.0)*new_r01*x986))+cj10+((new_r11*x981)));
evalcond[5]=((((-1.0)*x987))+new_r10+x984);
evalcond[6]=(((new_r00*x981))+(((-1.0)*x983))+((new_r10*x982)));
evalcond[7]=((((-1.0)*x985))+(((-1.0)*x981*x983))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x988 = IKatan2WithCheck(IkReal(((-1.0)+(cj10*cj10)+(new_r01*new_r01))),IkReal(((((-1.0)*cj10*sj10))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989=IKPowWithIntegerCheck(IKsign((((cj10*new_r01))+((new_r11*sj10)))),-1);
if(!x989.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x988.value)+(((1.5707963267949)*(x989.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x990=IKcos(j8);
IkReal x991=IKsin(j8);
IkReal x992=((1.0)*cj10);
IkReal x993=(sj10*x990);
IkReal x994=(sj10*x991);
IkReal x995=((1.0)*x991);
IkReal x996=(x991*x992);
evalcond[0]=(((new_r11*x991))+sj10+((new_r01*x990)));
evalcond[1]=(((cj10*x990))+new_r11+x994);
evalcond[2]=((((-1.0)*x996))+new_r01+x993);
evalcond[3]=((((-1.0)*new_r00*x995))+((new_r10*x990))+sj10);
evalcond[4]=(((new_r11*x990))+(((-1.0)*new_r01*x995))+cj10);
evalcond[5]=((((-1.0)*x996))+new_r10+x993);
evalcond[6]=(((new_r10*x991))+(((-1.0)*x992))+((new_r00*x990)));
evalcond[7]=((((-1.0)*x994))+(((-1.0)*x990*x992))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
IkReal x997=x998.value;
j8array[0]=((-1.0)*x997);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x997)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x999=IKsin(j8);
IkReal x1000=IKcos(j8);
IkReal x1001=(new_r11*x1000);
IkReal x1002=((1.0)*x999);
evalcond[0]=(((new_r11*x999))+((new_r01*x1000)));
evalcond[1]=(((new_r10*x999))+((new_r00*x1000)));
evalcond[2]=(((new_r10*x1000))+(((-1.0)*new_r00*x1002)));
evalcond[3]=(x1001+(((-1.0)*new_r01*x1002)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1002))+((new_r22*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1004 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
IkReal x1003=x1004.value;
j8array[0]=((-1.0)*x1003);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1003)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1005=IKcos(j8);
IkReal x1006=IKsin(j8);
IkReal x1007=(new_r10*x1005);
IkReal x1008=(new_r11*x1005);
IkReal x1009=((1.0)*x1006);
evalcond[0]=(((new_r11*x1006))+((new_r01*x1005)));
evalcond[1]=(x1007+(((-1.0)*new_r00*x1009)));
evalcond[2]=(x1008+(((-1.0)*new_r01*x1009)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1009))+((new_r22*x1007)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1009))+((new_r22*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
IkReal x1010=x1011.value;
j8array[0]=((-1.0)*x1010);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1010)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1012=IKcos(j8);
IkReal x1013=IKsin(j8);
IkReal x1014=(new_r10*x1012);
IkReal x1015=(new_r11*x1012);
IkReal x1016=((1.0)*x1013);
evalcond[0]=(((new_r10*x1013))+((new_r00*x1012)));
evalcond[1]=(x1014+(((-1.0)*new_r00*x1016)));
evalcond[2]=(x1015+(((-1.0)*new_r01*x1016)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1016))+((new_r22*x1014)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1016))+((new_r22*x1015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(sj9,-1);
if(!x1018.valid){
continue;
}
IkReal x1017=x1018.value;
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(new_r11,-1);
if(!x1019.valid){
continue;
}
if( IKabs((x1017*(x1019.value)*(((((-1.0)*sj10*sj9))+((new_r01*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x1017)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1017*(x1019.value)*(((((-1.0)*sj10*sj9))+((new_r01*new_r12))))))+IKsqr(((-1.0)*new_r12*x1017))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x1017*(x1019.value)*(((((-1.0)*sj10*sj9))+((new_r01*new_r12))))), ((-1.0)*new_r12*x1017));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[18];
IkReal x1020=IKsin(j8);
IkReal x1021=IKcos(j8);
IkReal x1022=((1.0)*cj10);
IkReal x1023=((1.0)*sj10);
IkReal x1024=((1.0)*new_r01);
IkReal x1025=(new_r02*x1020);
IkReal x1026=(cj9*x1021);
IkReal x1027=(sj10*x1020);
IkReal x1028=(sj9*x1021);
IkReal x1029=(sj9*x1020);
IkReal x1030=(cj9*x1020);
IkReal x1031=((1.0)*new_r00*x1020);
evalcond[0]=(x1028+new_r12);
evalcond[1]=((((-1.0)*x1029))+new_r02);
evalcond[2]=(((new_r12*x1020))+((new_r02*x1021)));
evalcond[3]=(((new_r11*x1020))+sj10+((new_r01*x1021)));
evalcond[4]=(sj9+(((-1.0)*x1025))+((new_r12*x1021)));
evalcond[5]=(((cj10*x1030))+new_r01+((sj10*x1021)));
evalcond[6]=(((new_r10*x1020))+(((-1.0)*x1022))+((new_r00*x1021)));
evalcond[7]=(((cj9*x1027))+(((-1.0)*x1021*x1022))+new_r00);
evalcond[8]=(x1027+(((-1.0)*x1022*x1026))+new_r11);
evalcond[9]=((((-1.0)*x1023*x1026))+(((-1.0)*x1020*x1022))+new_r10);
evalcond[10]=(((new_r10*x1021))+(((-1.0)*x1031))+(((-1.0)*cj9*x1023)));
evalcond[11]=(((new_r11*x1021))+(((-1.0)*x1020*x1024))+(((-1.0)*cj9*x1022)));
evalcond[12]=(((new_r12*x1026))+((new_r22*sj9))+(((-1.0)*cj9*x1025)));
evalcond[13]=(((cj9*new_r20))+(((-1.0)*new_r10*x1028))+((new_r00*x1029)));
evalcond[14]=(((cj9*new_r21))+((new_r01*x1029))+(((-1.0)*new_r11*x1028)));
evalcond[15]=((-1.0)+((cj9*new_r22))+((sj9*x1025))+(((-1.0)*new_r12*x1028)));
evalcond[16]=(((new_r10*x1026))+((new_r20*sj9))+(((-1.0)*new_r00*x1030))+(((-1.0)*x1023)));
evalcond[17]=((((-1.0)*x1024*x1030))+((new_r11*x1026))+(((-1.0)*x1022))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1033.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1032.value)))+(x1033.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[18];
IkReal x1034=IKsin(j8);
IkReal x1035=IKcos(j8);
IkReal x1036=((1.0)*cj10);
IkReal x1037=((1.0)*sj10);
IkReal x1038=((1.0)*new_r01);
IkReal x1039=(new_r02*x1034);
IkReal x1040=(cj9*x1035);
IkReal x1041=(sj10*x1034);
IkReal x1042=(sj9*x1035);
IkReal x1043=(sj9*x1034);
IkReal x1044=(cj9*x1034);
IkReal x1045=((1.0)*new_r00*x1034);
evalcond[0]=(x1042+new_r12);
evalcond[1]=((((-1.0)*x1043))+new_r02);
evalcond[2]=(((new_r12*x1034))+((new_r02*x1035)));
evalcond[3]=(((new_r11*x1034))+sj10+((new_r01*x1035)));
evalcond[4]=(sj9+(((-1.0)*x1039))+((new_r12*x1035)));
evalcond[5]=(new_r01+((cj10*x1044))+((sj10*x1035)));
evalcond[6]=((((-1.0)*x1036))+((new_r10*x1034))+((new_r00*x1035)));
evalcond[7]=((((-1.0)*x1035*x1036))+((cj9*x1041))+new_r00);
evalcond[8]=(x1041+new_r11+(((-1.0)*x1036*x1040)));
evalcond[9]=((((-1.0)*x1034*x1036))+(((-1.0)*x1037*x1040))+new_r10);
evalcond[10]=(((new_r10*x1035))+(((-1.0)*cj9*x1037))+(((-1.0)*x1045)));
evalcond[11]=((((-1.0)*x1034*x1038))+((new_r11*x1035))+(((-1.0)*cj9*x1036)));
evalcond[12]=((((-1.0)*cj9*x1039))+((new_r22*sj9))+((new_r12*x1040)));
evalcond[13]=(((cj9*new_r20))+((new_r00*x1043))+(((-1.0)*new_r10*x1042)));
evalcond[14]=(((cj9*new_r21))+(((-1.0)*new_r11*x1042))+((new_r01*x1043)));
evalcond[15]=((-1.0)+((cj9*new_r22))+(((-1.0)*new_r12*x1042))+((sj9*x1039)));
evalcond[16]=((((-1.0)*x1037))+((new_r20*sj9))+((new_r10*x1040))+(((-1.0)*new_r00*x1044)));
evalcond[17]=((((-1.0)*x1036))+(((-1.0)*x1038*x1044))+((new_r11*x1040))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (852219f8ab2d9e8feccb1d8eebbe886d)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }


int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
 double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = free_joint[i];
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
 
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){//seednoidはアームが伸びきった状態の第2関節が，+90°のため
	sol_joint[i][j] = M_PI/2+solvalues[j+1];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==5){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==6){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==7){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==8){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==9){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==10){
	//std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
	continue;
      }
      else
	sol_joint[i][j] = solvalues[j];

      //std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}

  
#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

