/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-08-07 17:24:02.836576
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_WR_VIRTUAL {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eerot[1]=((((((((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0])))))))));
eerot[2]=((((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0])))))))));
eetrans[0]=((((((((-0.984812764621894)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))))))*(((((((((0.035)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((((((0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.279642)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.279642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((((((0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((((((-0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((0.275358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.275358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((-0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((((((0.036)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.036)*(IKcos(j[6]))*(IKsin(j[3]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))))))+(((((((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((-0.279642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.279642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((0.279642)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.279642)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((((((((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((-0.035)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.035)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.275358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.275358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((-0.036)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.036)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((-0.036)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.134)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))))))*(((((-0.275358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.028046)*(IKsin(j[4]))))+(((((((0.035)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((-0.054778)*(IKcos(j[4]))))+(((((((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.036)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.036)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-0.035)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((0.279642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.279642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.279642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.279642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.275358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))))))+(((0.134)*(IKcos(j[2]))*(IKsin(j[0]))))+(((0.304)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-0.018)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.304)*(IKsin(j[0]))*(IKsin(j[2])))));
eerot[3]=((((((((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eerot[4]=((((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2])))))))));
eerot[5]=((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKcos(j[1]))*(IKsin(j[0])))));
eetrans[1]=((((-0.134)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.018)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.984812764621894)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.173619753017279)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKcos(j[2]))))))*(((((-0.275358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.028046)*(IKsin(j[4]))))+(((((((0.035)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((-0.054778)*(IKcos(j[4]))))+(((((((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.036)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.036)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-0.035)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((0.279642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.279642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.279642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.279642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.275358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))))))+(((((((0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((-0.279642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.279642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.279642)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((0.279642)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.279642)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((((((((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((-0.035)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.035)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.275358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-0.275358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((((((((((-0.036)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.036)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((-0.036)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((((((-0.036)*(IKcos(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.304)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.304)*(IKcos(j[0]))*(IKsin(j[2]))))+(((((((-0.984812764621894)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.173619753017279)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.984812764621894)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.173619753017279)*(IKcos(j[0]))*(IKcos(j[2]))))))*(((((((((0.035)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((((((0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.279642)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.279642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((((((0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((((((-0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((0.275358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.275358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((-0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((((((0.036)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.036)*(IKcos(j[6]))*(IKsin(j[3]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))))))+(((-0.134)*(IKcos(j[0]))*(IKcos(j[2])))));
eerot[6]=((((((((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[10]))))+(((((((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKsin(j[10]))))))*(((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((-1.0)*(((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))+(((-1.0)*(((((((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKsin(j[10]))))))*(IKsin(j[1])))));
eerot[7]=((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eerot[8]=((((((((((((-1.0)*(((((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((-1.0)*(((((((((IKcos(j[3]))*(IKcos(j[6]))))+(((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((-1.0)*(((((((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKcos(j[9]))))))*(IKcos(j[10]))))+(((((((((((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))))*(IKcos(j[8]))))+(((((((((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[6]))))))*(IKsin(j[8]))))))*(IKsin(j[10]))))))*(((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((-1.0)*(((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))+(((-1.0)*(((((((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((-1.0)*(((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[9]))))))*(IKcos(j[10]))))+(((((((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKsin(j[8]))))+(((((((((((IKcos(j[4]))*(IKcos(j[5]))))+(((-1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((((((IKcos(j[5]))*(IKsin(j[4]))))+(((IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[10]))))))*(((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2])))))))));
eetrans[2]=((0.1455)+(((((((-0.984812764621894)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.173619753017279)*(IKcos(j[1]))*(IKsin(j[2]))))))*(((((((((0.035)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.01)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[6]))*(IKsin(j[3]))))+(((((((((((0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.279642)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.279642)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((((((0.279642)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((((((((((-0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.035)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((0.275358)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.275358)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.028046)*(IKcos(j[3]))*(IKcos(j[4]))))+(((0.054778)*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((-0.035)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.036)*(IKsin(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))+(((((((0.036)*(((((1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(((((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((0.01)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((((((0.036)*(IKcos(j[3]))*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.036)*(IKcos(j[6]))*(IKsin(j[3]))))+(((-0.036)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))))))+(((-0.134)*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((0.173619753017279)*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.984812764621894)*(IKcos(j[1]))*(IKsin(j[2]))))))*(((((-0.275358)*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.028046)*(IKsin(j[4]))))+(((((((0.035)*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((-0.054778)*(IKcos(j[4]))))+(((((((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.036)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.036)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((0.036)*(((((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((((((0.036)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.036)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-0.035)*(IKcos(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[5]))*(IKsin(j[4]))))))*(IKcos(j[7]))*(IKsin(j[6]))))+(((((((0.279642)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.279642)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))*(IKsin(j[7]))))+(((((((-0.279642)*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.279642)*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKcos(j[5]))*(IKsin(j[4]))))+(((0.035)*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.275358)*(IKsin(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[4]))*(IKsin(j[5]))))+(((0.01)*(IKcos(j[5]))*(IKsin(j[4]))))))))+(((0.018)*(IKsin(j[1]))))+(((((((-0.028046)*(IKcos(j[4]))*(IKsin(j[3]))))+(((((((-1.0)*(((((0.279642)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.279642)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((-0.279642)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))+(((0.275358)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.275358)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((((((-1.0)*(((((0.036)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((0.036)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[6]))))+(((-1.0)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-0.036)*(IKcos(j[3]))*(IKsin(j[6]))))+(((0.036)*(((((IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.035)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((0.035)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.035)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[7]))))+(((((((0.279642)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.279642)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((0.01)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.036)*(((((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.036)*(IKcos(j[3]))*(IKcos(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-0.036)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.036)*(IKcos(j[5]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((0.035)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((-0.035)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((-0.01)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((-0.035)*(IKcos(j[3]))*(IKcos(j[6]))))+(((0.054778)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKsin(j[1]))))+(((0.304)*(IKcos(j[1]))*(IKcos(j[2])))));
}

IKFAST_API int GetNumFreeParameters() { return 5; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 4, 6}; return freeparams; }
IKFAST_API int GetNumJoints() { return 11; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij5[2], _nj5,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij4[2], _nj4,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]), htj2=tan(pfree[2]*0.5);
j4=pfree[3]; cj4=cos(pfree[3]); sj4=sin(pfree[3]), htj4=tan(pfree[3]*0.5);
j6=pfree[4]; cj6=cos(pfree[4]); sj6=sin(pfree[4]), htj6=tan(pfree[4]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x0=IKcos(j1);
new_r00=(((r00*x0*(IKcos(j0))))+((r10*x0*(IKsin(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x1=IKcos(j1);
IkReal x2=((1.0)*x1);
new_r01=((((-1.0)*r02*x2*(IKcos(j0))))+(((-1.0)*r12*x2*(IKsin(j0))))+((r22*(IKsin(j1)))));
IkReal x3=IKcos(j1);
new_r02=((((-1.0)*r21*(IKsin(j1))))+((r01*x3*(IKcos(j0))))+((r11*x3*(IKsin(j0)))));
IkReal x4=IKcos(j0);
IkReal x5=IKcos(j1);
IkReal x6=IKsin(j0);
IkReal x7=IKsin(j1);
IkReal x8=(x5*x6);
IkReal x9=(x4*x5);
new_px=((0.018)+(((0.036)*r11*x8))+(((-1.0)*pz*x7))+(((0.1455)*x7))+(((0.036)*r01*x9))+((py*x8))+((px*x9))+(((-0.036)*r21*x7)));
IkReal x10=IKsin(j2);
IkReal x11=IKcos(j0);
IkReal x12=IKsin(j1);
IkReal x13=IKcos(j1);
IkReal x14=IKcos(j2);
IkReal x15=IKsin(j0);
IkReal x16=((0.173619753017279)*x10);
IkReal x17=(r20*x13);
IkReal x18=((0.984812764621894)*x12);
IkReal x19=((0.984812764621894)*x10);
IkReal x20=(x14*x15);
IkReal x21=(x11*x14);
new_r10=(((r00*x11*x12*x16))+(((-0.173619753017279)*r00*x20))+(((-0.984812764621894)*x14*x17))+((r10*x12*x15*x16))+(((-1.0)*r00*x15*x19))+(((-1.0)*r00*x18*x21))+((r10*x11*x19))+((x16*x17))+(((-1.0)*r10*x18*x20))+(((0.173619753017279)*r10*x21)));
IkReal x22=IKsin(j0);
IkReal x23=IKcos(j2);
IkReal x24=IKsin(j1);
IkReal x25=IKcos(j0);
IkReal x26=IKsin(j2);
IkReal x27=IKcos(j1);
IkReal x28=(r02*x25);
IkReal x29=(r12*x22);
IkReal x30=(r22*x27);
IkReal x31=(r02*x22);
IkReal x32=((0.173619753017279)*x23);
IkReal x33=((0.984812764621894)*x26);
IkReal x34=(r12*x25);
IkReal x35=((0.173619753017279)*x24*x26);
IkReal x36=((0.984812764621894)*x23*x24);
new_r11=((((-0.173619753017279)*x26*x30))+(((-1.0)*x29*x35))+((x29*x36))+(((-1.0)*x28*x35))+((x28*x36))+(((-1.0)*x32*x34))+(((-1.0)*x33*x34))+(((0.984812764621894)*x23*x30))+((x31*x33))+((x31*x32)));
IkReal x37=IKsin(j2);
IkReal x38=IKcos(j0);
IkReal x39=IKsin(j1);
IkReal x40=IKcos(j2);
IkReal x41=IKsin(j0);
IkReal x42=IKcos(j1);
IkReal x43=((0.984812764621894)*x41);
IkReal x44=(r01*x37);
IkReal x45=(r11*x39);
IkReal x46=((0.173619753017279)*x41);
IkReal x47=(r01*x40);
IkReal x48=(r11*x38);
IkReal x49=(r21*x42);
IkReal x50=(x38*x39);
new_r12=((((0.173619753017279)*x37*x49))+(((-1.0)*x40*x43*x45))+(((-1.0)*x43*x44))+(((0.984812764621894)*x37*x48))+(((0.173619753017279)*x40*x48))+(((0.173619753017279)*x44*x50))+(((-0.984812764621894)*x47*x50))+(((-0.984812764621894)*x40*x49))+(((-1.0)*x46*x47))+((x37*x45*x46)));
IkReal x51=IKsin(j2);
IkReal x52=IKcos(j1);
IkReal x53=IKcos(j0);
IkReal x54=IKsin(j1);
IkReal x55=IKsin(j0);
IkReal x56=IKcos(j2);
IkReal x57=((0.984812764621894)*py);
IkReal x58=(r21*x52);
IkReal x59=((0.00625031110862206)*x51);
IkReal x60=((0.0354532595263882)*x56);
IkReal x61=((0.173619753017279)*x51);
IkReal x62=((0.0354532595263882)*x51);
IkReal x63=(r01*x55);
IkReal x64=(px*x56);
IkReal x65=(x54*x55);
IkReal x66=(x52*x56);
IkReal x67=(x53*x54);
IkReal x68=(x53*x56);
new_py=((0.322648127349371)+((r01*x59*x67))+(((-1.0)*r01*x60*x67))+(((-0.173619753017279)*x55*x64))+((x58*x59))+(((-0.984812764621894)*pz*x66))+(((-1.0)*r11*x60*x65))+(((-0.00625031110862206)*x56*x63))+((px*x61*x67))+(((-0.0252616740640142)*x51*x52))+((x51*x53*x57))+((pz*x52*x61))+(((-1.0)*x58*x60))+(((-1.0)*x56*x57*x65))+((r11*x59*x65))+(((-0.984812764621894)*x64*x67))+(((0.173619753017279)*py*x68))+(((-0.984812764621894)*px*x51*x55))+((r11*x53*x62))+(((0.00625031110862206)*r11*x68))+((py*x61*x65))+(((0.143290257252486)*x66))+(((-1.0)*x62*x63)));
IkReal x69=IKcos(j2);
IkReal x70=IKsin(j0);
IkReal x71=IKcos(j0);
IkReal x72=IKsin(j1);
IkReal x73=IKsin(j2);
IkReal x74=IKcos(j1);
IkReal x75=((0.984812764621894)*x73);
IkReal x76=(r20*x74);
IkReal x77=(r00*x69);
IkReal x78=((0.173619753017279)*x72);
IkReal x79=(r10*x69);
IkReal x80=((0.173619753017279)*x73);
new_r20=((((0.173619753017279)*x69*x76))+((x71*x77*x78))+((r10*x70*x72*x75))+((x70*x78*x79))+((x75*x76))+((r00*x70*x80))+(((-0.984812764621894)*x70*x77))+(((0.984812764621894)*x71*x79))+((r00*x71*x72*x75))+(((-1.0)*r10*x71*x80)));
IkReal x81=IKcos(j2);
IkReal x82=IKsin(j0);
IkReal x83=IKcos(j0);
IkReal x84=IKsin(j1);
IkReal x85=IKsin(j2);
IkReal x86=IKcos(j1);
IkReal x87=(r02*x83);
IkReal x88=(r12*x82);
IkReal x89=(r22*x86);
IkReal x90=(r02*x82);
IkReal x91=((0.984812764621894)*x81);
IkReal x92=((0.173619753017279)*x85);
IkReal x93=(r12*x83);
IkReal x94=((0.984812764621894)*x84*x85);
IkReal x95=((0.173619753017279)*x81*x84);
new_r21=(((x92*x93))+(((-0.173619753017279)*x81*x89))+(((-1.0)*x90*x92))+(((-1.0)*x91*x93))+(((-0.984812764621894)*x85*x89))+(((-1.0)*x87*x95))+(((-1.0)*x87*x94))+((x90*x91))+(((-1.0)*x88*x94))+(((-1.0)*x88*x95)));
IkReal x96=IKcos(j0);
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j2);
IkReal x99=IKsin(j0);
IkReal x100=IKsin(j2);
IkReal x101=IKcos(j1);
IkReal x102=((0.173619753017279)*x99);
IkReal x103=(r01*x100);
IkReal x104=((0.984812764621894)*x96);
IkReal x105=((0.984812764621894)*x99);
IkReal x106=((0.173619753017279)*x96);
IkReal x107=(r11*x100);
IkReal x108=(r21*x101);
IkReal x109=(x97*x98);
new_r22=(((x103*x104*x97))+(((0.173619753017279)*x108*x98))+((r11*x104*x98))+((r01*x106*x109))+(((-1.0)*x106*x107))+((x102*x103))+(((0.984812764621894)*x100*x108))+((x105*x107*x97))+((r11*x102*x109))+(((-1.0)*r01*x105*x98)));
IkReal x110=IKsin(j0);
IkReal x111=IKsin(j2);
IkReal x112=IKcos(j0);
IkReal x113=IKcos(j2);
IkReal x114=IKsin(j1);
IkReal x115=IKcos(j1);
IkReal x116=((0.0354532595263882)*r11);
IkReal x117=((0.00625031110862206)*r11);
IkReal x118=((0.0354532595263882)*r01);
IkReal x119=((0.00625031110862206)*r01);
IkReal x120=((0.984812764621894)*x112);
IkReal x121=(py*x113);
IkReal x122=((0.173619753017279)*x113);
IkReal x123=(pz*x115);
IkReal x124=((0.984812764621894)*x110);
IkReal x125=(x111*x114);
IkReal x126=(x111*x112);
IkReal x127=(x112*x113);
IkReal x128=(x113*x115);
IkReal x129=(x110*x114);
IkReal x130=(x111*x115);
IkReal x131=(x110*x111);
new_pz=((0.0791845055420809)+(((0.0354532595263882)*r21*x130))+(((-1.0)*x110*x113*x118))+(((-1.0)*px*x113*x124))+(((-0.173619753017279)*py*x126))+((py*x124*x125))+(((0.173619753017279)*px*x131))+((px*x112*x114*x122))+(((0.984812764621894)*x111*x123))+((x122*x123))+(((-1.0)*x117*x126))+(((0.173619753017279)*x121*x129))+((x114*x119*x127))+((x120*x121))+((x113*x117*x129))+(((0.00625031110862206)*r21*x128))+((px*x120*x125))+((x116*x127))+((x110*x116*x125))+(((-0.0252616740640142)*x128))+((x112*x118*x125))+(((-0.143290257252486)*x130))+((x119*x131)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x132=((1.0)*px);
IkReal x133=((1.0)*pz);
IkReal x134=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x134)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x133)));
rxp0_2=((((-1.0)*r10*x132))+((py*r00)));
rxp1_0=((((-1.0)*r21*x134))+((pz*r11)));
rxp1_1=((((-1.0)*r01*x133))+((px*r21)));
rxp1_2=((((-1.0)*r11*x132))+((py*r01)));
rxp2_0=((((-1.0)*r22*x134))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x133)));
rxp2_2=((((-1.0)*r12*x132))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x135=((1.0)*pp);
IkReal x136=((0.0014)*sj6);
IkReal x137=((0.109556)*py*sj4);
IkReal x138=((((0.07)*cj6))+(((-1.0)*px)));
IkReal x139=((0.056092)*cj4*py);
IkReal x140=((0.109556)*cj4*pz);
IkReal x141=((0.056092)*pz*sj4);
IkReal x142=((0.001231145256)+x136);
IkReal x143=((((0.112184)*cj4*px))+(((-0.219112)*px*sj4)));
IkReal x144=(x140+x141+x135);
IkReal x145=(x144+x139);
IkReal x146=(x144+x137);
IkReal x147=((0.3043377926)+(((-1.0)*x145))+x137);
IkReal x148=((0.3043377926)+(((-1.0)*x146))+x139);
IkReal x149=((((-1.0)*x145))+x142+x137);
IkReal x150=((((-1.0)*x146))+x142+x139);
IkReal gconst0=x138;
IkReal gconst1=x147;
IkReal gconst2=x149;
IkReal gconst3=x138;
IkReal gconst4=x147;
IkReal gconst5=x149;
IkReal gconst6=x143;
IkReal gconst7=x143;
IkReal gconst8=x143;
IkReal gconst9=x143;
IkReal gconst10=x148;
IkReal gconst11=x150;
IkReal gconst12=x148;
IkReal gconst13=x150;
IkReal x151=px*px;
IkReal x152=cj6*cj6;
IkReal x153=sj6*sj6;
IkReal x154=(px*py);
IkReal x155=((0.00625597185312)*gconst8);
IkReal x156=((0.07)*gconst13);
IkReal x157=((0.14)*gconst12);
IkReal x158=((4.0)*gconst10);
IkReal x159=(cj6*px);
IkReal x160=(gconst0*py);
IkReal x161=(gconst10*gconst12);
IkReal x162=((2.0)*py);
IkReal x163=((0.07)*gconst11);
IkReal x164=(gconst2*gconst8);
IkReal x165=((1.0)*px);
IkReal x166=(cj6*gconst0);
IkReal x167=((0.0434563668)*gconst8);
IkReal x168=(cj6*py);
IkReal x169=(gconst2*gconst4);
IkReal x170=(gconst4*gconst7);
IkReal x171=(gconst1*gconst5);
IkReal x172=(gconst11*gconst12);
IkReal x173=(gconst11*gconst8);
IkReal x174=((0.001738254672)*sj6);
IkReal x175=((0.01251194370624)*sj6);
IkReal x176=((0.003476509344)*sj6);
IkReal x177=(gconst12*gconst7);
IkReal x178=(gconst1*gconst4);
IkReal x179=(gconst0*gconst6);
IkReal x180=(gconst0*px);
IkReal x181=((0.0004379180297184)*sj6);
IkReal x182=(gconst0*gconst1);
IkReal x183=((1.0)*gconst3);
IkReal x184=(gconst10*gconst13);
IkReal x185=(gconst11*gconst13);
IkReal x186=(gconst2*gconst5);
IkReal x187=(sj6*x159);
IkReal x188=(gconst10*x159);
IkReal x189=(gconst6*x151);
IkReal x190=((0.0002502388741248)*x153);
IkReal x191=((1.0)*x151);
IkReal x192=(gconst3*x169);
IkReal x193=(gconst12*x152);
IkReal x194=((0.312798592656)*x152);
IkReal x195=(gconst8*x152);
IkReal x196=((0.0001251194370624)*x153);
IkReal x197=((0.0434563668)*gconst7*x159);
IkReal x198=((0.00625597185312)*gconst7*x187);
IkReal x199=(x198+x197);
op[0]=((((-0.0049)*x152*x161))+((x151*x184))+(((-1.0)*x161*x191))+(((0.00625597185312)*gconst11*x187))+(((-1.0)*x151*x196))+(((-8.758360594368e-6)*x153*x159))+(((0.0434563668)*gconst11*x159))+((x151*x172))+(((-0.0004226103)*x159))+((x156*x188))+(((-1.0)*x151*x174))+(((0.0434563668)*gconst12*x159))+((gconst12*x159*x163))+(((0.00625597185312)*gconst12*x187))+(((-1.0)*x185*x191))+(((-0.00012167782704)*x187))+(((0.003041945676)*x193))+(((-1.0)*x172*x194))+(((-1.0)*x157*x188))+((x181*x193))+(((-0.00603729)*x151)));
op[1]=((((0.0005004777482496)*x153*x154))+(((-1.0)*gconst11*gconst9*x191))+(((-1.0)*gconst13*x154*x158))+(((0.07)*x159*x177))+(((-0.0049)*gconst6*x193))+(((-1.0)*gconst11*x168*x175))+(((0.0008452206)*x168))+(((-1.0)*gconst12*x168*x175))+(((-1.0)*gconst6*x157*x159))+((x151*x177))+((x151*x173))+(((4.0)*x154*x185))+(((-1.0)*gconst13*gconst7*x191))+((gconst6*x156*x159))+(((0.28)*x161*x168))+x199+(((0.02414916)*x154))+(((-4.0)*x154*x172))+(((-1.0)*x177*x194))+((x155*x187))+(((1.7516721188736e-5)*x153*x168))+(((-1.0)*gconst12*x189))+(((-1.0)*gconst11*x157*x168))+((gconst12*x154*x158))+(((-0.14)*gconst8*x188))+(((0.003041945676)*x195))+((gconst13*x189))+(((-0.0869127336)*gconst12*x168))+(((-1.0)*x173*x194))+(((-0.0869127336)*gconst11*x168))+(((-0.0049)*gconst10*x195))+((x159*x167))+(((0.006953018688)*sj6*x154))+(((-0.14)*x168*x184))+((x181*x195))+((gconst8*x159*x163))+((gconst10*gconst9*x151))+(((0.00024335565408)*sj6*x168))+(((-1.0)*gconst10*gconst8*x191))+(((0.07)*gconst9*x188)));
op[2]=((((-1.0)*gconst1*gconst12*(px*px)))+((gconst11*gconst12*gconst3*px))+(((-4.0)*gconst12*gconst7*px*py))+(((-4.0)*gconst11*gconst13*(py*py)))+((gconst12*gconst2*(px*px)))+(((-8.758360594368e-6)*cj6*px*(sj6*sj6)))+(((0.07)*cj6*gconst10*gconst5*px))+(((-0.14)*cj6*gconst12*gconst7*py))+(((-4.0)*gconst10*gconst12*(py*py)))+(((-4.0)*gconst10*gconst9*px*py))+(((0.07)*cj6*gconst11*gconst4*px))+(((-0.00603729)*gconst0*px))+(((0.0434563668)*cj6*gconst4*px))+((gconst7*gconst8*(px*px)))+(((0.0869127336)*cj6*gconst12*px))+(((-1.0)*gconst0*gconst10*gconst12*px))+(((4.0)*gconst13*gconst7*px*py))+(((4.0)*gconst11*gconst9*px*py))+(((-0.006953018688)*sj6*(py*py)))+(((-4.0)*gconst11*gconst8*px*py))+(((0.07)*cj6*gconst7*gconst8*px))+(((4.0)*gconst10*gconst8*px*py))+((gconst1*gconst13*(px*px)))+(((-0.312798592656)*gconst12*gconst2*(cj6*cj6)))+(((0.0004379180297184)*gconst4*sj6*(cj6*cj6)))+(((0.0008758360594368)*gconst12*sj6*(cj6*cj6)))+(((0.0434563668)*cj6*gconst11*px))+((gconst6*gconst9*(px*px)))+(((0.07)*cj6*gconst12*gconst2*px))+(((-0.14)*cj6*gconst11*gconst8*py))+(((4.0)*gconst11*gconst12*(py*py)))+(((0.07)*cj6*gconst1*gconst13*px))+(((-0.14)*cj6*gconst10*gconst4*px))+(((-0.001738254672)*gconst0*px*sj6))+(((-0.14)*cj6*gconst13*gconst6*py))+(((0.00625597185312)*cj6*gconst4*px*sj6))+(((-0.0004226103)*cj6*px))+(((-0.07)*cj6*gconst0*gconst10*gconst12))+(((0.0434563668)*cj6*gconst2*px))+(((-1.0)*gconst7*gconst9*(px*px)))+(((0.28)*cj6*gconst12*gconst6*py))+(((-0.0869127336)*cj6*gconst8*py))+(((-0.0049)*gconst10*gconst4*(cj6*cj6)))+(((2.0)*gconst11*gconst13*(px*px)))+(((-0.07)*cj6*gconst11*gconst12*px))+(((-1.0)*gconst10*gconst4*(px*px)))+((gconst10*gconst5*(px*px)))+(((-0.02414916)*(py*py)))+(((-0.14)*cj6*gconst10*gconst9*py))+(((-0.001738254672)*sj6*(px*px)))+(((4.0)*gconst12*gconst6*px*py))+((gconst0*gconst10*gconst13*px))+(((-1.0)*gconst13*gconst2*(px*px)))+(((-0.0049)*gconst1*gconst12*(cj6*cj6)))+(((0.003041945676)*gconst4*(cj6*cj6)))+(((-0.00012167782704)*cj6*px*sj6))+(((-0.07)*cj6*gconst10*gconst12*gconst3))+(((-0.00603729)*(px*px)))+(((-0.07)*cj6*gconst10*gconst13*px))+(((-1.0)*gconst10*gconst12*gconst3*px))+(((-0.14)*cj6*gconst6*gconst8*px))+(((-0.0049)*gconst6*gconst8*(cj6*cj6)))+(((-1.0)*gconst11*gconst12*(px*px)))+(((0.07)*cj6*gconst6*gconst9*px))+(((-0.312798592656)*gconst7*gconst8*(cj6*cj6)))+(((0.006083891352)*gconst12*(cj6*cj6)))+(((0.00625597185312)*cj6*gconst0*gconst12*sj6))+(((-0.14)*cj6*gconst1*gconst12*px))+(((0.0434563668)*cj6*gconst0*gconst12))+(((-4.0)*gconst13*gconst6*px*py))+(((0.00625597185312)*cj6*gconst2*px*sj6))+(((-0.312798592656)*gconst11*gconst4*(cj6*cj6)))+(((-0.0005004777482496)*(py*py)*(sj6*sj6)))+(((0.28)*cj6*gconst10*gconst8*py))+(((-1.0)*gconst10*gconst13*(px*px)))+(((-1.0)*gconst6*gconst8*(px*px)))+(((-0.0001251194370624)*gconst0*px*(sj6*sj6)))+(((0.00625597185312)*cj6*gconst11*px*sj6))+(((-1.0)*gconst11*gconst5*(px*px)))+(((-0.625597185312)*gconst11*gconst12*(cj6*cj6)))+(((-0.0869127336)*cj6*gconst7*py))+(((-0.01251194370624)*cj6*gconst7*py*sj6))+(((-0.0001251194370624)*(px*px)*(sj6*sj6)))+(((4.0)*gconst10*gconst13*(py*py)))+(((0.01251194370624)*cj6*gconst12*px*sj6))+((gconst11*gconst4*(px*px)))+(((-0.01251194370624)*cj6*gconst8*py*sj6)));
op[3]=((((4.0)*gconst10*gconst9*(py*py)))+(((-1.0)*gconst13*gconst6*(px*px)))+(((0.0007507166223744)*px*py*(sj6*sj6)))+(((0.03622374)*px*py))+(((-1.0)*gconst11*gconst8*(px*px)))+((gconst0*gconst13*gconst6*px))+(((-0.02502388741248)*cj6*gconst11*py*sj6))+(((0.07)*cj6*gconst4*gconst7*px))+(((-0.312798592656)*gconst2*gconst8*(cj6*cj6)))+(((4.0)*gconst13*gconst2*px*py))+((gconst5*gconst6*(px*px)))+(((4.0)*gconst11*gconst8*(py*py)))+(((-0.625597185312)*gconst12*gconst7*(cj6*cj6)))+(((-0.0049)*gconst4*gconst6*(cj6*cj6)))+(((-0.07)*cj6*gconst13*gconst6*px))+(((-4.0)*gconst11*gconst9*(py*py)))+(((-0.0049)*gconst1*gconst8*(cj6*cj6)))+(((-1.0)*gconst0*gconst12*gconst6*px))+(((-4.0)*gconst13*gconst7*(py*py)))+(((0.01207458)*gconst0*py))+(((-0.01251194370624)*cj6*gconst2*py*sj6))+(((0.00625597185312)*cj6*gconst0*gconst8*sj6))+(((-0.0869127336)*cj6*gconst4*py))+(((4.0)*gconst1*gconst12*px*py))+(((4.0)*gconst12*gconst7*(py*py)))+(((2.0)*gconst13*gconst7*(px*px)))+(((-4.0)*gconst10*gconst8*(py*py)))+(((-0.07)*cj6*gconst10*gconst9*px))+(((4.0)*gconst7*gconst9*px*py))+(((2.0)*gconst11*gconst12*px*py))+(((0.0008758360594368)*gconst8*sj6*(cj6*cj6)))+(((-4.0)*gconst7*gconst8*px*py))+(((-2.0)*gconst0*gconst10*gconst13*py))+(((-0.07)*cj6*gconst12*gconst3*gconst6))+(((-0.14)*cj6*gconst10*gconst5*py))+(((-0.14)*cj6*gconst11*gconst4*py))+(((-4.0)*gconst10*gconst5*px*py))+(((0.0002502388741248)*gconst0*py*(sj6*sj6)))+(((-0.14)*cj6*gconst4*gconst6*px))+(((-0.02502388741248)*cj6*gconst12*py*sj6))+(((-0.14)*cj6*gconst12*gconst2*py))+(((-0.14)*cj6*gconst7*gconst8*py))+(((4.0)*gconst10*gconst4*px*py))+(((0.0434563668)*cj6*gconst0*gconst8))+(((0.07)*cj6*gconst2*gconst8*px))+(((-0.07)*cj6*gconst0*gconst10*gconst8))+(((-0.14)*cj6*gconst1*gconst13*py))+(((0.07)*cj6*gconst1*gconst9*px))+(((4.0)*gconst11*gconst5*px*py))+(((0.006083891352)*gconst8*(cj6*cj6)))+(((-4.0)*gconst11*gconst13*px*py))+(((-0.07)*cj6*gconst11*gconst8*px))+((gconst2*gconst8*(px*px)))+((gconst1*gconst9*(px*px)))+(((0.28)*cj6*gconst1*gconst12*py))+(((-2.0)*gconst11*gconst12*gconst3*py))+((gconst0*gconst10*gconst9*px))+(((0.003476509344)*gconst0*py*sj6))+((gconst4*gconst7*(px*px)))+(((0.010429528032)*px*py*sj6))+(((0.01251194370624)*cj6*gconst8*px*sj6))+(((-1.0)*gconst5*gconst7*(px*px)))+(((-4.0)*gconst6*gconst9*px*py))+(((-1.0)*gconst1*gconst8*(px*px)))+(((-0.07)*cj6*gconst10*gconst3*gconst8))+(((-0.14)*cj6*gconst6*gconst9*py))+(((-0.07)*cj6*gconst0*gconst12*gconst6))+(((0.07)*cj6*gconst5*gconst6*px))+(((0.00625597185312)*cj6*gconst7*px*sj6))+((gconst12*gconst3*gconst7*px))+(((-1.0)*gconst2*gconst9*(px*px)))+(((-0.01251194370624)*cj6*gconst4*py*sj6))+(((-1.0)*gconst10*gconst9*(px*px)))+(((-1.0)*gconst4*gconst6*(px*px)))+(((-1.0)*gconst12*gconst3*gconst6*px))+(((0.28)*cj6*gconst10*gconst4*py))+(((2.0)*gconst10*gconst12*gconst3*py))+(((4.0)*gconst6*gconst8*px*py))+(((3.5033442377472e-5)*cj6*py*(sj6*sj6)))+(((-1.0)*gconst0*gconst10*gconst8*px))+(((-0.14)*cj6*gconst1*gconst8*px))+(((0.00048671130816)*cj6*py*sj6))+(((4.0)*gconst13*gconst6*(py*py)))+(((-4.0)*gconst12*gconst2*px*py))+(((0.0434563668)*cj6*gconst7*px))+(((0.28)*cj6*gconst6*gconst8*py))+(((-1.0)*gconst12*gconst7*(px*px)))+(((-4.0)*gconst1*gconst13*px*py))+(((2.0)*gconst11*gconst9*(px*px)))+(((0.0869127336)*cj6*gconst8*px))+(((-0.312798592656)*gconst4*gconst7*(cj6*cj6)))+(((-4.0)*gconst11*gconst4*px*py))+(((-0.0869127336)*cj6*gconst2*py))+(((-0.625597185312)*gconst11*gconst8*(cj6*cj6)))+(((2.0)*gconst10*gconst13*px*py))+(((-0.07)*cj6*gconst12*gconst7*px))+(((-0.1738254672)*cj6*gconst11*py))+(((0.0016904412)*cj6*py))+(((-1.0)*gconst10*gconst3*gconst8*px))+(((-4.0)*gconst12*gconst6*(py*py)))+((gconst11*gconst3*gconst8*px))+(((-0.1738254672)*cj6*gconst12*py))+(((2.0)*gconst0*gconst10*gconst12*py)));
op[4]=((((-1.0)*gconst6*gconst9*(px*px)))+(((-4.0)*gconst1*gconst9*px*py))+(((0.0434563668)*cj6*gconst12*px))+(((-2.0)*gconst0*gconst13*gconst6*py))+(((-1.0)*gconst1*gconst13*(px*px)))+(((-0.14)*cj6*gconst5*gconst6*py))+(((0.003041945676)*gconst12*(cj6*cj6)))+(((-4.0)*gconst11*gconst9*px*py))+(((4.0)*gconst11*gconst4*(py*py)))+(((0.0869127336)*cj6*gconst4*px))+(((4.0)*gconst7*gconst8*(py*py)))+(((-4.0)*gconst5*gconst6*px*py))+(((0.28)*cj6*gconst4*gconst6*py))+(((-0.00603729)*gconst0*px))+(((-1.0)*gconst0*gconst10*gconst12*gconst3))+(((2.0)*gconst7*gconst9*(px*px)))+(((2.0)*gconst12*gconst7*px*py))+(((-4.0)*gconst2*gconst8*px*py))+(((-0.07)*cj6*gconst10*gconst5*px))+(((-0.14)*cj6*gconst4*gconst7*py))+(((-0.07)*cj6*gconst0*gconst1*gconst12))+(((-0.0010009554964992)*(py*py)*(sj6*sj6)))+(((0.28)*cj6*gconst1*gconst8*py))+(((-0.0434563668)*cj6*gconst11*px))+(((-0.625597185312)*gconst11*gconst4*(cj6*cj6)))+(((-0.1738254672)*cj6*gconst7*py))+(((0.00012167782704)*cj6*px*sj6))+(((-0.14)*cj6*gconst2*gconst8*py))+(((-0.07)*cj6*gconst1*gconst12*gconst3))+(((2.0)*gconst0*gconst12*gconst6*py))+(((0.01251194370624)*cj6*gconst0*gconst12*sj6))+(((0.001738254672)*sj6*(px*px)))+(((-0.02502388741248)*cj6*gconst7*py*sj6))+(((4.0)*gconst5*gconst7*px*py))+(((0.0004226103)*cj6*px))+(((-0.00625597185312)*cj6*gconst11*px*sj6))+(((-0.07)*cj6*gconst11*gconst4*px))+(((0.01251194370624)*cj6*gconst4*px*sj6))+(((-1.0)*gconst0*gconst6*gconst8*px))+((gconst3*gconst7*gconst8*px))+((gconst0*gconst10*gconst5*px))+((gconst0*gconst6*gconst9*px))+(((-2.0)*gconst12*gconst3*gconst7*py))+(((-1.0)*gconst12*gconst2*(px*px)))+(((-2.0)*gconst11*gconst3*gconst8*py))+(((4.0)*gconst4*gconst6*px*py))+(((-0.001738254672)*gconst0*px*sj6))+(((2.0)*gconst10*gconst3*gconst8*py))+(((-1.0)*gconst3*gconst6*gconst8*px))+(((0.0434563668)*cj6*gconst0*gconst4))+(((-1.0)*gconst7*gconst8*(px*px)))+(((0.07)*cj6*gconst1*gconst5*px))+(((-4.0)*gconst1*gconst12*(py*py)))+(((-1.0)*gconst0*gconst10*gconst13*px))+(((-0.07)*cj6*gconst0*gconst10*gconst4))+(((-0.07)*cj6*gconst6*gconst9*px))+(((0.0434563668)*cj6*gconst2*px))+(((-0.07)*cj6*gconst0*gconst6*gconst8))+(((0.0001251194370624)*(px*px)*(sj6*sj6)))+(((2.0)*gconst10*gconst9*px*py))+(((4.0)*gconst1*gconst8*px*py))+(((0.07)*cj6*gconst2*gconst4*px))+(((-1.0)*gconst11*gconst4*(px*px)))+(((-0.013906037376)*sj6*(py*py)))+(((4.0)*gconst2*gconst9*px*py))+(((-0.02502388741248)*cj6*gconst8*py*sj6))+(((-4.0)*gconst4*gconst7*px*py))+(((0.00603729)*(px*px)))+(((-0.07)*cj6*gconst12*gconst2*px))+(((2.0)*gconst11*gconst5*(px*px)))+((gconst2*gconst4*(px*px)))+(((2.0)*gconst13*gconst2*(px*px)))+(((0.0869127336)*cj6*gconst0*gconst12))+(((2.0)*gconst13*gconst6*px*py))+(((2.0)*gconst12*gconst3*gconst6*py))+(((-1.0)*gconst11*gconst13*(px*px)))+(((-0.07)*cj6*gconst10*gconst3*gconst4))+((gconst1*gconst5*(px*px)))+(((-0.1738254672)*cj6*gconst8*py))+(((-1.0)*gconst1*gconst4*(px*px)))+(((-4.0)*gconst10*gconst4*(py*py)))+(((-1.0)*gconst10*gconst5*(px*px)))+(((-0.07)*cj6*gconst7*gconst8*px))+(((-4.0)*gconst13*gconst2*(py*py)))+(((-2.0)*gconst0*gconst10*gconst9*py))+(((0.006083891352)*gconst4*(cj6*cj6)))+((gconst0*gconst1*gconst13*px))+(((2.0)*gconst11*gconst8*px*py))+(((4.0)*gconst12*gconst2*(py*py)))+(((-0.312798592656)*gconst2*gconst4*(cj6*cj6)))+(((-0.14)*cj6*gconst1*gconst4*px))+(((-1.0)*gconst0*gconst10*gconst4*px))+(((-0.04829832)*(py*py)))+(((-1.0)*gconst0*gconst1*gconst12*px))+(((-0.07)*cj6*gconst3*gconst6*gconst8))+(((-1.0)*gconst1*gconst12*gconst3*px))+(((0.00625597185312)*cj6*gconst0*gconst4*sj6))+(((4.0)*gconst6*gconst9*(py*py)))+(((2.0)*gconst0*gconst10*gconst8*py))+(((0.0008758360594368)*gconst4*sj6*(cj6*cj6)))+(((-1.0)*gconst2*gconst5*(px*px)))+((gconst11*gconst3*gconst4*px))+(((8.758360594368e-6)*cj6*px*(sj6*sj6)))+(((-0.07)*cj6*gconst1*gconst13*px))+(((-4.0)*gconst11*gconst5*(py*py)))+(((0.00625597185312)*cj6*gconst12*px*sj6))+(((0.00625597185312)*cj6*gconst2*px*sj6))+(((-1.0)*gconst10*gconst3*gconst4*px))+(((-0.14)*cj6*gconst1*gconst9*py))+(((-0.625597185312)*gconst12*gconst2*(cj6*cj6)))+(((-0.0049)*gconst1*gconst4*(cj6*cj6)))+(((-0.0001251194370624)*gconst0*px*(sj6*sj6)))+(((4.0)*gconst1*gconst13*(py*py)))+(((-0.625597185312)*gconst7*gconst8*(cj6*cj6)))+(((0.0004379180297184)*gconst12*sj6*(cj6*cj6)))+(((-1.0)*gconst11*gconst12*gconst3*px))+(((-4.0)*gconst7*gconst9*(py*py)))+((gconst12*gconst2*gconst3*px))+(((4.0)*gconst10*gconst5*(py*py)))+(((-0.312798592656)*gconst11*gconst12*(cj6*cj6)))+(((-4.0)*gconst13*gconst7*px*py))+(((-4.0)*gconst6*gconst8*(py*py))));
op[5]=((((-4.0)*gconst5*gconst7*(py*py)))+(((-1.0)*gconst5*gconst6*(px*px)))+(((0.01251194370624)*cj6*gconst0*gconst8*sj6))+(((-0.312798592656)*gconst12*gconst7*(cj6*cj6)))+(((2.0)*gconst0*gconst1*gconst12*py))+(((2.0)*gconst6*gconst9*px*py))+(((-0.312798592656)*gconst11*gconst8*(cj6*cj6)))+(((2.0)*gconst11*gconst4*px*py))+(((-0.1738254672)*cj6*gconst4*py))+(((2.0)*gconst5*gconst7*(px*px)))+(((-0.625597185312)*gconst2*gconst8*(cj6*cj6)))+(((-0.0869127336)*cj6*gconst11*py))+(((-0.07)*cj6*gconst1*gconst3*gconst8))+((gconst0*gconst1*gconst9*px))+(((-2.0)*gconst0*gconst10*gconst5*py))+(((-0.07)*cj6*gconst4*gconst7*px))+(((-0.00625597185312)*cj6*gconst7*px*sj6))+(((-4.0)*gconst13*gconst2*px*py))+(((2.0)*gconst0*gconst6*gconst8*py))+(((0.0004379180297184)*gconst8*sj6*(cj6*cj6)))+(((-1.0)*gconst1*gconst3*gconst8*px))+(((0.00625597185312)*cj6*gconst8*px*sj6))+(((2.0)*gconst2*gconst9*(px*px)))+(((-4.0)*gconst1*gconst8*(py*py)))+(((-0.01251194370624)*cj6*gconst12*py*sj6))+(((-0.14)*cj6*gconst2*gconst4*py))+(((-4.0)*gconst11*gconst5*px*py))+(((-0.07)*cj6*gconst2*gconst8*px))+(((0.0008452206)*cj6*py))+(((-1.0)*gconst0*gconst10*gconst3*gconst8))+(((-1.0)*gconst0*gconst1*gconst8*px))+((gconst0*gconst5*gconst6*px))+(((0.006953018688)*gconst0*py*sj6))+(((0.00024335565408)*cj6*py*sj6))+(((-0.625597185312)*gconst4*gconst7*(cj6*cj6)))+(((-2.0)*gconst0*gconst1*gconst13*py))+(((-2.0)*gconst12*gconst2*gconst3*py))+(((-4.0)*gconst2*gconst9*(py*py)))+(((2.0)*gconst1*gconst12*gconst3*py))+(((-4.0)*gconst4*gconst6*(py*py)))+(((4.0)*gconst2*gconst5*px*py))+(((-2.0)*gconst11*gconst3*gconst4*py))+(((1.7516721188736e-5)*cj6*py*(sj6*sj6)))+(((-1.0)*gconst3*gconst4*gconst6*px))+(((-1.0)*gconst13*gconst7*(px*px)))+(((2.0)*gconst7*gconst8*px*py))+(((4.0)*gconst4*gconst7*(py*py)))+(((-0.1738254672)*cj6*gconst2*py))+(((-1.0)*gconst11*gconst3*gconst8*px))+(((-2.0)*gconst3*gconst7*gconst8*py))+(((-0.07)*cj6*gconst0*gconst1*gconst8))+(((0.003041945676)*gconst8*(cj6*cj6)))+(((-4.0)*gconst7*gconst9*px*py))+(((2.0)*gconst10*gconst5*px*py))+(((2.0)*gconst10*gconst3*gconst4*py))+(((-4.0)*gconst1*gconst5*px*py))+(((-1.0)*gconst0*gconst4*gconst6*px))+(((-0.14)*cj6*gconst1*gconst5*py))+(((-1.0)*gconst1*gconst9*(px*px)))+(((0.0869127336)*cj6*gconst0*gconst8))+(((4.0)*gconst1*gconst4*px*py))+(((-0.0869127336)*cj6*gconst12*py))+(((-0.07)*cj6*gconst3*gconst4*gconst6))+(((-0.07)*cj6*gconst0*gconst4*gconst6))+(((-2.0)*gconst0*gconst6*gconst9*py))+(((4.0)*gconst1*gconst9*(py*py)))+(((-4.0)*gconst2*gconst4*px*py))+(((0.28)*cj6*gconst1*gconst4*py))+(((-0.01251194370624)*cj6*gconst11*py*sj6))+(((-1.0)*gconst0*gconst10*gconst9*px))+(((2.0)*gconst3*gconst6*gconst8*py))+(((-0.02502388741248)*cj6*gconst2*py*sj6))+(((-0.02502388741248)*cj6*gconst4*py*sj6))+(((-1.0)*gconst2*gconst8*(px*px)))+(((-0.07)*cj6*gconst5*gconst6*px))+(((-1.0)*gconst0*gconst13*gconst6*px))+(((4.0)*gconst2*gconst8*(py*py)))+(((-1.0)*gconst11*gconst9*(px*px)))+(((0.02414916)*gconst0*py))+(((-1.0)*gconst4*gconst7*(px*px)))+(((-1.0)*gconst0*gconst12*gconst3*gconst6))+((gconst3*gconst4*gconst7*px))+((gconst2*gconst3*gconst8*px))+(((-0.0434563668)*cj6*gconst7*px))+(((2.0)*gconst12*gconst2*px*py))+(((2.0)*gconst1*gconst13*px*py))+(((0.0005004777482496)*gconst0*py*(sj6*sj6)))+(((4.0)*gconst5*gconst6*(py*py)))+(((-1.0)*gconst12*gconst3*gconst7*px))+(((2.0)*gconst0*gconst10*gconst4*py))+(((0.0434563668)*cj6*gconst8*px))+(((-0.07)*cj6*gconst1*gconst9*px)));
op[6]=((((0.00603729)*gconst0*px))+(((0.01251194370624)*cj6*gconst0*gconst4*sj6))+(((-1.0)*gconst11*gconst3*gconst4*px))+(((-4.0)*gconst2*gconst9*px*py))+(((-0.07)*cj6*gconst1*gconst3*gconst4))+(((-1.0)*gconst1*gconst3*gconst4*px))+(((0.0434563668)*cj6*gconst4*px))+(((-0.0434563668)*cj6*gconst11*px))+(((0.00012167782704)*cj6*px*sj6))+(((-2.0)*gconst0*gconst1*gconst9*py))+(((-1.0)*gconst0*gconst1*gconst13*px))+(((-0.07)*cj6*gconst1*gconst5*px))+(((-0.006953018688)*sj6*(py*py)))+(((-1.0)*gconst0*gconst10*gconst3*gconst4))+(((-4.0)*gconst1*gconst4*(py*py)))+(((-0.312798592656)*gconst12*gconst2*(cj6*cj6)))+(((0.001738254672)*sj6*(px*px)))+(((0.0004379180297184)*gconst4*sj6*(cj6*cj6)))+(((0.0004226103)*cj6*px))+(((-0.00625597185312)*cj6*gconst11*px*sj6))+(((2.0)*gconst1*gconst9*px*py))+(((-1.0)*gconst2*gconst4*(px*px)))+(((-1.0)*gconst0*gconst1*gconst4*px))+(((-2.0)*gconst2*gconst3*gconst8*py))+(((-0.07)*cj6*gconst2*gconst4*px))+(((-4.0)*gconst5*gconst7*px*py))+(((0.00625597185312)*cj6*gconst4*px*sj6))+(((2.0)*gconst3*gconst4*gconst6*py))+(((-2.0)*gconst0*gconst5*gconst6*py))+(((-1.0)*gconst0*gconst6*gconst9*px))+(((2.0)*gconst2*gconst5*(px*px)))+(((-1.0)*gconst7*gconst9*(px*px)))+(((0.0001251194370624)*(px*px)*(sj6*sj6)))+(((4.0)*gconst1*gconst5*(py*py)))+(((-0.0869127336)*cj6*gconst8*py))+(((2.0)*gconst2*gconst8*px*py))+(((-0.07)*cj6*gconst0*gconst1*gconst4))+(((-1.0)*gconst0*gconst3*gconst6*gconst8))+(((0.00603729)*(px*px)))+(((-0.02414916)*(py*py)))+(((4.0)*gconst2*gconst4*(py*py)))+(((2.0)*gconst4*gconst7*px*py))+(((-4.0)*gconst2*gconst5*(py*py)))+(((2.0)*gconst1*gconst3*gconst8*py))+(((-1.0)*gconst13*gconst2*(px*px)))+(((0.0869127336)*cj6*gconst0*gconst4))+(((0.003041945676)*gconst4*(cj6*cj6)))+(((-1.0)*gconst1*gconst5*(px*px)))+(((0.001738254672)*gconst0*px*sj6))+(((-1.0)*gconst0*gconst10*gconst5*px))+(((-1.0)*gconst12*gconst2*gconst3*px))+((gconst2*gconst3*gconst4*px))+(((-1.0)*gconst0*gconst1*gconst12*gconst3))+(((-0.312798592656)*gconst7*gconst8*(cj6*cj6)))+(((2.0)*gconst5*gconst6*px*py))+(((0.00625597185312)*cj6*gconst0*gconst12*sj6))+(((2.0)*gconst0*gconst4*gconst6*py))+(((0.0434563668)*cj6*gconst0*gconst12))+(((-1.0)*gconst3*gconst7*gconst8*px))+(((-0.0434563668)*cj6*gconst2*px))+(((2.0)*gconst0*gconst1*gconst8*py))+((gconst0*gconst1*gconst5*px))+(((8.758360594368e-6)*cj6*px*(sj6*sj6)))+(((0.0001251194370624)*gconst0*px*(sj6*sj6)))+(((-0.312798592656)*gconst11*gconst4*(cj6*cj6)))+(((-2.0)*gconst3*gconst4*gconst7*py))+(((-0.00625597185312)*cj6*gconst2*px*sj6))+(((-0.0005004777482496)*(py*py)*(sj6*sj6)))+(((-1.0)*gconst11*gconst5*(px*px)))+(((-0.0869127336)*cj6*gconst7*py))+(((-0.625597185312)*gconst2*gconst4*(cj6*cj6)))+(((-0.01251194370624)*cj6*gconst7*py*sj6))+(((-0.01251194370624)*cj6*gconst8*py*sj6)));
op[7]=((((-1.0)*x154*x176))+((x160*x190))+(((-0.0869127336)*gconst4*x168))+(((-1.0)*gconst2*gconst9*x191))+(((-1.0)*gconst5*x165*x179))+(((-1.0)*x154*x190))+(((2.0)*x160*x178))+(((0.01207458)*x160))+(((-1.0)*x162*x192))+((sj6*x155*x166))+(((-1.0)*gconst9*x165*x182))+(((-1.0)*gconst5*gconst7*x191))+(((-1.0)*x199))+(((-4.0)*x154*x186))+(((-1.0)*x170*x194))+(((-1.0)*gconst2*x168*x175))+(((2.0)*x154*x171))+(((-2.0)*x160*x171))+(((-1.0)*gconst4*x168*x175))+(((-1.0)*gconst8*x182*x183))+(((-1.0)*gconst3*x164*x165))+(((2.0)*x154*x169))+(((-0.0869127336)*gconst2*x168))+((x166*x167))+(((-1.0)*gconst3*x165*x170))+(((-0.01207458)*x154))+(((-1.0)*x164*x194))+((gconst3*x162*x178))+((x160*x176))+(((-1.0)*gconst4*x179*x183)));
op[8]=((((-1.0)*gconst0*x165*x171))+(((-1.0)*gconst0*x178*x183))+((x180*x196))+(((-1.0)*x186*x191))+((x174*x180))+(((-0.00625597185312)*gconst2*x187))+(((-0.0434563668)*gconst2*x159))+(((-1.0)*x169*x194))+(((0.00603729)*x180))+(((-1.0)*x165*x192))+(((0.0434563668)*gconst4*x166))+(((0.00625597185312)*gconst4*sj6*x166)));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x200=cj3*cj3;
IkReal x201=px*px;
IkReal x202=py*py;
IkReal x203=pz*pz;
IkReal x204=(cj6*pz);
IkReal x205=((0.550716)*cj6);
IkReal x206=(cj6*sj4);
IkReal x207=(px*sj3);
IkReal x208=((264.04680134497)*cj6);
IkReal x209=(cj3*py);
IkReal x210=(cj4*cj6);
IkReal x211=(x200*x202);
IkReal x212=(x200*x201);
j5eval[0]=((((14.8109131810421)*x209*x210))+(((28.9279113681495)*x206*x207))+cj6+(((-528.09360268994)*cj6*x207*x209))+((x201*x208))+((x208*x211))+(((14.8109131810421)*sj4*x204))+((x203*x208))+(((-28.9279113681495)*x206*x209))+(((-1.0)*x208*x212))+(((-14.8109131810421)*x207*x210))+(((28.9279113681495)*cj4*x204)));
j5eval[1]=IKsign(((((-0.030890761872)*x207*x210))+((x201*x205))+(((0.030890761872)*sj4*x204))+(((0.060334242096)*cj4*x204))+((x205*x211))+(((-1.0)*x205*x212))+(((-0.060334242096)*x206*x209))+(((0.060334242096)*x206*x207))+((x203*x205))+(((-1.101432)*cj6*x207*x209))+(((0.0020856757104984)*cj6))+(((0.030890761872)*x209*x210))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x213=((0.696638549187219)*sj4);
IkReal x214=(px*sj3);
IkReal x215=(cj3*py);
IkReal x216=((0.35667466410794)*cj4);
if( (((-0.975968434013407)+((x213*x214))+(((0.696638549187219)*cj4*pz))+((x215*x216))+(((-1.0)*x213*x215))+(((0.35667466410794)*pz*sj4))+(((-1.0)*x214*x216))+(((6.35874392262605)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-0.975968434013407)+((x213*x214))+(((0.696638549187219)*cj4*pz))+((x215*x216))+(((-1.0)*x213*x215))+(((0.35667466410794)*pz*sj4))+(((-1.0)*x214*x216))+(((6.35874392262605)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x217=IKasin(((-0.975968434013407)+((x213*x214))+(((0.696638549187219)*cj4*pz))+((x215*x216))+(((-1.0)*x213*x215))+(((0.35667466410794)*pz*sj4))+(((-1.0)*x214*x216))+(((6.35874392262605)*pp))));
j7array[0]=((-1.28429214449518)+(((1.0)*x217)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((1.85730050909461)+(((-1.0)*x217)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j5eval[0]=((3.53874046591082)+sj7+(((3.39432231765567)*cj7)));
j5eval[1]=IKsign(((0.157271676328)+(((0.150853323672)*cj7))+(((0.04444284)*sj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x218=((0.035)*cj7);
IkReal x219=(pz*sj4);
IkReal x220=(px*sj3);
IkReal x221=(cj7*sj4);
IkReal x222=((28.651640142844)*sj7);
IkReal x223=(cj3*py);
IkReal x224=((0.275358)*sj4);
IkReal x225=(sj4*sj7);
IkReal x226=(cj4*sj7);
IkReal x227=(cj4*pz);
IkReal x228=((0.045)*cj4);
IkReal x229=((4.61062289079602)*cj4);
IkReal x230=((28.2127088436402)*sj4);
IkReal x231=((3.58604002617468)*cj4*cj7);
j5eval[0]=((1.67474529463219)+((cj4*x222*x223))+sj7+(((28.2127088436402)*x227))+(((4.61062289079602)*x219))+(((28.651640142844)*cj7*x227))+(((3.58604002617468)*x220*x225))+(((-1.0)*cj4*x220*x222))+((x223*x229))+((x219*x222))+(((-28.651640142844)*x221*x223))+(((-1.0)*x220*x229))+(((-1.0)*x223*x230))+(((-1.0)*x223*x231))+(((-3.58604002617468)*cj7*x219))+(((1.46890546517061)*cj7))+((x220*x231))+((x220*x230))+(((-3.58604002617468)*x223*x225))+(((3.58604002617468)*pz*x226))+(((28.651640142844)*x220*x221)));
j5eval[1]=IKsign(((0.016345630524)+(((0.275358)*x227))+(((-0.035)*x223*x225))+(((0.009760069532)*sj7))+(((0.279642)*sj7*x219))+(((0.279642)*cj7*x227))+((x223*x228))+(((-1.0)*x218*x219))+((x220*x224))+(((-1.0)*cj4*x218*x223))+(((-1.0)*x223*x224))+(((-0.279642)*x220*x226))+(((-1.0)*x220*x228))+(((0.045)*x219))+(((-0.279642)*x221*x223))+(((0.014336619476)*cj7))+(((0.035)*x220*x225))+((cj4*x218*x220))+(((0.035)*pz*x226))+(((0.279642)*x223*x226))+(((0.279642)*x220*x221))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x232=((0.035)*cj7);
IkReal x233=((0.279642)*sj7);
IkReal x234=(cj4*pz);
IkReal x235=(pz*sj4);
IkReal x236=((6.65692793866453)*sj7);
IkReal x237=((53.1873326464008)*cj7);
IkReal x238=((0.279642)*cj7);
IkReal x239=((0.035)*sj7);
IkReal x240=((53.1873326464008)*sj7);
IkReal x241=((6.65692793866453)*cj7);
IkReal x242=(px*sj3*sj4);
IkReal x243=(cj3*py*sj4);
IkReal x244=(cj4*px*sj3);
IkReal x245=(cj3*cj4*py);
j5eval[0]=((1.0)+(((52.3725246667082)*x235))+(((-2.72679550673676)*sj7))+((x240*x243))+(((1.85634513002512)*cj7))+((x234*x241))+((x237*x245))+(((52.3725246667082)*x245))+((x236*x245))+(((-1.0)*x234*x240))+(((-1.0)*x237*x244))+(((-52.3725246667082)*x244))+(((8.55890734971154)*x243))+(((-1.0)*x236*x244))+(((-1.0)*x241*x243))+((x235*x236))+((x235*x237))+((x241*x242))+(((-1.0)*x240*x242))+(((-8.55890734971154)*x242))+(((-8.55890734971154)*x234)));
j5eval[1]=IKsign(((0.005257680468)+(((-0.014336619476)*sj7))+(((-1.0)*x233*x234))+(((0.275358)*x235))+(((-0.045)*x234))+((x233*x243))+((x232*x234))+(((0.275358)*x245))+((x238*x245))+(((-0.045)*x242))+(((-1.0)*x232*x243))+(((-1.0)*x233*x242))+((x239*x245))+((x235*x239))+((x235*x238))+((x232*x242))+(((-1.0)*x238*x244))+(((0.009760069532)*cj7))+(((-1.0)*x239*x244))+(((-0.275358)*x244))+(((0.045)*x243))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x246=cj4*cj4;
IkReal x247=pz*pz;
IkReal x248=cj3*cj3;
IkReal x249=px*px;
IkReal x250=py*py;
IkReal x251=cj7*cj7;
IkReal x252=(cj7*sj7);
IkReal x253=((0.035)*cj7);
IkReal x254=((0.279642)*sj7);
IkReal x255=(cj3*py);
IkReal x256=(pz*sj4);
IkReal x257=(px*sj3);
IkReal x258=(cj4*pz);
IkReal x259=((0.054778)*cj4);
IkReal x260=((0.275358)*cj4);
IkReal x261=(cj4*sj4);
IkReal x262=((0.056092)*cj4);
IkReal x263=((2.0)*cj4);
IkReal x264=(sj4*x257);
IkReal x265=(pz*x257);
IkReal x266=((2.0)*x246);
IkReal x267=((0.279642)*cj4*cj7);
IkReal x268=((0.035)*cj4*sj7);
IkReal x269=((1.0)*x247);
IkReal x270=((1.0)*x248);
IkReal x271=(x248*x250);
IkReal x272=(x246*x249);
CheckValue<IkReal> x273 = IKatan2WithCheck(IkReal(((-0.079438070048)+(((-1.0)*x256*x257*x263))+(((-1.0)*x255*x257*x266))+((x255*x256*x263))+(((0.056092)*x256))+x272+x247+((x255*x262))+(((0.076974648164)*x251))+(((-1.0)*x246*x269))+(((-1.0)*x270*x272))+(((0.01957494)*x252))+((x246*x271))+(((-0.02516778)*sj7))+(((-1.0)*x257*x262))+(((0.00315)*cj7)))),IkReal(((0.020642276212)+(((-1.0)*x265))+(((-2.0)*x255*x257*x261))+(((-0.01957494)*x251))+(((-0.028046)*x258))+(((-1.0)*x255*x259))+((pz*x255))+(((-1.0)*x249*x261*x270))+((x257*x259))+(((0.00294636)*cj7))+(((-0.028046)*x264))+(((-1.0)*x261*x269))+(((0.028046)*sj4*x255))+(((0.078576661836)*sj7))+(((-1.0)*pz*x255*x266))+(((0.076974648164)*x252))+((x249*x261))+((x261*x271))+(((-0.054778)*x256))+((x265*x266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x273.valid){
continue;
}
CheckValue<IkReal> x274=IKPowWithIntegerCheck(IKsign(((0.005257680468)+((sj4*x254*x255))+(((-0.014336619476)*sj7))+(((0.275358)*x256))+((x253*x264))+(((0.279642)*cj7*x256))+(((-0.045)*x264))+(((-1.0)*x254*x258))+((x255*x268))+((x255*x267))+((x255*x260))+((x253*x258))+(((0.045)*sj4*x255))+(((-1.0)*sj4*x253*x255))+(((0.009760069532)*cj7))+(((-0.045)*x258))+(((-1.0)*x257*x268))+(((-1.0)*x257*x267))+(((-1.0)*x257*x260))+(((-1.0)*x254*x264))+(((0.035)*sj7*x256)))),-1);
if(!x274.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x273.value)+(((1.5707963267949)*(x274.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x275=IKsin(j5);
IkReal x276=IKcos(j5);
IkReal x277=(pz*sj4);
IkReal x278=((0.279642)*cj7);
IkReal x279=((0.279642)*sj7);
IkReal x280=((0.035)*sj7);
IkReal x281=(cj4*pz);
IkReal x282=(cj3*py);
IkReal x283=((0.035)*cj7);
IkReal x284=(cj4*px*sj3);
IkReal x285=((1.0)*x275);
IkReal x286=((0.09)*x276);
IkReal x287=(px*sj3*sj4);
IkReal x288=((1.0)*x276);
IkReal x289=((0.550716)*x276);
IkReal x290=((0.550716)*x275);
IkReal x291=((0.09)*x275);
IkReal x292=(sj4*x276*x282);
evalcond[0]=((-0.028046)+((x275*x278))+(((-1.0)*x277))+(((-1.0)*x276*x283))+(((0.275358)*x275))+x284+(((-1.0)*cj4*x282))+((x275*x280))+((x276*x279))+(((0.045)*x276)));
evalcond[1]=((-0.054778)+((x275*x279))+(((-1.0)*x276*x280))+(((-1.0)*x287))+(((-1.0)*x281))+(((-0.275358)*x276))+(((-1.0)*x275*x283))+((sj4*x282))+(((0.045)*x275))+(((-1.0)*x276*x278)));
evalcond[2]=((-0.275358)+((cj4*x275*x282))+((x275*x277))+(((-1.0)*x287*x288))+(((0.028046)*x275))+(((-1.0)*x281*x288))+x292+(((-0.054778)*x276))+(((-1.0)*x284*x285))+(((-1.0)*x278))+(((-1.0)*x280)));
evalcond[3]=((0.045)+((sj4*x275*x282))+(((-1.0)*x277*x288))+(((-1.0)*x281*x285))+x279+(((-0.054778)*x275))+(((-0.028046)*x276))+(((-1.0)*x285*x287))+(((-1.0)*cj4*x282*x288))+(((-1.0)*x283))+((x276*x284)));
evalcond[4]=((-0.0022095874)+(((-1.0)*x284*x290))+(((-0.027642981048)*x276))+(((-1.0)*(px*px)))+(((-1.0)*x287*x289))+((cj4*x282*x286))+(((0.056092)*x284))+(((-0.109556)*x281))+(((-0.109556)*x287))+((x277*x290))+((x281*x291))+((x287*x291))+(((-1.0)*x281*x289))+((cj4*x282*x290))+(((-1.0)*x284*x286))+(((0.109556)*sj4*x282))+(((-1.0)*(pz*pz)))+((sj4*x282*x289))+(((-1.0)*sj4*x282*x291))+(((-0.056092)*cj4*x282))+(((-1.0)*(py*py)))+(((0.020375400936)*x275))+((x277*x286))+(((-0.056092)*x277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1040=px*px;
IkReal x1041=cj3*cj3;
IkReal x1042=cj4*cj4;
IkReal x1043=py*py;
IkReal x1044=pz*pz;
IkReal x1045=cj7*cj7;
IkReal x1046=(cj7*sj7);
IkReal x1047=(pz*sj4);
IkReal x1048=((0.035)*cj7);
IkReal x1049=(px*sj3);
IkReal x1050=((0.275358)*sj4);
IkReal x1051=((0.054778)*cj4);
IkReal x1052=(cj3*py);
IkReal x1053=(cj4*sj7);
IkReal x1054=(cj4*pz);
IkReal x1055=((0.056092)*cj4);
IkReal x1056=((0.045)*cj4);
IkReal x1057=(cj4*sj4);
IkReal x1058=((0.028046)*sj4);
IkReal x1059=((0.279642)*cj7*sj4);
IkReal x1060=((2.0)*x1052);
IkReal x1061=(pz*x1042);
IkReal x1062=((0.035)*sj4*sj7);
IkReal x1063=(x1041*x1043);
IkReal x1064=(x1040*x1042);
CheckValue<IkReal> x1065 = IKatan2WithCheck(IkReal(((0.023714883788)+(((-1.0)*pz*x1052))+(((-1.0)*x1057*x1063))+(((-1.0)*x1052*x1058))+((x1044*x1057))+(((0.028046)*x1054))+((x1060*x1061))+(((-0.01957494)*x1045))+(((-2.0)*x1049*x1061))+(((-1.0)*x1040*x1057))+((x1049*x1057*x1060))+(((0.00294636)*cj7))+((pz*x1049))+((x1051*x1052))+(((0.078576661836)*sj7))+((x1049*x1058))+(((0.054778)*x1047))+(((0.076974648164)*x1046))+((x1040*x1041*x1057))+(((-1.0)*x1049*x1051)))),IkReal(((-0.076260450048)+x1044+x1064+(((-1.0)*x1041*x1064))+(((-0.154003323672)*cj7))+(((-0.01957494)*x1046))+((x1052*x1055))+((cj4*x1047*x1060))+(((-0.01927506)*sj7))+(((-2.0)*cj4*x1047*x1049))+(((-1.0)*x1042*x1049*x1060))+(((-1.0)*x1042*x1044))+(((-0.076974648164)*x1045))+(((-1.0)*x1049*x1055))+((x1042*x1063))+(((0.056092)*x1047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1065.valid){
continue;
}
CheckValue<IkReal> x1066=IKPowWithIntegerCheck(IKsign(((0.016345630524)+(((-1.0)*x1052*x1059))+(((0.035)*pz*x1053))+(((0.279642)*cj7*x1054))+(((0.009760069532)*sj7))+((cj4*x1048*x1049))+(((-1.0)*cj4*x1048*x1052))+((x1052*x1056))+(((0.275358)*x1054))+((x1049*x1059))+((x1049*x1050))+(((-0.279642)*x1049*x1053))+((x1049*x1062))+(((0.014336619476)*cj7))+(((-1.0)*x1052*x1062))+(((0.279642)*x1052*x1053))+(((0.279642)*sj7*x1047))+(((-1.0)*x1050*x1052))+(((-1.0)*x1049*x1056))+(((-1.0)*x1047*x1048))+(((0.045)*x1047)))),-1);
if(!x1066.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1065.value)+(((1.5707963267949)*(x1066.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1067=IKsin(j5);
IkReal x1068=IKcos(j5);
IkReal x1069=(pz*sj4);
IkReal x1070=((0.279642)*cj7);
IkReal x1071=((0.279642)*sj7);
IkReal x1072=((0.035)*sj7);
IkReal x1073=(cj4*pz);
IkReal x1074=(cj3*py);
IkReal x1075=((0.035)*cj7);
IkReal x1076=(cj4*px*sj3);
IkReal x1077=((1.0)*x1067);
IkReal x1078=((0.09)*x1068);
IkReal x1079=(px*sj3*sj4);
IkReal x1080=((1.0)*x1068);
IkReal x1081=((0.550716)*x1068);
IkReal x1082=((0.550716)*x1067);
IkReal x1083=((0.09)*x1067);
IkReal x1084=(sj4*x1068*x1074);
evalcond[0]=((-0.028046)+((x1068*x1071))+(((0.045)*x1068))+x1076+(((-1.0)*cj4*x1074))+((x1067*x1070))+((x1067*x1072))+(((-1.0)*x1068*x1075))+(((0.275358)*x1067))+(((-1.0)*x1069)));
evalcond[1]=((-0.054778)+(((0.045)*x1067))+((x1067*x1071))+(((-0.275358)*x1068))+(((-1.0)*x1068*x1070))+(((-1.0)*x1068*x1072))+(((-1.0)*x1067*x1075))+(((-1.0)*x1073))+(((-1.0)*x1079))+((sj4*x1074)));
evalcond[2]=((-0.275358)+(((0.028046)*x1067))+x1084+(((-1.0)*x1076*x1077))+((x1067*x1069))+((cj4*x1067*x1074))+(((-1.0)*x1073*x1080))+(((-1.0)*x1079*x1080))+(((-0.054778)*x1068))+(((-1.0)*x1072))+(((-1.0)*x1070)));
evalcond[3]=((0.045)+(((-1.0)*cj4*x1074*x1080))+((x1068*x1076))+((sj4*x1067*x1074))+(((-1.0)*x1077*x1079))+x1071+(((-1.0)*x1073*x1077))+(((-1.0)*x1069*x1080))+(((-0.028046)*x1068))+(((-0.054778)*x1067))+(((-1.0)*x1075)));
evalcond[4]=((-0.0022095874)+((x1079*x1083))+((x1073*x1083))+((x1069*x1078))+(((-1.0)*(px*px)))+(((0.109556)*sj4*x1074))+(((-1.0)*sj4*x1074*x1083))+(((-1.0)*x1076*x1078))+((cj4*x1074*x1078))+(((-0.109556)*x1079))+(((-0.109556)*x1073))+((x1069*x1082))+(((-1.0)*x1073*x1081))+(((-1.0)*x1079*x1081))+(((-0.056092)*cj4*x1074))+(((-0.056092)*x1069))+((cj4*x1074*x1082))+(((-1.0)*x1076*x1082))+(((-1.0)*(pz*pz)))+(((-0.027642981048)*x1068))+(((0.020375400936)*x1067))+(((0.056092)*x1076))+((sj4*x1074*x1081))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1085=((0.035)*cj7);
IkReal x1086=((0.279642)*sj7);
IkReal x1087=(cj3*py);
IkReal x1088=(pz*sj4);
IkReal x1089=(cj4*pz);
IkReal x1090=((0.279642)*cj7);
IkReal x1091=((0.035)*sj7);
IkReal x1092=(px*sj3*sj4);
IkReal x1093=(cj4*px*sj3);
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(IKsign(((0.157271676328)+(((0.150853323672)*cj7))+(((0.04444284)*sj7)))),-1);
if(!x1094.valid){
continue;
}
CheckValue<IkReal> x1095 = IKatan2WithCheck(IkReal(((0.010187700468)+(((0.045)*x1089))+(((-1.0)*x1091*x1093))+(((-1.0)*x1090*x1093))+((x1086*x1092))+(((0.016299839476)*sj7))+((sj4*x1085*x1087))+(((0.275358)*x1088))+((x1088*x1090))+((x1088*x1091))+(((-1.0)*sj4*x1086*x1087))+(((-1.0)*x1085*x1092))+(((0.045)*x1092))+(((-1.0)*x1085*x1089))+(((-0.045)*sj4*x1087))+((cj4*x1087*x1090))+((cj4*x1087*x1091))+((x1086*x1089))+(((0.275358)*cj4*x1087))+(((-0.275358)*x1093))+(((0.005925609532)*cj7)))),IkReal(((-0.013821490524)+(((0.045)*x1088))+(((0.045)*cj4*x1087))+(((-1.0)*x1086*x1093))+(((-1.0)*cj4*x1085*x1087))+(((-1.0)*x1091*x1092))+(((0.005925609532)*sj7))+((x1085*x1093))+(((-1.0)*x1090*x1092))+((cj4*x1086*x1087))+(((-0.016299839476)*cj7))+(((-0.045)*x1093))+(((-1.0)*x1089*x1090))+(((-1.0)*x1089*x1091))+(((-0.275358)*x1089))+((sj4*x1087*x1090))+((sj4*x1087*x1091))+(((-1.0)*x1085*x1088))+((x1086*x1088))+(((0.275358)*sj4*x1087))+(((-0.275358)*x1092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1095.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1094.value)))+(x1095.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1096=IKsin(j5);
IkReal x1097=IKcos(j5);
IkReal x1098=(pz*sj4);
IkReal x1099=((0.279642)*cj7);
IkReal x1100=((0.279642)*sj7);
IkReal x1101=((0.035)*sj7);
IkReal x1102=(cj4*pz);
IkReal x1103=(cj3*py);
IkReal x1104=((0.035)*cj7);
IkReal x1105=(cj4*px*sj3);
IkReal x1106=((1.0)*x1096);
IkReal x1107=((0.09)*x1097);
IkReal x1108=(px*sj3*sj4);
IkReal x1109=((1.0)*x1097);
IkReal x1110=((0.550716)*x1097);
IkReal x1111=((0.550716)*x1096);
IkReal x1112=((0.09)*x1096);
IkReal x1113=(sj4*x1097*x1103);
evalcond[0]=((-0.028046)+(((-1.0)*cj4*x1103))+x1105+(((0.275358)*x1096))+((x1097*x1100))+(((-1.0)*x1098))+(((0.045)*x1097))+((x1096*x1101))+((x1096*x1099))+(((-1.0)*x1097*x1104)));
evalcond[1]=((-0.054778)+(((-1.0)*x1097*x1099))+(((-1.0)*x1108))+(((-1.0)*x1102))+(((0.045)*x1096))+((sj4*x1103))+((x1096*x1100))+(((-0.275358)*x1097))+(((-1.0)*x1097*x1101))+(((-1.0)*x1096*x1104)));
evalcond[2]=((-0.275358)+x1113+(((-0.054778)*x1097))+(((-1.0)*x1099))+(((-1.0)*x1108*x1109))+(((0.028046)*x1096))+((cj4*x1096*x1103))+((x1096*x1098))+(((-1.0)*x1101))+(((-1.0)*x1102*x1109))+(((-1.0)*x1105*x1106)));
evalcond[3]=((0.045)+x1100+(((-0.054778)*x1096))+(((-1.0)*x1098*x1109))+((x1097*x1105))+((sj4*x1096*x1103))+(((-1.0)*x1106*x1108))+(((-1.0)*cj4*x1103*x1109))+(((-1.0)*x1104))+(((-0.028046)*x1097))+(((-1.0)*x1102*x1106)));
evalcond[4]=((-0.0022095874)+((cj4*x1103*x1111))+(((-0.109556)*x1108))+(((-0.109556)*x1102))+(((-1.0)*(px*px)))+((x1108*x1112))+((x1098*x1107))+((x1098*x1111))+((x1102*x1112))+(((-0.027642981048)*x1097))+(((0.020375400936)*x1096))+((sj4*x1103*x1110))+(((-0.056092)*cj4*x1103))+(((0.056092)*x1105))+(((-1.0)*sj4*x1103*x1112))+(((-1.0)*x1108*x1110))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x1102*x1110))+(((0.109556)*sj4*x1103))+(((-1.0)*x1105*x1111))+((cj4*x1103*x1107))+(((-1.0)*x1105*x1107))+(((-0.056092)*x1098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x1114=((0.359925798082159)*cj4);
IkReal x1115=(cj3*py);
IkReal x1116=(px*sj3);
IkReal x1117=((0.70298849630409)*sj4);
if( (((-0.975881121279537)+(((0.70298849630409)*cj4*pz))+((x1114*x1115))+(((-1.0)*x1114*x1116))+(((6.41670466523139)*pp))+((x1116*x1117))+(((0.359925798082159)*pz*sj4))+(((-1.0)*x1115*x1117)))) < -1-IKFAST_SINCOS_THRESH || (((-0.975881121279537)+(((0.70298849630409)*cj4*pz))+((x1114*x1115))+(((-1.0)*x1114*x1116))+(((6.41670466523139)*pp))+((x1116*x1117))+(((0.359925798082159)*pz*sj4))+(((-1.0)*x1115*x1117)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1118=IKasin(((-0.975881121279537)+(((0.70298849630409)*cj4*pz))+((x1114*x1115))+(((-1.0)*x1114*x1116))+(((6.41670466523139)*pp))+((x1116*x1117))+(((0.359925798082159)*pz*sj4))+(((-1.0)*x1115*x1117))));
j7array[0]=((-1.3557411097506)+(((1.0)*x1118)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((1.78585154383919)+(((-1.0)*x1118)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
j5eval[0]=((4.6868607039206)+sj7+(((4.57806149629133)*cj7)));
j5eval[1]=IKsign(((0.155871676328)+(((0.152253323672)*cj7))+(((0.03325716)*sj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1119=((47.1921071562094)*cj7);
IkReal x1120=((0.035)*cj4);
IkReal x1121=((0.279642)*sj4);
IkReal x1122=((5.90656536023677)*sj7);
IkReal x1123=(pz*sj4);
IkReal x1124=((47.1921071562094)*sj7);
IkReal x1125=(px*sj3);
IkReal x1126=((0.279642)*cj4);
IkReal x1127=((0.025)*cj4);
IkReal x1128=(cj3*py);
IkReal x1129=(cj4*pz);
IkReal x1130=((5.90656536023677)*cj4);
IkReal x1131=(pz*sj7);
IkReal x1132=((0.035)*sj7);
IkReal x1133=((4.21897525731198)*cj4);
IkReal x1134=(sj4*x1128);
IkReal x1135=(cj7*x1125);
IkReal x1136=(cj7*x1123);
j5eval[0]=((2.42716136565038)+(((2.75074477789604)*cj7))+(((5.90656536023677)*x1136))+(((-1.0)*sj7))+(((46.4691435561164)*sj4*x1125))+(((-1.0)*x1122*x1134))+(((-4.21897525731198)*x1123))+(((46.4691435561164)*x1129))+((x1119*x1129))+((cj7*x1128*x1130))+(((-1.0)*x1130*x1135))+(((-1.0)*x1123*x1124))+((cj4*x1124*x1125))+((x1125*x1133))+(((-1.0)*cj4*x1124*x1128))+(((-1.0)*x1128*x1133))+((x1122*x1129))+(((-1.0)*x1119*x1134))+((sj4*x1119*x1125))+(((-46.4691435561164)*x1134))+((sj4*x1122*x1125)));
j5eval[1]=IKsign(((0.014382410524)+(((0.275358)*sj4*x1125))+(((0.275358)*x1129))+((x1121*x1135))+(((-0.005925609532)*sj7))+(((-0.025)*x1123))+((x1120*x1131))+(((-1.0)*x1121*x1131))+(((-1.0)*x1127*x1128))+((x1125*x1127))+((sj7*x1125*x1126))+((sj4*x1125*x1132))+(((0.016299839476)*cj7))+(((-1.0)*sj7*x1126*x1128))+(((-1.0)*x1132*x1134))+((cj7*pz*x1126))+(((-0.275358)*x1134))+((cj7*x1120*x1128))+(((0.035)*x1136))+(((-1.0)*x1120*x1135))+(((-1.0)*cj7*x1121*x1128))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1137=((0.035)*cj7);
IkReal x1138=((0.279642)*sj7);
IkReal x1139=(cj4*sj7);
IkReal x1140=((47.1921071562094)*pz);
IkReal x1141=(px*sj3);
IkReal x1142=(pz*sj4);
IkReal x1143=((46.4691435561164)*cj4);
IkReal x1144=(cj4*cj7);
IkReal x1145=(cj3*py);
IkReal x1146=(cj4*pz);
IkReal x1147=((0.275358)*cj4);
IkReal x1148=((47.1921071562094)*sj7);
IkReal x1149=((5.90656536023677)*cj7);
IkReal x1150=(sj4*x1141);
IkReal x1151=(sj4*x1145);
j5eval[0]=((-1.53438062681988)+((x1149*x1150))+(((-1.0)*x1149*x1151))+(((-47.1921071562094)*x1144*x1145))+(((-1.0)*x1143*x1145))+(((4.21897525731198)*x1151))+((x1141*x1143))+(((5.90656536023677)*x1139*x1141))+(((5.90656536023677)*pz*x1144))+(((-4.21897525731198)*x1146))+(((-5.90656536023677)*sj7*x1142))+(((47.1921071562094)*x1141*x1144))+(((-4.21897525731198)*x1150))+(((-1.0)*x1148*x1150))+((x1148*x1151))+(((-46.4691435561164)*x1142))+(((-1.0)*x1139*x1140))+(((-5.90656536023677)*x1139*x1145))+(((-1.0)*cj7*sj4*x1140))+(((-1.0)*cj7))+(((-2.75074477789604)*sj7)));
j5eval[1]=IKsign(((-0.009092140468)+(((-1.0)*x1145*x1147))+(((-0.275358)*x1142))+((x1137*x1146))+(((-1.0)*x1138*x1150))+(((-0.279642)*cj7*x1142))+(((-0.035)*sj7*x1142))+(((-0.025)*x1146))+(((-0.279642)*x1144*x1145))+(((-0.025)*x1150))+((x1137*x1150))+((x1141*x1147))+(((-0.005925609532)*cj7))+(((0.279642)*x1141*x1144))+(((0.035)*x1139*x1141))+(((0.025)*x1151))+(((-0.016299839476)*sj7))+((x1138*x1151))+(((-1.0)*x1137*x1151))+(((-0.035)*x1139*x1145))+(((-1.0)*x1138*x1146))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1152=cj4*cj4;
IkReal x1153=px*px;
IkReal x1154=pz*pz;
IkReal x1155=cj3*cj3;
IkReal x1156=cj7*cj7;
IkReal x1157=py*py;
IkReal x1158=(cj7*sj7);
IkReal x1159=((0.035)*cj7);
IkReal x1160=((0.279642)*sj7);
IkReal x1161=((2.0)*pz);
IkReal x1162=(px*sj3);
IkReal x1163=(cj4*pz);
IkReal x1164=((0.054778)*cj4);
IkReal x1165=(cj3*py);
IkReal x1166=((0.275358)*cj4);
IkReal x1167=((0.279642)*cj7);
IkReal x1168=(pz*sj4);
IkReal x1169=((0.056092)*cj4);
IkReal x1170=(cj4*sj4);
IkReal x1171=(sj4*x1162);
IkReal x1172=(sj4*x1165);
IkReal x1173=((1.0)*x1152);
IkReal x1174=((0.035)*cj4*sj7);
IkReal x1175=(x1155*x1157);
IkReal x1176=(x1153*x1155);
CheckValue<IkReal> x1177 = IKatan2WithCheck(IkReal(((0.078038070048)+(((-1.0)*x1173*x1175))+(((-0.076974648164)*x1156))+((x1162*x1169))+(((-1.0)*x1161*x1165*x1170))+(((-0.01957494)*x1158))+((x1152*x1154))+((x1161*x1162*x1170))+(((2.0)*x1152*x1162*x1165))+(((-1.0)*x1153*x1173))+(((-1.0)*x1154))+(((0.0139821)*sj7))+(((-0.056092)*x1168))+(((-0.00175)*cj7))+((x1152*x1176))+(((-1.0)*x1165*x1169)))),IkReal(((0.018207723788)+(((2.0)*x1162*x1165*x1170))+((x1164*x1165))+(((-1.0)*x1170*x1175))+(((-0.028046)*x1172))+(((-1.0)*x1162*x1164))+(((-0.01957494)*x1156))+(((0.054778)*x1168))+(((0.028046)*x1163))+(((-1.0)*x1153*x1170))+(((0.077876661836)*sj7))+(((0.028046)*x1171))+((x1154*x1170))+(((-1.0)*pz*x1165))+(((-0.00264648)*cj7))+((pz*x1162))+((x1152*x1161*x1165))+(((-1.0)*x1152*x1161*x1162))+((x1170*x1176))+(((0.076974648164)*x1158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1177.valid){
continue;
}
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(IKsign(((-0.009092140468)+(((-1.0)*x1165*x1174))+((x1159*x1163))+(((0.025)*x1172))+(((-1.0)*x1159*x1172))+((x1162*x1166))+(((-0.005925609532)*cj7))+((x1162*x1174))+(((-0.275358)*x1168))+(((-0.025)*x1163))+(((-0.035)*sj7*x1168))+(((-0.025)*x1171))+(((-1.0)*cj4*x1165*x1167))+(((-1.0)*x1167*x1168))+(((-0.016299839476)*sj7))+(((-1.0)*x1160*x1163))+(((-1.0)*x1160*x1171))+(((-1.0)*x1165*x1166))+((x1160*x1172))+((cj4*x1162*x1167))+((x1159*x1171)))),-1);
if(!x1178.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1177.value)+(((1.5707963267949)*(x1178.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1179=IKsin(j5);
IkReal x1180=IKcos(j5);
IkReal x1181=(pz*sj4);
IkReal x1182=((0.279642)*cj7);
IkReal x1183=((0.035)*sj7);
IkReal x1184=(cj4*pz);
IkReal x1185=((0.279642)*sj7);
IkReal x1186=((0.035)*cj7);
IkReal x1187=(cj4*px*sj3);
IkReal x1188=((1.0)*x1179);
IkReal x1189=(cj3*py*sj4);
IkReal x1190=((0.05)*x1179);
IkReal x1191=(cj3*cj4*py);
IkReal x1192=((0.550716)*x1179);
IkReal x1193=(px*sj3*sj4);
IkReal x1194=((1.0)*x1180);
IkReal x1195=((0.550716)*x1180);
IkReal x1196=((0.05)*x1180);
evalcond[0]=((-0.028046)+x1187+(((0.275358)*x1179))+((x1180*x1186))+((x1179*x1182))+((x1179*x1183))+(((-0.025)*x1180))+(((-1.0)*x1180*x1185))+(((-1.0)*x1181))+(((-1.0)*x1191)));
evalcond[1]=((-0.054778)+x1189+((x1179*x1186))+(((-1.0)*x1179*x1185))+(((-0.025)*x1179))+(((-1.0)*x1180*x1182))+(((-1.0)*x1180*x1183))+(((-1.0)*x1184))+(((-0.275358)*x1180))+(((-1.0)*x1193)));
evalcond[2]=((0.025)+x1185+((x1180*x1191))+(((0.054778)*x1179))+(((-1.0)*x1188*x1189))+((x1180*x1181))+((x1179*x1184))+((x1179*x1193))+(((-1.0)*x1187*x1194))+(((-1.0)*x1186))+(((0.028046)*x1180)));
evalcond[3]=((-0.275358)+(((-1.0)*x1193*x1194))+((x1180*x1189))+((x1179*x1181))+((x1179*x1191))+(((0.028046)*x1179))+(((-1.0)*x1187*x1188))+(((-1.0)*x1184*x1194))+(((-1.0)*x1183))+(((-1.0)*x1182))+(((-0.054778)*x1180)));
evalcond[4]=((-0.0008095874)+(((0.109556)*x1189))+(((-1.0)*(px*px)))+(((-1.0)*x1193*x1195))+(((-1.0)*x1181*x1196))+(((-1.0)*x1191*x1196))+(((-1.0)*x1190*x1193))+((x1187*x1196))+(((0.056092)*x1187))+((x1189*x1195))+((x1189*x1190))+(((0.012706480936)*x1179))+(((-1.0)*x1184*x1195))+(((-1.0)*x1184*x1190))+(((-0.031569421048)*x1180))+(((-1.0)*x1187*x1192))+(((-1.0)*(pz*pz)))+(((-0.056092)*x1191))+((x1181*x1192))+(((-0.056092)*x1181))+(((-1.0)*(py*py)))+((x1191*x1192))+(((-0.109556)*x1193))+(((-0.109556)*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1197=px*px;
IkReal x1198=cj3*cj3;
IkReal x1199=cj4*cj4;
IkReal x1200=py*py;
IkReal x1201=pz*pz;
IkReal x1202=cj7*cj7;
IkReal x1203=(cj7*sj7);
IkReal x1204=(pz*sj4);
IkReal x1205=((0.035)*cj7);
IkReal x1206=(px*sj3);
IkReal x1207=((0.275358)*sj4);
IkReal x1208=(cj4*sj7);
IkReal x1209=(cj4*pz);
IkReal x1210=(cj3*py);
IkReal x1211=(cj4*sj4);
IkReal x1212=((0.028046)*sj4);
IkReal x1213=((0.279642)*sj7);
IkReal x1214=((0.279642)*cj7*sj4);
IkReal x1215=((2.0)*x1210);
IkReal x1216=(pz*x1199);
IkReal x1217=(cj4*x1210);
IkReal x1218=((0.035)*sj4*sj7);
IkReal x1219=(x1197*x1199);
IkReal x1220=(x1198*x1200);
IkReal x1221=(x1197*x1211);
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal(((-0.015135116212)+(((-1.0)*pz*x1210))+(((-1.0)*x1221))+(((-0.076974648164)*x1203))+(((-0.054778)*cj4*x1206))+(((-0.077876661836)*sj7))+((x1206*x1211*x1215))+((x1206*x1212))+((x1201*x1211))+((x1198*x1221))+(((-1.0)*x1210*x1212))+(((0.028046)*x1209))+(((0.054778)*x1204))+(((0.054778)*x1217))+((pz*x1206))+(((0.01957494)*x1202))+(((0.00264648)*cj7))+(((-2.0)*x1206*x1216))+((x1215*x1216))+(((-1.0)*x1211*x1220)))),IkReal(((-0.076260450048)+((cj4*x1204*x1215))+((x1199*x1220))+x1201+x1219+(((-1.0)*x1199*x1201))+(((-0.154003323672)*cj7))+(((-0.076974648164)*x1202))+(((-1.0)*x1198*x1219))+(((-0.01927506)*sj7))+(((0.056092)*x1204))+(((-2.0)*cj4*x1204*x1206))+(((-0.056092)*cj4*x1206))+(((-1.0)*x1199*x1206*x1215))+(((-0.01957494)*x1203))+(((0.056092)*x1217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223=IKPowWithIntegerCheck(IKsign(((0.014382410524)+((x1204*x1205))+(((-1.0)*x1204*x1213))+(((-1.0)*x1207*x1210))+(((0.279642)*cj7*x1209))+(((-0.005925609532)*sj7))+(((-0.279642)*x1208*x1210))+(((-0.025)*x1204))+(((0.035)*pz*x1208))+((x1206*x1214))+((x1206*x1218))+(((-0.025)*x1217))+(((-1.0)*x1210*x1214))+(((-1.0)*x1210*x1218))+(((0.016299839476)*cj7))+((x1205*x1217))+((x1206*x1207))+(((0.275358)*x1209))+(((-1.0)*cj4*x1205*x1206))+(((0.025)*cj4*x1206))+(((0.279642)*x1206*x1208)))),-1);
if(!x1223.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1222.value)+(((1.5707963267949)*(x1223.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1224=IKsin(j5);
IkReal x1225=IKcos(j5);
IkReal x1226=(pz*sj4);
IkReal x1227=((0.279642)*cj7);
IkReal x1228=((0.035)*sj7);
IkReal x1229=(cj4*pz);
IkReal x1230=((0.279642)*sj7);
IkReal x1231=((0.035)*cj7);
IkReal x1232=(cj4*px*sj3);
IkReal x1233=((1.0)*x1224);
IkReal x1234=(cj3*py*sj4);
IkReal x1235=((0.05)*x1224);
IkReal x1236=(cj3*cj4*py);
IkReal x1237=((0.550716)*x1224);
IkReal x1238=(px*sj3*sj4);
IkReal x1239=((1.0)*x1225);
IkReal x1240=((0.550716)*x1225);
IkReal x1241=((0.05)*x1225);
evalcond[0]=((-0.028046)+(((-1.0)*x1236))+x1232+(((-1.0)*x1225*x1230))+(((-1.0)*x1226))+((x1225*x1231))+((x1224*x1227))+((x1224*x1228))+(((0.275358)*x1224))+(((-0.025)*x1225)));
evalcond[1]=((-0.054778)+(((-1.0)*x1238))+x1234+(((-1.0)*x1229))+(((-1.0)*x1225*x1228))+(((-1.0)*x1225*x1227))+(((-1.0)*x1224*x1230))+(((-0.275358)*x1225))+((x1224*x1231))+(((-0.025)*x1224)));
evalcond[2]=((0.025)+x1230+(((0.028046)*x1225))+(((0.054778)*x1224))+(((-1.0)*x1231))+((x1225*x1236))+((x1224*x1229))+((x1225*x1226))+((x1224*x1238))+(((-1.0)*x1233*x1234))+(((-1.0)*x1232*x1239)));
evalcond[3]=((-0.275358)+(((0.028046)*x1224))+(((-1.0)*x1227))+(((-1.0)*x1228))+(((-0.054778)*x1225))+(((-1.0)*x1238*x1239))+((x1225*x1234))+((x1224*x1226))+((x1224*x1236))+(((-1.0)*x1229*x1239))+(((-1.0)*x1232*x1233)));
evalcond[4]=((-0.0008095874)+(((-1.0)*(px*px)))+((x1234*x1235))+(((0.012706480936)*x1224))+(((-0.056092)*x1226))+(((-0.056092)*x1236))+(((-1.0)*x1236*x1241))+(((-1.0)*x1229*x1240))+(((-1.0)*x1226*x1241))+(((-0.109556)*x1229))+(((-1.0)*x1235*x1238))+((x1232*x1241))+(((-1.0)*x1238*x1240))+(((-0.109556)*x1238))+(((-0.031569421048)*x1225))+((x1226*x1237))+(((0.109556)*x1234))+(((-1.0)*(pz*pz)))+(((-1.0)*x1229*x1235))+(((-1.0)*(py*py)))+((x1236*x1237))+((x1234*x1240))+(((-1.0)*x1232*x1237))+(((0.056092)*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1242=((0.035)*cj7);
IkReal x1243=((0.279642)*sj7);
IkReal x1244=(cj3*py);
IkReal x1245=(pz*sj4);
IkReal x1246=((0.279642)*cj7);
IkReal x1247=(cj4*pz);
IkReal x1248=((0.035)*sj7);
IkReal x1249=(px*sj3*sj4);
IkReal x1250=(cj4*px*sj3);
CheckValue<IkReal> x1251 = IKatan2WithCheck(IkReal(((0.006353240468)+(((-0.014336619476)*sj7))+(((-0.025)*x1249))+(((-0.025)*x1247))+(((0.025)*sj4*x1244))+(((-1.0)*sj4*x1242*x1244))+(((-1.0)*x1248*x1250))+(((-1.0)*x1243*x1249))+(((-1.0)*x1243*x1247))+(((-1.0)*x1246*x1250))+((cj4*x1244*x1248))+((cj4*x1244*x1246))+(((-0.275358)*x1250))+((x1242*x1247))+((x1242*x1249))+(((0.275358)*x1245))+((x1245*x1246))+((x1245*x1248))+(((0.009760069532)*cj7))+((sj4*x1243*x1244))+(((0.275358)*cj4*x1244)))),IkReal(((-0.015784710524)+(((-0.025)*cj4*x1244))+(((-0.025)*x1245))+(((-1.0)*x1242*x1250))+((x1243*x1250))+(((-0.275358)*x1249))+(((-0.275358)*x1247))+(((-1.0)*x1243*x1245))+(((0.275358)*sj4*x1244))+((sj4*x1244*x1246))+((sj4*x1244*x1248))+(((-1.0)*cj4*x1243*x1244))+((x1242*x1245))+((cj4*x1242*x1244))+(((0.025)*x1250))+(((-1.0)*x1248*x1249))+(((-1.0)*x1246*x1247))+(((-1.0)*x1246*x1249))+(((-1.0)*x1247*x1248))+(((-0.014336619476)*cj7))+(((-0.009760069532)*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1251.valid){
continue;
}
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(IKsign(((0.155871676328)+(((0.152253323672)*cj7))+(((0.03325716)*sj7)))),-1);
if(!x1252.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1251.value)+(((1.5707963267949)*(x1252.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1253=IKsin(j5);
IkReal x1254=IKcos(j5);
IkReal x1255=(pz*sj4);
IkReal x1256=((0.279642)*cj7);
IkReal x1257=((0.035)*sj7);
IkReal x1258=(cj4*pz);
IkReal x1259=((0.279642)*sj7);
IkReal x1260=((0.035)*cj7);
IkReal x1261=(cj4*px*sj3);
IkReal x1262=((1.0)*x1253);
IkReal x1263=(cj3*py*sj4);
IkReal x1264=((0.05)*x1253);
IkReal x1265=(cj3*cj4*py);
IkReal x1266=((0.550716)*x1253);
IkReal x1267=(px*sj3*sj4);
IkReal x1268=((1.0)*x1254);
IkReal x1269=((0.550716)*x1254);
IkReal x1270=((0.05)*x1254);
evalcond[0]=((-0.028046)+x1261+(((0.275358)*x1253))+(((-0.025)*x1254))+((x1253*x1257))+((x1253*x1256))+((x1254*x1260))+(((-1.0)*x1254*x1259))+(((-1.0)*x1265))+(((-1.0)*x1255)));
evalcond[1]=((-0.054778)+x1263+(((-1.0)*x1253*x1259))+((x1253*x1260))+(((-0.025)*x1253))+(((-1.0)*x1254*x1257))+(((-1.0)*x1254*x1256))+(((-0.275358)*x1254))+(((-1.0)*x1267))+(((-1.0)*x1258)));
evalcond[2]=((0.025)+(((0.054778)*x1253))+x1259+(((-1.0)*x1261*x1268))+(((0.028046)*x1254))+((x1253*x1267))+(((-1.0)*x1262*x1263))+((x1253*x1258))+((x1254*x1265))+((x1254*x1255))+(((-1.0)*x1260)));
evalcond[3]=((-0.275358)+(((-1.0)*x1257))+(((-1.0)*x1256))+(((-1.0)*x1258*x1268))+(((-0.054778)*x1254))+(((-1.0)*x1261*x1262))+(((0.028046)*x1253))+(((-1.0)*x1267*x1268))+((x1253*x1265))+((x1253*x1255))+((x1254*x1263)));
evalcond[4]=((-0.0008095874)+(((-1.0)*x1258*x1264))+(((-1.0)*x1258*x1269))+(((-1.0)*x1264*x1267))+(((-1.0)*(px*px)))+(((-0.056092)*x1265))+(((-1.0)*x1261*x1266))+(((-0.056092)*x1255))+(((-1.0)*x1255*x1270))+((x1261*x1270))+(((-1.0)*x1267*x1269))+(((0.012706480936)*x1253))+((x1255*x1266))+(((-1.0)*(pz*pz)))+(((0.056092)*x1261))+((x1263*x1264))+((x1263*x1269))+(((-1.0)*x1265*x1270))+(((-0.109556)*x1267))+(((-1.0)*(py*py)))+(((-0.109556)*x1258))+(((0.109556)*x1263))+((x1265*x1266))+(((-0.031569421048)*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal(((((-0.550716)*cj3*sj3*sj4*sj6*(py*py)))+(((0.112184)*cj3*cj4*cj6*py*pz*sj4))+(((0.008579767576)*cj4*cj6*pz))+(((0.109556)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((0.109556)*cj4*cj6*sj4*(pz*pz)))+(((-0.056092)*cj6*(cj4*cj4)*(pz*pz)))+(((0.029606201048)*cj3*px*sj6))+(((-0.02)*py*pz*sj3*sj4*sj6))+(((-0.109556)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.550716)*cj3*sj3*sj4*sj6*(px*px)))+(((0.056092)*cj6*(cj4*cj4)*(px*px)))+(((-1.0)*cj4*cj6*sj3*(px*px*px)))+(((-0.112184)*cj4*cj6*px*pz*sj3*sj4))+(((-1.101432)*px*py*sj4*sj6*(cj3*cj3)))+(((-1.0)*cj4*cj6*px*sj3*(py*py)))+(((0.07)*cj4*px*py))+(((-0.02)*cj3*cj4*sj3*sj6*(py*py)))+(((0.550716)*cj3*cj4*px*pz*sj6))+(((0.219112)*cj3*cj6*py*pz*(cj4*cj4)))+(((-0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((-0.04)*cj4*px*py*sj6*(cj3*cj3)))+(((-0.112184)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((0.002882743632)*cj3*cj4*cj6*py))+(((0.084138)*cj6*(pz*pz)))+((cj6*sj4*(pz*pz*pz)))+(((0.02)*cj3*cj4*sj3*sj6*(px*px)))+(((-0.109556)*cj4*cj6*sj4*(px*px)))+(((0.109556)*cj6*px*pz*sj3))+((cj6*pz*sj4*(py*py)))+(((-0.109556)*cj3*cj6*py*pz))+(((0.008579767576)*cj6*px*sj3*sj4))+(((0.029606201048)*py*sj3*sj6))+(((-0.00196322)*py*sj3))+((cj3*cj4*cj6*py*(px*px)))+(((-0.07)*py*pz*sj3*sj4))+((cj3*cj4*cj6*py*(pz*pz)))+(((0.028046)*cj6*(px*px)))+(((-0.002882743632)*cj4*cj6*px*sj3))+(((0.0003383998987004)*cj6))+(((-0.219112)*cj6*px*pz*sj3*(cj4*cj4)))+(((-0.008579767576)*cj3*cj6*py*sj4))+(((0.028046)*cj6*(py*py)))+(((0.056092)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.07)*cj3*cj4*sj3*(px*px)))+(((0.219112)*cj3*cj4*cj6*px*py*sj3*sj4))+(((-0.14)*cj4*px*py*(cj3*cj3)))+(((0.002882743632)*cj6*pz*sj4))+((cj6*pz*sj4*(px*px)))+(((0.02)*cj4*px*py*sj6))+(((-1.0)*cj4*cj6*px*sj3*(pz*pz)))+(((0.550716)*px*py*sj4*sj6))+(((-0.07)*cj3*cj4*sj3*(py*py)))+(((0.550716)*cj4*py*pz*sj3*sj6))+(((-0.00196322)*cj3*px))+((cj3*cj4*cj6*(py*py*py)))+(((-0.07)*cj3*px*pz*sj4))+(((-0.02)*cj3*px*pz*sj4*sj6)))),IkReal(((((-0.14)*px*py*sj4*(cj3*cj3)))+(((-0.056092)*cj6*px*pz*sj3))+(((0.02)*cj4*py*pz*sj3*sj6))+(((0.109556)*cj6*(cj4*cj4)*(px*px)))+(((-0.054778)*cj6*(pz*pz)))+(((-1.0)*cj4*cj6*pz*(px*px)))+(((-0.109556)*cj6*(cj4*cj4)*(pz*pz)))+(((-0.056092)*cj4*cj6*sj4*(cj3*cj3)*(px*px)))+(((1.101432)*cj4*px*py*sj6*(cj3*cj3)))+(((0.056092)*cj4*cj6*sj4*(cj3*cj3)*(py*py)))+(((0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(py*py)))+(((0.02)*cj3*cj4*px*pz*sj6))+((cj3*cj6*py*sj4*(px*px)))+(((0.07)*cj3*cj4*px*pz))+(((-0.112184)*cj3*cj6*py*pz*(cj4*cj4)))+(((8.27172307628e-5)*cj6))+(((0.00383446)*py*sj3))+(((-0.007310845968)*cj6*px*sj3*sj4))+(((0.07)*cj4*py*pz*sj3))+(((0.00383446)*cj3*px))+(((-1.0)*cj6*sj3*sj4*(px*px*px)))+(((-0.07)*cj3*sj3*sj4*(py*py)))+(((-0.550716)*cj3*cj4*sj3*sj6*(px*px)))+(((0.219112)*cj3*cj4*cj6*py*pz*sj4))+(((-0.054778)*cj6*(py*py)))+(((0.056092)*cj4*cj6*sj4*(px*px)))+(((-0.04)*px*py*sj4*sj6*(cj3*cj3)))+((cj3*cj6*py*sj4*(pz*pz)))+(((-0.109556)*cj6*(cj3*cj3)*(py*py)))+(((0.112184)*cj6*px*pz*sj3*(cj4*cj4)))+(((-1.0)*cj4*cj6*pz*(py*py)))+(((0.07)*cj3*sj3*sj4*(px*px)))+(((0.02)*cj3*sj3*sj4*sj6*(px*px)))+(((-1.0)*cj4*cj6*(pz*pz*pz)))+(((0.056092)*cj3*cj6*py*pz))+(((-0.056092)*cj4*cj6*sj4*(pz*pz)))+(((-0.002434552424)*cj4*cj6*px*sj3))+((cj3*cj6*sj4*(py*py*py)))+(((-0.007310845968)*cj4*cj6*pz))+(((0.550716)*py*pz*sj3*sj4*sj6))+(((-0.164334)*cj6*(px*px)))+(((0.109556)*cj6*(cj3*cj3)*(px*px)))+(((0.02)*px*py*sj4*sj6))+(((-1.0)*cj6*px*sj3*sj4*(py*py)))+(((0.07)*px*py*sj4))+(((-1.0)*cj6*px*sj3*sj4*(pz*pz)))+(((0.016540940936)*cj3*px*sj6))+(((-0.219112)*cj4*cj6*px*pz*sj3*sj4))+(((0.219112)*cj3*cj6*px*py*sj3))+(((-0.02)*cj3*sj3*sj4*sj6*(py*py)))+(((-0.550716)*cj4*px*py*sj6))+(((0.002434552424)*cj3*cj4*cj6*py))+(((0.016540940936)*py*sj3*sj6))+(((0.002434552424)*cj6*pz*sj4))+(((0.550716)*cj3*cj4*sj3*sj6*(py*py)))+(((0.007310845968)*cj3*cj6*py*sj4))+(((-0.112184)*cj3*cj4*cj6*px*py*sj3*sj4))+(((-0.219112)*cj3*cj6*px*py*sj3*(cj4*cj4)))+(((-0.109556)*cj6*(cj3*cj3)*(cj4*cj4)*(px*px)))+(((0.550716)*cj3*px*pz*sj4*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign(((((0.030890761872)*cj6*pz*sj4))+(((-1.101432)*cj3*cj6*px*py*sj3))+(((0.030890761872)*cj3*cj4*cj6*py))+(((0.550716)*cj6*(cj3*cj3)*(py*py)))+(((0.550716)*cj6*(pz*pz)))+(((-0.550716)*cj6*(cj3*cj3)*(px*px)))+(((-0.030890761872)*cj4*cj6*px*sj3))+(((0.0020856757104984)*cj6))+(((-0.060334242096)*cj3*cj6*py*sj4))+(((0.060334242096)*cj4*cj6*pz))+(((0.550716)*cj6*(px*px)))+(((0.060334242096)*cj6*px*sj3*sj4)))),-1);
if(!x1272.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1271.value)+(((1.5707963267949)*(x1272.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1273=IKsin(j5);
IkReal x1274=IKcos(j5);
IkReal x1275=(px*sj3);
IkReal x1276=(pz*sj4);
IkReal x1277=(cj3*py);
IkReal x1278=((0.07)*sj6);
IkReal x1279=(py*sj3);
IkReal x1280=((1.0)*sj6);
IkReal x1281=((0.056092)*cj4);
IkReal x1282=((0.07)*cj6);
IkReal x1283=(cj3*px);
IkReal x1284=((0.109556)*sj4);
IkReal x1285=((0.550716)*pz);
IkReal x1286=(cj6*x1275);
IkReal x1287=(cj4*x1274);
IkReal x1288=(sj4*x1273);
IkReal x1289=(cj6*x1274);
IkReal x1290=(cj4*x1273);
IkReal x1291=((0.550716)*sj4*x1274);
evalcond[0]=((((0.054778)*cj6*x1273))+(((-0.01)*cj6))+(((-1.0)*cj6*x1277*x1288))+(((-1.0)*x1286*x1287))+((cj6*x1277*x1287))+((x1276*x1289))+((x1286*x1288))+(((0.028046)*x1289))+(((-1.0)*x1279*x1280))+((cj6*pz*x1290))+(((-1.0)*x1280*x1283)));
evalcond[1]=((-0.0015095874)+((x1275*x1278*x1288))+(((-0.056092)*x1276))+(((0.02)*x1277*x1287))+(((-1.0)*(px*px)))+(((0.02)*x1274*x1276))+(((-0.029606201048)*x1274))+((x1279*x1282))+(((0.00196322)*sj6*x1274))+(((-1.0)*x1285*x1287))+((x1274*x1276*x1278))+(((0.550716)*x1273*x1276))+(((-1.0)*x1275*x1284))+(((-1.0)*x1277*x1278*x1288))+(((-1.0)*x1275*x1278*x1287))+(((0.00383446)*sj6*x1273))+((x1275*x1281))+(((-1.0)*x1277*x1281))+(((-0.0007)*sj6))+((x1277*x1284))+(((-0.109556)*cj4*pz))+(((0.016540940936)*x1273))+(((-1.0)*(pz*pz)))+(((0.02)*pz*x1290))+((x1282*x1283))+(((-0.550716)*x1275*x1290))+(((-0.02)*x1275*x1287))+(((0.550716)*x1277*x1290))+((pz*x1278*x1290))+(((-1.0)*x1275*x1291))+(((-1.0)*(py*py)))+((x1277*x1278*x1287))+(((0.02)*x1275*x1288))+(((-0.02)*x1277*x1288))+((x1277*x1291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[2];
IkReal x1292=(cj6*sj5);
j7eval[0]=x1292;
j7eval[1]=IKsign(x1292);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1293=(cj5*cj6);
j7eval[0]=x1293;
j7eval[1]=IKsign(x1293);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1294=(cj4*cj5);
IkReal x1295=((3.52084656922346)*pz);
IkReal x1296=(cj3*py);
IkReal x1297=(px*sj3);
IkReal x1298=((3.52084656922346)*sj5);
IkReal x1299=(cj5*sj4);
IkReal x1300=((0.440669248263212)*pz);
IkReal x1301=(cj4*sj5);
IkReal x1302=((0.440669248263212)*sj4*sj5);
if( IKabs(((-0.279779898478317)+(((0.440669248263212)*x1296*x1301))+(((-3.52084656922346)*x1294*x1297))+((x1295*x1299))+((sj4*sj5*x1300))+((x1295*x1301))+(((0.205223943105713)*sj5))+(((-0.440669248263212)*x1297*x1301))+((sj4*x1297*x1298))+(((-1.0)*x1294*x1300))+(((-1.0)*sj4*x1296*x1298))+(((0.074606682799079)*cj5))+(((0.440669248263212)*x1296*x1299))+(((-0.440669248263212)*x1297*x1299))+(((3.52084656922346)*x1294*x1296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.94966315343639)+(((0.074606682799079)*sj5))+((cj4*x1296*x1298))+(((-1.0)*x1299*x1300))+(((-1.0)*x1300*x1301))+(((-1.0)*x1297*x1302))+((sj4*sj5*x1295))+(((-1.0)*cj4*x1297*x1298))+(((-0.205223943105713)*cj5))+((x1296*x1302))+(((-1.0)*x1294*x1295))+(((-3.52084656922346)*x1297*x1299))+(((-0.440669248263212)*x1294*x1296))+(((3.52084656922346)*x1296*x1299))+(((0.440669248263212)*x1294*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.279779898478317)+(((0.440669248263212)*x1296*x1301))+(((-3.52084656922346)*x1294*x1297))+((x1295*x1299))+((sj4*sj5*x1300))+((x1295*x1301))+(((0.205223943105713)*sj5))+(((-0.440669248263212)*x1297*x1301))+((sj4*x1297*x1298))+(((-1.0)*x1294*x1300))+(((-1.0)*sj4*x1296*x1298))+(((0.074606682799079)*cj5))+(((0.440669248263212)*x1296*x1299))+(((-0.440669248263212)*x1297*x1299))+(((3.52084656922346)*x1294*x1296))))+IKsqr(((-0.94966315343639)+(((0.074606682799079)*sj5))+((cj4*x1296*x1298))+(((-1.0)*x1299*x1300))+(((-1.0)*x1300*x1301))+(((-1.0)*x1297*x1302))+((sj4*sj5*x1295))+(((-1.0)*cj4*x1297*x1298))+(((-0.205223943105713)*cj5))+((x1296*x1302))+(((-1.0)*x1294*x1295))+(((-3.52084656922346)*x1297*x1299))+(((-0.440669248263212)*x1294*x1296))+(((3.52084656922346)*x1296*x1299))+(((0.440669248263212)*x1294*x1297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-0.279779898478317)+(((0.440669248263212)*x1296*x1301))+(((-3.52084656922346)*x1294*x1297))+((x1295*x1299))+((sj4*sj5*x1300))+((x1295*x1301))+(((0.205223943105713)*sj5))+(((-0.440669248263212)*x1297*x1301))+((sj4*x1297*x1298))+(((-1.0)*x1294*x1300))+(((-1.0)*sj4*x1296*x1298))+(((0.074606682799079)*cj5))+(((0.440669248263212)*x1296*x1299))+(((-0.440669248263212)*x1297*x1299))+(((3.52084656922346)*x1294*x1296))), ((-0.94966315343639)+(((0.074606682799079)*sj5))+((cj4*x1296*x1298))+(((-1.0)*x1299*x1300))+(((-1.0)*x1300*x1301))+(((-1.0)*x1297*x1302))+((sj4*sj5*x1295))+(((-1.0)*cj4*x1297*x1298))+(((-0.205223943105713)*cj5))+((x1296*x1302))+(((-1.0)*x1294*x1295))+(((-3.52084656922346)*x1297*x1299))+(((-0.440669248263212)*x1294*x1296))+(((3.52084656922346)*x1296*x1299))+(((0.440669248263212)*x1294*x1297))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1303=IKsin(j7);
IkReal x1304=IKcos(j7);
IkReal x1305=(pz*sj4);
IkReal x1306=(px*sj3);
IkReal x1307=((0.035)*sj5);
IkReal x1308=((1.0)*sj4);
IkReal x1309=((0.279642)*sj5);
IkReal x1310=((0.056092)*cj4);
IkReal x1311=(cj4*cj5);
IkReal x1312=((0.035)*cj5);
IkReal x1313=(cj4*sj5);
IkReal x1314=(cj3*py);
IkReal x1315=(sj4*x1314);
IkReal x1316=((1.0)*cj4*pz);
IkReal x1317=((0.279642)*x1304);
IkReal x1318=((0.279642)*x1303);
evalcond[0]=((0.153484468928)+(((0.109556)*x1315))+(((-0.056092)*x1305))+((x1306*x1310))+(((-0.109556)*sj4*x1306))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))+(((-1.0)*x1310*x1314))+(((0.04444284)*x1303))+(((0.150853323672)*x1304)));
evalcond[1]=((-0.028046)+(((-1.0)*x1304*x1312))+((cj5*x1318))+(((0.045)*cj5))+(((-1.0)*x1305))+((cj4*x1306))+(((0.275358)*sj5))+((x1303*x1307))+((x1304*x1309))+(((-1.0)*cj4*x1314)));
evalcond[2]=((-0.054778)+x1315+(((-1.0)*x1306*x1308))+(((-1.0)*x1316))+(((0.045)*sj5))+(((-1.0)*cj5*x1317))+((x1303*x1309))+(((-1.0)*x1303*x1312))+(((-0.275358)*cj5))+(((-1.0)*x1304*x1307)));
evalcond[3]=((-0.275358)+((sj5*x1305))+((cj5*x1315))+((x1313*x1314))+(((-0.054778)*cj5))+(((-1.0)*x1317))+(((-1.0)*x1306*x1313))+(((-1.0)*pz*x1311))+(((0.028046)*sj5))+(((-1.0)*cj5*x1306*x1308))+(((-0.035)*x1303)));
evalcond[4]=((0.045)+x1318+(((-1.0)*cj5*x1305))+((sj5*x1315))+((x1306*x1311))+(((-1.0)*pz*x1313))+(((-0.054778)*sj5))+(((-0.035)*x1304))+(((-1.0)*x1311*x1314))+(((-1.0)*sj5*x1306*x1308))+(((-0.028046)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1319=(cj4*cj5);
IkReal x1320=((3.52084656922346)*pz);
IkReal x1321=(cj3*py);
IkReal x1322=(px*sj3);
IkReal x1323=((3.52084656922346)*sj5);
IkReal x1324=(cj5*sj4);
IkReal x1325=((0.440669248263212)*pz);
IkReal x1326=(cj4*sj5);
IkReal x1327=((0.440669248263212)*sj4*sj5);
if( IKabs(((-0.209362967093848)+(((0.440669248263212)*x1321*x1324))+(((0.440669248263212)*x1321*x1326))+(((-0.440669248263212)*x1322*x1326))+(((-0.440669248263212)*x1322*x1324))+(((-1.0)*x1319*x1325))+(((3.52084656922346)*x1319*x1322))+(((-1.0)*sj4*x1322*x1323))+(((-3.52084656922346)*x1319*x1321))+((sj4*sj5*x1325))+((sj4*x1321*x1323))+(((-0.122884642961803)*cj5))+(((-0.180505923632133)*sj5))+(((-1.0)*x1320*x1326))+(((-1.0)*x1320*x1324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.958476538401654)+((cj4*x1321*x1323))+(((-1.0)*x1319*x1320))+(((-0.180505923632133)*cj5))+((x1322*x1327))+((x1324*x1325))+(((0.440669248263212)*x1319*x1321))+(((-0.440669248263212)*x1319*x1322))+((sj4*sj5*x1320))+(((-1.0)*x1321*x1327))+(((0.122884642961803)*sj5))+((x1325*x1326))+(((-3.52084656922346)*x1322*x1324))+(((3.52084656922346)*x1321*x1324))+(((-1.0)*cj4*x1322*x1323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.209362967093848)+(((0.440669248263212)*x1321*x1324))+(((0.440669248263212)*x1321*x1326))+(((-0.440669248263212)*x1322*x1326))+(((-0.440669248263212)*x1322*x1324))+(((-1.0)*x1319*x1325))+(((3.52084656922346)*x1319*x1322))+(((-1.0)*sj4*x1322*x1323))+(((-3.52084656922346)*x1319*x1321))+((sj4*sj5*x1325))+((sj4*x1321*x1323))+(((-0.122884642961803)*cj5))+(((-0.180505923632133)*sj5))+(((-1.0)*x1320*x1326))+(((-1.0)*x1320*x1324))))+IKsqr(((-0.958476538401654)+((cj4*x1321*x1323))+(((-1.0)*x1319*x1320))+(((-0.180505923632133)*cj5))+((x1322*x1327))+((x1324*x1325))+(((0.440669248263212)*x1319*x1321))+(((-0.440669248263212)*x1319*x1322))+((sj4*sj5*x1320))+(((-1.0)*x1321*x1327))+(((0.122884642961803)*sj5))+((x1325*x1326))+(((-3.52084656922346)*x1322*x1324))+(((3.52084656922346)*x1321*x1324))+(((-1.0)*cj4*x1322*x1323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-0.209362967093848)+(((0.440669248263212)*x1321*x1324))+(((0.440669248263212)*x1321*x1326))+(((-0.440669248263212)*x1322*x1326))+(((-0.440669248263212)*x1322*x1324))+(((-1.0)*x1319*x1325))+(((3.52084656922346)*x1319*x1322))+(((-1.0)*sj4*x1322*x1323))+(((-3.52084656922346)*x1319*x1321))+((sj4*sj5*x1325))+((sj4*x1321*x1323))+(((-0.122884642961803)*cj5))+(((-0.180505923632133)*sj5))+(((-1.0)*x1320*x1326))+(((-1.0)*x1320*x1324))), ((-0.958476538401654)+((cj4*x1321*x1323))+(((-1.0)*x1319*x1320))+(((-0.180505923632133)*cj5))+((x1322*x1327))+((x1324*x1325))+(((0.440669248263212)*x1319*x1321))+(((-0.440669248263212)*x1319*x1322))+((sj4*sj5*x1320))+(((-1.0)*x1321*x1327))+(((0.122884642961803)*sj5))+((x1325*x1326))+(((-3.52084656922346)*x1322*x1324))+(((3.52084656922346)*x1321*x1324))+(((-1.0)*cj4*x1322*x1323))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1328=IKcos(j7);
IkReal x1329=IKsin(j7);
IkReal x1330=(pz*sj4);
IkReal x1331=(px*sj3);
IkReal x1332=(cj3*py);
IkReal x1333=((1.0)*sj4);
IkReal x1334=((0.056092)*cj4);
IkReal x1335=((0.035)*cj5);
IkReal x1336=(cj4*pz);
IkReal x1337=(cj4*sj5);
IkReal x1338=((0.109556)*sj4);
IkReal x1339=(cj4*cj5);
IkReal x1340=(sj5*x1329);
IkReal x1341=((1.0)*x1336);
IkReal x1342=((0.279642)*x1328);
IkReal x1343=((0.279642)*x1329);
IkReal x1344=((0.035)*x1328);
evalcond[0]=((0.152084468928)+((x1331*x1334))+(((-1.0)*pp))+(((0.152253323672)*x1328))+(((-1.0)*x1331*x1338))+(((-1.0)*x1332*x1334))+(((-0.056092)*x1330))+((x1332*x1338))+(((-0.109556)*x1336))+(((0.03325716)*x1329)));
evalcond[1]=((-0.028046)+((cj4*x1331))+(((-0.025)*cj5))+(((-1.0)*cj4*x1332))+(((-1.0)*x1330))+(((0.275358)*sj5))+((x1328*x1335))+((sj5*x1342))+(((-1.0)*cj5*x1343))+(((0.035)*x1340)));
evalcond[2]=((-0.054778)+((sj4*x1332))+(((-0.279642)*x1340))+(((-0.025)*sj5))+(((-1.0)*x1341))+(((-1.0)*x1329*x1335))+(((-1.0)*x1331*x1333))+((sj5*x1344))+(((-1.0)*cj5*x1342))+(((-0.275358)*cj5)));
evalcond[3]=((0.025)+x1343+(((-1.0)*x1344))+((sj4*sj5*x1331))+((sj5*x1336))+(((0.054778)*sj5))+(((0.028046)*cj5))+(((-1.0)*sj5*x1332*x1333))+(((-1.0)*x1331*x1339))+((cj5*x1330))+((x1332*x1339)));
evalcond[4]=((-0.275358)+((cj5*sj4*x1332))+(((-0.054778)*cj5))+(((-1.0)*x1342))+(((0.028046)*sj5))+((sj5*x1330))+(((-0.035)*x1329))+(((-1.0)*x1331*x1337))+(((-1.0)*cj5*x1341))+((x1332*x1337))+(((-1.0)*cj5*x1331*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1345=((3.52084656922346)*pz);
IkReal x1346=(cj3*py);
IkReal x1347=((3.52084656922346)*cj4);
IkReal x1348=(sj4*sj6);
IkReal x1349=(px*sj3);
IkReal x1350=(cj4*sj6);
IkReal x1351=((0.440669248263212)*cj6);
IkReal x1352=(py*sj3);
IkReal x1353=((0.440669248263212)*cj4);
IkReal x1354=(cj3*px);
IkReal x1355=((3.52084656922346)*cj6);
IkReal x1356=((0.440669248263212)*pz);
if( IKabs(((-0.232212423049293)+((x1345*x1350))+((sj4*x1356))+(((-3.52084656922346)*x1346*x1348))+((x1354*x1355))+(((0.157656467676688)*sj6))+((x1346*x1353))+(((-1.0)*x1349*x1353))+(((3.52084656922346)*x1348*x1349))+((x1352*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.855324183038581)+(((-0.0197322875987301)*sj6))+(((0.440669248263212)*x1346*x1348))+(((-1.0)*x1347*x1349))+((sj4*x1345))+(((-1.0)*x1350*x1356))+((x1346*x1347))+(((-0.440669248263212)*x1348*x1349))+(((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.232212423049293)+((x1345*x1350))+((sj4*x1356))+(((-3.52084656922346)*x1346*x1348))+((x1354*x1355))+(((0.157656467676688)*sj6))+((x1346*x1353))+(((-1.0)*x1349*x1353))+(((3.52084656922346)*x1348*x1349))+((x1352*x1355))))+IKsqr(((-0.855324183038581)+(((-0.0197322875987301)*sj6))+(((0.440669248263212)*x1346*x1348))+(((-1.0)*x1347*x1349))+((sj4*x1345))+(((-1.0)*x1350*x1356))+((x1346*x1347))+(((-0.440669248263212)*x1348*x1349))+(((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-0.232212423049293)+((x1345*x1350))+((sj4*x1356))+(((-3.52084656922346)*x1346*x1348))+((x1354*x1355))+(((0.157656467676688)*sj6))+((x1346*x1353))+(((-1.0)*x1349*x1353))+(((3.52084656922346)*x1348*x1349))+((x1352*x1355))), ((-0.855324183038581)+(((-0.0197322875987301)*sj6))+(((0.440669248263212)*x1346*x1348))+(((-1.0)*x1347*x1349))+((sj4*x1345))+(((-1.0)*x1350*x1356))+((x1346*x1347))+(((-0.440669248263212)*x1348*x1349))+(((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1354))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1357=IKsin(j7);
IkReal x1358=IKcos(j7);
IkReal x1359=(pz*sj4);
IkReal x1360=((0.0007)*sj6);
IkReal x1361=(cj4*pz);
IkReal x1362=((0.035)*cj6);
IkReal x1363=((1.0)*px);
IkReal x1364=(sj3*sj4);
IkReal x1365=(cj4*px*sj3);
IkReal x1366=(cj3*py*sj4);
IkReal x1367=((0.279642)*x1357);
IkReal x1368=((1.0)*py*sj3);
IkReal x1369=((0.035)*x1358);
IkReal x1370=(cj3*cj4*py);
evalcond[0]=(x1362+(((-1.0)*cj3*x1363))+((cj6*x1367))+(((-1.0)*x1368))+(((-1.0)*x1358*x1362)));
evalcond[1]=((0.247312)+x1365+(((-1.0)*x1359))+(((-1.0)*x1370))+(((0.279642)*x1358))+(((0.035)*x1357)));
evalcond[2]=((-0.044778)+x1366+(((-1.0)*x1361))+(((-1.0)*sj6*x1369))+(((-1.0)*x1363*x1364))+((sj6*x1367))+(((0.035)*sj6)));
evalcond[3]=((0.035)+x1367+(((-1.0)*cj3*cj6*x1363))+(((-0.044778)*sj6))+(((-1.0)*sj6*x1361))+(((-1.0)*cj6*x1368))+(((-1.0)*sj6*x1363*x1364))+((sj6*x1366))+(((-1.0)*x1369)));
evalcond[4]=((0.152784468928)+(((-0.109556)*px*x1364))+x1360+(((0.151553323672)*x1358))+(((0.00559284)*sj6*x1357))+(((-0.056092)*x1359))+(((0.109556)*x1366))+(((-0.109556)*x1361))+(((-0.056092)*x1370))+(((-1.0)*pp))+(((0.056092)*x1365))+(((0.03885)*x1357))+(((-1.0)*x1358*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1371=((3.52084656922346)*pz);
IkReal x1372=(cj3*py);
IkReal x1373=((3.52084656922346)*cj4);
IkReal x1374=(sj4*sj6);
IkReal x1375=(px*sj3);
IkReal x1376=(cj4*sj6);
IkReal x1377=((0.440669248263212)*cj6);
IkReal x1378=(py*sj3);
IkReal x1379=((0.440669248263212)*cj4);
IkReal x1380=(cj3*px);
IkReal x1381=((0.440669248263212)*pz);
IkReal x1382=((3.52084656922346)*cj6);
if( IKabs(((-0.256930442522873)+((x1380*x1382))+(((-0.228073399061157)*sj6))+((x1375*x1379))+(((-1.0)*sj4*x1381))+(((-1.0)*x1371*x1376))+(((-1.0)*x1372*x1379))+(((3.52084656922346)*x1372*x1374))+(((-3.52084656922346)*x1374*x1375))+((x1378*x1382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.05281550879946)+(((-0.440669248263212)*x1372*x1374))+(((0.0285456725639944)*sj6))+(((-1.0)*x1377*x1380))+(((-1.0)*x1372*x1373))+((x1376*x1381))+(((-1.0)*x1377*x1378))+(((-1.0)*sj4*x1371))+(((0.440669248263212)*x1374*x1375))+((x1373*x1375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.256930442522873)+((x1380*x1382))+(((-0.228073399061157)*sj6))+((x1375*x1379))+(((-1.0)*sj4*x1381))+(((-1.0)*x1371*x1376))+(((-1.0)*x1372*x1379))+(((3.52084656922346)*x1372*x1374))+(((-3.52084656922346)*x1374*x1375))+((x1378*x1382))))+IKsqr(((-1.05281550879946)+(((-0.440669248263212)*x1372*x1374))+(((0.0285456725639944)*sj6))+(((-1.0)*x1377*x1380))+(((-1.0)*x1372*x1373))+((x1376*x1381))+(((-1.0)*x1377*x1378))+(((-1.0)*sj4*x1371))+(((0.440669248263212)*x1374*x1375))+((x1373*x1375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-0.256930442522873)+((x1380*x1382))+(((-0.228073399061157)*sj6))+((x1375*x1379))+(((-1.0)*sj4*x1381))+(((-1.0)*x1371*x1376))+(((-1.0)*x1372*x1379))+(((3.52084656922346)*x1372*x1374))+(((-3.52084656922346)*x1374*x1375))+((x1378*x1382))), ((-1.05281550879946)+(((-0.440669248263212)*x1372*x1374))+(((0.0285456725639944)*sj6))+(((-1.0)*x1377*x1380))+(((-1.0)*x1372*x1373))+((x1376*x1381))+(((-1.0)*x1377*x1378))+(((-1.0)*sj4*x1371))+(((0.440669248263212)*x1374*x1375))+((x1373*x1375))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1383=IKsin(j7);
IkReal x1384=IKcos(j7);
IkReal x1385=(pz*sj4);
IkReal x1386=(px*sj3);
IkReal x1387=((0.0007)*sj6);
IkReal x1388=(cj4*pz);
IkReal x1389=((0.035)*cj6);
IkReal x1390=((1.0)*cj3);
IkReal x1391=((0.056092)*cj4);
IkReal x1392=(cj3*py*sj4);
IkReal x1393=((0.279642)*x1383);
IkReal x1394=((1.0)*py*sj3);
IkReal x1395=((0.035)*x1384);
evalcond[0]=(x1389+(((-1.0)*x1384*x1389))+((cj6*x1393))+(((-1.0)*px*x1390))+(((-1.0)*x1394)));
evalcond[1]=((-0.303404)+(((-1.0)*cj4*py*x1390))+(((-0.035)*x1383))+(((-0.279642)*x1384))+((cj4*x1386))+(((-1.0)*x1385)));
evalcond[2]=((-0.064778)+x1392+(((-1.0)*sj6*x1393))+(((-0.035)*sj6))+((sj6*x1395))+(((-1.0)*x1388))+(((-1.0)*sj4*x1386)));
evalcond[3]=((0.035)+x1393+(((-1.0)*py*sj4*sj6*x1390))+(((0.064778)*sj6))+(((-1.0)*cj6*px*x1390))+((sj6*x1388))+(((-1.0)*cj6*x1394))+((sj4*sj6*x1386))+(((-1.0)*x1395)));
evalcond[4]=((0.152784468928)+x1387+(((-1.0)*x1384*x1387))+(((-0.056092)*x1385))+(((-1.0)*cj3*py*x1391))+(((-1.0)*pp))+(((0.109556)*x1392))+(((-0.109556)*x1388))+(((0.00559284)*sj6*x1383))+(((-0.109556)*sj4*x1386))+((x1386*x1391))+(((0.151553323672)*x1384))+(((0.03885)*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1396=((0.440669248263212)*cj4);
IkReal x1397=((0.440669248263212)*cj6);
IkReal x1398=(py*sj3);
IkReal x1399=((0.440669248263212)*sj4);
IkReal x1400=(pz*sj6);
IkReal x1401=(cj3*px);
IkReal x1402=((3.52084656922346)*cj4);
IkReal x1403=(cj3*py);
IkReal x1404=((3.52084656922346)*sj4);
IkReal x1405=((3.52084656922346)*cj6);
IkReal x1406=(px*sj3);
IkReal x1407=(sj6*x1403);
IkReal x1408=(sj6*x1406);
if( IKabs(((-0.268710412867445)+(((-1.0)*x1399*x1406))+(((-1.0)*x1402*x1408))+((x1399*x1403))+((x1398*x1405))+((x1402*x1407))+((x1401*x1405))+((x1400*x1404))+(((-1.0)*pz*x1396))+(((0.0635371971882066)*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14693477928794)+(((-1.0)*x1399*x1400))+(((-1.0)*x1397*x1398))+((x1396*x1408))+(((-1.0)*x1404*x1406))+((x1403*x1404))+(((-1.0)*x1396*x1407))+(((-1.0)*pz*x1402))+(((-0.00795231725415793)*sj6))+(((-1.0)*x1397*x1401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.268710412867445)+(((-1.0)*x1399*x1406))+(((-1.0)*x1402*x1408))+((x1399*x1403))+((x1398*x1405))+((x1402*x1407))+((x1401*x1405))+((x1400*x1404))+(((-1.0)*pz*x1396))+(((0.0635371971882066)*sj6))))+IKsqr(((-1.14693477928794)+(((-1.0)*x1399*x1400))+(((-1.0)*x1397*x1398))+((x1396*x1408))+(((-1.0)*x1404*x1406))+((x1403*x1404))+(((-1.0)*x1396*x1407))+(((-1.0)*pz*x1402))+(((-0.00795231725415793)*sj6))+(((-1.0)*x1397*x1401))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-0.268710412867445)+(((-1.0)*x1399*x1406))+(((-1.0)*x1402*x1408))+((x1399*x1403))+((x1398*x1405))+((x1402*x1407))+((x1401*x1405))+((x1400*x1404))+(((-1.0)*pz*x1396))+(((0.0635371971882066)*sj6))), ((-1.14693477928794)+(((-1.0)*x1399*x1400))+(((-1.0)*x1397*x1398))+((x1396*x1408))+(((-1.0)*x1404*x1406))+((x1403*x1404))+(((-1.0)*x1396*x1407))+(((-1.0)*pz*x1402))+(((-0.00795231725415793)*sj6))+(((-1.0)*x1397*x1401))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1409=IKsin(j7);
IkReal x1410=IKcos(j7);
IkReal x1411=(pz*sj4);
IkReal x1412=((0.0007)*sj6);
IkReal x1413=(cj3*py);
IkReal x1414=((1.0)*cj4);
IkReal x1415=((0.035)*cj6);
IkReal x1416=((1.0)*px);
IkReal x1417=(sj3*sj4);
IkReal x1418=(cj4*px*sj3);
IkReal x1419=((0.279642)*x1409);
IkReal x1420=((1.0)*py*sj3);
IkReal x1421=((0.035)*x1410);
evalcond[0]=(((cj6*x1419))+(((-1.0)*cj3*x1416))+(((-1.0)*x1410*x1415))+x1415+(((-1.0)*x1420)));
evalcond[1]=((-0.330136)+(((-1.0)*x1416*x1417))+((sj4*x1413))+(((-0.035)*x1409))+(((-1.0)*pz*x1414))+(((-0.279642)*x1410)));
evalcond[2]=((-0.018046)+(((-1.0)*x1413*x1414))+(((-1.0)*sj6*x1421))+((sj6*x1419))+x1418+(((-1.0)*x1411))+(((0.035)*sj6)));
evalcond[3]=((0.035)+(((-1.0)*cj3*cj6*x1416))+(((-0.018046)*sj6))+((sj6*x1418))+(((-1.0)*cj6*x1420))+x1419+(((-1.0)*sj6*x1413*x1414))+(((-1.0)*x1421))+(((-1.0)*sj6*x1411)));
evalcond[4]=((0.152784468928)+(((0.056092)*x1418))+(((0.03885)*x1409))+(((0.109556)*sj4*x1413))+(((0.00559284)*sj6*x1409))+(((-1.0)*pp))+(((-0.056092)*x1411))+(((-0.056092)*cj4*x1413))+(((-0.109556)*cj4*pz))+(((-1.0)*x1410*x1412))+x1412+(((0.151553323672)*x1410))+(((-0.109556)*px*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1422=((0.440669248263212)*cj4);
IkReal x1423=((3.52084656922346)*pz);
IkReal x1424=((0.440669248263212)*cj6);
IkReal x1425=(py*sj3);
IkReal x1426=(sj4*sj6);
IkReal x1427=((3.52084656922346)*cj4);
IkReal x1428=(cj3*px);
IkReal x1429=((0.440669248263212)*sj4);
IkReal x1430=(cj3*py);
IkReal x1431=((3.52084656922346)*cj6);
IkReal x1432=(px*sj3);
IkReal x1433=((3.52084656922346)*sj4);
IkReal x1434=(sj6*x1430);
IkReal x1435=(sj6*x1432);
if( IKabs(((-0.220432452704721)+((x1429*x1432))+((x1428*x1431))+(((-0.133954128572676)*sj6))+(((-1.0)*x1429*x1430))+((x1427*x1435))+(((-1.0)*x1423*x1426))+((x1425*x1431))+(((-1.0)*x1427*x1434))+((pz*x1422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.761204912550099)+((x1432*x1433))+(((0.0167657022194222)*sj6))+(((-1.0)*x1422*x1435))+(((-1.0)*x1424*x1428))+(((-1.0)*x1424*x1425))+(((0.440669248263212)*pz*x1426))+((x1422*x1434))+((cj4*x1423))+(((-1.0)*x1430*x1433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.220432452704721)+((x1429*x1432))+((x1428*x1431))+(((-0.133954128572676)*sj6))+(((-1.0)*x1429*x1430))+((x1427*x1435))+(((-1.0)*x1423*x1426))+((x1425*x1431))+(((-1.0)*x1427*x1434))+((pz*x1422))))+IKsqr(((-0.761204912550099)+((x1432*x1433))+(((0.0167657022194222)*sj6))+(((-1.0)*x1422*x1435))+(((-1.0)*x1424*x1428))+(((-1.0)*x1424*x1425))+(((0.440669248263212)*pz*x1426))+((x1422*x1434))+((cj4*x1423))+(((-1.0)*x1430*x1433))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-0.220432452704721)+((x1429*x1432))+((x1428*x1431))+(((-0.133954128572676)*sj6))+(((-1.0)*x1429*x1430))+((x1427*x1435))+(((-1.0)*x1423*x1426))+((x1425*x1431))+(((-1.0)*x1427*x1434))+((pz*x1422))), ((-0.761204912550099)+((x1432*x1433))+(((0.0167657022194222)*sj6))+(((-1.0)*x1422*x1435))+(((-1.0)*x1424*x1428))+(((-1.0)*x1424*x1425))+(((0.440669248263212)*pz*x1426))+((x1422*x1434))+((cj4*x1423))+(((-1.0)*x1430*x1433))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1436=IKsin(j7);
IkReal x1437=IKcos(j7);
IkReal x1438=(pz*sj4);
IkReal x1439=((0.0007)*sj6);
IkReal x1440=(cj3*py);
IkReal x1441=(cj4*pz);
IkReal x1442=((0.035)*cj6);
IkReal x1443=((1.0)*px);
IkReal x1444=(sj3*sj4);
IkReal x1445=(cj4*px*sj3);
IkReal x1446=((0.279642)*x1436);
IkReal x1447=((1.0)*py*sj3);
IkReal x1448=((0.035)*x1437);
evalcond[0]=((((-1.0)*x1437*x1442))+((cj6*x1446))+x1442+(((-1.0)*x1447))+(((-1.0)*cj3*x1443)));
evalcond[1]=((0.22058)+((sj4*x1440))+(((-1.0)*x1441))+(((0.035)*x1436))+(((0.279642)*x1437))+(((-1.0)*x1443*x1444)));
evalcond[2]=((-0.038046)+(((-0.035)*sj6))+((sj6*x1448))+(((-1.0)*x1438))+(((-1.0)*sj6*x1446))+x1445+(((-1.0)*cj4*x1440)));
evalcond[3]=((0.035)+(((0.038046)*sj6))+((sj6*x1438))+(((-1.0)*cj3*cj6*x1443))+(((-1.0)*cj4*sj3*sj6*x1443))+x1446+(((-1.0)*x1448))+(((-1.0)*cj6*x1447))+((cj4*sj6*x1440)));
evalcond[4]=((0.152784468928)+(((-1.0)*x1437*x1439))+(((-0.109556)*x1441))+(((0.03885)*x1436))+(((0.00559284)*sj6*x1436))+(((-0.056092)*cj4*x1440))+(((-0.056092)*x1438))+(((-1.0)*pp))+x1439+(((0.151553323672)*x1437))+(((0.109556)*sj4*x1440))+(((0.056092)*x1445))+(((-0.109556)*px*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1449=(cj6*sj4);
IkReal x1450=((8750000000.0)*sj5);
IkReal x1451=((8750000000.0)*py);
IkReal x1452=(cj3*cj5);
IkReal x1453=(cj6*sj5);
IkReal x1454=(cj3*px);
IkReal x1455=(cj4*cj6);
IkReal x1456=(px*sj3);
IkReal x1457=((69910500000.0)*py);
IkReal x1458=((69910500000.0)*pz);
IkReal x1459=(cj5*cj6);
IkReal x1460=(cj5*x1456);
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1461.valid){
continue;
}
CheckValue<IkReal> x1462 = IKatan2WithCheck(IkReal(((((69910500000.0)*x1454))+((pz*x1449*x1450))+((sj3*x1457))+(((-8750000000.0)*cj5*pz*x1455))+(((-479307500.0)*x1459))+((x1449*x1451*x1452))+((cj3*py*x1450*x1455))+(((-4856250000.0)*cj6))+(((-8750000000.0)*x1449*x1460))+(((-1.0)*x1450*x1455*x1456))+(((245402500.0)*x1453)))),IkReal((((x1449*x1452*x1457))+((cj3*cj4*x1453*x1457))+((sj5*x1449*x1458))+(((-69910500000.0)*x1449*x1460))+(((-8750000000.0)*x1454))+(((-18944165459.0)*cj6))+(((-3829557369.0)*x1459))+(((-1.0)*sj3*x1451))+(((-69910500000.0)*cj4*x1453*x1456))+(((-1.0)*cj5*x1455*x1458))+(((1960709883.0)*x1453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1462.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1461.value)))+(x1462.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1463=IKsin(j7);
IkReal x1464=IKcos(j7);
IkReal x1465=(pz*sj4);
IkReal x1466=(px*sj3);
IkReal x1467=(cj5*sj6);
IkReal x1468=((0.0007)*sj6);
IkReal x1469=((1.0)*cj4);
IkReal x1470=(sj5*sj6);
IkReal x1471=((1.0)*sj4);
IkReal x1472=((0.056092)*cj4);
IkReal x1473=(cj3*py);
IkReal x1474=((0.035)*x1464);
IkReal x1475=((0.279642)*x1463);
IkReal x1476=(sj4*x1473);
IkReal x1477=((0.035)*x1463);
IkReal x1478=((0.279642)*x1464);
IkReal x1479=((1.0)*py*sj3);
IkReal x1480=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*x1480))+((cj6*x1475))+(((0.035)*cj6))+(((-1.0)*x1479))+(((-1.0)*cj6*x1474)));
evalcond[1]=((-0.275358)+((cj5*x1476))+(((-0.054778)*cj5))+((cj4*sj5*x1473))+(((0.028046)*sj5))+(((-1.0)*x1478))+(((-1.0)*x1477))+(((-1.0)*cj5*pz*x1469))+(((-1.0)*sj5*x1466*x1469))+(((-1.0)*cj5*x1466*x1471))+((sj5*x1465)));
evalcond[2]=((-0.028046)+(((0.01)*cj5))+((x1467*x1475))+((cj4*x1466))+(((0.275358)*sj5))+((sj5*x1477))+((sj5*x1478))+(((-1.0)*x1469*x1473))+(((-1.0)*x1467*x1474))+(((0.035)*x1467))+(((-1.0)*x1465)));
evalcond[3]=((-0.054778)+(((-1.0)*pz*x1469))+(((0.035)*x1470))+(((-1.0)*x1470*x1474))+((x1470*x1475))+(((-1.0)*cj5*x1477))+(((-1.0)*cj5*x1478))+x1476+(((-1.0)*x1466*x1471))+(((0.01)*sj5))+(((-0.275358)*cj5)));
evalcond[4]=((0.152784468928)+((x1466*x1472))+(((0.109556)*x1476))+(((0.03885)*x1463))+(((-0.056092)*x1465))+(((0.00559284)*sj6*x1463))+(((-1.0)*x1464*x1468))+(((0.151553323672)*x1464))+(((-1.0)*pp))+(((-0.109556)*cj4*pz))+x1468+(((-1.0)*x1472*x1473))+(((-0.109556)*sj4*x1466)));
evalcond[5]=((0.035)+(((-1.0)*cj6*x1480))+(((-0.028046)*x1467))+(((-1.0)*pz*x1469*x1470))+((x1470*x1476))+(((-1.0)*x1466*x1470*x1471))+(((-0.054778)*x1470))+(((-1.0)*x1467*x1469*x1473))+x1475+(((-1.0)*x1474))+((cj4*x1466*x1467))+(((-1.0)*x1465*x1467))+(((0.01)*sj6))+(((-1.0)*cj6*x1479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1481=(px*sj3);
IkReal x1482=(cj3*py);
IkReal x1483=((139821.0)*cj6);
IkReal x1484=(cj4*pz);
IkReal x1485=(cj5*cj6);
IkReal x1486=(sj5*sj6);
IkReal x1487=((17500.0)*cj5);
IkReal x1488=(cj3*px);
IkReal x1489=(cj6*sj5);
IkReal x1490=(py*sj3);
IkReal x1491=((17500.0)*cj6*sj4);
IkReal x1492=((139821.0)*x1490);
IkReal x1493=(x1486*x1488);
CheckValue<IkReal> x1494=IKPowWithIntegerCheck(IKsign(x1485),-1);
if(!x1494.valid){
continue;
}
CheckValue<IkReal> x1495 = IKatan2WithCheck(IkReal(((((-17500.0)*x1493))+(((-1.0)*x1482*x1491))+((x1481*x1491))+(((-175.0)*x1489))+(((-17500.0)*x1486*x1490))+(((-139821.0)*cj5*x1488))+(((17500.0)*cj6*x1484))+(((-1.0)*cj5*x1492))+(((9712.5)*x1485))+(((958.615)*cj6)))),IkReal(((((37888.330918)*x1485))+(((7659.114738)*cj6))+(((-1.0)*x1486*x1492))+((x1487*x1488))+((x1487*x1490))+(((-139821.0)*x1493))+((x1483*x1484))+(((-1.0)*sj4*x1482*x1483))+(((-1398.21)*x1489))+((sj4*x1481*x1483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1495.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1494.value)))+(x1495.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1496=IKsin(j7);
IkReal x1497=IKcos(j7);
IkReal x1498=(pz*sj4);
IkReal x1499=(px*sj3);
IkReal x1500=(cj5*sj6);
IkReal x1501=((0.0007)*sj6);
IkReal x1502=((1.0)*cj4);
IkReal x1503=(sj5*sj6);
IkReal x1504=((1.0)*sj4);
IkReal x1505=((0.056092)*cj4);
IkReal x1506=(cj3*py);
IkReal x1507=((0.035)*x1497);
IkReal x1508=((0.279642)*x1496);
IkReal x1509=(sj4*x1506);
IkReal x1510=((0.035)*x1496);
IkReal x1511=((0.279642)*x1497);
IkReal x1512=((1.0)*py*sj3);
IkReal x1513=((1.0)*cj3*px);
evalcond[0]=((((-1.0)*x1512))+(((-1.0)*x1513))+((cj6*x1508))+(((0.035)*cj6))+(((-1.0)*cj6*x1507)));
evalcond[1]=((-0.275358)+((sj5*x1498))+(((-1.0)*x1510))+(((-1.0)*x1511))+(((-1.0)*sj5*x1499*x1502))+(((-0.054778)*cj5))+(((-1.0)*cj5*x1499*x1504))+(((0.028046)*sj5))+((cj4*sj5*x1506))+((cj5*x1509))+(((-1.0)*cj5*pz*x1502)));
evalcond[2]=((-0.028046)+((sj5*x1511))+((sj5*x1510))+(((0.035)*x1500))+(((-1.0)*x1498))+(((0.01)*cj5))+(((0.275358)*sj5))+((x1500*x1508))+((cj4*x1499))+(((-1.0)*x1500*x1507))+(((-1.0)*x1502*x1506)));
evalcond[3]=((-0.054778)+(((-1.0)*x1499*x1504))+(((-1.0)*cj5*x1510))+(((-1.0)*cj5*x1511))+(((0.035)*x1503))+x1509+(((-1.0)*pz*x1502))+((x1503*x1508))+(((-1.0)*x1503*x1507))+(((0.01)*sj5))+(((-0.275358)*cj5)));
evalcond[4]=((0.152784468928)+((x1499*x1505))+(((0.03885)*x1496))+(((-0.056092)*x1498))+(((0.109556)*x1509))+(((-1.0)*pp))+x1501+(((-0.109556)*sj4*x1499))+(((-0.109556)*cj4*pz))+(((-1.0)*x1497*x1501))+(((-1.0)*x1505*x1506))+(((0.00559284)*sj6*x1496))+(((0.151553323672)*x1497)));
evalcond[5]=((0.035)+(((-1.0)*x1498*x1500))+(((-1.0)*x1507))+(((-0.028046)*x1500))+(((-1.0)*x1500*x1502*x1506))+x1508+(((-1.0)*pz*x1502*x1503))+(((-0.054778)*x1503))+(((-1.0)*x1499*x1503*x1504))+((x1503*x1509))+(((-1.0)*cj6*x1512))+(((-1.0)*cj6*x1513))+(((0.01)*sj6))+((cj4*x1499*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1514=((139821.0)*px);
IkReal x1515=(cj3*sj5);
IkReal x1516=(cj5*cj6);
IkReal x1517=(cj6*sj5);
IkReal x1518=((17500.0)*px);
IkReal x1519=(cj5*sj6);
IkReal x1520=((139821.0)*cj6);
IkReal x1521=(pz*sj4);
IkReal x1522=((17500.0)*cj6);
IkReal x1523=(cj4*cj6*sj3);
IkReal x1524=((17500.0)*py*sj3);
IkReal x1525=((139821.0)*py*sj3);
IkReal x1526=(cj3*cj4*py);
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal((((x1514*x1515))+((sj5*x1525))+(((-9712.5)*x1517))+((x1522*x1526))+(((-1.0)*x1519*x1524))+(((-1.0)*x1518*x1523))+(((-175.0)*x1516))+((x1521*x1522))+(((-1.0)*cj3*x1518*x1519))+(((490.805)*cj6)))),IkReal(((((-1.0)*sj5*x1524))+(((-1.0)*x1515*x1518))+(((3921.419766)*cj6))+(((-1.0)*x1519*x1525))+(((-1.0)*x1514*x1523))+((x1520*x1526))+((x1520*x1521))+(((-37888.330918)*x1517))+(((-1.0)*cj3*x1514*x1519))+(((-1398.21)*x1516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528=IKPowWithIntegerCheck(IKsign(x1517),-1);
if(!x1528.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1527.value)+(((1.5707963267949)*(x1528.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1529=IKsin(j7);
IkReal x1530=IKcos(j7);
IkReal x1531=(pz*sj4);
IkReal x1532=(px*sj3);
IkReal x1533=(cj5*sj6);
IkReal x1534=((0.0007)*sj6);
IkReal x1535=((1.0)*cj4);
IkReal x1536=(sj5*sj6);
IkReal x1537=((1.0)*sj4);
IkReal x1538=((0.056092)*cj4);
IkReal x1539=(cj3*py);
IkReal x1540=((0.035)*x1530);
IkReal x1541=((0.279642)*x1529);
IkReal x1542=(sj4*x1539);
IkReal x1543=((0.035)*x1529);
IkReal x1544=((0.279642)*x1530);
IkReal x1545=((1.0)*py*sj3);
IkReal x1546=((1.0)*cj3*px);
evalcond[0]=(((cj6*x1541))+(((0.035)*cj6))+(((-1.0)*cj6*x1540))+(((-1.0)*x1545))+(((-1.0)*x1546)));
evalcond[1]=((-0.275358)+((sj5*x1531))+((cj5*x1542))+(((-0.054778)*cj5))+(((0.028046)*sj5))+((cj4*sj5*x1539))+(((-1.0)*cj5*x1532*x1537))+(((-1.0)*sj5*x1532*x1535))+(((-1.0)*x1544))+(((-1.0)*x1543))+(((-1.0)*cj5*pz*x1535)));
evalcond[2]=((-0.028046)+(((-1.0)*x1531))+(((0.035)*x1533))+((x1533*x1541))+(((0.01)*cj5))+(((0.275358)*sj5))+(((-1.0)*x1535*x1539))+(((-1.0)*x1533*x1540))+((cj4*x1532))+((sj5*x1544))+((sj5*x1543)));
evalcond[3]=((-0.054778)+(((0.035)*x1536))+((x1536*x1541))+(((-1.0)*cj5*x1544))+(((-1.0)*cj5*x1543))+(((-1.0)*x1532*x1537))+x1542+(((-1.0)*x1536*x1540))+(((0.01)*sj5))+(((-0.275358)*cj5))+(((-1.0)*pz*x1535)));
evalcond[4]=((0.152784468928)+(((-1.0)*x1530*x1534))+(((-0.109556)*sj4*x1532))+((x1532*x1538))+(((0.00559284)*sj6*x1529))+(((0.109556)*x1542))+(((-1.0)*pp))+(((-0.056092)*x1531))+x1534+(((-0.109556)*cj4*pz))+(((0.03885)*x1529))+(((-1.0)*x1538*x1539))+(((0.151553323672)*x1530)));
evalcond[5]=((0.035)+((cj4*x1532*x1533))+(((-1.0)*x1531*x1533))+((x1536*x1542))+(((-1.0)*x1532*x1536*x1537))+x1541+(((-1.0)*x1533*x1535*x1539))+(((-0.054778)*x1536))+(((-1.0)*cj6*x1545))+(((-1.0)*cj6*x1546))+(((-1.0)*x1540))+(((0.01)*sj6))+(((-0.028046)*x1533))+(((-1.0)*pz*x1535*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1547=(cj3*px);
IkReal x1548=((7842.839532)*cj4);
IkReal x1549=(cj6*pp);
IkReal x1550=((2796.42)*sj6);
IkReal x1551=(py*sj3);
IkReal x1552=((350.0)*sj6);
IkReal x1553=(cj6*sj4);
IkReal x1554=(px*sj3);
IkReal x1555=((981.61)*cj4);
IkReal x1556=(cj3*cj6*py);
IkReal x1557=(cj4*cj6*pz);
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1558.valid){
continue;
}
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal(((((17500.0)*x1549))+(((981.61)*pz*x1553))+((x1555*x1556))+(((1917.23)*x1557))+(((1917.23)*x1553*x1554))+(((-1917.23)*cj3*py*x1553))+(((-1.0)*cj6*x1554*x1555))+(((-5325.9113705)*cj6))+(((-1.0)*x1551*x1552))+(((75776.661836)*x1547))+(((-1.0)*x1547*x1552))+(((75776.661836)*x1551)))),IkReal(((((-20682.6022299819)*cj6))+(((-19425.0)*x1551))+(((-15318.229476)*cj3*py*x1553))+(((7842.839532)*pz*x1553))+(((-1.0)*x1550*x1551))+(((-19425.0)*x1547))+(((15318.229476)*x1557))+(((15318.229476)*x1553*x1554))+((x1548*x1556))+(((-1.0)*x1547*x1550))+(((139821.0)*x1549))+(((-1.0)*cj6*x1548*x1554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1558.value)))+(x1559.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x1560=IKsin(j7);
IkReal x1561=IKcos(j7);
IkReal x1562=(px*sj3);
IkReal x1563=((0.109556)*sj4);
IkReal x1564=((0.056092)*cj4);
IkReal x1565=(cj3*py);
IkReal x1566=((0.035)*cj6);
IkReal x1567=((0.0007)*sj6);
evalcond[0]=((((-1.0)*cj3*px))+x1566+(((-1.0)*py*sj3))+(((0.279642)*cj6*x1560))+(((-1.0)*x1561*x1566)));
evalcond[1]=((0.152784468928)+(((0.03885)*x1560))+(((-0.056092)*pz*sj4))+(((0.00559284)*sj6*x1560))+(((-1.0)*x1562*x1563))+(((-1.0)*pp))+x1567+(((-0.109556)*cj4*pz))+(((-1.0)*x1564*x1565))+((x1562*x1564))+((x1563*x1565))+(((0.151553323672)*x1561))+(((-1.0)*x1561*x1567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x1568=cj6*cj6;
IkReal x1569=cj7*cj7;
IkReal x1570=(sj6*sj7);
IkReal x1571=((0.0007)*sj6);
IkReal x1572=(sj7*x1568);
IkReal x1573=(cj7*x1568);
IkReal x1574=(x1568*x1569);
j5eval[0]=((223.673823325714)+(((7.98977142857143)*x1570))+(((27.9642)*cj7*x1572))+(((109.963783091429)*x1574))+(((55.5)*sj7))+(((3.5)*x1573))+sj6+(((-27.9642)*x1572))+(((-1.0)*cj7*sj6))+(((216.504748102857)*cj7))+(((-113.463783091429)*x1568)));
j5eval[1]=IKsign(((0.156571676328)+(((0.151553323672)*cj7))+(((-1.0)*cj7*x1571))+(((-0.01957494)*x1572))+(((0.01957494)*cj7*x1572))+(((0.03885)*sj7))+x1571+(((0.00245)*x1573))+(((0.00559284)*x1570))+(((0.076974648164)*x1574))+(((-0.079424648164)*x1568))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1575=((35.6557084789275)*pz);
IkReal x1576=(sj4*sj6);
IkReal x1577=(cj7*sj4);
IkReal x1578=(sj6*sj7);
IkReal x1579=(cj4*sj7);
IkReal x1580=(px*sj3);
IkReal x1581=((0.275358)*sj4);
IkReal x1582=(cj7*sj6);
IkReal x1583=(cj4*pz);
IkReal x1584=((10.1873452796936)*cj4);
IkReal x1585=(cj4*sj6);
IkReal x1586=(cj3*py);
IkReal x1587=(pz*sj4);
IkReal x1588=((35.6557084789275)*cj4);
IkReal x1589=((280.516702152586)*sj4);
IkReal x1590=((0.035)*cj4);
IkReal x1591=((0.035)*pz);
IkReal x1592=((0.01)*cj4);
IkReal x1593=(pz*sj7);
IkReal x1594=((0.279642)*x1580);
IkReal x1595=((35.6557084789275)*sj4*sj7);
IkReal x1596=((284.880960870407)*x1586);
IkReal x1597=((0.035)*sj4*sj7);
j5eval[0]=((15.6518581962286)+((cj4*x1578*x1596))+(((7.98977142857143)*x1578))+(((15.6052092745591)*cj7))+(((-284.880960870407)*cj4*x1578*x1580))+(((-35.6557084789275)*x1580*x1585))+(((-1.0)*x1582*x1586*x1588))+(((-1.0)*x1580*x1584))+sj6+(((280.516702152586)*x1583))+((x1584*x1586))+(((10.1873452796936)*x1587))+(((-1.0)*x1577*x1596))+(((284.880960870407)*cj7*x1583))+(((1.95314839905869)*sj7))+((x1575*x1576))+((x1575*x1579))+(((35.6557084789275)*x1585*x1586))+((x1580*x1595))+((x1580*x1589))+((x1580*x1582*x1588))+(((284.880960870407)*x1576*x1593))+(((-1.0)*cj7*x1575*x1576))+(((-1.0)*x1582))+(((284.880960870407)*x1577*x1580))+(((-1.0)*x1586*x1595))+(((-1.0)*x1586*x1589)));
j5eval[1]=IKsign(((0.015364020524)+((x1586*x1592))+(((-1.0)*x1580*x1592))+(((0.275358)*x1583))+(((0.007842839532)*x1578))+(((-1.0)*x1582*x1586*x1590))+(((0.279642)*x1576*x1593))+(((-0.00098161)*x1582))+((x1576*x1591))+(((0.01)*x1587))+(((0.035)*x1585*x1586))+(((0.00098161)*sj6))+(((-0.279642)*x1577*x1586))+(((-1.0)*cj7*x1576*x1591))+(((0.00191723)*sj7))+((x1580*x1582*x1590))+((x1580*x1597))+(((0.279642)*cj7*x1583))+((x1580*x1581))+(((0.279642)*cj4*x1578*x1586))+(((0.015318229476)*cj7))+(((-0.035)*x1580*x1585))+((x1577*x1594))+(((-1.0)*x1581*x1586))+(((-1.0)*x1586*x1597))+((x1579*x1591))+(((-1.0)*cj4*x1578*x1594))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1598=((35.6557084789275)*pz);
IkReal x1599=(sj4*sj7);
IkReal x1600=(cj7*sj6);
IkReal x1601=(cj4*pz);
IkReal x1602=(px*sj3);
IkReal x1603=((0.279642)*sj6);
IkReal x1604=((0.035)*sj6);
IkReal x1605=((35.6557084789275)*sj4);
IkReal x1606=(sj6*sj7);
IkReal x1607=((0.279642)*cj7);
IkReal x1608=((280.516702152586)*cj4);
IkReal x1609=(pz*sj4);
IkReal x1610=(cj3*py);
IkReal x1611=((0.275358)*cj4);
IkReal x1612=((284.880960870407)*sj6);
IkReal x1613=((284.880960870407)*cj7);
IkReal x1614=(sj4*x1610);
IkReal x1615=((0.035)*cj4*sj7);
IkReal x1616=((35.6557084789275)*cj4*sj7);
j5eval[0]=((-7.30932902884037)+(((-1.0)*sj7))+(((-1.0)*x1599*x1610*x1612))+(((10.1873452796936)*x1601))+(((-280.516702152586)*x1609))+(((-1.0)*x1600*x1602*x1605))+(((-1.0)*x1610*x1616))+(((284.880960870407)*x1601*x1606))+(((1.95314839905869)*sj6))+((x1600*x1605*x1610))+(((-1.0)*cj4*x1610*x1613))+(((10.1873452796936)*sj4*x1602))+(((15.6052092745591)*x1606))+((x1599*x1602*x1612))+(((-7.98977142857143)*cj7))+(((-1.0)*x1598*x1599))+((cj4*sj6*x1598))+(((-1.0)*x1609*x1613))+(((-1.0)*x1608*x1610))+((cj4*x1602*x1613))+((x1602*x1608))+((sj6*x1602*x1605))+(((-10.1873452796936)*x1614))+((x1602*x1616))+(((-1.95314839905869)*x1600))+(((-1.0)*cj4*x1598*x1600))+(((-1.0)*sj6*x1605*x1610)));
j5eval[1]=IKsign(((-0.007174910468)+(((-1.0)*x1607*x1609))+(((-0.01)*x1614))+(((-1.0)*cj4*x1607*x1610))+(((-1.0)*x1599*x1603*x1610))+(((0.035)*x1600*x1614))+(((-0.007842839532)*cj7))+(((-1.0)*x1610*x1611))+(((-1.0)*x1610*x1615))+(((-0.035)*x1600*x1601))+((sj4*x1602*x1604))+(((-0.035)*sj4*x1600*x1602))+(((0.015318229476)*x1606))+(((-0.035)*pz*x1599))+(((0.01)*x1601))+(((-0.275358)*x1609))+((x1601*x1604))+(((0.00191723)*sj6))+(((-0.00191723)*x1600))+((x1599*x1602*x1603))+((sj7*x1601*x1603))+(((0.01)*sj4*x1602))+(((-0.00098161)*sj7))+((x1602*x1615))+((x1602*x1611))+(((-1.0)*x1604*x1614))+((cj4*x1602*x1607))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1617=cj3*cj3;
IkReal x1618=px*px;
IkReal x1619=cj4*cj4;
IkReal x1620=py*py;
IkReal x1621=cj7*cj7;
IkReal x1622=pz*pz;
IkReal x1623=(cj7*sj7);
IkReal x1624=(cj7*sj6);
IkReal x1625=(px*sj3);
IkReal x1626=((0.035)*pz);
IkReal x1627=((0.035)*sj6);
IkReal x1628=((0.054778)*cj4);
IkReal x1629=(cj3*py);
IkReal x1630=((0.275358)*cj4);
IkReal x1631=(cj4*pz);
IkReal x1632=((0.279642)*cj7);
IkReal x1633=(pz*sj4);
IkReal x1634=(sj6*sj7);
IkReal x1635=(cj4*sj4);
IkReal x1636=(sj4*x1629);
IkReal x1637=((0.279642)*x1634);
IkReal x1638=((1.0)*x1619);
IkReal x1639=((0.035)*cj4*sj7);
IkReal x1640=((2.0)*pz*x1619);
IkReal x1641=(x1617*x1620);
IkReal x1642=(x1617*x1618);
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal(((-0.07404639888)+(((-0.154003323672)*cj7))+x1618+x1641+((x1619*x1642))+(((-1.0)*x1638*x1641))+(((-0.01927506)*sj7))+(((-1.0)*x1642))+(((0.109556)*x1631))+(((0.109556)*sj4*x1625))+(((-2.0)*x1631*x1636))+(((-0.076974648164)*x1621))+((x1619*x1622))+(((-0.01957494)*x1623))+(((-2.0)*x1625*x1629))+(((2.0)*x1619*x1625*x1629))+(((2.0)*sj4*x1625*x1631))+(((-1.0)*x1618*x1638))+(((-0.109556)*x1636)))),IkReal(((-0.001217276212)+(((-0.076974648164)*sj6*x1623))+(((-1.0)*x1618*x1635))+((pz*x1625))+(((-0.028046)*x1636))+(((0.028046)*x1631))+(((2.0)*x1625*x1629*x1635))+(((-0.00035)*sj7))+(((0.054778)*x1633))+(((-1.0)*x1635*x1641))+((x1628*x1629))+((x1629*x1640))+(((-1.0)*x1625*x1640))+(((-0.00014994)*x1624))+(((-0.00279642)*cj7))+(((0.028046)*sj4*x1625))+(((-0.078226661836)*x1634))+(((-1.0)*x1625*x1628))+((x1622*x1635))+(((-0.019425)*sj6))+((x1635*x1642))+(((-1.0)*pz*x1629))+(((0.01957494)*sj6*x1621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign(((-0.007174910468)+(((0.035)*x1624*x1636))+(((-0.275358)*x1633))+(((-0.007842839532)*cj7))+((sj4*x1625*x1637))+(((-1.0)*sj4*sj7*x1626))+((cj4*x1625*x1632))+((cj4*sj6*x1626))+(((-1.0)*cj4*x1624*x1626))+((x1625*x1630))+((x1625*x1639))+(((0.00191723)*sj6))+(((-0.01)*x1636))+(((-0.00191723)*x1624))+(((-1.0)*x1636*x1637))+((sj4*x1625*x1627))+(((0.015318229476)*x1634))+(((0.01)*x1631))+(((-1.0)*x1629*x1639))+(((-1.0)*x1629*x1630))+(((-1.0)*x1632*x1633))+(((-0.00098161)*sj7))+(((-1.0)*cj4*x1629*x1632))+((x1631*x1637))+(((0.01)*sj4*x1625))+(((-0.035)*sj4*x1624*x1625))+(((-1.0)*x1627*x1636)))),-1);
if(!x1644.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1643.value)+(((1.5707963267949)*(x1644.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1645=IKsin(j5);
IkReal x1646=IKcos(j5);
IkReal x1647=((1.0)*pz);
IkReal x1648=(cj4*cj6);
IkReal x1649=((1.0)*px);
IkReal x1650=((0.035)*sj7);
IkReal x1651=((0.279642)*cj7);
IkReal x1652=((0.07)*sj6);
IkReal x1653=(pz*sj4);
IkReal x1654=((0.07)*cj6);
IkReal x1655=(py*sj3);
IkReal x1656=(cj4*pz);
IkReal x1657=(cj4*px);
IkReal x1658=(px*sj4);
IkReal x1659=((1.0)*cj6);
IkReal x1660=(cj3*py);
IkReal x1661=((1.0)*sj6);
IkReal x1662=((0.279642)*sj7);
IkReal x1663=((0.035)*cj7);
IkReal x1664=(sj3*x1646);
IkReal x1665=(sj4*x1660);
IkReal x1666=((0.02)*x1645);
IkReal x1667=((0.550716)*x1646);
IkReal x1668=(pz*x1645);
IkReal x1669=(cj4*x1646);
IkReal x1670=(sj3*x1645);
IkReal x1671=(sj6*x1645);
IkReal x1672=((0.550716)*x1645);
IkReal x1673=(sj6*x1646);
IkReal x1674=(cj6*x1646);
evalcond[0]=((-0.028046)+(((0.035)*x1673))+(((-1.0)*sj4*x1647))+(((-1.0)*x1663*x1673))+((x1645*x1651))+((x1645*x1650))+((x1662*x1673))+((sj3*x1657))+(((0.01)*x1646))+(((0.275358)*x1645))+(((-1.0)*cj4*x1660)));
evalcond[1]=((-0.054778)+(((0.035)*x1671))+(((-0.275358)*x1646))+(((-1.0)*x1663*x1671))+x1665+(((-1.0)*x1646*x1650))+(((-1.0)*x1646*x1651))+(((-1.0)*sj3*sj4*x1649))+((x1662*x1671))+(((0.01)*x1645))+(((-1.0)*cj4*x1647)));
evalcond[2]=((-0.275358)+(((-0.054778)*x1646))+(((0.028046)*x1645))+(((-1.0)*cj4*x1649*x1670))+(((-1.0)*x1647*x1669))+((cj4*x1645*x1660))+((x1645*x1653))+((x1646*x1665))+(((-1.0)*x1651))+(((-1.0)*x1650))+(((-1.0)*sj4*x1649*x1664)));
evalcond[3]=(((x1646*x1648*x1660))+(((0.028046)*x1674))+((cj6*x1658*x1670))+((x1648*x1668))+(((0.054778)*cj6*x1645))+(((-1.0)*x1648*x1649*x1664))+(((-0.01)*cj6))+((x1653*x1674))+(((-1.0)*x1645*x1659*x1665))+(((-1.0)*x1655*x1661))+(((-1.0)*cj3*sj6*x1649)));
evalcond[4]=((0.035)+(((-1.0)*x1660*x1661*x1669))+((x1665*x1671))+(((-1.0)*cj3*cj6*x1649))+x1662+(((-1.0)*x1655*x1659))+(((-0.028046)*x1673))+(((-0.054778)*x1671))+((sj6*x1657*x1664))+(((-1.0)*sj4*x1647*x1673))+(((-1.0)*cj4*x1647*x1671))+(((-1.0)*x1663))+(((0.01)*sj6))+(((-1.0)*sj4*sj6*x1649*x1670)));
evalcond[5]=((-0.0015095874)+(((-0.109556)*x1656))+((x1654*x1655))+(((-1.0)*x1656*x1667))+(((0.056092)*sj3*x1657))+((x1652*x1658*x1670))+(((-1.0)*px*x1649))+((x1653*x1672))+(((-0.02)*x1657*x1664))+((cj4*x1660*x1672))+((cj3*px*x1654))+(((-1.0)*x1645*x1652*x1665))+((x1652*x1660*x1669))+(((0.02)*x1660*x1669))+(((0.016540940936)*x1645))+(((0.00383446)*x1671))+((x1645*x1652*x1656))+(((-0.0007)*sj6))+(((0.109556)*x1665))+(((-0.109556)*sj3*x1658))+(((-0.550716)*x1657*x1670))+(((-0.056092)*cj4*x1660))+(((0.02)*x1646*x1653))+((x1646*x1652*x1653))+(((-0.056092)*x1653))+(((-0.550716)*x1658*x1664))+(((-0.029606201048)*x1646))+((sj3*x1658*x1666))+((x1665*x1667))+(((-1.0)*(py*py)))+(((0.00196322)*x1673))+(((-1.0)*x1652*x1657*x1664))+(((-1.0)*x1665*x1666))+(((-1.0)*pz*x1647))+((x1656*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1675=px*px;
IkReal x1676=cj3*cj3;
IkReal x1677=cj4*cj4;
IkReal x1678=py*py;
IkReal x1679=pz*pz;
IkReal x1680=cj7*cj7;
IkReal x1681=(cj7*sj7);
IkReal x1682=(pz*sj4);
IkReal x1683=(cj7*sj6);
IkReal x1684=(sj6*sj7);
IkReal x1685=(cj4*pz);
IkReal x1686=((0.035)*sj7);
IkReal x1687=(cj4*sj4);
IkReal x1688=((0.035)*sj6);
IkReal x1689=((0.279642)*cj7);
IkReal x1690=(cj3*py);
IkReal x1691=(px*sj3);
IkReal x1692=(cj4*x1691);
IkReal x1693=(cj4*x1690);
IkReal x1694=(sj4*x1691);
IkReal x1695=((2.0)*x1677);
IkReal x1696=((1.0)*x1677);
IkReal x1697=(x1676*x1678);
IkReal x1698=(x1675*x1676);
CheckValue<IkReal> x1699 = IKatan2WithCheck(IkReal(((0.004289883788)+(((0.054778)*x1682))+(((0.028046)*x1694))+(((0.054778)*x1693))+(((0.00035)*sj7))+(((0.019425)*sj6))+(((0.00279642)*cj7))+(((0.00014994)*x1683))+(((-0.01957494)*sj6*x1680))+(((0.078226661836)*x1684))+(((-1.0)*pz*x1691*x1695))+(((0.076974648164)*sj6*x1681))+((pz*x1690*x1695))+(((2.0)*x1687*x1690*x1691))+(((-1.0)*x1687*x1697))+(((-1.0)*x1675*x1687))+((x1679*x1687))+(((-0.028046)*sj4*x1690))+(((-0.054778)*x1692))+((x1687*x1698))+((pz*x1691))+(((0.028046)*x1685))+(((-1.0)*pz*x1690)))),IkReal(((-0.076260450048)+((x1675*x1677))+(((-1.0)*x1696*x1698))+((x1677*x1697))+(((-0.154003323672)*cj7))+(((-2.0)*x1682*x1692))+(((-1.0)*x1679*x1696))+x1679+(((-0.01957494)*x1681))+(((2.0)*x1682*x1693))+(((-0.056092)*x1692))+(((-0.01927506)*sj7))+(((-1.0)*x1690*x1691*x1695))+(((0.056092)*x1682))+(((0.056092)*x1693))+(((-0.076974648164)*x1680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1699.valid){
continue;
}
CheckValue<IkReal> x1700=IKPowWithIntegerCheck(IKsign(((0.015364020524)+(((-1.0)*x1688*x1692))+(((-1.0)*sj4*x1686*x1690))+(((-0.035)*x1682*x1683))+(((0.007842839532)*x1684))+(((-1.0)*sj4*x1689*x1690))+(((0.275358)*x1685))+(((-0.00098161)*x1683))+(((-0.035)*x1683*x1693))+(((0.035)*x1683*x1692))+(((0.00098161)*sj6))+(((0.279642)*x1684*x1693))+((x1689*x1694))+(((0.00191723)*sj7))+(((0.01)*x1682))+(((-0.279642)*x1684*x1692))+((x1686*x1694))+(((-0.275358)*sj4*x1690))+(((0.279642)*x1682*x1684))+((x1688*x1693))+(((0.015318229476)*cj7))+(((0.01)*x1693))+((x1682*x1688))+(((-0.01)*x1692))+((x1685*x1689))+((x1685*x1686))+(((0.275358)*x1694)))),-1);
if(!x1700.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1699.value)+(((1.5707963267949)*(x1700.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1701=IKsin(j5);
IkReal x1702=IKcos(j5);
IkReal x1703=((1.0)*pz);
IkReal x1704=(cj4*cj6);
IkReal x1705=((1.0)*px);
IkReal x1706=((0.035)*sj7);
IkReal x1707=((0.279642)*cj7);
IkReal x1708=((0.07)*sj6);
IkReal x1709=(pz*sj4);
IkReal x1710=((0.07)*cj6);
IkReal x1711=(py*sj3);
IkReal x1712=(cj4*pz);
IkReal x1713=(cj4*px);
IkReal x1714=(px*sj4);
IkReal x1715=((1.0)*cj6);
IkReal x1716=(cj3*py);
IkReal x1717=((1.0)*sj6);
IkReal x1718=((0.279642)*sj7);
IkReal x1719=((0.035)*cj7);
IkReal x1720=(sj3*x1702);
IkReal x1721=(sj4*x1716);
IkReal x1722=((0.02)*x1701);
IkReal x1723=((0.550716)*x1702);
IkReal x1724=(pz*x1701);
IkReal x1725=(cj4*x1702);
IkReal x1726=(sj3*x1701);
IkReal x1727=(sj6*x1701);
IkReal x1728=((0.550716)*x1701);
IkReal x1729=(sj6*x1702);
IkReal x1730=(cj6*x1702);
evalcond[0]=((-0.028046)+(((0.035)*x1729))+((x1718*x1729))+(((-1.0)*sj4*x1703))+(((0.01)*x1702))+(((-1.0)*cj4*x1716))+((x1701*x1707))+((x1701*x1706))+((sj3*x1713))+(((0.275358)*x1701))+(((-1.0)*x1719*x1729)));
evalcond[1]=((-0.054778)+(((-1.0)*x1702*x1706))+(((-1.0)*x1702*x1707))+(((0.035)*x1727))+x1721+(((-0.275358)*x1702))+((x1718*x1727))+(((0.01)*x1701))+(((-1.0)*sj3*sj4*x1705))+(((-1.0)*cj4*x1703))+(((-1.0)*x1719*x1727)));
evalcond[2]=((-0.275358)+(((-1.0)*sj4*x1705*x1720))+(((-1.0)*cj4*x1705*x1726))+((x1702*x1721))+(((-1.0)*x1703*x1725))+(((-1.0)*x1707))+(((-1.0)*x1706))+((x1701*x1709))+((cj4*x1701*x1716))+(((-0.054778)*x1702))+(((0.028046)*x1701)));
evalcond[3]=(((x1702*x1704*x1716))+((x1704*x1724))+(((-1.0)*cj3*sj6*x1705))+(((0.028046)*x1730))+(((-1.0)*x1704*x1705*x1720))+(((-0.01)*cj6))+(((-1.0)*x1711*x1717))+(((0.054778)*cj6*x1701))+((cj6*x1714*x1726))+((x1709*x1730))+(((-1.0)*x1701*x1715*x1721)));
evalcond[4]=((0.035)+(((-1.0)*x1716*x1717*x1725))+(((-1.0)*cj3*cj6*x1705))+(((-0.054778)*x1727))+x1718+(((-1.0)*sj4*sj6*x1705*x1726))+(((-1.0)*x1719))+((x1721*x1727))+(((-1.0)*x1711*x1715))+(((-0.028046)*x1729))+(((-1.0)*cj4*x1703*x1727))+((sj6*x1713*x1720))+(((0.01)*sj6))+(((-1.0)*sj4*x1703*x1729)));
evalcond[5]=((-0.0015095874)+((x1710*x1711))+(((-1.0)*pz*x1703))+((sj3*x1714*x1722))+((x1701*x1708*x1712))+(((-1.0)*px*x1705))+(((0.02)*x1716*x1725))+(((0.016540940936)*x1701))+(((-0.056092)*cj4*x1716))+(((0.056092)*sj3*x1713))+((x1721*x1723))+(((-1.0)*x1701*x1708*x1721))+((x1708*x1714*x1726))+(((0.02)*x1702*x1709))+(((0.00383446)*x1727))+(((-0.550716)*x1713*x1726))+(((-0.056092)*x1709))+(((-0.0007)*sj6))+((cj4*x1716*x1728))+(((0.00196322)*x1729))+(((-0.109556)*sj3*x1714))+(((0.109556)*x1721))+((cj3*px*x1710))+(((-0.550716)*x1714*x1720))+((x1708*x1716*x1725))+(((-0.02)*x1713*x1720))+((x1702*x1708*x1709))+((x1709*x1728))+(((-0.029606201048)*x1702))+(((-0.109556)*x1712))+((x1712*x1722))+(((-1.0)*x1712*x1723))+(((-1.0)*(py*py)))+(((-1.0)*x1721*x1722))+(((-1.0)*x1708*x1713*x1720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1731=cj6*cj6;
IkReal x1732=((0.0007)*sj6);
IkReal x1733=(cj7*sj4);
IkReal x1734=(cj7*sj6);
IkReal x1735=(sj6*sj7);
IkReal x1736=(cj3*py);
IkReal x1737=((0.01)*sj4);
IkReal x1738=(cj4*pz);
IkReal x1739=((0.035)*sj6);
IkReal x1740=((0.01)*cj4);
IkReal x1741=((0.279642)*pz);
IkReal x1742=((0.01957494)*sj7);
IkReal x1743=(cj4*cj7);
IkReal x1744=(px*sj3);
IkReal x1745=((0.035)*cj4);
IkReal x1746=((0.275358)*sj4);
IkReal x1747=((0.035)*sj7);
IkReal x1748=(pz*sj4);
IkReal x1749=((0.279642)*x1744);
IkReal x1750=((0.275358)*x1744);
IkReal x1751=(cj7*x1731);
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign(((0.156571676328)+(((0.151553323672)*cj7))+(((0.00245)*x1751))+(((-1.0)*cj7*x1732))+(((0.00559284)*x1735))+x1732+(((0.076974648164)*cj7*x1751))+(((0.03885)*sj7))+(((-1.0)*x1731*x1742))+((x1742*x1751))+(((-0.079424648164)*x1731)))),-1);
if(!x1752.valid){
continue;
}
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal(((0.008270470468)+((pz*x1746))+(((-1.0)*cj4*x1750))+(((-0.00191723)*x1734))+(((-0.035)*x1734*x1738))+((sj4*x1739*x1744))+(((0.00098161)*sj7))+((x1747*x1748))+(((-1.0)*sj7*x1744*x1745))+(((-1.0)*sj4*x1736*x1739))+(((0.00191723)*sj6))+(((-1.0)*x1736*x1737))+(((0.015318229476)*x1735))+(((0.007842839532)*cj7))+((x1738*x1739))+((x1733*x1736*x1739))+(((0.279642)*x1736*x1743))+(((0.01)*x1738))+((sj4*x1735*x1749))+(((-0.279642)*sj4*x1735*x1736))+((x1733*x1741))+((sj7*x1736*x1745))+(((-1.0)*x1733*x1739*x1744))+(((-1.0)*x1743*x1749))+((x1737*x1744))+(((0.275358)*cj4*x1736))+(((0.279642)*x1735*x1738)))),IkReal(((-0.014803100524)+(((-1.0)*cj4*x1739*x1744))+((x1736*x1740))+((x1736*x1746))+((x1739*x1748))+(((0.279642)*cj4*x1735*x1736))+((sj4*x1736*x1747))+(((-0.279642)*cj7*x1738))+(((-0.015318229476)*cj7))+(((-1.0)*x1733*x1749))+(((-1.0)*x1738*x1747))+(((-1.0)*x1740*x1744))+((pz*x1737))+(((0.00098161)*sj6))+(((-1.0)*cj4*x1735*x1749))+(((0.007842839532)*x1735))+(((-1.0)*pz*x1733*x1739))+(((0.279642)*x1733*x1736))+(((-1.0)*x1744*x1746))+(((-0.00191723)*sj7))+((sj4*x1735*x1741))+(((-0.00098161)*x1734))+(((-1.0)*x1734*x1736*x1745))+((cj4*x1736*x1739))+(((-1.0)*sj4*x1744*x1747))+(((-0.275358)*x1738))+((x1734*x1744*x1745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1752.value)))+(x1753.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1754=IKsin(j5);
IkReal x1755=IKcos(j5);
IkReal x1756=((1.0)*pz);
IkReal x1757=(cj4*cj6);
IkReal x1758=((1.0)*px);
IkReal x1759=((0.035)*sj7);
IkReal x1760=((0.279642)*cj7);
IkReal x1761=((0.07)*sj6);
IkReal x1762=(pz*sj4);
IkReal x1763=((0.07)*cj6);
IkReal x1764=(py*sj3);
IkReal x1765=(cj4*pz);
IkReal x1766=(cj4*px);
IkReal x1767=(px*sj4);
IkReal x1768=((1.0)*cj6);
IkReal x1769=(cj3*py);
IkReal x1770=((1.0)*sj6);
IkReal x1771=((0.279642)*sj7);
IkReal x1772=((0.035)*cj7);
IkReal x1773=(sj3*x1755);
IkReal x1774=(sj4*x1769);
IkReal x1775=((0.02)*x1754);
IkReal x1776=((0.550716)*x1755);
IkReal x1777=(pz*x1754);
IkReal x1778=(cj4*x1755);
IkReal x1779=(sj3*x1754);
IkReal x1780=(sj6*x1754);
IkReal x1781=((0.550716)*x1754);
IkReal x1782=(sj6*x1755);
IkReal x1783=(cj6*x1755);
evalcond[0]=((-0.028046)+((x1754*x1759))+(((0.275358)*x1754))+((sj3*x1766))+(((-1.0)*sj4*x1756))+((x1754*x1760))+(((0.01)*x1755))+(((-1.0)*x1772*x1782))+((x1771*x1782))+(((-1.0)*cj4*x1769))+(((0.035)*x1782)));
evalcond[1]=((-0.054778)+(((-1.0)*cj4*x1756))+(((-0.275358)*x1755))+x1774+(((-1.0)*sj3*sj4*x1758))+(((-1.0)*x1755*x1760))+(((0.01)*x1754))+(((-1.0)*x1772*x1780))+((x1771*x1780))+(((0.035)*x1780))+(((-1.0)*x1755*x1759)));
evalcond[2]=((-0.275358)+(((-1.0)*x1760))+(((-1.0)*x1756*x1778))+(((0.028046)*x1754))+((x1755*x1774))+((x1754*x1762))+(((-1.0)*x1759))+(((-0.054778)*x1755))+(((-1.0)*sj4*x1758*x1773))+((cj4*x1754*x1769))+(((-1.0)*cj4*x1758*x1779)));
evalcond[3]=((((-1.0)*x1757*x1758*x1773))+(((-1.0)*cj3*sj6*x1758))+(((0.054778)*cj6*x1754))+((x1762*x1783))+(((-0.01)*cj6))+(((0.028046)*x1783))+((x1757*x1777))+((cj6*x1767*x1779))+(((-1.0)*x1764*x1770))+(((-1.0)*x1754*x1768*x1774))+((x1755*x1757*x1769)));
evalcond[4]=((0.035)+x1771+(((-1.0)*sj4*x1756*x1782))+((x1774*x1780))+(((-0.054778)*x1780))+(((-1.0)*cj4*x1756*x1780))+(((-0.028046)*x1782))+(((-1.0)*x1772))+(((-1.0)*sj4*sj6*x1758*x1779))+(((-1.0)*cj3*cj6*x1758))+(((-1.0)*x1764*x1768))+((sj6*x1766*x1773))+(((0.01)*sj6))+(((-1.0)*x1769*x1770*x1778)));
evalcond[5]=((-0.0015095874)+(((0.056092)*sj3*x1766))+(((-0.109556)*x1765))+(((0.109556)*x1774))+((x1762*x1781))+(((-1.0)*x1761*x1766*x1773))+((x1765*x1775))+(((0.00383446)*x1780))+(((-0.029606201048)*x1755))+(((-0.056092)*cj4*x1769))+((x1754*x1761*x1765))+(((-0.056092)*x1762))+((sj3*x1767*x1775))+(((-0.0007)*sj6))+(((0.02)*x1755*x1762))+(((0.00196322)*x1782))+(((-1.0)*x1765*x1776))+(((-0.550716)*x1767*x1773))+(((-1.0)*pz*x1756))+(((0.016540940936)*x1754))+(((-0.109556)*sj3*x1767))+(((-1.0)*px*x1758))+((x1761*x1767*x1779))+((x1774*x1776))+(((0.02)*x1769*x1778))+(((-1.0)*(py*py)))+((x1755*x1761*x1762))+((cj4*x1769*x1781))+(((-1.0)*x1754*x1761*x1774))+(((-1.0)*x1774*x1775))+(((-0.550716)*x1766*x1779))+((x1761*x1769*x1778))+((cj3*px*x1763))+(((-0.02)*x1766*x1773))+((x1763*x1764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x293=(cj7*sj5);
IkReal x294=(cj3*cj6);
IkReal x295=((1.0)*sj4);
IkReal x296=(cj5*sj7);
IkReal x297=(cj5*cj7);
IkReal x298=(cj4*cj6);
IkReal x299=((1.0)*sj6);
IkReal x300=((1.0)*sj3);
IkReal x301=(cj6*sj3);
IkReal x302=((1.0)*sj7);
IkReal x303=(cj7*x294);
IkReal x304=(cj7*x301);
IkReal x305=((-1.0)*sj7);
IkReal x306=((-1.0)*sj3);
IkReal x307=((-1.0)*sj4);
IkReal x308=(((sj6*x297))+(((-1.0)*sj5*x302)));
IkReal x309=(x296+((sj6*x293)));
IkReal x310=(x297+(((-1.0)*sj5*sj7*x299)));
IkReal x311=(x294*x305);
IkReal x312=(x301*x305);
IkReal x313=(cj4*x308);
IkReal x314=(((cj5*x298))+(((-1.0)*cj6*sj5*x295)));
IkReal x315=(((sj5*x298))+((cj5*cj6*sj4)));
IkReal x316=(cj3*x314);
IkReal x317=((((-1.0)*x293))+(((-1.0)*x296*x299)));
IkReal x318=(cj4*x317);
IkReal x319=(x316+((sj6*x306)));
IkReal x320=((((-1.0)*x300*x314))+(((-1.0)*cj3*x299)));
IkReal x321=(((sj4*x308))+((cj4*x309)));
IkReal x322=((((-1.0)*x295*x309))+x313);
IkReal x323=(x313+((x307*x309)));
IkReal x324=((((-1.0)*x295*x310))+x318);
IkReal x325=(((cj4*x310))+((sj4*x317)));
IkReal x326=(x318+((x307*x310)));
IkReal x327=(cj3*x324);
IkReal x328=(x303+(((-1.0)*x300*x322)));
IkReal x329=(x304+((cj3*x322)));
new_r00=(((r20*x321))+((r00*((x303+((x306*x323))))))+((r10*((x304+((cj3*x323)))))));
new_r01=(((r21*x321))+((r11*x329))+((r01*x328)));
new_r02=(((r02*x328))+((r12*x329))+((r22*x321)));
new_r10=(((r20*x315))+((r00*(((((-1.0)*cj3*sj6))+((x306*x314))))))+((r10*((x316+(((-1.0)*sj3*x299)))))));
new_r11=(((r11*x319))+((r01*x320))+((r21*x315)));
new_r12=(((r02*x320))+((r12*x319))+((r22*x315)));
new_r20=(((r20*x325))+((r10*(((((-1.0)*cj6*sj7*x300))+x327))))+((r00*((x311+((x306*x324)))))));
new_r21=(((r11*((x312+((cj3*x326))))))+((r21*x325))+((r01*((x311+((x306*x326)))))));
new_r22=(((r22*x325))+((r12*((x327+x312))))+((r02*(((((-1.0)*x294*x302))+(((-1.0)*x300*x324)))))));
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
cj9array[0]=new_r22;
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
j10eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=sj9;
j8eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j8eval[2]=IKsign(sj9);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=new_r02;
j8eval[1]=sj9;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j10mul = 1;
j10=0;
j8mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].fmul = j8mul;
vinfos[8].freeind = 0;
vinfos[8].maxsolutions = 0;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].fmul = j10mul;
vinfos[10].freeind = 0;
vinfos[10].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 10;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j10mul = 1;
j10=0;
j8mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].fmul = j8mul;
vinfos[8].freeind = 0;
vinfos[8].maxsolutions = 0;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].fmul = j10mul;
vinfos[10].freeind = 0;
vinfos[10].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 10;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x330=new_r22*new_r22;
IkReal x331=((16.0)*new_r10);
IkReal x332=((16.0)*new_r01);
IkReal x333=((16.0)*new_r00);
IkReal x334=(new_r11*new_r22);
IkReal x335=((8.0)*new_r00);
IkReal x336=(x330*x331);
IkReal x337=(x330*x332);
j8eval[0]=((IKabs((((x330*x335))+(((-8.0)*x334)))))+(IKabs((x336+(((-1.0)*x331)))))+(IKabs((x331+(((-1.0)*x336)))))+(IKabs((x332+(((-1.0)*x337)))))+(IKabs((((new_r22*x333))+(((16.0)*new_r11))+(((-32.0)*new_r11*x330)))))+(IKabs((((new_r22*x335))+(((-8.0)*new_r11)))))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x334))+(((-1.0)*x330*x333)))))+(IKabs((x337+(((-1.0)*x332))))));
if( IKabs(j8eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j8, j10]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j8evalpoly[1];
IkReal x338=new_r22*new_r22;
IkReal x339=((16.0)*new_r01);
IkReal x340=(new_r00*new_r22);
IkReal x341=(x338*x339);
IkReal x342=((((8.0)*x340))+(((-8.0)*new_r11)));
op[0]=x342;
op[1]=(x341+(((-1.0)*x339)));
op[2]=((((16.0)*new_r11))+(((16.0)*x340))+(((-32.0)*new_r11*x338)));
op[3]=(x339+(((-1.0)*x341)));
op[4]=x342;
polyroots4(op,zeror,numroots);
IkReal j8array[4], cj8array[4], sj8array[4], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[4]={true,true,true,true};
_nj8 = 4;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

IkReal x343=new_r22*new_r22;
IkReal x344=((16.0)*new_r10);
IkReal x345=(new_r11*new_r22);
IkReal x346=((8.0)*x345);
IkReal x347=(new_r00*x343);
IkReal x348=((8.0)*x347);
IkReal x349=(x343*x344);
j8evalpoly[0]=((((htj8*htj8*htj8*htj8)*((x348+(((-1.0)*x346))))))+(((htj8*htj8)*(((((32.0)*new_r00))+(((-16.0)*x345))+(((-16.0)*x347))))))+((htj8*((x349+(((-1.0)*x344))))))+x348+(((htj8*htj8*htj8)*((x344+(((-1.0)*x349))))))+(((-1.0)*x346)));
if( IKabs(j8evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
IkReal j10eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x350=cj8*cj8;
IkReal x351=new_r22*new_r22;
IkReal x352=(new_r22*sj8);
IkReal x353=((((-1.0)*x351))+(((-1.0)*x350))+((x350*x351)));
j10eval[0]=x353;
j10eval[1]=((IKabs((((new_r01*x352))+(((-1.0)*cj8*new_r00)))))+(IKabs((((cj8*new_r01))+((new_r00*x352))))));
j10eval[2]=IKsign(x353);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=new_r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=cj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x354=IKsin(j10);
IkReal x355=IKcos(j10);
evalcond[0]=(x354+new_r11);
evalcond[1]=((-1.0)*x354);
evalcond[2]=((-1.0)*x355);
evalcond[3]=((((-1.0)*x355))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x356=IKsin(j10);
IkReal x357=IKcos(j10);
evalcond[0]=((-1.0)*x356);
evalcond[1]=((-1.0)*x357);
evalcond[2]=(x356+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x357))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x358=new_r22*new_r22;
CheckValue<IkReal> x359=IKPowWithIntegerCheck(((-1.0)+x358),-1);
if(!x359.valid){
continue;
}
if(((x358*(x359.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x358*(x359.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj8+(((-1.0)*gconst36)))))+(IKabs(((-1.0)+(IKsign(sj8)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x360=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
sj8=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
cj8=gconst36;
if( (gconst36) < -1-IKFAST_SINCOS_THRESH || (gconst36) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=IKacos(gconst36);
CheckValue<IkReal> x361=IKPowWithIntegerCheck(((-1.0)+x360),-1);
if(!x361.valid){
continue;
}
if(((x360*(x361.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x360*(x361.value)));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
CheckValue<IkReal> x362=IKPowWithIntegerCheck(gconst36,-1);
if(!x362.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x362.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))))+IKsqr((new_r00*(x362.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))), (new_r00*(x362.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x363=IKsin(j10);
IkReal x364=IKcos(j10);
IkReal x365=((1.0)*x364);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x366=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
evalcond[0]=((-1.0)*x363);
evalcond[1]=((-1.0)*x364);
evalcond[2]=(new_r01+((gconst36*x363)));
evalcond[3]=(new_r00+(((-1.0)*gconst36*x365)));
evalcond[4]=(new_r11+((x363*x366)));
evalcond[5]=(new_r10+(((-1.0)*x365*x366)));
evalcond[6]=(x363+((gconst36*new_r01))+((new_r11*x366)));
evalcond[7]=((((-1.0)*x365))+((gconst36*new_r00))+((new_r10*x366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x367 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x367.valid){
continue;
}
CheckValue<IkReal> x368=IKPowWithIntegerCheck(IKsign(gconst36),-1);
if(!x368.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x367.value)+(((1.5707963267949)*(x368.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x369=IKsin(j10);
IkReal x370=IKcos(j10);
IkReal x371=((1.0)*x370);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x372=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
evalcond[0]=((-1.0)*x369);
evalcond[1]=((-1.0)*x370);
evalcond[2]=(new_r01+((gconst36*x369)));
evalcond[3]=((((-1.0)*gconst36*x371))+new_r00);
evalcond[4]=(((x369*x372))+new_r11);
evalcond[5]=((((-1.0)*x371*x372))+new_r10);
evalcond[6]=(x369+((gconst36*new_r01))+((new_r11*x372)));
evalcond[7]=((((-1.0)*x371))+((gconst36*new_r00))+((new_r10*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x373=new_r22*new_r22;
CheckValue<IkReal> x374=IKPowWithIntegerCheck(((-1.0)+x373),-1);
if(!x374.valid){
continue;
}
if(((x373*(x374.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x373*(x374.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj8)))))+(IKabs((cj8+(((-1.0)*gconst36)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x375=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
sj8=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))))));
cj8=gconst36;
if( (gconst36) < -1-IKFAST_SINCOS_THRESH || (gconst36) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=((-1.0)*(IKacos(gconst36)));
CheckValue<IkReal> x376=IKPowWithIntegerCheck(((-1.0)+x375),-1);
if(!x376.valid){
continue;
}
if(((x375*(x376.value))) < -0.00001)
continue;
IkReal gconst36=IKsqrt((x375*(x376.value)));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
CheckValue<IkReal> x377=IKPowWithIntegerCheck(gconst36,-1);
if(!x377.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x377.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))))+IKsqr((new_r00*(x377.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36))))))))+(((-1.0)*gconst36*new_r01))), (new_r00*(x377.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x378=IKsin(j10);
IkReal x379=IKcos(j10);
IkReal x380=((1.0)*x379);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x381=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
IkReal x382=((1.0)*x381);
evalcond[0]=((-1.0)*x378);
evalcond[1]=((-1.0)*x379);
evalcond[2]=(new_r01+((gconst36*x378)));
evalcond[3]=((((-1.0)*gconst36*x380))+new_r00);
evalcond[4]=(((x379*x381))+new_r10);
evalcond[5]=((((-1.0)*x378*x382))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x382))+x378+((gconst36*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x382))+((gconst36*new_r00))+(((-1.0)*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x383 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x383.valid){
continue;
}
CheckValue<IkReal> x384=IKPowWithIntegerCheck(IKsign(gconst36),-1);
if(!x384.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x383.value)+(((1.5707963267949)*(x384.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x385=IKsin(j10);
IkReal x386=IKcos(j10);
IkReal x387=((1.0)*x386);
if((((1.0)+(((-1.0)*(gconst36*gconst36))))) < -0.00001)
continue;
IkReal x388=IKsqrt(((1.0)+(((-1.0)*(gconst36*gconst36)))));
IkReal x389=((1.0)*x388);
evalcond[0]=((-1.0)*x385);
evalcond[1]=((-1.0)*x386);
evalcond[2]=(((gconst36*x385))+new_r01);
evalcond[3]=((((-1.0)*gconst36*x387))+new_r00);
evalcond[4]=(((x386*x388))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x385*x389)));
evalcond[6]=((((-1.0)*new_r11*x389))+x385+((gconst36*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x389))+((gconst36*new_r00))+(((-1.0)*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x390=new_r22*new_r22;
CheckValue<IkReal> x391=IKPowWithIntegerCheck(((-1.0)+x390),-1);
if(!x391.valid){
continue;
}
if(((x390*(x391.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x390*(x391.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj8+(((-1.0)*gconst37)))))+(IKabs(((-1.0)+(IKsign(sj8)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x392=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
sj8=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
cj8=gconst37;
if( (gconst37) < -1-IKFAST_SINCOS_THRESH || (gconst37) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=IKacos(gconst37);
CheckValue<IkReal> x393=IKPowWithIntegerCheck(((-1.0)+x392),-1);
if(!x393.valid){
continue;
}
if(((x392*(x393.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x392*(x393.value)))));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
CheckValue<IkReal> x394=IKPowWithIntegerCheck(gconst37,-1);
if(!x394.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x394.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))))+IKsqr((new_r00*(x394.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))), (new_r00*(x394.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x395=IKsin(j10);
IkReal x396=IKcos(j10);
IkReal x397=((1.0)*x396);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x398=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
evalcond[0]=((-1.0)*x395);
evalcond[1]=((-1.0)*x396);
evalcond[2]=(((gconst37*x395))+new_r01);
evalcond[3]=((((-1.0)*gconst37*x397))+new_r00);
evalcond[4]=(((x395*x398))+new_r11);
evalcond[5]=((((-1.0)*x397*x398))+new_r10);
evalcond[6]=(((new_r11*x398))+x395+((gconst37*new_r01)));
evalcond[7]=((((-1.0)*x397))+((gconst37*new_r00))+((new_r10*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
CheckValue<IkReal> x400=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x400.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x399.value)+(((1.5707963267949)*(x400.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x401=IKsin(j10);
IkReal x402=IKcos(j10);
IkReal x403=((1.0)*x402);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x404=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
evalcond[0]=((-1.0)*x401);
evalcond[1]=((-1.0)*x402);
evalcond[2]=(new_r01+((gconst37*x401)));
evalcond[3]=(new_r00+(((-1.0)*gconst37*x403)));
evalcond[4]=(new_r11+((x401*x404)));
evalcond[5]=((((-1.0)*x403*x404))+new_r10);
evalcond[6]=(x401+((gconst37*new_r01))+((new_r11*x404)));
evalcond[7]=(((gconst37*new_r00))+((new_r10*x404))+(((-1.0)*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x405=new_r22*new_r22;
CheckValue<IkReal> x406=IKPowWithIntegerCheck(((-1.0)+x405),-1);
if(!x406.valid){
continue;
}
if(((x405*(x406.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x405*(x406.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj8)))))+(IKabs((cj8+(((-1.0)*gconst37)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x407=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
sj8=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))))));
cj8=gconst37;
if( (gconst37) < -1-IKFAST_SINCOS_THRESH || (gconst37) > 1+IKFAST_SINCOS_THRESH )
    continue;
j8=((-1.0)*(IKacos(gconst37)));
CheckValue<IkReal> x408=IKPowWithIntegerCheck(((-1.0)+x407),-1);
if(!x408.valid){
continue;
}
if(((x407*(x408.value))) < -0.00001)
continue;
IkReal gconst37=((-1.0)*(IKsqrt((x407*(x408.value)))));
j10eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
CheckValue<IkReal> x409=IKPowWithIntegerCheck(gconst37,-1);
if(!x409.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x409.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))))+IKsqr((new_r00*(x409.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37))))))))+(((-1.0)*gconst37*new_r01))), (new_r00*(x409.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x410=IKsin(j10);
IkReal x411=IKcos(j10);
IkReal x412=((1.0)*x411);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x413=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
IkReal x414=((1.0)*x413);
evalcond[0]=((-1.0)*x410);
evalcond[1]=((-1.0)*x411);
evalcond[2]=(new_r01+((gconst37*x410)));
evalcond[3]=(new_r00+(((-1.0)*gconst37*x412)));
evalcond[4]=(((x411*x413))+new_r10);
evalcond[5]=((((-1.0)*x410*x414))+new_r11);
evalcond[6]=(x410+((gconst37*new_r01))+(((-1.0)*new_r11*x414)));
evalcond[7]=(((gconst37*new_r00))+(((-1.0)*x412))+(((-1.0)*new_r10*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x415 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x415.valid){
continue;
}
CheckValue<IkReal> x416=IKPowWithIntegerCheck(IKsign(gconst37),-1);
if(!x416.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x415.value)+(((1.5707963267949)*(x416.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x417=IKsin(j10);
IkReal x418=IKcos(j10);
IkReal x419=((1.0)*x418);
if((((1.0)+(((-1.0)*(gconst37*gconst37))))) < -0.00001)
continue;
IkReal x420=IKsqrt(((1.0)+(((-1.0)*(gconst37*gconst37)))));
IkReal x421=((1.0)*x420);
evalcond[0]=((-1.0)*x417);
evalcond[1]=((-1.0)*x418);
evalcond[2]=(new_r01+((gconst37*x417)));
evalcond[3]=(new_r00+(((-1.0)*gconst37*x419)));
evalcond[4]=(((x418*x420))+new_r10);
evalcond[5]=((((-1.0)*x417*x421))+new_r11);
evalcond[6]=(x417+(((-1.0)*new_r11*x421))+((gconst37*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x421))+((gconst37*new_r00))+(((-1.0)*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x422=((1.0)*new_r11);
IkReal x423=((1.0)*cj8*new_r01);
CheckValue<IkReal> x424=IKPowWithIntegerCheck(cj8,-1);
if(!x424.valid){
continue;
}
if( IKabs(((((-1.0)*x423))+(((-1.0)*sj8*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x424.value)*(((((-1.0)*new_r22*x422))+((new_r11*new_r22*(cj8*cj8)))+(((-1.0)*new_r22*sj8*x423))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x423))+(((-1.0)*sj8*x422))))+IKsqr(((x424.value)*(((((-1.0)*new_r22*x422))+((new_r11*new_r22*(cj8*cj8)))+(((-1.0)*new_r22*sj8*x423))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x423))+(((-1.0)*sj8*x422))), ((x424.value)*(((((-1.0)*new_r22*x422))+((new_r11*new_r22*(cj8*cj8)))+(((-1.0)*new_r22*sj8*x423))+new_r00))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[10];
IkReal x425=IKcos(j10);
IkReal x426=IKsin(j10);
IkReal x427=((1.0)*new_r22);
IkReal x428=(new_r01*sj8);
IkReal x429=(cj8*new_r22);
IkReal x430=(new_r00*sj8);
IkReal x431=((1.0)*x425);
IkReal x432=(cj8*x426);
IkReal x433=(sj8*x426);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x426);
evalcond[1]=((((-1.0)*x431))+((new_r10*sj8))+((cj8*new_r00)));
evalcond[2]=(x432+new_r01+((new_r22*sj8*x425)));
evalcond[3]=((((-1.0)*cj8*x431))+new_r00+((new_r22*x433)));
evalcond[4]=(x433+new_r11+(((-1.0)*cj8*x425*x427)));
evalcond[5]=((((-1.0)*x430))+((cj8*new_r10))+(((-1.0)*x426*x427)));
evalcond[6]=((((-1.0)*x428))+((cj8*new_r11))+(((-1.0)*x425*x427)));
evalcond[7]=((((-1.0)*x427*x432))+(((-1.0)*sj8*x431))+new_r10);
evalcond[8]=((((-1.0)*x426))+(((-1.0)*x427*x430))+((new_r10*x429)));
evalcond[9]=((((-1.0)*x431))+(((-1.0)*x427*x428))+((new_r11*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x434=((1.0)*new_r01);
CheckValue<IkReal> x435=IKPowWithIntegerCheck(new_r22,-1);
if(!x435.valid){
continue;
}
if( IKabs(((((-1.0)*cj8*x434))+(((-1.0)*new_r11*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x435.value)*(((((-1.0)*sj8*x434))+((cj8*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x434))+(((-1.0)*new_r11*sj8))))+IKsqr(((x435.value)*(((((-1.0)*sj8*x434))+((cj8*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x434))+(((-1.0)*new_r11*sj8))), ((x435.value)*(((((-1.0)*sj8*x434))+((cj8*new_r11))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[10];
IkReal x436=IKcos(j10);
IkReal x437=IKsin(j10);
IkReal x438=((1.0)*new_r22);
IkReal x439=(new_r01*sj8);
IkReal x440=(cj8*new_r22);
IkReal x441=(new_r00*sj8);
IkReal x442=((1.0)*x436);
IkReal x443=(cj8*x437);
IkReal x444=(sj8*x437);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x437);
evalcond[1]=((((-1.0)*x442))+((new_r10*sj8))+((cj8*new_r00)));
evalcond[2]=(x443+((new_r22*sj8*x436))+new_r01);
evalcond[3]=(((new_r22*x444))+(((-1.0)*cj8*x442))+new_r00);
evalcond[4]=(x444+new_r11+(((-1.0)*cj8*x436*x438)));
evalcond[5]=((((-1.0)*x437*x438))+(((-1.0)*x441))+((cj8*new_r10)));
evalcond[6]=((((-1.0)*x439))+(((-1.0)*x436*x438))+((cj8*new_r11)));
evalcond[7]=((((-1.0)*x438*x443))+(((-1.0)*sj8*x442))+new_r10);
evalcond[8]=((((-1.0)*x438*x441))+(((-1.0)*x437))+((new_r10*x440)));
evalcond[9]=((((-1.0)*x442))+(((-1.0)*x438*x439))+((new_r11*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x445=cj8*cj8;
IkReal x446=new_r22*new_r22;
IkReal x447=(new_r22*sj8);
CheckValue<IkReal> x448=IKPowWithIntegerCheck(IKsign(((((-1.0)*x446))+(((-1.0)*x445))+((x445*x446)))),-1);
if(!x448.valid){
continue;
}
CheckValue<IkReal> x449 = IKatan2WithCheck(IkReal((((new_r00*x447))+((cj8*new_r01)))),IkReal((((new_r01*x447))+(((-1.0)*cj8*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x449.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x448.value)))+(x449.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[10];
IkReal x450=IKcos(j10);
IkReal x451=IKsin(j10);
IkReal x452=((1.0)*new_r22);
IkReal x453=(new_r01*sj8);
IkReal x454=(cj8*new_r22);
IkReal x455=(new_r00*sj8);
IkReal x456=((1.0)*x450);
IkReal x457=(cj8*x451);
IkReal x458=(sj8*x451);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x451);
evalcond[1]=(((new_r10*sj8))+(((-1.0)*x456))+((cj8*new_r00)));
evalcond[2]=(((new_r22*sj8*x450))+x457+new_r01);
evalcond[3]=((((-1.0)*cj8*x456))+((new_r22*x458))+new_r00);
evalcond[4]=((((-1.0)*cj8*x450*x452))+x458+new_r11);
evalcond[5]=((((-1.0)*x455))+((cj8*new_r10))+(((-1.0)*x451*x452)));
evalcond[6]=((((-1.0)*x453))+((cj8*new_r11))+(((-1.0)*x450*x452)));
evalcond[7]=((((-1.0)*sj8*x456))+(((-1.0)*x452*x457))+new_r10);
evalcond[8]=(((new_r10*x454))+(((-1.0)*x451))+(((-1.0)*x452*x455)));
evalcond[9]=(((new_r11*x454))+(((-1.0)*x456))+(((-1.0)*x452*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x460=IKPowWithIntegerCheck(sj9,-1);
if(!x460.valid){
continue;
}
IkReal x459=x460.value;
CheckValue<IkReal> x461=IKPowWithIntegerCheck(new_r02,-1);
if(!x461.valid){
continue;
}
if( IKabs((x459*(x461.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x459)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x459*(x461.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x459))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x459*(x461.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x459));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x462=IKsin(j8);
IkReal x463=IKcos(j8);
IkReal x464=((1.0)*sj9);
IkReal x465=(new_r02*x462);
IkReal x466=(new_r12*x463);
IkReal x467=(sj9*x462);
evalcond[0]=(new_r12+((sj9*x463)));
evalcond[1]=((((-1.0)*x462*x464))+new_r02);
evalcond[2]=(((new_r12*x462))+((new_r02*x463)));
evalcond[3]=(sj9+(((-1.0)*x465))+x466);
evalcond[4]=(((cj9*x466))+(((-1.0)*cj9*x465))+((new_r22*sj9)));
evalcond[5]=(((cj9*new_r20))+((new_r00*x467))+(((-1.0)*new_r10*x463*x464)));
evalcond[6]=(((cj9*new_r21))+((new_r01*x467))+(((-1.0)*new_r11*x463*x464)));
evalcond[7]=((-1.0)+((cj9*new_r22))+(((-1.0)*x464*x466))+((sj9*x465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
j10eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
j10eval[0]=sj9;
j10eval[1]=cj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=cj9;
j10eval[2]=sj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x468=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x468))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x468))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x468))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x468))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x468))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x468))+((cj8*new_r00))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x469=IKcos(j10);
IkReal x470=IKsin(j10);
IkReal x471=((1.0)*sj8);
IkReal x472=(sj8*x470);
IkReal x473=((1.0)*x469);
IkReal x474=(cj8*x470);
IkReal x475=(cj8*x473);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x470);
evalcond[1]=(((new_r10*sj8))+(((-1.0)*x473))+((cj8*new_r00)));
evalcond[2]=(x474+new_r01+((sj8*x469)));
evalcond[3]=((((-1.0)*x475))+x472+new_r00);
evalcond[4]=((((-1.0)*x475))+x472+new_r11);
evalcond[5]=((((-1.0)*new_r00*x471))+((cj8*new_r10))+(((-1.0)*x470)));
evalcond[6]=((((-1.0)*x473))+(((-1.0)*new_r01*x471))+((cj8*new_r11)));
evalcond[7]=((((-1.0)*x469*x471))+(((-1.0)*x474))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x476=((1.0)*cj8);
if( IKabs(((((-1.0)*new_r01*x476))+(((-1.0)*new_r11*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj8))+(((-1.0)*new_r11*x476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x476))+(((-1.0)*new_r11*sj8))))+IKsqr((((new_r01*sj8))+(((-1.0)*new_r11*x476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r01*x476))+(((-1.0)*new_r11*sj8))), (((new_r01*sj8))+(((-1.0)*new_r11*x476))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x477=IKsin(j10);
IkReal x478=IKcos(j10);
IkReal x479=((1.0)*sj8);
IkReal x480=(cj8*x477);
IkReal x481=((1.0)*x478);
IkReal x482=(sj8*x477);
IkReal x483=(x478*x479);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x477);
evalcond[1]=((((-1.0)*new_r00*x479))+((cj8*new_r10))+x477);
evalcond[2]=((((-1.0)*new_r01*x479))+((cj8*new_r11))+x478);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x481))+((cj8*new_r00)));
evalcond[4]=(((cj8*x478))+x482+new_r11);
evalcond[5]=((((-1.0)*x483))+x480+new_r01);
evalcond[6]=((((-1.0)*x483))+x480+new_r10);
evalcond[7]=((((-1.0)*x477*x479))+(((-1.0)*cj8*x481))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r20, new_r21);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x484=IKsin(j10);
IkReal x485=IKcos(j10);
IkReal x486=((1.0)*x485);
evalcond[0]=((((-1.0)*x484))+new_r20);
evalcond[1]=((((-1.0)*x486))+new_r21);
evalcond[2]=(new_r01+((cj8*x484)));
evalcond[3]=(((sj8*x484))+new_r11);
evalcond[4]=((((-1.0)*cj8*x486))+new_r00);
evalcond[5]=((((-1.0)*sj8*x486))+new_r10);
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x484);
evalcond[7]=(((new_r10*sj8))+(((-1.0)*x486))+((cj8*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x487=IKsin(j10);
IkReal x488=IKcos(j10);
IkReal x489=((1.0)*x488);
evalcond[0]=(x487+new_r20);
evalcond[1]=(x488+new_r21);
evalcond[2]=(new_r01+((cj8*x487)));
evalcond[3]=(((sj8*x487))+new_r11);
evalcond[4]=((((-1.0)*cj8*x489))+new_r00);
evalcond[5]=((((-1.0)*sj8*x489))+new_r10);
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x487);
evalcond[7]=(((new_r10*sj8))+(((-1.0)*x489))+((cj8*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x490=IKsin(j10);
IkReal x491=IKcos(j10);
IkReal x492=((1.0)*x491);
IkReal x493=((1.0)*x490);
evalcond[0]=(x490+new_r01);
evalcond[1]=((((-1.0)*x492))+new_r00);
evalcond[2]=((((-1.0)*sj9*x493))+new_r20);
evalcond[3]=((((-1.0)*sj9*x492))+new_r21);
evalcond[4]=((((-1.0)*cj9*x492))+new_r11);
evalcond[5]=((((-1.0)*cj9*x493))+new_r10);
evalcond[6]=((((-1.0)*x493))+((new_r20*sj9))+((cj9*new_r10)));
evalcond[7]=((((-1.0)*x492))+((cj9*new_r11))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x494=IKsin(j10);
IkReal x495=IKcos(j10);
IkReal x496=((1.0)*new_r10);
IkReal x497=((1.0)*x495);
IkReal x498=((1.0)*x494);
evalcond[0]=(x494+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+((cj9*x495)));
evalcond[2]=((((-1.0)*sj9*x498))+new_r20);
evalcond[3]=((((-1.0)*sj9*x497))+new_r21);
evalcond[4]=((((-1.0)*x497))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x496))+(((-1.0)*cj9*x498)));
evalcond[6]=((((-1.0)*x498))+((new_r20*sj9))+(((-1.0)*cj9*x496)));
evalcond[7]=((((-1.0)*x497))+((new_r21*sj9))+(((-1.0)*cj9*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x499=IKcos(j10);
IkReal x500=IKsin(j10);
IkReal x501=((1.0)*cj9);
IkReal x502=((1.0)*x499);
IkReal x503=((1.0)*x500);
evalcond[0]=(x500+new_r11);
evalcond[1]=((((-1.0)*x502))+new_r10);
evalcond[2]=(new_r01+((cj9*x499)));
evalcond[3]=(((cj9*x500))+new_r00);
evalcond[4]=((((-1.0)*sj9*x503))+new_r20);
evalcond[5]=((((-1.0)*sj9*x502))+new_r21);
evalcond[6]=(((new_r20*sj9))+(((-1.0)*new_r00*x501))+(((-1.0)*x503)));
evalcond[7]=((((-1.0)*new_r01*x501))+(((-1.0)*x502))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x504=IKsin(j10);
IkReal x505=IKcos(j10);
IkReal x506=((1.0)*x505);
IkReal x507=((1.0)*x504);
evalcond[0]=(x504+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*sj9*x507))+new_r20);
evalcond[2]=((((-1.0)*sj9*x506))+new_r21);
evalcond[3]=(new_r01+(((-1.0)*cj9*x506)));
evalcond[4]=(new_r00+(((-1.0)*cj9*x507)));
evalcond[5]=((((-1.0)*x506))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r20*sj9))+(((-1.0)*x507))+((cj9*new_r00)));
evalcond[7]=((((-1.0)*x506))+((cj9*new_r01))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=IKabs(new_r22);
if( IKabs(j10eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j10]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[2]={true,true};
_nj10 = 2;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x509=IKPowWithIntegerCheck(sj9,-1);
if(!x509.valid){
continue;
}
IkReal x508=x509.value;
CheckValue<IkReal> x510=IKPowWithIntegerCheck(cj9,-1);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511=IKPowWithIntegerCheck(sj8,-1);
if(!x511.valid){
continue;
}
if( IKabs((new_r20*x508)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x508*(x510.value)*(x511.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x508))+IKsqr((x508*(x510.value)*(x511.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x508), (x508*(x510.value)*(x511.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x512=IKsin(j10);
IkReal x513=IKcos(j10);
IkReal x514=(cj9*sj8);
IkReal x515=(cj8*new_r10);
IkReal x516=((1.0)*new_r01);
IkReal x517=(cj8*new_r11);
IkReal x518=((1.0)*new_r00);
IkReal x519=((1.0)*x513);
IkReal x520=(cj8*x512);
IkReal x521=((1.0)*x512);
IkReal x522=(cj9*x519);
evalcond[0]=((((-1.0)*sj9*x521))+new_r20);
evalcond[1]=((((-1.0)*sj9*x519))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x512);
evalcond[3]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x519)));
evalcond[4]=(((x513*x514))+x520+new_r01);
evalcond[5]=((((-1.0)*cj8*x519))+((x512*x514))+new_r00);
evalcond[6]=(((sj8*x512))+(((-1.0)*cj8*x522))+new_r11);
evalcond[7]=((((-1.0)*cj9*x521))+x515+(((-1.0)*sj8*x518)));
evalcond[8]=((((-1.0)*x522))+x517+(((-1.0)*sj8*x516)));
evalcond[9]=((((-1.0)*cj9*x520))+(((-1.0)*sj8*x519))+new_r10);
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x514*x518))+(((-1.0)*x521))+((cj9*x515)));
evalcond[11]=((((-1.0)*x514*x516))+((cj9*x517))+((new_r21*sj9))+(((-1.0)*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x524=IKPowWithIntegerCheck(sj9,-1);
if(!x524.valid){
continue;
}
IkReal x523=x524.value;
CheckValue<IkReal> x525=IKPowWithIntegerCheck(cj8,-1);
if(!x525.valid){
continue;
}
if( IKabs((new_r20*x523)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x523*(x525.value)*((((cj9*new_r20*sj8))+((new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x523))+IKsqr((x523*(x525.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x523), (x523*(x525.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x526=IKsin(j10);
IkReal x527=IKcos(j10);
IkReal x528=(cj9*sj8);
IkReal x529=(cj8*new_r10);
IkReal x530=((1.0)*new_r01);
IkReal x531=(cj8*new_r11);
IkReal x532=((1.0)*new_r00);
IkReal x533=((1.0)*x527);
IkReal x534=(cj8*x526);
IkReal x535=((1.0)*x526);
IkReal x536=(cj9*x533);
evalcond[0]=((((-1.0)*sj9*x535))+new_r20);
evalcond[1]=((((-1.0)*sj9*x533))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x526);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x533))+((cj8*new_r00)));
evalcond[4]=(x534+new_r01+((x527*x528)));
evalcond[5]=((((-1.0)*cj8*x533))+((x526*x528))+new_r00);
evalcond[6]=(((sj8*x526))+(((-1.0)*cj8*x536))+new_r11);
evalcond[7]=((((-1.0)*cj9*x535))+x529+(((-1.0)*sj8*x532)));
evalcond[8]=((((-1.0)*x536))+x531+(((-1.0)*sj8*x530)));
evalcond[9]=((((-1.0)*cj9*x534))+new_r10+(((-1.0)*sj8*x533)));
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x535))+(((-1.0)*x528*x532))+((cj9*x529)));
evalcond[11]=((((-1.0)*x533))+(((-1.0)*x528*x530))+((cj9*x531))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x539=IKsin(j10);
IkReal x540=IKcos(j10);
IkReal x541=(cj9*sj8);
IkReal x542=(cj8*new_r10);
IkReal x543=((1.0)*new_r01);
IkReal x544=(cj8*new_r11);
IkReal x545=((1.0)*new_r00);
IkReal x546=((1.0)*x540);
IkReal x547=(cj8*x539);
IkReal x548=((1.0)*x539);
IkReal x549=(cj9*x546);
evalcond[0]=((((-1.0)*sj9*x548))+new_r20);
evalcond[1]=((((-1.0)*sj9*x546))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x539);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x546))+((cj8*new_r00)));
evalcond[4]=(((x540*x541))+x547+new_r01);
evalcond[5]=(((x539*x541))+(((-1.0)*cj8*x546))+new_r00);
evalcond[6]=(((sj8*x539))+(((-1.0)*cj8*x549))+new_r11);
evalcond[7]=((((-1.0)*cj9*x548))+x542+(((-1.0)*sj8*x545)));
evalcond[8]=((((-1.0)*x549))+x544+(((-1.0)*sj8*x543)));
evalcond[9]=((((-1.0)*cj9*x547))+new_r10+(((-1.0)*sj8*x546)));
evalcond[10]=((((-1.0)*x541*x545))+((new_r20*sj9))+(((-1.0)*x548))+((cj9*x542)));
evalcond[11]=((((-1.0)*x541*x543))+(((-1.0)*x546))+((cj9*x544))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x550=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x550.valid){
continue;
}
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x550.value)))+(x551.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x552=IKsin(j8);
IkReal x553=IKcos(j8);
IkReal x554=((1.0)*sj9);
IkReal x555=(new_r02*x552);
IkReal x556=(new_r12*x553);
IkReal x557=(sj9*x552);
evalcond[0]=(((sj9*x553))+new_r12);
evalcond[1]=((((-1.0)*x552*x554))+new_r02);
evalcond[2]=(((new_r02*x553))+((new_r12*x552)));
evalcond[3]=((((-1.0)*x555))+sj9+x556);
evalcond[4]=(((cj9*x556))+((new_r22*sj9))+(((-1.0)*cj9*x555)));
evalcond[5]=((((-1.0)*new_r10*x553*x554))+((cj9*new_r20))+((new_r00*x557)));
evalcond[6]=(((cj9*new_r21))+(((-1.0)*new_r11*x553*x554))+((new_r01*x557)));
evalcond[7]=((-1.0)+((cj9*new_r22))+(((-1.0)*x554*x556))+((sj9*x555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
j10eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
j10eval[0]=sj9;
j10eval[1]=cj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
j10eval[0]=sj9;
j10eval[1]=cj9;
j10eval[2]=sj8;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x558=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x558))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x558))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x558))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x558))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x558))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x558))+((cj8*new_r00))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x559=IKcos(j10);
IkReal x560=IKsin(j10);
IkReal x561=((1.0)*sj8);
IkReal x562=(sj8*x560);
IkReal x563=((1.0)*x559);
IkReal x564=(cj8*x560);
IkReal x565=(cj8*x563);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x560);
evalcond[1]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x563)));
evalcond[2]=(((sj8*x559))+x564+new_r01);
evalcond[3]=(x562+new_r00+(((-1.0)*x565)));
evalcond[4]=(x562+new_r11+(((-1.0)*x565)));
evalcond[5]=((((-1.0)*new_r00*x561))+((cj8*new_r10))+(((-1.0)*x560)));
evalcond[6]=(((cj8*new_r11))+(((-1.0)*x563))+(((-1.0)*new_r01*x561)));
evalcond[7]=((((-1.0)*x559*x561))+(((-1.0)*x564))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x566=((1.0)*cj8);
if( IKabs(((((-1.0)*new_r11*sj8))+(((-1.0)*new_r01*x566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj8))+(((-1.0)*new_r11*x566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj8))+(((-1.0)*new_r01*x566))))+IKsqr((((new_r01*sj8))+(((-1.0)*new_r11*x566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*new_r11*sj8))+(((-1.0)*new_r01*x566))), (((new_r01*sj8))+(((-1.0)*new_r11*x566))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x567=IKsin(j10);
IkReal x568=IKcos(j10);
IkReal x569=((1.0)*sj8);
IkReal x570=(cj8*x567);
IkReal x571=((1.0)*x568);
IkReal x572=(sj8*x567);
IkReal x573=(x568*x569);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x567);
evalcond[1]=((((-1.0)*new_r00*x569))+((cj8*new_r10))+x567);
evalcond[2]=(((cj8*new_r11))+x568+(((-1.0)*new_r01*x569)));
evalcond[3]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x571)));
evalcond[4]=(((cj8*x568))+x572+new_r11);
evalcond[5]=((((-1.0)*x573))+x570+new_r01);
evalcond[6]=((((-1.0)*x573))+x570+new_r10);
evalcond[7]=((((-1.0)*cj8*x571))+(((-1.0)*x567*x569))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r20, new_r21);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x574=IKsin(j10);
IkReal x575=IKcos(j10);
IkReal x576=((1.0)*x575);
evalcond[0]=((((-1.0)*x574))+new_r20);
evalcond[1]=((((-1.0)*x576))+new_r21);
evalcond[2]=(((cj8*x574))+new_r01);
evalcond[3]=(new_r11+((sj8*x574)));
evalcond[4]=((((-1.0)*cj8*x576))+new_r00);
evalcond[5]=((((-1.0)*sj8*x576))+new_r10);
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x574);
evalcond[7]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x577=IKsin(j10);
IkReal x578=IKcos(j10);
IkReal x579=((1.0)*x578);
evalcond[0]=(x577+new_r20);
evalcond[1]=(x578+new_r21);
evalcond[2]=(((cj8*x577))+new_r01);
evalcond[3]=(new_r11+((sj8*x577)));
evalcond[4]=((((-1.0)*cj8*x579))+new_r00);
evalcond[5]=((((-1.0)*sj8*x579))+new_r10);
evalcond[6]=(((new_r11*sj8))+((cj8*new_r01))+x577);
evalcond[7]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x580=IKsin(j10);
IkReal x581=IKcos(j10);
IkReal x582=((1.0)*x581);
IkReal x583=((1.0)*x580);
evalcond[0]=(x580+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x582)));
evalcond[2]=(new_r20+(((-1.0)*sj9*x583)));
evalcond[3]=(new_r21+(((-1.0)*sj9*x582)));
evalcond[4]=((((-1.0)*cj9*x582))+new_r11);
evalcond[5]=((((-1.0)*cj9*x583))+new_r10);
evalcond[6]=(((new_r20*sj9))+((cj9*new_r10))+(((-1.0)*x583)));
evalcond[7]=(((cj9*new_r11))+((new_r21*sj9))+(((-1.0)*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x584=IKsin(j10);
IkReal x585=IKcos(j10);
IkReal x586=((1.0)*new_r10);
IkReal x587=((1.0)*x585);
IkReal x588=((1.0)*x584);
evalcond[0]=(x584+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+((cj9*x585)));
evalcond[2]=(new_r20+(((-1.0)*sj9*x588)));
evalcond[3]=(new_r21+(((-1.0)*sj9*x587)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x587)));
evalcond[5]=((((-1.0)*cj9*x588))+(((-1.0)*x586)));
evalcond[6]=(((new_r20*sj9))+(((-1.0)*cj9*x586))+(((-1.0)*x588)));
evalcond[7]=(((new_r21*sj9))+(((-1.0)*x587))+(((-1.0)*cj9*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x589=IKcos(j10);
IkReal x590=IKsin(j10);
IkReal x591=((1.0)*cj9);
IkReal x592=((1.0)*x589);
IkReal x593=((1.0)*x590);
evalcond[0]=(x590+new_r11);
evalcond[1]=((((-1.0)*x592))+new_r10);
evalcond[2]=(new_r01+((cj9*x589)));
evalcond[3]=(((cj9*x590))+new_r00);
evalcond[4]=((((-1.0)*sj9*x593))+new_r20);
evalcond[5]=((((-1.0)*sj9*x592))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x591))+((new_r20*sj9))+(((-1.0)*x593)));
evalcond[7]=((((-1.0)*new_r01*x591))+(((-1.0)*x592))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x594=IKsin(j10);
IkReal x595=IKcos(j10);
IkReal x596=((1.0)*x595);
IkReal x597=((1.0)*x594);
evalcond[0]=(x594+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*sj9*x597))+new_r20);
evalcond[2]=((((-1.0)*sj9*x596))+new_r21);
evalcond[3]=((((-1.0)*cj9*x596))+new_r01);
evalcond[4]=((((-1.0)*cj9*x597))+new_r00);
evalcond[5]=((((-1.0)*x596))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r20*sj9))+((cj9*new_r00))+(((-1.0)*x597)));
evalcond[7]=(((cj9*new_r01))+(((-1.0)*x596))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j10eval[0]=IKabs(new_r22);
if( IKabs(j10eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j10]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[2]={true,true};
_nj10 = 2;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x599=IKPowWithIntegerCheck(sj9,-1);
if(!x599.valid){
continue;
}
IkReal x598=x599.value;
CheckValue<IkReal> x600=IKPowWithIntegerCheck(cj9,-1);
if(!x600.valid){
continue;
}
CheckValue<IkReal> x601=IKPowWithIntegerCheck(sj8,-1);
if(!x601.valid){
continue;
}
if( IKabs((new_r20*x598)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x598*(x600.value)*(x601.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x598))+IKsqr((x598*(x600.value)*(x601.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x598), (x598*(x600.value)*(x601.value)*(((((-1.0)*new_r01*sj9))+(((-1.0)*cj8*new_r20))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x602=IKsin(j10);
IkReal x603=IKcos(j10);
IkReal x604=(cj9*sj8);
IkReal x605=(cj8*new_r10);
IkReal x606=((1.0)*new_r01);
IkReal x607=(cj8*new_r11);
IkReal x608=((1.0)*new_r00);
IkReal x609=((1.0)*x603);
IkReal x610=(cj8*x602);
IkReal x611=((1.0)*x602);
IkReal x612=(cj9*x609);
evalcond[0]=((((-1.0)*sj9*x611))+new_r20);
evalcond[1]=((((-1.0)*sj9*x609))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x602);
evalcond[3]=(((new_r10*sj8))+((cj8*new_r00))+(((-1.0)*x609)));
evalcond[4]=(((x603*x604))+x610+new_r01);
evalcond[5]=((((-1.0)*cj8*x609))+((x602*x604))+new_r00);
evalcond[6]=((((-1.0)*cj8*x612))+((sj8*x602))+new_r11);
evalcond[7]=((((-1.0)*cj9*x611))+x605+(((-1.0)*sj8*x608)));
evalcond[8]=((((-1.0)*x612))+x607+(((-1.0)*sj8*x606)));
evalcond[9]=((((-1.0)*cj9*x610))+(((-1.0)*sj8*x609))+new_r10);
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x604*x608))+((cj9*x605))+(((-1.0)*x611)));
evalcond[11]=((((-1.0)*x604*x606))+((cj9*x607))+(((-1.0)*x609))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x614=IKPowWithIntegerCheck(sj9,-1);
if(!x614.valid){
continue;
}
IkReal x613=x614.value;
CheckValue<IkReal> x615=IKPowWithIntegerCheck(cj8,-1);
if(!x615.valid){
continue;
}
if( IKabs((new_r20*x613)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x613*(x615.value)*((((cj9*new_r20*sj8))+((new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x613))+IKsqr((x613*(x615.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((new_r20*x613), (x613*(x615.value)*((((cj9*new_r20*sj8))+((new_r00*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x616=IKsin(j10);
IkReal x617=IKcos(j10);
IkReal x618=(cj9*sj8);
IkReal x619=(cj8*new_r10);
IkReal x620=((1.0)*new_r01);
IkReal x621=(cj8*new_r11);
IkReal x622=((1.0)*new_r00);
IkReal x623=((1.0)*x617);
IkReal x624=(cj8*x616);
IkReal x625=((1.0)*x616);
IkReal x626=(cj9*x623);
evalcond[0]=((((-1.0)*sj9*x625))+new_r20);
evalcond[1]=((((-1.0)*sj9*x623))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x616);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x623))+((cj8*new_r00)));
evalcond[4]=(((x617*x618))+x624+new_r01);
evalcond[5]=((((-1.0)*cj8*x623))+((x616*x618))+new_r00);
evalcond[6]=(((sj8*x616))+(((-1.0)*cj8*x626))+new_r11);
evalcond[7]=((((-1.0)*cj9*x625))+(((-1.0)*sj8*x622))+x619);
evalcond[8]=((((-1.0)*sj8*x620))+(((-1.0)*x626))+x621);
evalcond[9]=((((-1.0)*sj8*x623))+new_r10+(((-1.0)*cj9*x624)));
evalcond[10]=(((new_r20*sj9))+(((-1.0)*x625))+((cj9*x619))+(((-1.0)*x618*x622)));
evalcond[11]=((((-1.0)*x623))+(((-1.0)*x618*x620))+((new_r21*sj9))+((cj9*x621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x628.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x627.value)))+(x628.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x629=IKsin(j10);
IkReal x630=IKcos(j10);
IkReal x631=(cj9*sj8);
IkReal x632=(cj8*new_r10);
IkReal x633=((1.0)*new_r01);
IkReal x634=(cj8*new_r11);
IkReal x635=((1.0)*new_r00);
IkReal x636=((1.0)*x630);
IkReal x637=(cj8*x629);
IkReal x638=((1.0)*x629);
IkReal x639=(cj9*x636);
evalcond[0]=((((-1.0)*sj9*x638))+new_r20);
evalcond[1]=((((-1.0)*sj9*x636))+new_r21);
evalcond[2]=(((new_r11*sj8))+((cj8*new_r01))+x629);
evalcond[3]=(((new_r10*sj8))+(((-1.0)*x636))+((cj8*new_r00)));
evalcond[4]=(x637+new_r01+((x630*x631)));
evalcond[5]=((((-1.0)*cj8*x636))+((x629*x631))+new_r00);
evalcond[6]=((((-1.0)*cj8*x639))+((sj8*x629))+new_r11);
evalcond[7]=((((-1.0)*sj8*x635))+x632+(((-1.0)*cj9*x638)));
evalcond[8]=((((-1.0)*sj8*x633))+(((-1.0)*x639))+x634);
evalcond[9]=((((-1.0)*sj8*x636))+new_r10+(((-1.0)*cj9*x637)));
evalcond[10]=((((-1.0)*x631*x635))+((new_r20*sj9))+(((-1.0)*x638))+((cj9*x632)));
evalcond[11]=((((-1.0)*x631*x633))+(((-1.0)*x636))+((new_r21*sj9))+((cj9*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x640=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x641.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x640.value)))+(x641.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x642=((1.0)*sj9);
evalcond[0]=((((-1.0)*x642*(IKsin(j10))))+new_r20);
evalcond[1]=((((-1.0)*x642*(IKcos(j10))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=sj9;
j8eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j8eval[2]=IKsign(sj9);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=new_r11;
j8eval[1]=sj9;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x643=((1.0)*sj10);
if( IKabs(((((-1.0)*cj10*new_r01))+(((-1.0)*new_r00*x643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj10*new_r00))+(((-1.0)*new_r01*x643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj10*new_r01))+(((-1.0)*new_r00*x643))))+IKsqr((((cj10*new_r00))+(((-1.0)*new_r01*x643))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj10*new_r01))+(((-1.0)*new_r00*x643))), (((cj10*new_r00))+(((-1.0)*new_r01*x643))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x644=IKsin(j8);
IkReal x645=IKcos(j8);
IkReal x646=((1.0)*cj10);
IkReal x647=((1.0)*sj10);
IkReal x648=(sj10*x644);
IkReal x649=((1.0)*x644);
IkReal x650=(x645*x646);
evalcond[0]=(((new_r11*x644))+sj10+((new_r01*x645)));
evalcond[1]=(((sj10*x645))+((cj10*x644))+new_r01);
evalcond[2]=((((-1.0)*x650))+x648+new_r00);
evalcond[3]=((((-1.0)*x650))+x648+new_r11);
evalcond[4]=((((-1.0)*x646))+((new_r10*x644))+((new_r00*x645)));
evalcond[5]=((((-1.0)*x644*x646))+(((-1.0)*x645*x647))+new_r10);
evalcond[6]=((((-1.0)*x647))+((new_r10*x645))+(((-1.0)*new_r00*x649)));
evalcond[7]=(((new_r11*x645))+(((-1.0)*x646))+(((-1.0)*new_r01*x649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x651=(((cj10*new_r01))+((new_r11*sj10)));
j8eval[0]=x651;
j8eval[1]=IKsign(x651);
j8eval[2]=((IKabs(((-1.0)+(cj10*cj10)+(new_r01*new_r01))))+(IKabs(((((-1.0)*cj10*sj10))+(((-1.0)*new_r01*new_r11))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x652=((1.0)*sj10);
IkReal x653=(((new_r10*new_r11))+((new_r00*new_r01)));
j8eval[0]=x653;
j8eval[1]=IKsign(x653);
j8eval[2]=((IKabs(((((-1.0)*new_r10*x652))+((new_r01*sj10)))))+(IKabs(((((-1.0)*new_r00*x652))+(((-1.0)*new_r11*x652))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x654=((1.0)*sj10);
IkReal x655=((new_r01*new_r01)+(new_r11*new_r11));
j8eval[0]=x655;
j8eval[1]=IKsign(x655);
j8eval[2]=((IKabs((((cj10*new_r01))+(((-1.0)*new_r11*x654)))))+(IKabs(((((-1.0)*cj10*new_r11))+(((-1.0)*new_r01*x654))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
new_r01=0;
new_r11=0;
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x657 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x657.valid){
continue;
}
IkReal x656=x657.value;
j8array[0]=((-1.0)*x656);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x656)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j8))))+(((-1.0)*new_r00*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x658=IKcos(j8);
IkReal x659=IKsin(j8);
IkReal x660=((1.0)*x659);
evalcond[0]=(x658+new_r11);
evalcond[1]=((((-1.0)*x660))+new_r01);
evalcond[2]=((((-1.0)*x658))+new_r00);
evalcond[3]=((((-1.0)*x660))+new_r10);
evalcond[4]=(((new_r01*x658))+((new_r11*x659)));
evalcond[5]=((-1.0)+((new_r10*x659))+((new_r00*x658)));
evalcond[6]=(((new_r10*x658))+(((-1.0)*new_r00*x660)));
evalcond[7]=((1.0)+((new_r11*x658))+(((-1.0)*new_r01*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x661=IKsin(j8);
IkReal x662=IKcos(j8);
IkReal x663=((1.0)*x661);
evalcond[0]=(x661+new_r01);
evalcond[1]=(x662+new_r00);
evalcond[2]=(x661+new_r10);
evalcond[3]=((((-1.0)*x662))+new_r11);
evalcond[4]=(((new_r11*x661))+((new_r01*x662)));
evalcond[5]=((1.0)+((new_r10*x661))+((new_r00*x662)));
evalcond[6]=(((new_r10*x662))+(((-1.0)*new_r00*x663)));
evalcond[7]=((-1.0)+((new_r11*x662))+(((-1.0)*new_r01*x663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x665 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x665)==0){
continue;
}
IkReal x664=pow(x665,-0.5);
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
IkReal gconst30=((-1.0)*(x666.value));
IkReal gconst31=((-1.0)*new_r01*x664);
IkReal gconst32=(new_r11*x664);
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j10+(x667.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x670 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x670.valid){
continue;
}
IkReal x668=((-1.0)*(x670.value));
IkReal x669=x664;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x668;
IkReal gconst30=x668;
IkReal gconst31=((-1.0)*new_r01*x669);
IkReal gconst32=(new_r11*x669);
IkReal x671=new_r01*new_r01;
IkReal x672=(new_r00*new_r01);
IkReal x673=(((new_r10*new_r11))+x672);
IkReal x674=x664;
IkReal x675=(new_r01*x674);
j8eval[0]=x673;
j8eval[1]=IKsign(x673);
j8eval[2]=((IKabs((((new_r11*x675))+((x672*x674)))))+(IKabs((((new_r10*x675))+(((-1.0)*x671*x674))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
IkReal x676=((-1.0)*(x678.value));
IkReal x677=x664;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x676;
IkReal gconst30=x676;
IkReal gconst31=((-1.0)*new_r01*x677);
IkReal gconst32=(new_r11*x677);
IkReal x679=((new_r01*new_r01)+(new_r11*new_r11));
j8eval[0]=x679;
j8eval[1]=IKsign(x679);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
IkReal x680=((-1.0)*(x682.value));
IkReal x681=x664;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x680;
IkReal gconst30=x680;
IkReal gconst31=((-1.0)*new_r01*x681);
IkReal gconst32=(new_r11*x681);
j8eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst32*gconst32)+(gconst31*gconst31));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x684 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x684.valid){
continue;
}
IkReal x683=((-1.0)*(x684.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x683;
new_r11=0;
new_r00=0;
IkReal gconst30=x683;
IkReal x685 = new_r01*new_r01;
if(IKabs(x685)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r01*(pow(x685,-0.5)));
IkReal gconst32=0;
j8eval[0]=new_r01;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x686=IKPowWithIntegerCheck(gconst31,-1);
if(!x686.valid){
continue;
}
cj8array[0]=((-1.0)*new_r01*(x686.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x687=IKsin(j8);
IkReal x688=IKcos(j8);
IkReal x689=((-1.0)*x687);
evalcond[0]=(new_r10*x687);
evalcond[1]=(gconst31*x689);
evalcond[2]=(new_r01*x689);
evalcond[3]=(gconst31+((new_r01*x688)));
evalcond[4]=(gconst31+((new_r10*x688)));
evalcond[5]=(((gconst31*x688))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x690=IKPowWithIntegerCheck(new_r01,-1);
if(!x690.valid){
continue;
}
cj8array[0]=((-1.0)*gconst31*(x690.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x691=IKsin(j8);
IkReal x692=IKcos(j8);
IkReal x693=(gconst31*x692);
IkReal x694=((-1.0)*x691);
evalcond[0]=(new_r10*x691);
evalcond[1]=(gconst31*x694);
evalcond[2]=(new_r01*x694);
evalcond[3]=(x693+new_r01);
evalcond[4]=(gconst31+((new_r10*x692)));
evalcond[5]=(x693+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst31;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
IkReal x695=((-1.0)*(x696.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x695;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst30=x695;
IkReal gconst31=((-1.0)*new_r01);
IkReal gconst32=new_r11;
j8eval[0]=-1.0;
j8eval[1]=-1.0;
j8eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
IkReal x697=((-1.0)*(x698.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x697;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst30=x697;
IkReal gconst31=((-1.0)*new_r01);
IkReal gconst32=new_r11;
j8eval[0]=-1.0;
j8eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j8eval[2]=-1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
IkReal x699=((-1.0)*(x700.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x699;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst30=x699;
IkReal gconst31=((-1.0)*new_r01);
IkReal gconst32=new_r11;
j8eval[0]=1.0;
j8eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j8eval[2]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x701=((1.0)*gconst31);
CheckValue<IkReal> x702=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x702.valid){
continue;
}
CheckValue<IkReal> x703 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x701))+((gconst32*new_r01)))),IkReal(((((-1.0)*gconst32*new_r11))+(((-1.0)*new_r01*x701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x703.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x702.value)))+(x703.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x704=IKcos(j8);
IkReal x705=IKsin(j8);
IkReal x706=(gconst31*x704);
IkReal x707=((1.0)*x705);
IkReal x708=(gconst32*x704);
IkReal x709=(gconst32*x707);
evalcond[0]=(((new_r01*x704))+gconst31+((new_r11*x705)));
evalcond[1]=(((gconst31*x705))+x708+new_r11);
evalcond[2]=((((-1.0)*x709))+x706);
evalcond[3]=((((-1.0)*x709))+x706+new_r01);
evalcond[4]=((((-1.0)*x708))+(((-1.0)*gconst31*x707)));
evalcond[5]=(gconst32+((new_r11*x704))+(((-1.0)*new_r01*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal((gconst31*new_r11)),IkReal((gconst32*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst32*gconst32)))+(((-1.0)*(gconst31*gconst31))))),-1);
if(!x711.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x710.value)+(((1.5707963267949)*(x711.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x712=IKcos(j8);
IkReal x713=IKsin(j8);
IkReal x714=(gconst31*x712);
IkReal x715=((1.0)*x713);
IkReal x716=(gconst32*x712);
IkReal x717=(gconst32*x715);
evalcond[0]=(((new_r01*x712))+gconst31+((new_r11*x713)));
evalcond[1]=(((gconst31*x713))+x716+new_r11);
evalcond[2]=((((-1.0)*x717))+x714);
evalcond[3]=((((-1.0)*x717))+x714+new_r01);
evalcond[4]=((((-1.0)*x716))+(((-1.0)*gconst31*x715)));
evalcond[5]=(gconst32+((new_r11*x712))+(((-1.0)*new_r01*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal((gconst31*gconst32)),IkReal(((-1.0)*(gconst31*gconst31))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*new_r11))+((gconst31*new_r01)))),-1);
if(!x719.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x718.value)+(((1.5707963267949)*(x719.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x720=IKcos(j8);
IkReal x721=IKsin(j8);
IkReal x722=(gconst31*x720);
IkReal x723=((1.0)*x721);
IkReal x724=(gconst32*x720);
IkReal x725=(gconst32*x723);
evalcond[0]=(gconst31+((new_r01*x720))+((new_r11*x721)));
evalcond[1]=(x724+new_r11+((gconst31*x721)));
evalcond[2]=((((-1.0)*x725))+x722);
evalcond[3]=((((-1.0)*x725))+x722+new_r01);
evalcond[4]=((((-1.0)*gconst31*x723))+(((-1.0)*x724)));
evalcond[5]=(gconst32+((new_r11*x720))+(((-1.0)*new_r01*x723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x726=IKPowWithIntegerCheck(gconst32,-1);
if(!x726.valid){
continue;
}
cj8array[0]=(new_r00*(x726.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x727=IKsin(j8);
IkReal x728=IKcos(j8);
IkReal x729=((-1.0)*x727);
evalcond[0]=(new_r11*x727);
evalcond[1]=(gconst32*x729);
evalcond[2]=(new_r00*x729);
evalcond[3]=(((gconst32*x728))+new_r11);
evalcond[4]=(gconst32+((new_r11*x728)));
evalcond[5]=(((new_r00*x728))+(((-1.0)*gconst32)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
IkReal x730=((-1.0)*(x731.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x730;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst30=x730;
IkReal gconst31=0;
IkReal x732 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x732)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x732,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x734 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x734.valid){
continue;
}
IkReal x733=((-1.0)*(x734.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x733;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst30=x733;
IkReal gconst31=0;
IkReal x735 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x735)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x735,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x736=((-1.0)*(x737.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x736;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst30=x736;
IkReal gconst31=0;
IkReal x738 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x738)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x738,-0.5)));
j8eval[0]=new_r10;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x739=IKPowWithIntegerCheck(new_r10,-1);
if(!x739.valid){
continue;
}
CheckValue<IkReal> x740=IKPowWithIntegerCheck(gconst32,-1);
if(!x740.valid){
continue;
}
if( IKabs((gconst32*(x739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x740.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst32*(x739.value)))+IKsqr(((-1.0)*new_r11*(x740.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((gconst32*(x739.value)), ((-1.0)*new_r11*(x740.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x741=IKsin(j8);
IkReal x742=IKcos(j8);
IkReal x743=((1.0)*gconst32);
IkReal x744=((-1.0)*gconst32);
evalcond[0]=(new_r11*x741);
evalcond[1]=(new_r10*x742);
evalcond[2]=(x741*x744);
evalcond[3]=(x742*x744);
evalcond[4]=(((gconst32*x742))+new_r11);
evalcond[5]=(gconst32+((new_r11*x742)));
evalcond[6]=((((-1.0)*x741*x743))+new_r10);
evalcond[7]=(((new_r10*x741))+(((-1.0)*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(gconst32,-1);
if(!x745.valid){
continue;
}
CheckValue<IkReal> x746=IKPowWithIntegerCheck(new_r11,-1);
if(!x746.valid){
continue;
}
if( IKabs((new_r10*(x745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst32*(x746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x745.value)))+IKsqr(((-1.0)*gconst32*(x746.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x745.value)), ((-1.0)*gconst32*(x746.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x747=IKsin(j8);
IkReal x748=IKcos(j8);
IkReal x749=((1.0)*gconst32);
IkReal x750=((-1.0)*gconst32);
evalcond[0]=(new_r11*x747);
evalcond[1]=(new_r10*x748);
evalcond[2]=(x747*x750);
evalcond[3]=(x748*x750);
evalcond[4]=(((gconst32*x748))+new_r11);
evalcond[5]=(gconst32+((new_r11*x748)));
evalcond[6]=((((-1.0)*x747*x749))+new_r10);
evalcond[7]=(((new_r10*x747))+(((-1.0)*x749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x752.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x751.value)+(((1.5707963267949)*(x752.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x753=IKsin(j8);
IkReal x754=IKcos(j8);
IkReal x755=((1.0)*gconst32);
IkReal x756=((-1.0)*gconst32);
evalcond[0]=(new_r11*x753);
evalcond[1]=(new_r10*x754);
evalcond[2]=(x753*x756);
evalcond[3]=(x754*x756);
evalcond[4]=(((gconst32*x754))+new_r11);
evalcond[5]=(gconst32+((new_r11*x754)));
evalcond[6]=((((-1.0)*x753*x755))+new_r10);
evalcond[7]=(((new_r10*x753))+(((-1.0)*x755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
IkReal x757=((-1.0)*(x758.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x757;
new_r01=0;
IkReal gconst30=x757;
IkReal gconst31=0;
IkReal x759 = new_r11*new_r11;
if(IKabs(x759)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x759,-0.5)));
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x761 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x761.valid){
continue;
}
IkReal x760=((-1.0)*(x761.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x760;
new_r01=0;
IkReal gconst30=x760;
IkReal gconst31=0;
IkReal x762 = new_r11*new_r11;
if(IKabs(x762)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x762,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
IkReal x763=((-1.0)*(x764.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst31;
cj10=gconst32;
j10=x763;
new_r01=0;
IkReal gconst30=x763;
IkReal gconst31=0;
IkReal x765 = new_r11*new_r11;
if(IKabs(x765)==0){
continue;
}
IkReal gconst32=(new_r11*(pow(x765,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x766=IKPowWithIntegerCheck(gconst32,-1);
if(!x766.valid){
continue;
}
CheckValue<IkReal> x767=IKPowWithIntegerCheck(new_r11,-1);
if(!x767.valid){
continue;
}
if( IKabs((new_r10*(x766.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst32*(x767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x766.value)))+IKsqr(((-1.0)*gconst32*(x767.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x766.value)), ((-1.0)*gconst32*(x767.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x768=IKsin(j8);
IkReal x769=IKcos(j8);
IkReal x770=((1.0)*gconst32);
evalcond[0]=(new_r11*x768);
evalcond[1]=((-1.0)*gconst32*x768);
evalcond[2]=(((gconst32*x769))+new_r11);
evalcond[3]=(((new_r11*x769))+gconst32);
evalcond[4]=((((-1.0)*x769*x770))+new_r00);
evalcond[5]=((((-1.0)*x768*x770))+new_r10);
evalcond[6]=(((new_r10*x769))+(((-1.0)*new_r00*x768)));
evalcond[7]=(((new_r10*x768))+((new_r00*x769))+(((-1.0)*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x772.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x771.value)+(((1.5707963267949)*(x772.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x773=IKsin(j8);
IkReal x774=IKcos(j8);
IkReal x775=((1.0)*gconst32);
evalcond[0]=(new_r11*x773);
evalcond[1]=((-1.0)*gconst32*x773);
evalcond[2]=(((gconst32*x774))+new_r11);
evalcond[3]=(gconst32+((new_r11*x774)));
evalcond[4]=((((-1.0)*x774*x775))+new_r00);
evalcond[5]=((((-1.0)*x773*x775))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x773))+((new_r10*x774)));
evalcond[7]=(((new_r00*x774))+((new_r10*x773))+(((-1.0)*x775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x776=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x776.valid){
continue;
}
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x776.value)))+(x777.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x778=IKsin(j8);
IkReal x779=IKcos(j8);
IkReal x780=((1.0)*gconst32);
evalcond[0]=(new_r11*x778);
evalcond[1]=((-1.0)*gconst32*x778);
evalcond[2]=(((gconst32*x779))+new_r11);
evalcond[3]=(gconst32+((new_r11*x779)));
evalcond[4]=(new_r00+(((-1.0)*x779*x780)));
evalcond[5]=(new_r10+(((-1.0)*x778*x780)));
evalcond[6]=((((-1.0)*new_r00*x778))+((new_r10*x779)));
evalcond[7]=((((-1.0)*x780))+((new_r00*x779))+((new_r10*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x781=((1.0)*gconst31);
CheckValue<IkReal> x782 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x781))+((gconst32*new_r01)))),IkReal(((((-1.0)*new_r01*x781))+(((-1.0)*gconst32*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x782.valid){
continue;
}
CheckValue<IkReal> x783=IKPowWithIntegerCheck(IKsign(((gconst32*gconst32)+(gconst31*gconst31))),-1);
if(!x783.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x782.value)+(((1.5707963267949)*(x783.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x784=IKcos(j8);
IkReal x785=IKsin(j8);
IkReal x786=((1.0)*gconst32);
IkReal x787=(gconst31*x784);
IkReal x788=((1.0)*x785);
IkReal x789=(x785*x786);
evalcond[0]=(((new_r11*x785))+gconst31+((new_r01*x784)));
evalcond[1]=(((gconst32*x784))+((gconst31*x785))+new_r11);
evalcond[2]=((((-1.0)*x789))+x787+new_r01);
evalcond[3]=(((new_r10*x784))+gconst31+(((-1.0)*new_r00*x788)));
evalcond[4]=((((-1.0)*new_r01*x788))+((new_r11*x784))+gconst32);
evalcond[5]=((((-1.0)*x789))+x787+new_r10);
evalcond[6]=(((new_r10*x785))+(((-1.0)*x786))+((new_r00*x784)));
evalcond[7]=((((-1.0)*gconst31*x788))+(((-1.0)*x784*x786))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x790=((1.0)*gconst31);
CheckValue<IkReal> x791 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x790))+((gconst32*new_r01)))),IkReal(((((-1.0)*new_r01*x790))+(((-1.0)*gconst32*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x791.valid){
continue;
}
CheckValue<IkReal> x792=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x792.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x791.value)+(((1.5707963267949)*(x792.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x793=IKcos(j8);
IkReal x794=IKsin(j8);
IkReal x795=((1.0)*gconst32);
IkReal x796=(gconst31*x793);
IkReal x797=((1.0)*x794);
IkReal x798=(x794*x795);
evalcond[0]=(((new_r11*x794))+gconst31+((new_r01*x793)));
evalcond[1]=(((gconst31*x794))+((gconst32*x793))+new_r11);
evalcond[2]=((((-1.0)*x798))+x796+new_r01);
evalcond[3]=(((new_r10*x793))+gconst31+(((-1.0)*new_r00*x797)));
evalcond[4]=((((-1.0)*new_r01*x797))+((new_r11*x793))+gconst32);
evalcond[5]=((((-1.0)*x798))+x796+new_r10);
evalcond[6]=((((-1.0)*x795))+((new_r10*x794))+((new_r00*x793)));
evalcond[7]=((((-1.0)*x793*x795))+(((-1.0)*gconst31*x797))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x799=((1.0)*gconst31);
CheckValue<IkReal> x800 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x799))+((gconst31*new_r01)))),IkReal(((((-1.0)*new_r11*x799))+(((-1.0)*new_r00*x799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x800.valid){
continue;
}
CheckValue<IkReal> x801=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x801.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x800.value)+(((1.5707963267949)*(x801.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x802=IKcos(j8);
IkReal x803=IKsin(j8);
IkReal x804=((1.0)*gconst32);
IkReal x805=(gconst31*x802);
IkReal x806=((1.0)*x803);
IkReal x807=(x803*x804);
evalcond[0]=(gconst31+((new_r11*x803))+((new_r01*x802)));
evalcond[1]=(((gconst32*x802))+new_r11+((gconst31*x803)));
evalcond[2]=(new_r01+x805+(((-1.0)*x807)));
evalcond[3]=((((-1.0)*new_r00*x806))+gconst31+((new_r10*x802)));
evalcond[4]=((((-1.0)*new_r01*x806))+gconst32+((new_r11*x802)));
evalcond[5]=(new_r10+x805+(((-1.0)*x807)));
evalcond[6]=(((new_r00*x802))+((new_r10*x803))+(((-1.0)*x804)));
evalcond[7]=((((-1.0)*gconst31*x806))+new_r00+(((-1.0)*x802*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x809 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x809)==0){
continue;
}
IkReal x808=pow(x809,-0.5);
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x810.value))));
IkReal gconst34=((1.0)*new_r01*x808);
IkReal gconst35=((-1.0)*new_r11*x808);
CheckValue<IkReal> x811 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x811.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10+(x811.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
IkReal x812=((1.0)*(x814.value));
IkReal x813=x808;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x812)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x812)));
IkReal gconst34=((1.0)*new_r01*x813);
IkReal gconst35=((-1.0)*new_r11*x813);
IkReal x815=new_r01*new_r01;
IkReal x816=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x817=x808;
IkReal x818=((1.0)*new_r01*x817);
j8eval[0]=x816;
j8eval[1]=((IKabs((((x815*x817))+(((-1.0)*new_r10*x818)))))+(IKabs(((((-1.0)*new_r11*x818))+(((-1.0)*new_r00*x818))))));
j8eval[2]=IKsign(x816);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x821 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x821.valid){
continue;
}
IkReal x819=((1.0)*(x821.value));
IkReal x820=x808;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x819)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x819)));
IkReal gconst34=((1.0)*new_r01*x820);
IkReal gconst35=((-1.0)*new_r11*x820);
IkReal x822=((new_r01*new_r01)+(new_r11*new_r11));
j8eval[0]=x822;
j8eval[1]=IKsign(x822);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
IkReal x823=((1.0)*(x825.value));
IkReal x824=x808;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x823)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x823)));
IkReal gconst34=((1.0)*new_r01*x824);
IkReal gconst35=((-1.0)*new_r11*x824);
j8eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst35*gconst35)+(gconst34*gconst34));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
IkReal x826=((1.0)*(x827.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x826)));
new_r11=0;
new_r00=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x826)));
IkReal x828 = new_r01*new_r01;
if(IKabs(x828)==0){
continue;
}
IkReal gconst34=((1.0)*new_r01*(pow(x828,-0.5)));
IkReal gconst35=0;
j8eval[0]=new_r01;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(gconst34,-1);
if(!x829.valid){
continue;
}
cj8array[0]=((-1.0)*new_r01*(x829.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x830=IKsin(j8);
IkReal x831=IKcos(j8);
IkReal x832=((-1.0)*x830);
evalcond[0]=(new_r10*x830);
evalcond[1]=(gconst34*x832);
evalcond[2]=(new_r01*x832);
evalcond[3]=(((new_r01*x831))+gconst34);
evalcond[4]=(gconst34+((new_r10*x831)));
evalcond[5]=(((gconst34*x831))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x833=IKPowWithIntegerCheck(new_r01,-1);
if(!x833.valid){
continue;
}
cj8array[0]=((-1.0)*gconst34*(x833.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x834=IKsin(j8);
IkReal x835=IKcos(j8);
IkReal x836=(gconst34*x835);
IkReal x837=((-1.0)*x834);
evalcond[0]=(new_r10*x834);
evalcond[1]=(gconst34*x837);
evalcond[2]=(new_r01*x837);
evalcond[3]=(new_r01+x836);
evalcond[4]=(gconst34+((new_r10*x835)));
evalcond[5]=(new_r10+x836);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst34;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
IkReal x838=((1.0)*(x839.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x838)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x838)));
IkReal gconst34=((1.0)*new_r01);
IkReal gconst35=((-1.0)*new_r11);
j8eval[0]=1.0;
j8eval[1]=1.0;
j8eval[2]=new_r01;
j8eval[3]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
IkReal x840=((1.0)*(x841.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x840)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x840)));
IkReal gconst34=((1.0)*new_r01);
IkReal gconst35=((-1.0)*new_r11);
j8eval[0]=-1.0;
j8eval[1]=-1.0;
j8eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
IkReal x842=((1.0)*(x843.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x842)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x842)));
IkReal gconst34=((1.0)*new_r01);
IkReal gconst35=((-1.0)*new_r11);
j8eval[0]=1.0;
j8eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j8eval[2]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x844=((1.0)*gconst34);
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal((((gconst35*new_r01))+(((-1.0)*new_r11*x844)))),IkReal(((((-1.0)*gconst35*new_r11))+(((-1.0)*new_r01*x844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
CheckValue<IkReal> x846=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x846.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x845.value)+(((1.5707963267949)*(x846.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x847=IKcos(j8);
IkReal x848=IKsin(j8);
IkReal x849=(gconst34*x847);
IkReal x850=(gconst34*x848);
IkReal x851=(gconst35*x847);
IkReal x852=((1.0)*x848);
IkReal x853=(gconst35*x852);
evalcond[0]=(gconst34+((new_r01*x847))+((new_r11*x848)));
evalcond[1]=(new_r11+x850+x851);
evalcond[2]=((((-1.0)*x853))+x849);
evalcond[3]=((((-1.0)*x853))+new_r01+x849);
evalcond[4]=((((-1.0)*x851))+(((-1.0)*x850)));
evalcond[5]=((((-1.0)*new_r01*x852))+gconst35+((new_r11*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst34*gconst34)))+(((-1.0)*(gconst35*gconst35))))),-1);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal((gconst34*new_r11)),IkReal((gconst35*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x854.value)))+(x855.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x856=IKcos(j8);
IkReal x857=IKsin(j8);
IkReal x858=(gconst34*x856);
IkReal x859=(gconst34*x857);
IkReal x860=(gconst35*x856);
IkReal x861=((1.0)*x857);
IkReal x862=(gconst35*x861);
evalcond[0]=(gconst34+((new_r11*x857))+((new_r01*x856)));
evalcond[1]=(new_r11+x859+x860);
evalcond[2]=((((-1.0)*x862))+x858);
evalcond[3]=((((-1.0)*x862))+new_r01+x858);
evalcond[4]=((((-1.0)*x859))+(((-1.0)*x860)));
evalcond[5]=((((-1.0)*new_r01*x861))+gconst35+((new_r11*x856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*new_r11))+((gconst34*new_r01)))),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal((gconst34*gconst35)),IkReal(((-1.0)*(gconst34*gconst34))),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x865=IKcos(j8);
IkReal x866=IKsin(j8);
IkReal x867=(gconst34*x865);
IkReal x868=(gconst34*x866);
IkReal x869=(gconst35*x865);
IkReal x870=((1.0)*x866);
IkReal x871=(gconst35*x870);
evalcond[0]=(((new_r01*x865))+gconst34+((new_r11*x866)));
evalcond[1]=(new_r11+x869+x868);
evalcond[2]=(x867+(((-1.0)*x871)));
evalcond[3]=(new_r01+x867+(((-1.0)*x871)));
evalcond[4]=((((-1.0)*x869))+(((-1.0)*x868)));
evalcond[5]=(gconst35+(((-1.0)*new_r01*x870))+((new_r11*x865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(gconst35,-1);
if(!x872.valid){
continue;
}
cj8array[0]=(new_r00*(x872.value));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x873=IKsin(j8);
IkReal x874=IKcos(j8);
IkReal x875=((-1.0)*x873);
evalcond[0]=(new_r11*x873);
evalcond[1]=(gconst35*x875);
evalcond[2]=(new_r00*x875);
evalcond[3]=(new_r11+((gconst35*x874)));
evalcond[4]=(gconst35+((new_r11*x874)));
evalcond[5]=(((new_r00*x874))+(((-1.0)*gconst35)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x877 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x877.valid){
continue;
}
IkReal x876=((1.0)*(x877.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x876)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x876)));
IkReal gconst34=0;
IkReal x878 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x878)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x878,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
IkReal x879=((1.0)*(x880.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x879)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x879)));
IkReal gconst34=0;
IkReal x881 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x881)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x881,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
IkReal x882=((1.0)*(x883.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x882)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x882)));
IkReal gconst34=0;
IkReal x884 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x884)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x884,-0.5)));
j8eval[0]=new_r10;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x885=IKPowWithIntegerCheck(new_r10,-1);
if(!x885.valid){
continue;
}
CheckValue<IkReal> x886=IKPowWithIntegerCheck(gconst35,-1);
if(!x886.valid){
continue;
}
if( IKabs((gconst35*(x885.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x886.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst35*(x885.value)))+IKsqr(((-1.0)*new_r11*(x886.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((gconst35*(x885.value)), ((-1.0)*new_r11*(x886.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x887=IKsin(j8);
IkReal x888=IKcos(j8);
IkReal x889=((1.0)*gconst35);
IkReal x890=(gconst35*x888);
evalcond[0]=(new_r11*x887);
evalcond[1]=(new_r10*x888);
evalcond[2]=((-1.0)*gconst35*x887);
evalcond[3]=((-1.0)*x890);
evalcond[4]=(new_r11+x890);
evalcond[5]=(((new_r11*x888))+gconst35);
evalcond[6]=((((-1.0)*x887*x889))+new_r10);
evalcond[7]=(((new_r10*x887))+(((-1.0)*x889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x891=IKPowWithIntegerCheck(gconst35,-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892=IKPowWithIntegerCheck(new_r11,-1);
if(!x892.valid){
continue;
}
if( IKabs((new_r10*(x891.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst35*(x892.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x891.value)))+IKsqr(((-1.0)*gconst35*(x892.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x891.value)), ((-1.0)*gconst35*(x892.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x893=IKsin(j8);
IkReal x894=IKcos(j8);
IkReal x895=((1.0)*gconst35);
IkReal x896=(gconst35*x894);
evalcond[0]=(new_r11*x893);
evalcond[1]=(new_r10*x894);
evalcond[2]=((-1.0)*gconst35*x893);
evalcond[3]=((-1.0)*x896);
evalcond[4]=(new_r11+x896);
evalcond[5]=(((new_r11*x894))+gconst35);
evalcond[6]=((((-1.0)*x893*x895))+new_r10);
evalcond[7]=(((new_r10*x893))+(((-1.0)*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x897 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898=IKPowWithIntegerCheck(IKsign(gconst35),-1);
if(!x898.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x897.value)+(((1.5707963267949)*(x898.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x899=IKsin(j8);
IkReal x900=IKcos(j8);
IkReal x901=((1.0)*gconst35);
IkReal x902=(gconst35*x900);
evalcond[0]=(new_r11*x899);
evalcond[1]=(new_r10*x900);
evalcond[2]=((-1.0)*gconst35*x899);
evalcond[3]=((-1.0)*x902);
evalcond[4]=(new_r11+x902);
evalcond[5]=(gconst35+((new_r11*x900)));
evalcond[6]=(new_r10+(((-1.0)*x899*x901)));
evalcond[7]=(((new_r10*x899))+(((-1.0)*x901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x904 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x904.valid){
continue;
}
IkReal x903=((1.0)*(x904.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x903)));
new_r01=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x903)));
IkReal gconst34=0;
IkReal x905 = new_r11*new_r11;
if(IKabs(x905)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x905,-0.5)));
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal x906=((1.0)*(x907.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x906)));
new_r01=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x906)));
IkReal gconst34=0;
IkReal x908 = new_r11*new_r11;
if(IKabs(x908)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x908,-0.5)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
IkReal x909=((1.0)*(x910.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=gconst34;
cj10=gconst35;
j10=((3.14159265)+(((-1.0)*x909)));
new_r01=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x909)));
IkReal gconst34=0;
IkReal x911 = new_r11*new_r11;
if(IKabs(x911)==0){
continue;
}
IkReal gconst35=((-1.0)*new_r11*(pow(x911,-0.5)));
j8eval[0]=new_r11;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(gconst35,-1);
if(!x912.valid){
continue;
}
CheckValue<IkReal> x913=IKPowWithIntegerCheck(new_r11,-1);
if(!x913.valid){
continue;
}
if( IKabs((new_r10*(x912.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst35*(x913.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x912.value)))+IKsqr(((-1.0)*gconst35*(x913.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((new_r10*(x912.value)), ((-1.0)*gconst35*(x913.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x914=IKsin(j8);
IkReal x915=IKcos(j8);
IkReal x916=((1.0)*gconst35);
IkReal x917=(gconst35*x915);
evalcond[0]=(new_r11*x914);
evalcond[1]=((-1.0)*gconst35*x914);
evalcond[2]=(new_r11+x917);
evalcond[3]=(gconst35+((new_r11*x915)));
evalcond[4]=(new_r00+(((-1.0)*x915*x916)));
evalcond[5]=((((-1.0)*x914*x916))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x914))+((new_r10*x915)));
evalcond[7]=((((-1.0)*x916))+((new_r10*x914))+((new_r00*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign(gconst35),-1);
if(!x919.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x918.value)+(((1.5707963267949)*(x919.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x920=IKsin(j8);
IkReal x921=IKcos(j8);
IkReal x922=((1.0)*gconst35);
IkReal x923=(gconst35*x921);
evalcond[0]=(new_r11*x920);
evalcond[1]=((-1.0)*gconst35*x920);
evalcond[2]=(new_r11+x923);
evalcond[3]=(gconst35+((new_r11*x921)));
evalcond[4]=((((-1.0)*x921*x922))+new_r00);
evalcond[5]=((((-1.0)*x920*x922))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x920))+((new_r10*x921)));
evalcond[7]=((((-1.0)*x922))+((new_r00*x921))+((new_r10*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
CheckValue<IkReal> x925=IKPowWithIntegerCheck(IKsign(gconst35),-1);
if(!x925.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x924.value)+(((1.5707963267949)*(x925.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x926=IKsin(j8);
IkReal x927=IKcos(j8);
IkReal x928=((1.0)*gconst35);
IkReal x929=(gconst35*x927);
evalcond[0]=(new_r11*x926);
evalcond[1]=((-1.0)*gconst35*x926);
evalcond[2]=(new_r11+x929);
evalcond[3]=(gconst35+((new_r11*x927)));
evalcond[4]=((((-1.0)*x927*x928))+new_r00);
evalcond[5]=((((-1.0)*x926*x928))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x926))+((new_r10*x927)));
evalcond[7]=((((-1.0)*x928))+((new_r00*x927))+((new_r10*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x930=((1.0)*gconst34);
CheckValue<IkReal> x931 = IKatan2WithCheck(IkReal((((gconst35*new_r01))+(((-1.0)*new_r11*x930)))),IkReal(((((-1.0)*new_r01*x930))+(((-1.0)*gconst35*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932=IKPowWithIntegerCheck(IKsign(((gconst35*gconst35)+(gconst34*gconst34))),-1);
if(!x932.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x931.value)+(((1.5707963267949)*(x932.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x933=IKcos(j8);
IkReal x934=IKsin(j8);
IkReal x935=(gconst34*x933);
IkReal x936=(gconst34*x934);
IkReal x937=(gconst35*x933);
IkReal x938=((1.0)*x934);
IkReal x939=(gconst35*x938);
evalcond[0]=(gconst34+((new_r01*x933))+((new_r11*x934)));
evalcond[1]=(new_r11+x937+x936);
evalcond[2]=(new_r01+x935+(((-1.0)*x939)));
evalcond[3]=(gconst34+(((-1.0)*new_r00*x938))+((new_r10*x933)));
evalcond[4]=(gconst35+(((-1.0)*new_r01*x938))+((new_r11*x933)));
evalcond[5]=(new_r10+x935+(((-1.0)*x939)));
evalcond[6]=(((new_r00*x933))+((new_r10*x934))+(((-1.0)*gconst35)));
evalcond[7]=((((-1.0)*x937))+(((-1.0)*x936))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x940=((1.0)*gconst34);
CheckValue<IkReal> x941=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942 = IKatan2WithCheck(IkReal((((gconst35*new_r01))+(((-1.0)*new_r11*x940)))),IkReal(((((-1.0)*new_r01*x940))+(((-1.0)*gconst35*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x942.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x941.value)))+(x942.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x943=IKcos(j8);
IkReal x944=IKsin(j8);
IkReal x945=(gconst34*x943);
IkReal x946=(gconst34*x944);
IkReal x947=(gconst35*x943);
IkReal x948=((1.0)*x944);
IkReal x949=(gconst35*x948);
evalcond[0]=(((new_r01*x943))+gconst34+((new_r11*x944)));
evalcond[1]=(new_r11+x946+x947);
evalcond[2]=((((-1.0)*x949))+new_r01+x945);
evalcond[3]=(gconst34+((new_r10*x943))+(((-1.0)*new_r00*x948)));
evalcond[4]=(gconst35+((new_r11*x943))+(((-1.0)*new_r01*x948)));
evalcond[5]=((((-1.0)*x949))+new_r10+x945);
evalcond[6]=(((new_r00*x943))+((new_r10*x944))+(((-1.0)*gconst35)));
evalcond[7]=((((-1.0)*x946))+(((-1.0)*x947))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x950=((1.0)*gconst34);
CheckValue<IkReal> x951 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x950))+((gconst34*new_r01)))),IkReal(((((-1.0)*new_r00*x950))+(((-1.0)*new_r11*x950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x952.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x951.value)+(((1.5707963267949)*(x952.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x953=IKcos(j8);
IkReal x954=IKsin(j8);
IkReal x955=(gconst34*x953);
IkReal x956=(gconst34*x954);
IkReal x957=(gconst35*x953);
IkReal x958=((1.0)*x954);
IkReal x959=(gconst35*x958);
evalcond[0]=(((new_r01*x953))+gconst34+((new_r11*x954)));
evalcond[1]=(new_r11+x957+x956);
evalcond[2]=(new_r01+(((-1.0)*x959))+x955);
evalcond[3]=(((new_r10*x953))+gconst34+(((-1.0)*new_r00*x958)));
evalcond[4]=(gconst35+(((-1.0)*new_r01*x958))+((new_r11*x953)));
evalcond[5]=(new_r10+(((-1.0)*x959))+x955);
evalcond[6]=(((new_r10*x954))+((new_r00*x953))+(((-1.0)*gconst35)));
evalcond[7]=((((-1.0)*x957))+(((-1.0)*x956))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
IkReal x960=x961.value;
j8array[0]=((-1.0)*x960);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x960)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j8))))+(((-1.0)*new_r00*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x962=((1.0)*sj10);
CheckValue<IkReal> x963=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x963.valid){
continue;
}
CheckValue<IkReal> x964 = IKatan2WithCheck(IkReal((((cj10*new_r01))+(((-1.0)*new_r11*x962)))),IkReal(((((-1.0)*cj10*new_r11))+(((-1.0)*new_r01*x962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x964.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x963.value)))+(x964.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x965=IKcos(j8);
IkReal x966=IKsin(j8);
IkReal x967=((1.0)*cj10);
IkReal x968=(sj10*x965);
IkReal x969=(sj10*x966);
IkReal x970=((1.0)*x966);
IkReal x971=(x966*x967);
evalcond[0]=(((new_r11*x966))+((new_r01*x965))+sj10);
evalcond[1]=(((cj10*x965))+new_r11+x969);
evalcond[2]=(new_r01+x968+(((-1.0)*x971)));
evalcond[3]=(sj10+(((-1.0)*new_r00*x970))+((new_r10*x965)));
evalcond[4]=(((new_r11*x965))+(((-1.0)*new_r01*x970))+cj10);
evalcond[5]=(new_r10+x968+(((-1.0)*x971)));
evalcond[6]=(((new_r00*x965))+(((-1.0)*x967))+((new_r10*x966)));
evalcond[7]=((((-1.0)*x965*x967))+(((-1.0)*x969))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x972=((1.0)*sj10);
CheckValue<IkReal> x973 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x972))+((new_r01*sj10)))),IkReal(((((-1.0)*new_r11*x972))+(((-1.0)*new_r00*x972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x973.valid){
continue;
}
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x974.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x973.value)+(((1.5707963267949)*(x974.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x975=IKcos(j8);
IkReal x976=IKsin(j8);
IkReal x977=((1.0)*cj10);
IkReal x978=(sj10*x975);
IkReal x979=(sj10*x976);
IkReal x980=((1.0)*x976);
IkReal x981=(x976*x977);
evalcond[0]=(((new_r01*x975))+sj10+((new_r11*x976)));
evalcond[1]=(((cj10*x975))+new_r11+x979);
evalcond[2]=((((-1.0)*x981))+new_r01+x978);
evalcond[3]=((((-1.0)*new_r00*x980))+sj10+((new_r10*x975)));
evalcond[4]=((((-1.0)*new_r01*x980))+cj10+((new_r11*x975)));
evalcond[5]=((((-1.0)*x981))+new_r10+x978);
evalcond[6]=(((new_r10*x976))+(((-1.0)*x977))+((new_r00*x975)));
evalcond[7]=((((-1.0)*x979))+new_r00+(((-1.0)*x975*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(((-1.0)+(cj10*cj10)+(new_r01*new_r01))),IkReal(((((-1.0)*cj10*sj10))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
CheckValue<IkReal> x983=IKPowWithIntegerCheck(IKsign((((cj10*new_r01))+((new_r11*sj10)))),-1);
if(!x983.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x982.value)+(((1.5707963267949)*(x983.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x984=IKcos(j8);
IkReal x985=IKsin(j8);
IkReal x986=((1.0)*cj10);
IkReal x987=(sj10*x984);
IkReal x988=(sj10*x985);
IkReal x989=((1.0)*x985);
IkReal x990=(x985*x986);
evalcond[0]=(sj10+((new_r11*x985))+((new_r01*x984)));
evalcond[1]=(((cj10*x984))+new_r11+x988);
evalcond[2]=((((-1.0)*x990))+new_r01+x987);
evalcond[3]=((((-1.0)*new_r00*x989))+sj10+((new_r10*x984)));
evalcond[4]=((((-1.0)*new_r01*x989))+cj10+((new_r11*x984)));
evalcond[5]=((((-1.0)*x990))+new_r10+x987);
evalcond[6]=(((new_r00*x984))+(((-1.0)*x986))+((new_r10*x985)));
evalcond[7]=((((-1.0)*x988))+(((-1.0)*x984*x986))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x991=x992.value;
j8array[0]=((-1.0)*x991);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x991)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x993=IKsin(j8);
IkReal x994=IKcos(j8);
IkReal x995=(new_r11*x994);
IkReal x996=((1.0)*x993);
evalcond[0]=(((new_r11*x993))+((new_r01*x994)));
evalcond[1]=(((new_r10*x993))+((new_r00*x994)));
evalcond[2]=((((-1.0)*new_r00*x996))+((new_r10*x994)));
evalcond[3]=((((-1.0)*new_r01*x996))+x995);
evalcond[4]=((((-1.0)*new_r01*new_r22*x996))+((new_r22*x995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
IkReal x997=x998.value;
j8array[0]=((-1.0)*x997);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x997)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x999=IKcos(j8);
IkReal x1000=IKsin(j8);
IkReal x1001=(new_r10*x999);
IkReal x1002=(new_r11*x999);
IkReal x1003=((1.0)*x1000);
evalcond[0]=(((new_r11*x1000))+((new_r01*x999)));
evalcond[1]=(x1001+(((-1.0)*new_r00*x1003)));
evalcond[2]=(x1002+(((-1.0)*new_r01*x1003)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1003))+((new_r22*x1001)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1003))+((new_r22*x1002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
IkReal x1004=x1005.value;
j8array[0]=((-1.0)*x1004);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1004)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1006=IKcos(j8);
IkReal x1007=IKsin(j8);
IkReal x1008=(new_r10*x1006);
IkReal x1009=(new_r11*x1006);
IkReal x1010=((1.0)*x1007);
evalcond[0]=(((new_r10*x1007))+((new_r00*x1006)));
evalcond[1]=(x1008+(((-1.0)*new_r00*x1010)));
evalcond[2]=(x1009+(((-1.0)*new_r01*x1010)));
evalcond[3]=((((-1.0)*new_r00*new_r22*x1010))+((new_r22*x1008)));
evalcond[4]=((((-1.0)*new_r01*new_r22*x1010))+((new_r22*x1009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(sj9,-1);
if(!x1012.valid){
continue;
}
IkReal x1011=x1012.value;
CheckValue<IkReal> x1013=IKPowWithIntegerCheck(new_r11,-1);
if(!x1013.valid){
continue;
}
if( IKabs((x1011*(x1013.value)*(((((-1.0)*sj10*sj9))+((new_r01*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x1011)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1011*(x1013.value)*(((((-1.0)*sj10*sj9))+((new_r01*new_r12))))))+IKsqr(((-1.0)*new_r12*x1011))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x1011*(x1013.value)*(((((-1.0)*sj10*sj9))+((new_r01*new_r12))))), ((-1.0)*new_r12*x1011));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[18];
IkReal x1014=IKsin(j8);
IkReal x1015=IKcos(j8);
IkReal x1016=((1.0)*cj10);
IkReal x1017=((1.0)*sj10);
IkReal x1018=((1.0)*new_r01);
IkReal x1019=(new_r02*x1014);
IkReal x1020=(cj9*x1015);
IkReal x1021=(sj10*x1014);
IkReal x1022=(sj9*x1015);
IkReal x1023=(sj9*x1014);
IkReal x1024=(cj9*x1014);
IkReal x1025=((1.0)*new_r00*x1014);
evalcond[0]=(x1022+new_r12);
evalcond[1]=((((-1.0)*x1023))+new_r02);
evalcond[2]=(((new_r02*x1015))+((new_r12*x1014)));
evalcond[3]=(((new_r11*x1014))+sj10+((new_r01*x1015)));
evalcond[4]=(sj9+((new_r12*x1015))+(((-1.0)*x1019)));
evalcond[5]=(((cj10*x1024))+new_r01+((sj10*x1015)));
evalcond[6]=((((-1.0)*x1016))+((new_r10*x1014))+((new_r00*x1015)));
evalcond[7]=(((cj9*x1021))+(((-1.0)*x1015*x1016))+new_r00);
evalcond[8]=(x1021+(((-1.0)*x1016*x1020))+new_r11);
evalcond[9]=((((-1.0)*x1014*x1016))+new_r10+(((-1.0)*x1017*x1020)));
evalcond[10]=(((new_r10*x1015))+(((-1.0)*x1025))+(((-1.0)*cj9*x1017)));
evalcond[11]=((((-1.0)*x1014*x1018))+((new_r11*x1015))+(((-1.0)*cj9*x1016)));
evalcond[12]=(((new_r12*x1020))+((new_r22*sj9))+(((-1.0)*cj9*x1019)));
evalcond[13]=(((cj9*new_r20))+(((-1.0)*new_r10*x1022))+((new_r00*x1023)));
evalcond[14]=(((cj9*new_r21))+((new_r01*x1023))+(((-1.0)*new_r11*x1022)));
evalcond[15]=((-1.0)+((cj9*new_r22))+((sj9*x1019))+(((-1.0)*new_r12*x1022)));
evalcond[16]=(((new_r10*x1020))+(((-1.0)*new_r00*x1024))+((new_r20*sj9))+(((-1.0)*x1017)));
evalcond[17]=(((new_r11*x1020))+(((-1.0)*x1016))+(((-1.0)*x1018*x1024))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1026.value)))+(x1027.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[18];
IkReal x1028=IKsin(j8);
IkReal x1029=IKcos(j8);
IkReal x1030=((1.0)*cj10);
IkReal x1031=((1.0)*sj10);
IkReal x1032=((1.0)*new_r01);
IkReal x1033=(new_r02*x1028);
IkReal x1034=(cj9*x1029);
IkReal x1035=(sj10*x1028);
IkReal x1036=(sj9*x1029);
IkReal x1037=(sj9*x1028);
IkReal x1038=(cj9*x1028);
IkReal x1039=((1.0)*new_r00*x1028);
evalcond[0]=(x1036+new_r12);
evalcond[1]=((((-1.0)*x1037))+new_r02);
evalcond[2]=(((new_r12*x1028))+((new_r02*x1029)));
evalcond[3]=(((new_r11*x1028))+sj10+((new_r01*x1029)));
evalcond[4]=(sj9+(((-1.0)*x1033))+((new_r12*x1029)));
evalcond[5]=(((cj10*x1038))+new_r01+((sj10*x1029)));
evalcond[6]=(((new_r10*x1028))+(((-1.0)*x1030))+((new_r00*x1029)));
evalcond[7]=((((-1.0)*x1029*x1030))+((cj9*x1035))+new_r00);
evalcond[8]=(x1035+(((-1.0)*x1030*x1034))+new_r11);
evalcond[9]=((((-1.0)*x1028*x1030))+(((-1.0)*x1031*x1034))+new_r10);
evalcond[10]=(((new_r10*x1029))+(((-1.0)*x1039))+(((-1.0)*cj9*x1031)));
evalcond[11]=(((new_r11*x1029))+(((-1.0)*x1028*x1032))+(((-1.0)*cj9*x1030)));
evalcond[12]=(((new_r12*x1034))+(((-1.0)*cj9*x1033))+((new_r22*sj9)));
evalcond[13]=((((-1.0)*new_r10*x1036))+((cj9*new_r20))+((new_r00*x1037)));
evalcond[14]=(((cj9*new_r21))+((new_r01*x1037))+(((-1.0)*new_r11*x1036)));
evalcond[15]=((-1.0)+((cj9*new_r22))+((sj9*x1033))+(((-1.0)*new_r12*x1036)));
evalcond[16]=((((-1.0)*x1031))+((new_r20*sj9))+(((-1.0)*new_r00*x1038))+((new_r10*x1034)));
evalcond[17]=((((-1.0)*x1030))+(((-1.0)*x1032*x1038))+((new_r11*x1034))+((new_r21*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(11);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
vinfos[10].jointtype = 1;
vinfos[10].foffset = j10;
vinfos[10].indices[0] = _ij10[0];
vinfos[10].indices[1] = _ij10[1];
vinfos[10].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (0c827a64aaa79f8678bfc3515cb16559)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

  int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
  double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i){
    vfree[i] = free_joint[i];
  }
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){//seednoidはアームが伸びきった状態の第2,第4関節が，+90°のため
	sol_joint[i][j] = M_PI/2-solvalues[j+1];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==5){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==6){
	sol_joint[i][j] = solvalues[j+1];
      }
      else if(j==7){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==8){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==9){
	sol_joint[i][j] = -solvalues[j+1];
      }
      else if(j==10){
	//std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
	continue;
      }
      else
	sol_joint[i][j] = solvalues[j];

      //std::cout << "solvalues["<<j<<"] = "<< solvalues[j] << std::endl;
      
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

