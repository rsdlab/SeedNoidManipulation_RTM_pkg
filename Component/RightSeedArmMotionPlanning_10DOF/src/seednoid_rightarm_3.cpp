/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-01-22 12:45:34.396344
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_LINK3 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKcos(j[1]);
x8=IKsin(j[3]);
x9=IKsin(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.054778)*x6);
x13=((0.00486933959312262)*x1);
x14=((0.00951054283078053)*x1);
x15=((0.173619753017279)*x7);
x16=((0.0276200587965857)*x1);
x17=((0.0539460736204581)*x1);
x18=((0.134)*x1);
x19=((0.173619753017279)*x1);
x20=((0.984812764621894)*x1);
x21=((0.304)*x1);
x22=((0.018)*x7);
x23=(x2*x3);
x24=(x0*x2);
x25=(x0*x4);
x26=(x1*x8);
x27=((-1.0)*x6);
x28=(x2*x7);
x29=(x4*x7);
x30=(x3*x4);
x31=((-0.028046)*x6);
x32=((((0.01)*x10))+(((-0.240358)*x11)));
x33=((0.984812764621894)*x30);
x34=((((0.240358)*x10))+(((0.01)*x11)));
x35=(x0*x7*x8);
x36=(x3*x7*x8);
x37=((((-0.984812764621894)*x28))+((x15*x4)));
x38=((((0.984812764621894)*x29))+((x15*x2)));
x39=(x37*x6);
x40=((((-1.0)*x33))+((x19*x25))+(((-0.173619753017279)*x23))+(((-1.0)*x20*x24)));
x41=((((0.173619753017279)*x30))+((x19*x24))+(((-0.984812764621894)*x23))+((x20*x25)));
x42=(((x19*x30))+(((0.173619753017279)*x24))+(((0.984812764621894)*x25))+(((-1.0)*x20*x23)));
x43=(((x20*x30))+((x19*x23))+(((-0.173619753017279)*x25))+(((0.984812764621894)*x24)));
x44=(x42*x6);
x45=(x40*x6);
IkReal x46=((1.0)*x35);
IkReal x47=((1.0)*x25);
IkReal x48=((1.0)*x24);
eetrans[0]=(((x34*((((x41*x9))+((x5*(((((-1.0)*x46))+x45))))))))+((x9*(((((-0.00486933959312262)*x30))+(((-1.0)*x16*x47))+(((0.0276200587965857)*x23))+(((-1.0)*x13*x48))))))+((x21*x24))+(((-1.0)*x0*x22))+(((-1.0)*x18*x47))+((x32*((((x9*((((x27*x40))+x46))))+((x41*x5))))))+((x9*(((((-0.054778)*x35))+((x12*x40))))))+((x5*(((((0.028046)*x35))+((x31*x40))))))+((x5*(((((0.0539460736204581)*x23))+(((-1.0)*x17*x47))+(((-1.0)*x14*x48))+(((-0.00951054283078053)*x30))))))+(((0.134)*x23))+(((0.304)*x30)));
IkReal x49=((1.0)*x36);
IkReal x50=((1.0)*x30);
IkReal x51=((1.0)*x23);
eetrans[1]=(((x34*((((x5*(((((-1.0)*x49))+x44))))+((x43*x9))))))+(((-0.304)*x25))+((x32*((((x9*(((((-1.0)*x44))+x49))))+((x43*x5))))))+((x21*x23))+((x5*(((((0.028046)*x36))+((x31*x42))))))+(((-1.0)*x22*x3))+((x5*(((((-1.0)*x14*x51))+(((-1.0)*x17*x50))+(((-0.0539460736204581)*x24))+(((0.00951054283078053)*x25))))))+((x9*(((((-1.0)*x13*x51))+(((-1.0)*x16*x50))+(((-0.0276200587965857)*x24))+(((0.00486933959312262)*x25))))))+(((-1.0)*x18*x50))+((x9*(((((-0.054778)*x36))+((x12*x42))))))+(((-0.134)*x24)));
eetrans[2]=((0.1455)+((x32*((((x9*((((x27*x37))+(((-1.0)*x26))))))+((x38*x5))))))+(((0.304)*x28))+((x34*((((x5*((x39+x26))))+((x38*x9))))))+((x5*(((((-0.0539460736204581)*x29))+(((-0.00951054283078053)*x28))))))+((x5*(((((-0.028046)*x39))+(((-0.028046)*x26))))))+((x9*(((((-0.0276200587965857)*x29))+(((-0.00486933959312262)*x28))))))+((x9*(((((0.054778)*x26))+((x12*x37))))))+(((-0.134)*x29))+(((0.018)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 5; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 3, 4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]);
j3=pfree[3]; cj3=cos(pfree[3]); sj3=sin(pfree[3]);
j4=pfree[4]; cj4=cos(pfree[4]); sj4=sin(pfree[4]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x52=IKsin(j1);
IkReal x53=IKsin(j4);
IkReal x54=IKcos(j2);
IkReal x55=IKsin(j0);
IkReal x56=IKcos(j0);
IkReal x57=IKsin(j2);
IkReal x58=IKcos(j3);
IkReal x59=IKcos(j4);
IkReal x60=IKcos(j1);
IkReal x61=IKsin(j3);
IkReal x62=(py*x56);
IkReal x63=(px*x55);
IkReal x64=((0.173619753017279)*x54);
IkReal x65=((0.173619753017279)*x57);
IkReal x66=(pz*x60);
IkReal x67=((0.984812764621894)*x57);
IkReal x68=((1.0)*x60);
IkReal x69=((0.984812764621894)*x54);
IkReal x70=(px*x56);
IkReal x71=(x53*x60);
IkReal x72=(x58*x59);
IkReal x73=(x59*x61);
IkReal x74=(x53*x65);
IkReal x75=(py*x52*x55);
IkReal x76=(x52*x53*x70);
new_px=((0.028046)+(((-1.0)*x69*x72*x75))+(((-1.0)*x53*x63*x69))+((x53*x67*x75))+(((-0.143290257252486)*x57*x71))+(((-1.0)*x52*x69*x70*x72))+(((0.322648127349371)*x72))+((x62*x64*x72))+((x65*x66*x72))+((x53*x62*x69))+(((-1.0)*x66*x69*x72))+(((-0.0252616740640142)*x57*x60*x72))+(((-0.0252616740640142)*x54*x71))+(((-1.0)*x63*x67*x72))+(((-1.0)*py*x55*x68*x73))+((x53*x64*x75))+(((0.0791845055420809)*x53))+((x52*x65*x70*x72))+(((-1.0)*x63*x64*x72))+(((-0.018)*x73))+((x53*x64*x66))+((x67*x76))+((pz*x52*x73))+(((-1.0)*x62*x74))+((x53*x66*x67))+((x63*x74))+(((-0.1455)*x52*x73))+((x64*x76))+(((-1.0)*x68*x70*x73))+((x62*x67*x72))+(((0.143290257252486)*x54*x60*x72))+((x65*x72*x75)));
IkReal x77=IKcos(j3);
IkReal x78=IKsin(j4);
IkReal x79=IKsin(j0);
IkReal x80=IKsin(j2);
IkReal x81=IKcos(j1);
IkReal x82=IKcos(j4);
IkReal x83=IKcos(j2);
IkReal x84=IKsin(j1);
IkReal x85=IKcos(j0);
IkReal x86=IKsin(j3);
IkReal x87=((0.173619753017279)*pz);
IkReal x88=(px*x80);
IkReal x89=((0.984812764621894)*x77);
IkReal x90=(py*x80);
IkReal x91=((0.984812764621894)*x84);
IkReal x92=((0.984812764621894)*x83);
IkReal x93=(x78*x85);
IkReal x94=(x81*x86);
IkReal x95=(x78*x79);
IkReal x96=(x78*x86);
IkReal x97=(x79*x82);
IkReal x98=(x81*x82);
IkReal x99=(x83*x84);
IkReal x100=(x82*x85);
IkReal x101=((0.173619753017279)*x77*x83);
IkReal x102=((0.173619753017279)*x77*x84);
IkReal x103=((0.173619753017279)*x100);
IkReal x104=(x77*x78*x81);
new_py=((0.054778)+(((-1.0)*x104*x80*x87))+(((0.1455)*x84*x96))+(((-1.0)*x103*x90))+((px*x89*x93*x99))+(((0.018)*x96))+(((-0.143290257252486)*x80*x98))+((pz*x78*x81*x83*x89))+(((-0.0252616740640142)*x83*x98))+((py*x89*x95*x99))+(((-1.0)*x102*x90*x95))+(((0.173619753017279)*x88*x97))+((py*x94*x95))+((x88*x89*x95))+(((-0.322648127349371)*x77*x78))+((px*x93*x94))+((x100*x88*x91))+(((0.0252616740640142)*x104*x80))+(((-1.0)*pz*x84*x96))+(((0.0791845055420809)*x82))+(((-1.0)*px*x92*x97))+(((-0.143290257252486)*x104*x83))+((x83*x87*x98))+((x90*x91*x97))+(((-1.0)*x89*x90*x93))+((py*x100*x92))+(((-1.0)*py*x101*x93))+(((-1.0)*x102*x88*x93))+(((0.984812764621894)*pz*x80*x98))+((px*x101*x95))+(((0.173619753017279)*py*x97*x99))+((px*x103*x99)));
IkReal x105=IKsin(j2);
IkReal x106=IKsin(j3);
IkReal x107=IKsin(j1);
IkReal x108=IKcos(j3);
IkReal x109=IKcos(j1);
IkReal x110=IKcos(j2);
IkReal x111=IKcos(j0);
IkReal x112=IKsin(j0);
IkReal x113=(px*x111);
IkReal x114=(px*x112);
IkReal x115=(pz*x109);
IkReal x116=((0.984812764621894)*py*x106);
IkReal x117=(x105*x111);
IkReal x118=(x108*x109);
IkReal x119=(x107*x108);
IkReal x120=(x107*x112);
IkReal x121=((0.173619753017279)*py*x106);
IkReal x122=(x105*x106);
IkReal x123=(x106*x110);
new_pz=((((-0.984812764621894)*x107*x113*x123))+(((-1.0)*x110*x116*x120))+(((-0.0252616740640142)*x109*x122))+(((-0.984812764621894)*x115*x123))+(((-0.984812764621894)*x114*x122))+((x113*x118))+((x110*x111*x121))+(((0.173619753017279)*x115*x122))+((py*x112*x118))+(((0.143290257252486)*x109*x123))+(((0.018)*x108))+(((0.322648127349371)*x106))+(((0.173619753017279)*x107*x113*x122))+(((-1.0)*pz*x119))+((x105*x120*x121))+((x116*x117))+(((0.1455)*x119))+(((-0.173619753017279)*x114*x123)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal verifyeval[2];
verifyeval[0]=pz;
verifyeval[1]=((1.0)+(((-17.2795229145509)*(pz*pz)))+(((-17.2795229145509)*(px*px)))+(((-17.2795229145509)*(py*py))));
if( IKabs(verifyeval[0]) < 0.0000010000000000  && IKabs(verifyeval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x124=px*px;
IkReal x125=py*py;
j5eval[0]=(x124+x125);
j5eval[1]=IKsign(((((500000.0)*x124))+(((500000.0)*x125))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x126=py*py;
IkReal x127=px*px;
IkReal x128=pz*pz;
IkReal x129=((25000000.0)*px);
IkReal x130=((25000000.0)*py);
j5eval[0]=(x126+x127);
j5eval[1]=((IKabs(((((-1441799.2041)*px))+((x129*(px*px)))+(((-120179.0)*py))+((x126*x129))+((x128*x129)))))+(IKabs((((x127*x130))+(((-1441799.2041)*py))+((x130*(py*py)))+(((120179.0)*px))+((x128*x130))))));
j5eval[2]=IKsign(((((500000.0)*x127))+(((500000.0)*x126))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j5, j6, j7]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x131=pz*pz;
IkReal x132=px*px;
IkReal x133=py*py;
IkReal x134=((25000000.0)*px);
IkReal x135=((25000000.0)*py);
CheckValue<IkReal> x136=IKPowWithIntegerCheck(IKsign(((((500000.0)*x133))+(((500000.0)*x132)))),-1);
if(!x136.valid){
continue;
}
CheckValue<IkReal> x137 = IKatan2WithCheck(IkReal(((((-1441799.2041)*py))+(((120179.0)*px))+((x131*x135))+((x132*x135))+((x135*(py*py))))),IkReal(((((-1441799.2041)*px))+((x131*x134))+(((-120179.0)*py))+((x133*x134))+((x134*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x137.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x136.value)))+(x137.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x138=IKcos(j5);
IkReal x139=IKsin(j5);
IkReal x140=(px*x138);
IkReal x141=(py*x139);
evalcond[0]=((-0.240358)+((px*x139))+(((-1.0)*py*x138)));
evalcond[1]=((0.01)+(((-1.0)*x140))+(((-1.0)*x141)));
evalcond[2]=((0.057671968164)+(((-1.0)*(px*px)))+(((-1.0)*(pz*pz)))+(((0.02)*x141))+(((0.02)*x140))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
j6eval[0]=((IKabs(pz))+(IKabs(((-0.01)+((cj5*px))+((py*sj5))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
j6eval[0]=((IKabs(pz))+(IKabs(((0.01)+(((-1.0)*py*sj5))+(((-1.0)*cj5*px))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6, j7]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x143 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((0.01)+(((-1.0)*py*sj5))+(((-1.0)*cj5*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x143.valid){
continue;
}
IkReal x142=x143.value;
j6array[0]=((-1.0)*x142);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x142)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x144=IKcos(j6);
evalcond[0]=((((-1.0)*pz*(IKsin(j6))))+(((-0.01)*x144))+((cj5*px*x144))+((py*sj5*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
j7array[0]=0;
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(((-0.01)+((cj5*px))+((py*sj5)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
IkReal x145=x146.value;
j6array[0]=((-1.0)*x145);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x145)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x147=IKsin(j6);
IkReal x148=((1.0)*x147);
evalcond[0]=((((-1.0)*pz*(IKcos(j6))))+(((-1.0)*cj5*px*x148))+(((0.01)*x147))+(((-1.0)*py*sj5*x148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
j7array[0]=0;
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((((120179.0)*px))+(((5000.0)*py)))),IkReal(((((-120179.0)*py))+(((5000.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
CheckValue<IkReal> x150=IKPowWithIntegerCheck(IKsign(((((500000.0)*(px*px)))+(((500000.0)*(py*py))))),-1);
if(!x150.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x149.value)+(((1.5707963267949)*(x150.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x151=IKcos(j5);
IkReal x152=IKsin(j5);
IkReal x153=(px*x151);
IkReal x154=(py*x152);
evalcond[0]=((-0.240358)+(((-1.0)*py*x151))+((px*x152)));
evalcond[1]=((0.01)+(((-1.0)*x154))+(((-1.0)*x153)));
evalcond[2]=((0.057671968164)+(((-1.0)*(px*px)))+(((0.02)*x153))+(((0.02)*x154))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
j6eval[0]=((IKabs(pz))+(IKabs(((-0.01)+((cj5*px))+((py*sj5))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
j6eval[0]=((IKabs(pz))+(IKabs(((0.01)+(((-1.0)*py*sj5))+(((-1.0)*cj5*px))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6, j7]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((0.01)+(((-1.0)*py*sj5))+(((-1.0)*cj5*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
IkReal x155=x156.value;
j6array[0]=((-1.0)*x155);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x155)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x157=IKcos(j6);
evalcond[0]=((((-1.0)*pz*(IKsin(j6))))+(((-0.01)*x157))+((cj5*px*x157))+((py*sj5*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
j7array[0]=0;
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x159 = IKatan2WithCheck(IkReal(((-0.01)+((cj5*px))+((py*sj5)))),IkReal(((-1.0)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x159.valid){
continue;
}
IkReal x158=x159.value;
j6array[0]=((-1.0)*x158);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x158)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x160=IKsin(j6);
IkReal x161=((1.0)*x160);
evalcond[0]=((((-1.0)*pz*(IKcos(j6))))+(((-1.0)*py*sj5*x161))+(((0.01)*x160))+(((-1.0)*cj5*px*x161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
j7array[0]=0;
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
continue; // verifyAllEquations

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (bc7411af04f9667feef512f629bf64f5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
